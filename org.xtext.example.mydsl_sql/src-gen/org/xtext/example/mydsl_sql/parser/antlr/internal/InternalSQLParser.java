package org.xtext.example.mydsl_sql.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl_sql.services.SQLGrammarAccess;



import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
@SuppressWarnings("all")
public class InternalSQLParser extends AbstractInternalAntlrParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "MINUTE_MICROSECOND", "SECOND_MICROSECOND", "HOUR_MICROSECOND", "DAY_MICROSECOND", "AUTO_INCREMENT", "MINUTE_SECOND", "STRAIGHT_JOIN", "HOUR_MINUTE", "HOUR_SECOND", "MICROSECOND", "DAY_MINUTE", "DAY_SECOND", "REFERENCES", "YEAR_MONTH", "BETWEEN_4", "KW_FOLLOWING", "INTERSECT", "MEDIUMINT", "PARTITION", "PRECEDING", "TIMESTAMP", "UNBOUNDED", "VARBINARY", "BETWEEN_2", "NOTEQUAL", "BETWEEN_3", "GREATER_1", "DATETIME", "DAY_HOUR", "DISTINCT", "SIBLINGS", "SMALLINT", "UNSIGNED", "ZEROFILL", "BETWEEN_1", "GREATER", "BETWEEN", "BOOLEAN", "COMMENT", "CURRENT", "DECIMAL", "DEFAULT", "EXCLUDE", "EXTRACT", "FOREIGN", "INCLUDE", "NATURAL", "NUMERIC", "PERCENT", "PRIMARY", "QUARTER", "TINYINT", "UNPIVOT", "VARCHAR", "BIGINT", "BINARY", "CREATE", "DOUBLE", "EXCEPT", "EXISTS", "HAVING", "INSERT", "MINUTE", "OFFSET", "SECOND", "SELECT", "SIGNED", "UNIQUE", "VALUES", "EQUAL", "LESS_1", "NOTIN", "CAST", "CROSS", "FALSE", "FETCH", "FIRST", "FLOAT", "GROUP", "INNER", "LIMIT", "MINUS", "MONTH", "NOW", "NULLS", "ORDER", "OUTER", "PIVOT", "RANGE", "RIGHT", "TABLE", "UNION", "USING", "WHERE", "LESS", "BLOB", "BOOL", "CASE", "CHAR", "DATE", "DESC", "ELSE", "FROM", "FULL", "HOUR", "INTO", "JOIN", "LAST", "LEFT", "LIKE", "NOT_1", "NULL", "ONLY", "OVER", "REAL", "ROWS", "SOME", "TEXT", "THEN", "TIES", "TIME", "TRUE", "WEEK", "WHEN", "WITH", "YEAR", "LeftParenthesisPlusSignRightParenthesis", "ALL", "AND", "ANY", "ASC", "BIT", "DAY", "END", "FOR", "INT", "KEY", "NOT", "ROW", "TOP", "XML", "IN_1", "ExclamationMarkEqualsSign", "X", "AmpersandAmpersand", "LessThanSignEqualsSign", "LessThanSignGreaterThanSign", "GreaterThanSignEqualsSign", "AS", "BY", "IN", "IS", "ON", "OR", "CircumflexAccentEqualsSign", "VerticalLineVerticalLine", "LeftParenthesis", "RightParenthesis", "PlusSign", "Comma", "HyphenMinus", "FullStop", "Solidus", "Semicolon", "LessThanSign", "EqualsSign", "GreaterThanSign", "VerticalLine", "RightCurlyBracket", "RULE_JRPARAM", "RULE_JRNPARAM", "RULE_STAR", "RULE_UNSIGNED", "RULE_INT", "RULE_SIGNED_DOUBLE", "RULE_DATE", "RULE_TIME", "RULE_TIMESTAMP", "RULE_STRING_CORE", "RULE_STRING_", "RULE_STRING", "RULE_DBNAME", "RULE_ID", "RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS", "RULE_ANY_OTHER"
    };
    public static final int MONTH=86;
    public static final int CREATE=60;
    public static final int BETWEEN=40;
    public static final int LessThanSign=168;
    public static final int MINUS=85;
    public static final int YEAR=129;
    public static final int HOUR_MINUTE=11;
    public static final int PARTITION=22;
    public static final int INCLUDE=49;
    public static final int INNER=83;
    public static final int GreaterThanSign=170;
    public static final int LEFT=112;
    public static final int RULE_ID=186;
    public static final int BIGINT=58;
    public static final int WHERE=97;
    public static final int GreaterThanSignEqualsSign=151;
    public static final int AS=152;
    public static final int RULE_DATE=179;
    public static final int RULE_INT=177;
    public static final int VARCHAR=57;
    public static final int THEN=122;
    public static final int KEY=140;
    public static final int INTO=109;
    public static final int MICROSECOND=13;
    public static final int RULE_DBNAME=185;
    public static final int GROUP=82;
    public static final int ASC=134;
    public static final int STRAIGHT_JOIN=10;
    public static final int BY=153;
    public static final int X=147;
    public static final int OFFSET=67;
    public static final int Solidus=166;
    public static final int RightCurlyBracket=172;
    public static final int TINYINT=55;
    public static final int RULE_SIGNED_DOUBLE=178;
    public static final int FullStop=165;
    public static final int RULE_UNSIGNED=176;
    public static final int GREATER=39;
    public static final int SECOND_MICROSECOND=5;
    public static final int RULE_STRING_=183;
    public static final int Semicolon=167;
    public static final int PERCENT=52;
    public static final int VARBINARY=26;
    public static final int UNION=95;
    public static final int DESC=104;
    public static final int KW_FOLLOWING=19;
    public static final int RULE_STAR=175;
    public static final int EXTRACT=47;
    public static final int UNIQUE=71;
    public static final int LESS_1=74;
    public static final int FOR=138;
    public static final int RightParenthesis=161;
    public static final int PIVOT=91;
    public static final int BOOLEAN=41;
    public static final int CURRENT=43;
    public static final int FULL=107;
    public static final int NOTEQUAL=28;
    public static final int USING=96;
    public static final int NOT=141;
    public static final int LAST=111;
    public static final int NOW=87;
    public static final int CircumflexAccentEqualsSign=158;
    public static final int MINUTE_SECOND=9;
    public static final int END=137;
    public static final int HAVING=64;
    public static final int BINARY=59;
    public static final int RULE_SL_COMMENT=188;
    public static final int SOME=120;
    public static final int FOREIGN=48;
    public static final int SIGNED=70;
    public static final int AmpersandAmpersand=148;
    public static final int BETWEEN_2=27;
    public static final int BETWEEN_1=38;
    public static final int OUTER=90;
    public static final int EOF=-1;
    public static final int BETWEEN_4=18;
    public static final int BETWEEN_3=29;
    public static final int EXISTS=63;
    public static final int EQUAL=73;
    public static final int TIME=124;
    public static final int MEDIUMINT=21;
    public static final int INTERSECT=20;
    public static final int BIT=135;
    public static final int WITH=128;
    public static final int OVER=117;
    public static final int DATETIME=31;
    public static final int BOOL=100;
    public static final int FALSE=78;
    public static final int RULE_STRING_CORE=182;
    public static final int RULE_TIMESTAMP=181;
    public static final int DEFAULT=45;
    public static final int LessThanSignGreaterThanSign=150;
    public static final int JOIN=110;
    public static final int TEXT=121;
    public static final int LeftParenthesisPlusSignRightParenthesis=130;
    public static final int TABLE=94;
    public static final int WHEN=127;
    public static final int QUARTER=54;
    public static final int LeftParenthesis=160;
    public static final int ELSE=105;
    public static final int RULE_TIME=180;
    public static final int DAY_MINUTE=14;
    public static final int CAST=76;
    public static final int IN=154;
    public static final int DISTINCT=33;
    public static final int IS=155;
    public static final int CASE=101;
    public static final int TOP=143;
    public static final int VerticalLine=171;
    public static final int PlusSign=162;
    public static final int RULE_ML_COMMENT=187;
    public static final int UNPIVOT=56;
    public static final int RULE_JRPARAM=173;
    public static final int VerticalLineVerticalLine=159;
    public static final int DAY_HOUR=32;
    public static final int UNSIGNED=36;
    public static final int CHAR=102;
    public static final int COMMENT=42;
    public static final int ORDER=89;
    public static final int Comma=163;
    public static final int HyphenMinus=164;
    public static final int RIGHT=93;
    public static final int VALUES=72;
    public static final int DOUBLE=61;
    public static final int LessThanSignEqualsSign=149;
    public static final int FETCH=79;
    public static final int NUMERIC=51;
    public static final int SIBLINGS=34;
    public static final int NOTIN=75;
    public static final int FIRST=80;
    public static final int SELECT=69;
    public static final int PRECEDING=23;
    public static final int RULE_JRNPARAM=174;
    public static final int ExclamationMarkEqualsSign=146;
    public static final int DAY=136;
    public static final int ALL=131;
    public static final int BLOB=99;
    public static final int DECIMAL=44;
    public static final int ONLY=116;
    public static final int FROM=106;
    public static final int AUTO_INCREMENT=8;
    public static final int MINUTE_MICROSECOND=4;
    public static final int UNBOUNDED=25;
    public static final int TIMESTAMP=24;
    public static final int MINUTE=66;
    public static final int HOUR_MICROSECOND=6;
    public static final int NULL=115;
    public static final int DAY_MICROSECOND=7;
    public static final int TRUE=125;
    public static final int EXCEPT=62;
    public static final int DATE=103;
    public static final int ZEROFILL=37;
    public static final int LIKE=113;
    public static final int IN_1=145;
    public static final int EXCLUDE=46;
    public static final int AND=132;
    public static final int REAL=118;
    public static final int YEAR_MONTH=17;
    public static final int INSERT=65;
    public static final int LESS=98;
    public static final int ROW=142;
    public static final int DAY_SECOND=15;
    public static final int RANGE=92;
    public static final int FLOAT=81;
    public static final int TIES=123;
    public static final int HOUR=108;
    public static final int LIMIT=84;
    public static final int RULE_STRING=184;
    public static final int ANY=133;
    public static final int INT=139;
    public static final int NATURAL=50;
    public static final int EqualsSign=169;
    public static final int NOT_1=114;
    public static final int GREATER_1=30;
    public static final int WEEK=126;
    public static final int NULLS=88;
    public static final int ON=156;
    public static final int OR=157;
    public static final int RULE_WS=189;
    public static final int PRIMARY=53;
    public static final int RULE_ANY_OTHER=190;
    public static final int CROSS=77;
    public static final int XML=144;
    public static final int SMALLINT=35;
    public static final int SECOND=68;
    public static final int HOUR_SECOND=12;
    public static final int REFERENCES=16;
    public static final int ROWS=119;

    // delegates
    // delegators


        public InternalSQLParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public InternalSQLParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        

    public String[] getTokenNames() { return InternalSQLParser.tokenNames; }
    public String getGrammarFileName() { return "InternalSQLParser.g"; }



    /*
      This grammar contains a lot of empty actions to work around a bug in ANTLR.
      Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
    */

     	private SQLGrammarAccess grammarAccess;

        public InternalSQLParser(TokenStream input, SQLGrammarAccess grammarAccess) {
            this(input);
            this.grammarAccess = grammarAccess;
            registerRules(grammarAccess.getGrammar());
        }

        @Override
        protected String getFirstRuleName() {
        	return "Model";
       	}

       	@Override
       	protected SQLGrammarAccess getGrammarAccess() {
       		return grammarAccess;
       	}




    // $ANTLR start "entryRuleModel"
    // InternalSQLParser.g:64:1: entryRuleModel returns [EObject current=null] : iv_ruleModel= ruleModel EOF ;
    public final EObject entryRuleModel() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleModel = null;


        try {
            // InternalSQLParser.g:64:46: (iv_ruleModel= ruleModel EOF )
            // InternalSQLParser.g:65:2: iv_ruleModel= ruleModel EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getModelRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleModel=ruleModel();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleModel; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleModel"


    // $ANTLR start "ruleModel"
    // InternalSQLParser.g:71:1: ruleModel returns [EObject current=null] : ( (lv_simpleStatement_0_0= ruleSimpleStatement ) ) ;
    public final EObject ruleModel() throws RecognitionException {
        EObject current = null;

        EObject lv_simpleStatement_0_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:77:2: ( ( (lv_simpleStatement_0_0= ruleSimpleStatement ) ) )
            // InternalSQLParser.g:78:2: ( (lv_simpleStatement_0_0= ruleSimpleStatement ) )
            {
            // InternalSQLParser.g:78:2: ( (lv_simpleStatement_0_0= ruleSimpleStatement ) )
            // InternalSQLParser.g:79:3: (lv_simpleStatement_0_0= ruleSimpleStatement )
            {
            // InternalSQLParser.g:79:3: (lv_simpleStatement_0_0= ruleSimpleStatement )
            // InternalSQLParser.g:80:4: lv_simpleStatement_0_0= ruleSimpleStatement
            {
            if ( state.backtracking==0 ) {

              				newCompositeNode(grammarAccess.getModelAccess().getSimpleStatementSimpleStatementParserRuleCall_0());
              			
            }
            pushFollow(FOLLOW_2);
            lv_simpleStatement_0_0=ruleSimpleStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getModelRule());
              				}
              				set(
              					current,
              					"simpleStatement",
              					lv_simpleStatement_0_0,
              					"org.xtext.example.mydsl_sql.SQL.SimpleStatement");
              				afterParserOrEnumRuleCall();
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleModel"


    // $ANTLR start "entryRuleSimpleStatement"
    // InternalSQLParser.g:100:1: entryRuleSimpleStatement returns [EObject current=null] : iv_ruleSimpleStatement= ruleSimpleStatement EOF ;
    public final EObject entryRuleSimpleStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSimpleStatement = null;


        try {
            // InternalSQLParser.g:100:56: (iv_ruleSimpleStatement= ruleSimpleStatement EOF )
            // InternalSQLParser.g:101:2: iv_ruleSimpleStatement= ruleSimpleStatement EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSimpleStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSimpleStatement=ruleSimpleStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSimpleStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSimpleStatement"


    // $ANTLR start "ruleSimpleStatement"
    // InternalSQLParser.g:107:1: ruleSimpleStatement returns [EObject current=null] : ( ( (lv_select_0_0= ruleSelectStatement ) ) | ( (lv_insert_1_0= ruleInsertStatement ) ) | ( (lv_create_2_0= ruleCreateStatement ) ) ) ;
    public final EObject ruleSimpleStatement() throws RecognitionException {
        EObject current = null;

        EObject lv_select_0_0 = null;

        EObject lv_insert_1_0 = null;

        EObject lv_create_2_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:113:2: ( ( ( (lv_select_0_0= ruleSelectStatement ) ) | ( (lv_insert_1_0= ruleInsertStatement ) ) | ( (lv_create_2_0= ruleCreateStatement ) ) ) )
            // InternalSQLParser.g:114:2: ( ( (lv_select_0_0= ruleSelectStatement ) ) | ( (lv_insert_1_0= ruleInsertStatement ) ) | ( (lv_create_2_0= ruleCreateStatement ) ) )
            {
            // InternalSQLParser.g:114:2: ( ( (lv_select_0_0= ruleSelectStatement ) ) | ( (lv_insert_1_0= ruleInsertStatement ) ) | ( (lv_create_2_0= ruleCreateStatement ) ) )
            int alt1=3;
            switch ( input.LA(1) ) {
            case SELECT:
            case WITH:
            case RULE_JRNPARAM:
                {
                alt1=1;
                }
                break;
            case INSERT:
                {
                alt1=2;
                }
                break;
            case CREATE:
                {
                alt1=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 1, 0, input);

                throw nvae;
            }

            switch (alt1) {
                case 1 :
                    // InternalSQLParser.g:115:3: ( (lv_select_0_0= ruleSelectStatement ) )
                    {
                    // InternalSQLParser.g:115:3: ( (lv_select_0_0= ruleSelectStatement ) )
                    // InternalSQLParser.g:116:4: (lv_select_0_0= ruleSelectStatement )
                    {
                    // InternalSQLParser.g:116:4: (lv_select_0_0= ruleSelectStatement )
                    // InternalSQLParser.g:117:5: lv_select_0_0= ruleSelectStatement
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getSimpleStatementAccess().getSelectSelectStatementParserRuleCall_0_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_select_0_0=ruleSelectStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getSimpleStatementRule());
                      					}
                      					set(
                      						current,
                      						"select",
                      						lv_select_0_0,
                      						"org.xtext.example.mydsl_sql.SQL.SelectStatement");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:135:3: ( (lv_insert_1_0= ruleInsertStatement ) )
                    {
                    // InternalSQLParser.g:135:3: ( (lv_insert_1_0= ruleInsertStatement ) )
                    // InternalSQLParser.g:136:4: (lv_insert_1_0= ruleInsertStatement )
                    {
                    // InternalSQLParser.g:136:4: (lv_insert_1_0= ruleInsertStatement )
                    // InternalSQLParser.g:137:5: lv_insert_1_0= ruleInsertStatement
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getSimpleStatementAccess().getInsertInsertStatementParserRuleCall_1_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_insert_1_0=ruleInsertStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getSimpleStatementRule());
                      					}
                      					set(
                      						current,
                      						"insert",
                      						lv_insert_1_0,
                      						"org.xtext.example.mydsl_sql.SQL.InsertStatement");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:155:3: ( (lv_create_2_0= ruleCreateStatement ) )
                    {
                    // InternalSQLParser.g:155:3: ( (lv_create_2_0= ruleCreateStatement ) )
                    // InternalSQLParser.g:156:4: (lv_create_2_0= ruleCreateStatement )
                    {
                    // InternalSQLParser.g:156:4: (lv_create_2_0= ruleCreateStatement )
                    // InternalSQLParser.g:157:5: lv_create_2_0= ruleCreateStatement
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getSimpleStatementAccess().getCreateCreateStatementParserRuleCall_2_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_create_2_0=ruleCreateStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getSimpleStatementRule());
                      					}
                      					set(
                      						current,
                      						"create",
                      						lv_create_2_0,
                      						"org.xtext.example.mydsl_sql.SQL.CreateStatement");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSimpleStatement"


    // $ANTLR start "entryRuleSelectStatement"
    // InternalSQLParser.g:178:1: entryRuleSelectStatement returns [EObject current=null] : iv_ruleSelectStatement= ruleSelectStatement EOF ;
    public final EObject entryRuleSelectStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSelectStatement = null;


        try {
            // InternalSQLParser.g:178:56: (iv_ruleSelectStatement= ruleSelectStatement EOF )
            // InternalSQLParser.g:179:2: iv_ruleSelectStatement= ruleSelectStatement EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSelectStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSelectStatement=ruleSelectStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSelectStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSelectStatement"


    // $ANTLR start "ruleSelectStatement"
    // InternalSQLParser.g:185:1: ruleSelectStatement returns [EObject current=null] : ( (this_JRNPARAM_0= RULE_JRNPARAM )? ( (lv_wq_1_0= ruleWithQuery ) )? ( (lv_query_2_0= ruleSelectQuery ) ) ) ;
    public final EObject ruleSelectStatement() throws RecognitionException {
        EObject current = null;

        Token this_JRNPARAM_0=null;
        EObject lv_wq_1_0 = null;

        EObject lv_query_2_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:191:2: ( ( (this_JRNPARAM_0= RULE_JRNPARAM )? ( (lv_wq_1_0= ruleWithQuery ) )? ( (lv_query_2_0= ruleSelectQuery ) ) ) )
            // InternalSQLParser.g:192:2: ( (this_JRNPARAM_0= RULE_JRNPARAM )? ( (lv_wq_1_0= ruleWithQuery ) )? ( (lv_query_2_0= ruleSelectQuery ) ) )
            {
            // InternalSQLParser.g:192:2: ( (this_JRNPARAM_0= RULE_JRNPARAM )? ( (lv_wq_1_0= ruleWithQuery ) )? ( (lv_query_2_0= ruleSelectQuery ) ) )
            // InternalSQLParser.g:193:3: (this_JRNPARAM_0= RULE_JRNPARAM )? ( (lv_wq_1_0= ruleWithQuery ) )? ( (lv_query_2_0= ruleSelectQuery ) )
            {
            // InternalSQLParser.g:193:3: (this_JRNPARAM_0= RULE_JRNPARAM )?
            int alt2=2;
            int LA2_0 = input.LA(1);

            if ( (LA2_0==RULE_JRNPARAM) ) {
                alt2=1;
            }
            switch (alt2) {
                case 1 :
                    // InternalSQLParser.g:194:4: this_JRNPARAM_0= RULE_JRNPARAM
                    {
                    this_JRNPARAM_0=(Token)match(input,RULE_JRNPARAM,FOLLOW_3); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_JRNPARAM_0, grammarAccess.getSelectStatementAccess().getJRNPARAMTerminalRuleCall_0());
                      			
                    }

                    }
                    break;

            }

            // InternalSQLParser.g:199:3: ( (lv_wq_1_0= ruleWithQuery ) )?
            int alt3=2;
            int LA3_0 = input.LA(1);

            if ( (LA3_0==WITH) ) {
                alt3=1;
            }
            switch (alt3) {
                case 1 :
                    // InternalSQLParser.g:200:4: (lv_wq_1_0= ruleWithQuery )
                    {
                    // InternalSQLParser.g:200:4: (lv_wq_1_0= ruleWithQuery )
                    // InternalSQLParser.g:201:5: lv_wq_1_0= ruleWithQuery
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getSelectStatementAccess().getWqWithQueryParserRuleCall_1_0());
                      				
                    }
                    pushFollow(FOLLOW_3);
                    lv_wq_1_0=ruleWithQuery();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getSelectStatementRule());
                      					}
                      					set(
                      						current,
                      						"wq",
                      						lv_wq_1_0,
                      						"org.xtext.example.mydsl_sql.SQL.WithQuery");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalSQLParser.g:218:3: ( (lv_query_2_0= ruleSelectQuery ) )
            // InternalSQLParser.g:219:4: (lv_query_2_0= ruleSelectQuery )
            {
            // InternalSQLParser.g:219:4: (lv_query_2_0= ruleSelectQuery )
            // InternalSQLParser.g:220:5: lv_query_2_0= ruleSelectQuery
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getSelectStatementAccess().getQuerySelectQueryParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_query_2_0=ruleSelectQuery();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getSelectStatementRule());
              					}
              					set(
              						current,
              						"query",
              						lv_query_2_0,
              						"org.xtext.example.mydsl_sql.SQL.SelectQuery");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSelectStatement"


    // $ANTLR start "entryRuleInsertStatement"
    // InternalSQLParser.g:241:1: entryRuleInsertStatement returns [EObject current=null] : iv_ruleInsertStatement= ruleInsertStatement EOF ;
    public final EObject entryRuleInsertStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleInsertStatement = null;


        try {
            // InternalSQLParser.g:241:56: (iv_ruleInsertStatement= ruleInsertStatement EOF )
            // InternalSQLParser.g:242:2: iv_ruleInsertStatement= ruleInsertStatement EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getInsertStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleInsertStatement=ruleInsertStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleInsertStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleInsertStatement"


    // $ANTLR start "ruleInsertStatement"
    // InternalSQLParser.g:248:1: ruleInsertStatement returns [EObject current=null] : (otherlv_0= INSERT otherlv_1= INTO this_TableOrAlias_2= ruleTableOrAlias ( ( (lv_ifc_3_0= ruleInsertFromConstructor ) ) | ( (lv_select_4_0= ruleSelectQuery ) ) ) otherlv_5= Semicolon ) ;
    public final EObject ruleInsertStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_5=null;
        EObject this_TableOrAlias_2 = null;

        EObject lv_ifc_3_0 = null;

        EObject lv_select_4_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:254:2: ( (otherlv_0= INSERT otherlv_1= INTO this_TableOrAlias_2= ruleTableOrAlias ( ( (lv_ifc_3_0= ruleInsertFromConstructor ) ) | ( (lv_select_4_0= ruleSelectQuery ) ) ) otherlv_5= Semicolon ) )
            // InternalSQLParser.g:255:2: (otherlv_0= INSERT otherlv_1= INTO this_TableOrAlias_2= ruleTableOrAlias ( ( (lv_ifc_3_0= ruleInsertFromConstructor ) ) | ( (lv_select_4_0= ruleSelectQuery ) ) ) otherlv_5= Semicolon )
            {
            // InternalSQLParser.g:255:2: (otherlv_0= INSERT otherlv_1= INTO this_TableOrAlias_2= ruleTableOrAlias ( ( (lv_ifc_3_0= ruleInsertFromConstructor ) ) | ( (lv_select_4_0= ruleSelectQuery ) ) ) otherlv_5= Semicolon )
            // InternalSQLParser.g:256:3: otherlv_0= INSERT otherlv_1= INTO this_TableOrAlias_2= ruleTableOrAlias ( ( (lv_ifc_3_0= ruleInsertFromConstructor ) ) | ( (lv_select_4_0= ruleSelectQuery ) ) ) otherlv_5= Semicolon
            {
            otherlv_0=(Token)match(input,INSERT,FOLLOW_4); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getInsertStatementAccess().getINSERTKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,INTO,FOLLOW_5); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getInsertStatementAccess().getINTOKeyword_1());
              		
            }
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getInsertStatementAccess().getTableOrAliasParserRuleCall_2());
              		
            }
            pushFollow(FOLLOW_6);
            this_TableOrAlias_2=ruleTableOrAlias();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_TableOrAlias_2;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:275:3: ( ( (lv_ifc_3_0= ruleInsertFromConstructor ) ) | ( (lv_select_4_0= ruleSelectQuery ) ) )
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==LeftParenthesis) ) {
                alt4=1;
            }
            else if ( (LA4_0==SELECT) ) {
                alt4=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 4, 0, input);

                throw nvae;
            }
            switch (alt4) {
                case 1 :
                    // InternalSQLParser.g:276:4: ( (lv_ifc_3_0= ruleInsertFromConstructor ) )
                    {
                    // InternalSQLParser.g:276:4: ( (lv_ifc_3_0= ruleInsertFromConstructor ) )
                    // InternalSQLParser.g:277:5: (lv_ifc_3_0= ruleInsertFromConstructor )
                    {
                    // InternalSQLParser.g:277:5: (lv_ifc_3_0= ruleInsertFromConstructor )
                    // InternalSQLParser.g:278:6: lv_ifc_3_0= ruleInsertFromConstructor
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getInsertStatementAccess().getIfcInsertFromConstructorParserRuleCall_3_0_0());
                      					
                    }
                    pushFollow(FOLLOW_7);
                    lv_ifc_3_0=ruleInsertFromConstructor();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getInsertStatementRule());
                      						}
                      						set(
                      							current,
                      							"ifc",
                      							lv_ifc_3_0,
                      							"org.xtext.example.mydsl_sql.SQL.InsertFromConstructor");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:296:4: ( (lv_select_4_0= ruleSelectQuery ) )
                    {
                    // InternalSQLParser.g:296:4: ( (lv_select_4_0= ruleSelectQuery ) )
                    // InternalSQLParser.g:297:5: (lv_select_4_0= ruleSelectQuery )
                    {
                    // InternalSQLParser.g:297:5: (lv_select_4_0= ruleSelectQuery )
                    // InternalSQLParser.g:298:6: lv_select_4_0= ruleSelectQuery
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getInsertStatementAccess().getSelectSelectQueryParserRuleCall_3_1_0());
                      					
                    }
                    pushFollow(FOLLOW_7);
                    lv_select_4_0=ruleSelectQuery();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getInsertStatementRule());
                      						}
                      						set(
                      							current,
                      							"select",
                      							lv_select_4_0,
                      							"org.xtext.example.mydsl_sql.SQL.SelectQuery");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            otherlv_5=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getInsertStatementAccess().getSemicolonKeyword_4());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleInsertStatement"


    // $ANTLR start "entryRuleInsertFromConstructor"
    // InternalSQLParser.g:324:1: entryRuleInsertFromConstructor returns [EObject current=null] : iv_ruleInsertFromConstructor= ruleInsertFromConstructor EOF ;
    public final EObject entryRuleInsertFromConstructor() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleInsertFromConstructor = null;


        try {
            // InternalSQLParser.g:324:62: (iv_ruleInsertFromConstructor= ruleInsertFromConstructor EOF )
            // InternalSQLParser.g:325:2: iv_ruleInsertFromConstructor= ruleInsertFromConstructor EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getInsertFromConstructorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleInsertFromConstructor=ruleInsertFromConstructor();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleInsertFromConstructor; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleInsertFromConstructor"


    // $ANTLR start "ruleInsertFromConstructor"
    // InternalSQLParser.g:331:1: ruleInsertFromConstructor returns [EObject current=null] : (otherlv_0= LeftParenthesis ( (lv_fields_1_0= ruleFields ) ) otherlv_2= RightParenthesis otherlv_3= VALUES ( (lv_insertValueList_4_0= ruleInsertValueList ) ) ) ;
    public final EObject ruleInsertFromConstructor() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        EObject lv_fields_1_0 = null;

        EObject lv_insertValueList_4_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:337:2: ( (otherlv_0= LeftParenthesis ( (lv_fields_1_0= ruleFields ) ) otherlv_2= RightParenthesis otherlv_3= VALUES ( (lv_insertValueList_4_0= ruleInsertValueList ) ) ) )
            // InternalSQLParser.g:338:2: (otherlv_0= LeftParenthesis ( (lv_fields_1_0= ruleFields ) ) otherlv_2= RightParenthesis otherlv_3= VALUES ( (lv_insertValueList_4_0= ruleInsertValueList ) ) )
            {
            // InternalSQLParser.g:338:2: (otherlv_0= LeftParenthesis ( (lv_fields_1_0= ruleFields ) ) otherlv_2= RightParenthesis otherlv_3= VALUES ( (lv_insertValueList_4_0= ruleInsertValueList ) ) )
            // InternalSQLParser.g:339:3: otherlv_0= LeftParenthesis ( (lv_fields_1_0= ruleFields ) ) otherlv_2= RightParenthesis otherlv_3= VALUES ( (lv_insertValueList_4_0= ruleInsertValueList ) )
            {
            otherlv_0=(Token)match(input,LeftParenthesis,FOLLOW_8); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getInsertFromConstructorAccess().getLeftParenthesisKeyword_0());
              		
            }
            // InternalSQLParser.g:343:3: ( (lv_fields_1_0= ruleFields ) )
            // InternalSQLParser.g:344:4: (lv_fields_1_0= ruleFields )
            {
            // InternalSQLParser.g:344:4: (lv_fields_1_0= ruleFields )
            // InternalSQLParser.g:345:5: lv_fields_1_0= ruleFields
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getInsertFromConstructorAccess().getFieldsFieldsParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_9);
            lv_fields_1_0=ruleFields();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getInsertFromConstructorRule());
              					}
              					set(
              						current,
              						"fields",
              						lv_fields_1_0,
              						"org.xtext.example.mydsl_sql.SQL.Fields");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_2=(Token)match(input,RightParenthesis,FOLLOW_10); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getInsertFromConstructorAccess().getRightParenthesisKeyword_2());
              		
            }
            otherlv_3=(Token)match(input,VALUES,FOLLOW_11); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getInsertFromConstructorAccess().getVALUESKeyword_3());
              		
            }
            // InternalSQLParser.g:370:3: ( (lv_insertValueList_4_0= ruleInsertValueList ) )
            // InternalSQLParser.g:371:4: (lv_insertValueList_4_0= ruleInsertValueList )
            {
            // InternalSQLParser.g:371:4: (lv_insertValueList_4_0= ruleInsertValueList )
            // InternalSQLParser.g:372:5: lv_insertValueList_4_0= ruleInsertValueList
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getInsertFromConstructorAccess().getInsertValueListInsertValueListParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_insertValueList_4_0=ruleInsertValueList();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getInsertFromConstructorRule());
              					}
              					set(
              						current,
              						"insertValueList",
              						lv_insertValueList_4_0,
              						"org.xtext.example.mydsl_sql.SQL.InsertValueList");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleInsertFromConstructor"


    // $ANTLR start "entryRuleFields"
    // InternalSQLParser.g:393:1: entryRuleFields returns [EObject current=null] : iv_ruleFields= ruleFields EOF ;
    public final EObject entryRuleFields() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFields = null;


        try {
            // InternalSQLParser.g:393:47: (iv_ruleFields= ruleFields EOF )
            // InternalSQLParser.g:394:2: iv_ruleFields= ruleFields EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFieldsRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFields=ruleFields();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFields; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFields"


    // $ANTLR start "ruleFields"
    // InternalSQLParser.g:400:1: ruleFields returns [EObject current=null] : ( ( (lv_ids_0_0= RULE_ID ) ) (otherlv_1= Comma ( (lv_ids_2_0= RULE_ID ) ) )* ) ;
    public final EObject ruleFields() throws RecognitionException {
        EObject current = null;

        Token lv_ids_0_0=null;
        Token otherlv_1=null;
        Token lv_ids_2_0=null;


        	enterRule();

        try {
            // InternalSQLParser.g:406:2: ( ( ( (lv_ids_0_0= RULE_ID ) ) (otherlv_1= Comma ( (lv_ids_2_0= RULE_ID ) ) )* ) )
            // InternalSQLParser.g:407:2: ( ( (lv_ids_0_0= RULE_ID ) ) (otherlv_1= Comma ( (lv_ids_2_0= RULE_ID ) ) )* )
            {
            // InternalSQLParser.g:407:2: ( ( (lv_ids_0_0= RULE_ID ) ) (otherlv_1= Comma ( (lv_ids_2_0= RULE_ID ) ) )* )
            // InternalSQLParser.g:408:3: ( (lv_ids_0_0= RULE_ID ) ) (otherlv_1= Comma ( (lv_ids_2_0= RULE_ID ) ) )*
            {
            // InternalSQLParser.g:408:3: ( (lv_ids_0_0= RULE_ID ) )
            // InternalSQLParser.g:409:4: (lv_ids_0_0= RULE_ID )
            {
            // InternalSQLParser.g:409:4: (lv_ids_0_0= RULE_ID )
            // InternalSQLParser.g:410:5: lv_ids_0_0= RULE_ID
            {
            lv_ids_0_0=(Token)match(input,RULE_ID,FOLLOW_12); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_ids_0_0, grammarAccess.getFieldsAccess().getIdsIDTerminalRuleCall_0_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getFieldsRule());
              					}
              					addWithLastConsumed(
              						current,
              						"ids",
              						lv_ids_0_0,
              						"org.xtext.example.mydsl_sql.SQL.ID");
              				
            }

            }


            }

            // InternalSQLParser.g:426:3: (otherlv_1= Comma ( (lv_ids_2_0= RULE_ID ) ) )*
            loop5:
            do {
                int alt5=2;
                int LA5_0 = input.LA(1);

                if ( (LA5_0==Comma) ) {
                    alt5=1;
                }


                switch (alt5) {
            	case 1 :
            	    // InternalSQLParser.g:427:4: otherlv_1= Comma ( (lv_ids_2_0= RULE_ID ) )
            	    {
            	    otherlv_1=(Token)match(input,Comma,FOLLOW_8); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_1, grammarAccess.getFieldsAccess().getCommaKeyword_1_0());
            	      			
            	    }
            	    // InternalSQLParser.g:431:4: ( (lv_ids_2_0= RULE_ID ) )
            	    // InternalSQLParser.g:432:5: (lv_ids_2_0= RULE_ID )
            	    {
            	    // InternalSQLParser.g:432:5: (lv_ids_2_0= RULE_ID )
            	    // InternalSQLParser.g:433:6: lv_ids_2_0= RULE_ID
            	    {
            	    lv_ids_2_0=(Token)match(input,RULE_ID,FOLLOW_12); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						newLeafNode(lv_ids_2_0, grammarAccess.getFieldsAccess().getIdsIDTerminalRuleCall_1_1_0());
            	      					
            	    }
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElement(grammarAccess.getFieldsRule());
            	      						}
            	      						addWithLastConsumed(
            	      							current,
            	      							"ids",
            	      							lv_ids_2_0,
            	      							"org.xtext.example.mydsl_sql.SQL.ID");
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop5;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFields"


    // $ANTLR start "entryRuleInsertValueList"
    // InternalSQLParser.g:454:1: entryRuleInsertValueList returns [EObject current=null] : iv_ruleInsertValueList= ruleInsertValueList EOF ;
    public final EObject entryRuleInsertValueList() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleInsertValueList = null;


        try {
            // InternalSQLParser.g:454:56: (iv_ruleInsertValueList= ruleInsertValueList EOF )
            // InternalSQLParser.g:455:2: iv_ruleInsertValueList= ruleInsertValueList EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getInsertValueListRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleInsertValueList=ruleInsertValueList();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleInsertValueList; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleInsertValueList"


    // $ANTLR start "ruleInsertValueList"
    // InternalSQLParser.g:461:1: ruleInsertValueList returns [EObject current=null] : (otherlv_0= LeftParenthesis ( (lv_vals_1_0= ruleInsertValues ) ) otherlv_2= RightParenthesis (otherlv_3= Comma otherlv_4= LeftParenthesis ( (lv_vals_5_0= ruleInsertValues ) ) otherlv_6= RightParenthesis )* ) ;
    public final EObject ruleInsertValueList() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        AntlrDatatypeRuleToken lv_vals_1_0 = null;

        AntlrDatatypeRuleToken lv_vals_5_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:467:2: ( (otherlv_0= LeftParenthesis ( (lv_vals_1_0= ruleInsertValues ) ) otherlv_2= RightParenthesis (otherlv_3= Comma otherlv_4= LeftParenthesis ( (lv_vals_5_0= ruleInsertValues ) ) otherlv_6= RightParenthesis )* ) )
            // InternalSQLParser.g:468:2: (otherlv_0= LeftParenthesis ( (lv_vals_1_0= ruleInsertValues ) ) otherlv_2= RightParenthesis (otherlv_3= Comma otherlv_4= LeftParenthesis ( (lv_vals_5_0= ruleInsertValues ) ) otherlv_6= RightParenthesis )* )
            {
            // InternalSQLParser.g:468:2: (otherlv_0= LeftParenthesis ( (lv_vals_1_0= ruleInsertValues ) ) otherlv_2= RightParenthesis (otherlv_3= Comma otherlv_4= LeftParenthesis ( (lv_vals_5_0= ruleInsertValues ) ) otherlv_6= RightParenthesis )* )
            // InternalSQLParser.g:469:3: otherlv_0= LeftParenthesis ( (lv_vals_1_0= ruleInsertValues ) ) otherlv_2= RightParenthesis (otherlv_3= Comma otherlv_4= LeftParenthesis ( (lv_vals_5_0= ruleInsertValues ) ) otherlv_6= RightParenthesis )*
            {
            otherlv_0=(Token)match(input,LeftParenthesis,FOLLOW_13); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getInsertValueListAccess().getLeftParenthesisKeyword_0());
              		
            }
            // InternalSQLParser.g:473:3: ( (lv_vals_1_0= ruleInsertValues ) )
            // InternalSQLParser.g:474:4: (lv_vals_1_0= ruleInsertValues )
            {
            // InternalSQLParser.g:474:4: (lv_vals_1_0= ruleInsertValues )
            // InternalSQLParser.g:475:5: lv_vals_1_0= ruleInsertValues
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getInsertValueListAccess().getValsInsertValuesParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_9);
            lv_vals_1_0=ruleInsertValues();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getInsertValueListRule());
              					}
              					add(
              						current,
              						"vals",
              						lv_vals_1_0,
              						"org.xtext.example.mydsl_sql.SQL.InsertValues");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_2=(Token)match(input,RightParenthesis,FOLLOW_12); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getInsertValueListAccess().getRightParenthesisKeyword_2());
              		
            }
            // InternalSQLParser.g:496:3: (otherlv_3= Comma otherlv_4= LeftParenthesis ( (lv_vals_5_0= ruleInsertValues ) ) otherlv_6= RightParenthesis )*
            loop6:
            do {
                int alt6=2;
                int LA6_0 = input.LA(1);

                if ( (LA6_0==Comma) ) {
                    alt6=1;
                }


                switch (alt6) {
            	case 1 :
            	    // InternalSQLParser.g:497:4: otherlv_3= Comma otherlv_4= LeftParenthesis ( (lv_vals_5_0= ruleInsertValues ) ) otherlv_6= RightParenthesis
            	    {
            	    otherlv_3=(Token)match(input,Comma,FOLLOW_11); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_3, grammarAccess.getInsertValueListAccess().getCommaKeyword_3_0());
            	      			
            	    }
            	    otherlv_4=(Token)match(input,LeftParenthesis,FOLLOW_13); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_4, grammarAccess.getInsertValueListAccess().getLeftParenthesisKeyword_3_1());
            	      			
            	    }
            	    // InternalSQLParser.g:505:4: ( (lv_vals_5_0= ruleInsertValues ) )
            	    // InternalSQLParser.g:506:5: (lv_vals_5_0= ruleInsertValues )
            	    {
            	    // InternalSQLParser.g:506:5: (lv_vals_5_0= ruleInsertValues )
            	    // InternalSQLParser.g:507:6: lv_vals_5_0= ruleInsertValues
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getInsertValueListAccess().getValsInsertValuesParserRuleCall_3_2_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_9);
            	    lv_vals_5_0=ruleInsertValues();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getInsertValueListRule());
            	      						}
            	      						add(
            	      							current,
            	      							"vals",
            	      							lv_vals_5_0,
            	      							"org.xtext.example.mydsl_sql.SQL.InsertValues");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }

            	    otherlv_6=(Token)match(input,RightParenthesis,FOLLOW_12); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_6, grammarAccess.getInsertValueListAccess().getRightParenthesisKeyword_3_3());
            	      			
            	    }

            	    }
            	    break;

            	default :
            	    break loop6;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleInsertValueList"


    // $ANTLR start "entryRuleInsertValues"
    // InternalSQLParser.g:533:1: entryRuleInsertValues returns [String current=null] : iv_ruleInsertValues= ruleInsertValues EOF ;
    public final String entryRuleInsertValues() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleInsertValues = null;


        try {
            // InternalSQLParser.g:533:52: (iv_ruleInsertValues= ruleInsertValues EOF )
            // InternalSQLParser.g:534:2: iv_ruleInsertValues= ruleInsertValues EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getInsertValuesRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleInsertValues=ruleInsertValues();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleInsertValues.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleInsertValues"


    // $ANTLR start "ruleInsertValues"
    // InternalSQLParser.g:540:1: ruleInsertValues returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_Expr_0= ruleExpr (kw= Comma this_Expr_2= ruleExpr )* ) ;
    public final AntlrDatatypeRuleToken ruleInsertValues() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;
        AntlrDatatypeRuleToken this_Expr_0 = null;

        AntlrDatatypeRuleToken this_Expr_2 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:546:2: ( (this_Expr_0= ruleExpr (kw= Comma this_Expr_2= ruleExpr )* ) )
            // InternalSQLParser.g:547:2: (this_Expr_0= ruleExpr (kw= Comma this_Expr_2= ruleExpr )* )
            {
            // InternalSQLParser.g:547:2: (this_Expr_0= ruleExpr (kw= Comma this_Expr_2= ruleExpr )* )
            // InternalSQLParser.g:548:3: this_Expr_0= ruleExpr (kw= Comma this_Expr_2= ruleExpr )*
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getInsertValuesAccess().getExprParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_12);
            this_Expr_0=ruleExpr();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(this_Expr_0);
              		
            }
            if ( state.backtracking==0 ) {

              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:558:3: (kw= Comma this_Expr_2= ruleExpr )*
            loop7:
            do {
                int alt7=2;
                int LA7_0 = input.LA(1);

                if ( (LA7_0==Comma) ) {
                    alt7=1;
                }


                switch (alt7) {
            	case 1 :
            	    // InternalSQLParser.g:559:4: kw= Comma this_Expr_2= ruleExpr
            	    {
            	    kw=(Token)match(input,Comma,FOLLOW_13); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				current.merge(kw);
            	      				newLeafNode(kw, grammarAccess.getInsertValuesAccess().getCommaKeyword_1_0());
            	      			
            	    }
            	    if ( state.backtracking==0 ) {

            	      				newCompositeNode(grammarAccess.getInsertValuesAccess().getExprParserRuleCall_1_1());
            	      			
            	    }
            	    pushFollow(FOLLOW_12);
            	    this_Expr_2=ruleExpr();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				current.merge(this_Expr_2);
            	      			
            	    }
            	    if ( state.backtracking==0 ) {

            	      				afterParserOrEnumRuleCall();
            	      			
            	    }

            	    }
            	    break;

            	default :
            	    break loop7;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleInsertValues"


    // $ANTLR start "entryRuleExpr"
    // InternalSQLParser.g:579:1: entryRuleExpr returns [String current=null] : iv_ruleExpr= ruleExpr EOF ;
    public final String entryRuleExpr() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleExpr = null;


        try {
            // InternalSQLParser.g:579:44: (iv_ruleExpr= ruleExpr EOF )
            // InternalSQLParser.g:580:2: iv_ruleExpr= ruleExpr EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExprRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExpr=ruleExpr();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExpr.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleExpr"


    // $ANTLR start "ruleExpr"
    // InternalSQLParser.g:586:1: ruleExpr returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : this_BoolExpr_0= ruleBoolExpr ;
    public final AntlrDatatypeRuleToken ruleExpr() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        AntlrDatatypeRuleToken this_BoolExpr_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:592:2: (this_BoolExpr_0= ruleBoolExpr )
            // InternalSQLParser.g:593:2: this_BoolExpr_0= ruleBoolExpr
            {
            if ( state.backtracking==0 ) {

              		newCompositeNode(grammarAccess.getExprAccess().getBoolExprParserRuleCall());
              	
            }
            pushFollow(FOLLOW_2);
            this_BoolExpr_0=ruleBoolExpr();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current.merge(this_BoolExpr_0);
              	
            }
            if ( state.backtracking==0 ) {

              		afterParserOrEnumRuleCall();
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleExpr"


    // $ANTLR start "entryRuleBoolExpr"
    // InternalSQLParser.g:606:1: entryRuleBoolExpr returns [String current=null] : iv_ruleBoolExpr= ruleBoolExpr EOF ;
    public final String entryRuleBoolExpr() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleBoolExpr = null;


        try {
            // InternalSQLParser.g:606:48: (iv_ruleBoolExpr= ruleBoolExpr EOF )
            // InternalSQLParser.g:607:2: iv_ruleBoolExpr= ruleBoolExpr EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBoolExprRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBoolExpr=ruleBoolExpr();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBoolExpr.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleBoolExpr"


    // $ANTLR start "ruleBoolExpr"
    // InternalSQLParser.g:613:1: ruleBoolExpr returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_BoolTerm_0= ruleBoolTerm ( (kw= OR | kw= VerticalLineVerticalLine ) this_BoolTerm_3= ruleBoolTerm )* ) ;
    public final AntlrDatatypeRuleToken ruleBoolExpr() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;
        AntlrDatatypeRuleToken this_BoolTerm_0 = null;

        AntlrDatatypeRuleToken this_BoolTerm_3 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:619:2: ( (this_BoolTerm_0= ruleBoolTerm ( (kw= OR | kw= VerticalLineVerticalLine ) this_BoolTerm_3= ruleBoolTerm )* ) )
            // InternalSQLParser.g:620:2: (this_BoolTerm_0= ruleBoolTerm ( (kw= OR | kw= VerticalLineVerticalLine ) this_BoolTerm_3= ruleBoolTerm )* )
            {
            // InternalSQLParser.g:620:2: (this_BoolTerm_0= ruleBoolTerm ( (kw= OR | kw= VerticalLineVerticalLine ) this_BoolTerm_3= ruleBoolTerm )* )
            // InternalSQLParser.g:621:3: this_BoolTerm_0= ruleBoolTerm ( (kw= OR | kw= VerticalLineVerticalLine ) this_BoolTerm_3= ruleBoolTerm )*
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getBoolExprAccess().getBoolTermParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_14);
            this_BoolTerm_0=ruleBoolTerm();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(this_BoolTerm_0);
              		
            }
            if ( state.backtracking==0 ) {

              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:631:3: ( (kw= OR | kw= VerticalLineVerticalLine ) this_BoolTerm_3= ruleBoolTerm )*
            loop9:
            do {
                int alt9=2;
                int LA9_0 = input.LA(1);

                if ( (LA9_0==OR||LA9_0==VerticalLineVerticalLine) ) {
                    alt9=1;
                }


                switch (alt9) {
            	case 1 :
            	    // InternalSQLParser.g:632:4: (kw= OR | kw= VerticalLineVerticalLine ) this_BoolTerm_3= ruleBoolTerm
            	    {
            	    // InternalSQLParser.g:632:4: (kw= OR | kw= VerticalLineVerticalLine )
            	    int alt8=2;
            	    int LA8_0 = input.LA(1);

            	    if ( (LA8_0==OR) ) {
            	        alt8=1;
            	    }
            	    else if ( (LA8_0==VerticalLineVerticalLine) ) {
            	        alt8=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 8, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt8) {
            	        case 1 :
            	            // InternalSQLParser.g:633:5: kw= OR
            	            {
            	            kw=(Token)match(input,OR,FOLLOW_13); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              					current.merge(kw);
            	              					newLeafNode(kw, grammarAccess.getBoolExprAccess().getORKeyword_1_0_0());
            	              				
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // InternalSQLParser.g:639:5: kw= VerticalLineVerticalLine
            	            {
            	            kw=(Token)match(input,VerticalLineVerticalLine,FOLLOW_13); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              					current.merge(kw);
            	              					newLeafNode(kw, grammarAccess.getBoolExprAccess().getVerticalLineVerticalLineKeyword_1_0_1());
            	              				
            	            }

            	            }
            	            break;

            	    }

            	    if ( state.backtracking==0 ) {

            	      				newCompositeNode(grammarAccess.getBoolExprAccess().getBoolTermParserRuleCall_1_1());
            	      			
            	    }
            	    pushFollow(FOLLOW_14);
            	    this_BoolTerm_3=ruleBoolTerm();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				current.merge(this_BoolTerm_3);
            	      			
            	    }
            	    if ( state.backtracking==0 ) {

            	      				afterParserOrEnumRuleCall();
            	      			
            	    }

            	    }
            	    break;

            	default :
            	    break loop9;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleBoolExpr"


    // $ANTLR start "entryRuleBoolTerm"
    // InternalSQLParser.g:660:1: entryRuleBoolTerm returns [String current=null] : iv_ruleBoolTerm= ruleBoolTerm EOF ;
    public final String entryRuleBoolTerm() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleBoolTerm = null;


        try {
            // InternalSQLParser.g:660:48: (iv_ruleBoolTerm= ruleBoolTerm EOF )
            // InternalSQLParser.g:661:2: iv_ruleBoolTerm= ruleBoolTerm EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBoolTermRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBoolTerm=ruleBoolTerm();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBoolTerm.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleBoolTerm"


    // $ANTLR start "ruleBoolTerm"
    // InternalSQLParser.g:667:1: ruleBoolTerm returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_BoolFactor_0= ruleBoolFactor ( (kw= AND | kw= AmpersandAmpersand ) this_BoolFactor_3= ruleBoolFactor )* ) ;
    public final AntlrDatatypeRuleToken ruleBoolTerm() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;
        AntlrDatatypeRuleToken this_BoolFactor_0 = null;

        AntlrDatatypeRuleToken this_BoolFactor_3 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:673:2: ( (this_BoolFactor_0= ruleBoolFactor ( (kw= AND | kw= AmpersandAmpersand ) this_BoolFactor_3= ruleBoolFactor )* ) )
            // InternalSQLParser.g:674:2: (this_BoolFactor_0= ruleBoolFactor ( (kw= AND | kw= AmpersandAmpersand ) this_BoolFactor_3= ruleBoolFactor )* )
            {
            // InternalSQLParser.g:674:2: (this_BoolFactor_0= ruleBoolFactor ( (kw= AND | kw= AmpersandAmpersand ) this_BoolFactor_3= ruleBoolFactor )* )
            // InternalSQLParser.g:675:3: this_BoolFactor_0= ruleBoolFactor ( (kw= AND | kw= AmpersandAmpersand ) this_BoolFactor_3= ruleBoolFactor )*
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getBoolTermAccess().getBoolFactorParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_15);
            this_BoolFactor_0=ruleBoolFactor();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(this_BoolFactor_0);
              		
            }
            if ( state.backtracking==0 ) {

              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:685:3: ( (kw= AND | kw= AmpersandAmpersand ) this_BoolFactor_3= ruleBoolFactor )*
            loop11:
            do {
                int alt11=2;
                int LA11_0 = input.LA(1);

                if ( (LA11_0==AND||LA11_0==AmpersandAmpersand) ) {
                    alt11=1;
                }


                switch (alt11) {
            	case 1 :
            	    // InternalSQLParser.g:686:4: (kw= AND | kw= AmpersandAmpersand ) this_BoolFactor_3= ruleBoolFactor
            	    {
            	    // InternalSQLParser.g:686:4: (kw= AND | kw= AmpersandAmpersand )
            	    int alt10=2;
            	    int LA10_0 = input.LA(1);

            	    if ( (LA10_0==AND) ) {
            	        alt10=1;
            	    }
            	    else if ( (LA10_0==AmpersandAmpersand) ) {
            	        alt10=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 10, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt10) {
            	        case 1 :
            	            // InternalSQLParser.g:687:5: kw= AND
            	            {
            	            kw=(Token)match(input,AND,FOLLOW_13); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              					current.merge(kw);
            	              					newLeafNode(kw, grammarAccess.getBoolTermAccess().getANDKeyword_1_0_0());
            	              				
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // InternalSQLParser.g:693:5: kw= AmpersandAmpersand
            	            {
            	            kw=(Token)match(input,AmpersandAmpersand,FOLLOW_13); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              					current.merge(kw);
            	              					newLeafNode(kw, grammarAccess.getBoolTermAccess().getAmpersandAmpersandKeyword_1_0_1());
            	              				
            	            }

            	            }
            	            break;

            	    }

            	    if ( state.backtracking==0 ) {

            	      				newCompositeNode(grammarAccess.getBoolTermAccess().getBoolFactorParserRuleCall_1_1());
            	      			
            	    }
            	    pushFollow(FOLLOW_15);
            	    this_BoolFactor_3=ruleBoolFactor();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				current.merge(this_BoolFactor_3);
            	      			
            	    }
            	    if ( state.backtracking==0 ) {

            	      				afterParserOrEnumRuleCall();
            	      			
            	    }

            	    }
            	    break;

            	default :
            	    break loop11;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleBoolTerm"


    // $ANTLR start "entryRuleBoolFactor"
    // InternalSQLParser.g:714:1: entryRuleBoolFactor returns [String current=null] : iv_ruleBoolFactor= ruleBoolFactor EOF ;
    public final String entryRuleBoolFactor() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleBoolFactor = null;


        try {
            // InternalSQLParser.g:714:50: (iv_ruleBoolFactor= ruleBoolFactor EOF )
            // InternalSQLParser.g:715:2: iv_ruleBoolFactor= ruleBoolFactor EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBoolFactorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBoolFactor=ruleBoolFactor();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBoolFactor.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleBoolFactor"


    // $ANTLR start "ruleBoolFactor"
    // InternalSQLParser.g:721:1: ruleBoolFactor returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : ( (kw= NOT )? this_BoolPri_1= ruleBoolPri ) ;
    public final AntlrDatatypeRuleToken ruleBoolFactor() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;
        AntlrDatatypeRuleToken this_BoolPri_1 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:727:2: ( ( (kw= NOT )? this_BoolPri_1= ruleBoolPri ) )
            // InternalSQLParser.g:728:2: ( (kw= NOT )? this_BoolPri_1= ruleBoolPri )
            {
            // InternalSQLParser.g:728:2: ( (kw= NOT )? this_BoolPri_1= ruleBoolPri )
            // InternalSQLParser.g:729:3: (kw= NOT )? this_BoolPri_1= ruleBoolPri
            {
            // InternalSQLParser.g:729:3: (kw= NOT )?
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==NOT) ) {
                alt12=1;
            }
            switch (alt12) {
                case 1 :
                    // InternalSQLParser.g:730:4: kw= NOT
                    {
                    kw=(Token)match(input,NOT,FOLLOW_13); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getBoolFactorAccess().getNOTKeyword_0());
                      			
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getBoolFactorAccess().getBoolPriParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_2);
            this_BoolPri_1=ruleBoolPri();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(this_BoolPri_1);
              		
            }
            if ( state.backtracking==0 ) {

              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleBoolFactor"


    // $ANTLR start "entryRuleBoolPri"
    // InternalSQLParser.g:750:1: entryRuleBoolPri returns [String current=null] : iv_ruleBoolPri= ruleBoolPri EOF ;
    public final String entryRuleBoolPri() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleBoolPri = null;


        try {
            // InternalSQLParser.g:750:47: (iv_ruleBoolPri= ruleBoolPri EOF )
            // InternalSQLParser.g:751:2: iv_ruleBoolPri= ruleBoolPri EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBoolPriRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBoolPri=ruleBoolPri();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBoolPri.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleBoolPri"


    // $ANTLR start "ruleBoolPri"
    // InternalSQLParser.g:757:1: ruleBoolPri returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_Literal_0= ruleLiteral | (kw= LeftParenthesis this_Expr_2= ruleExpr kw= RightParenthesis ) ) ;
    public final AntlrDatatypeRuleToken ruleBoolPri() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;
        AntlrDatatypeRuleToken this_Literal_0 = null;

        AntlrDatatypeRuleToken this_Expr_2 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:763:2: ( (this_Literal_0= ruleLiteral | (kw= LeftParenthesis this_Expr_2= ruleExpr kw= RightParenthesis ) ) )
            // InternalSQLParser.g:764:2: (this_Literal_0= ruleLiteral | (kw= LeftParenthesis this_Expr_2= ruleExpr kw= RightParenthesis ) )
            {
            // InternalSQLParser.g:764:2: (this_Literal_0= ruleLiteral | (kw= LeftParenthesis this_Expr_2= ruleExpr kw= RightParenthesis ) )
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==TIMESTAMP||LA13_0==FALSE||LA13_0==DATE||LA13_0==NULL||(LA13_0>=TIME && LA13_0<=TRUE)||(LA13_0>=RULE_UNSIGNED && LA13_0<=RULE_INT)||LA13_0==RULE_STRING_) ) {
                alt13=1;
            }
            else if ( (LA13_0==LeftParenthesis) ) {
                alt13=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 13, 0, input);

                throw nvae;
            }
            switch (alt13) {
                case 1 :
                    // InternalSQLParser.g:765:3: this_Literal_0= ruleLiteral
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getBoolPriAccess().getLiteralParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Literal_0=ruleLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_Literal_0);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:776:3: (kw= LeftParenthesis this_Expr_2= ruleExpr kw= RightParenthesis )
                    {
                    // InternalSQLParser.g:776:3: (kw= LeftParenthesis this_Expr_2= ruleExpr kw= RightParenthesis )
                    // InternalSQLParser.g:777:4: kw= LeftParenthesis this_Expr_2= ruleExpr kw= RightParenthesis
                    {
                    kw=(Token)match(input,LeftParenthesis,FOLLOW_13); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getBoolPriAccess().getLeftParenthesisKeyword_1_0());
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getBoolPriAccess().getExprParserRuleCall_1_1());
                      			
                    }
                    pushFollow(FOLLOW_9);
                    this_Expr_2=ruleExpr();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(this_Expr_2);
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				afterParserOrEnumRuleCall();
                      			
                    }
                    kw=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getBoolPriAccess().getRightParenthesisKeyword_1_2());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleBoolPri"


    // $ANTLR start "entryRuleCreateStatement"
    // InternalSQLParser.g:802:1: entryRuleCreateStatement returns [EObject current=null] : iv_ruleCreateStatement= ruleCreateStatement EOF ;
    public final EObject entryRuleCreateStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleCreateStatement = null;


        try {
            // InternalSQLParser.g:802:56: (iv_ruleCreateStatement= ruleCreateStatement EOF )
            // InternalSQLParser.g:803:2: iv_ruleCreateStatement= ruleCreateStatement EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCreateStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCreateStatement=ruleCreateStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCreateStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleCreateStatement"


    // $ANTLR start "ruleCreateStatement"
    // InternalSQLParser.g:809:1: ruleCreateStatement returns [EObject current=null] : (otherlv_0= CREATE ( (lv_create_tbl_1_0= ruleCreateTable ) ) ) ;
    public final EObject ruleCreateStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject lv_create_tbl_1_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:815:2: ( (otherlv_0= CREATE ( (lv_create_tbl_1_0= ruleCreateTable ) ) ) )
            // InternalSQLParser.g:816:2: (otherlv_0= CREATE ( (lv_create_tbl_1_0= ruleCreateTable ) ) )
            {
            // InternalSQLParser.g:816:2: (otherlv_0= CREATE ( (lv_create_tbl_1_0= ruleCreateTable ) ) )
            // InternalSQLParser.g:817:3: otherlv_0= CREATE ( (lv_create_tbl_1_0= ruleCreateTable ) )
            {
            otherlv_0=(Token)match(input,CREATE,FOLLOW_16); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getCreateStatementAccess().getCREATEKeyword_0());
              		
            }
            // InternalSQLParser.g:821:3: ( (lv_create_tbl_1_0= ruleCreateTable ) )
            // InternalSQLParser.g:822:4: (lv_create_tbl_1_0= ruleCreateTable )
            {
            // InternalSQLParser.g:822:4: (lv_create_tbl_1_0= ruleCreateTable )
            // InternalSQLParser.g:823:5: lv_create_tbl_1_0= ruleCreateTable
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getCreateStatementAccess().getCreate_tblCreateTableParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_create_tbl_1_0=ruleCreateTable();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getCreateStatementRule());
              					}
              					set(
              						current,
              						"create_tbl",
              						lv_create_tbl_1_0,
              						"org.xtext.example.mydsl_sql.SQL.CreateTable");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleCreateStatement"


    // $ANTLR start "entryRuleCreateTable"
    // InternalSQLParser.g:844:1: entryRuleCreateTable returns [EObject current=null] : iv_ruleCreateTable= ruleCreateTable EOF ;
    public final EObject entryRuleCreateTable() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleCreateTable = null;


        try {
            // InternalSQLParser.g:844:52: (iv_ruleCreateTable= ruleCreateTable EOF )
            // InternalSQLParser.g:845:2: iv_ruleCreateTable= ruleCreateTable EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCreateTableRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCreateTable=ruleCreateTable();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCreateTable; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleCreateTable"


    // $ANTLR start "ruleCreateTable"
    // InternalSQLParser.g:851:1: ruleCreateTable returns [EObject current=null] : (otherlv_0= TABLE ( (lv_tableName_1_0= ruleTableOrAlias ) ) otherlv_2= LeftParenthesis ( (lv_tableElementList_3_0= ruleTableElementList ) ) otherlv_4= RightParenthesis ) ;
    public final EObject ruleCreateTable() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject lv_tableName_1_0 = null;

        EObject lv_tableElementList_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:857:2: ( (otherlv_0= TABLE ( (lv_tableName_1_0= ruleTableOrAlias ) ) otherlv_2= LeftParenthesis ( (lv_tableElementList_3_0= ruleTableElementList ) ) otherlv_4= RightParenthesis ) )
            // InternalSQLParser.g:858:2: (otherlv_0= TABLE ( (lv_tableName_1_0= ruleTableOrAlias ) ) otherlv_2= LeftParenthesis ( (lv_tableElementList_3_0= ruleTableElementList ) ) otherlv_4= RightParenthesis )
            {
            // InternalSQLParser.g:858:2: (otherlv_0= TABLE ( (lv_tableName_1_0= ruleTableOrAlias ) ) otherlv_2= LeftParenthesis ( (lv_tableElementList_3_0= ruleTableElementList ) ) otherlv_4= RightParenthesis )
            // InternalSQLParser.g:859:3: otherlv_0= TABLE ( (lv_tableName_1_0= ruleTableOrAlias ) ) otherlv_2= LeftParenthesis ( (lv_tableElementList_3_0= ruleTableElementList ) ) otherlv_4= RightParenthesis
            {
            otherlv_0=(Token)match(input,TABLE,FOLLOW_5); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getCreateTableAccess().getTABLEKeyword_0());
              		
            }
            // InternalSQLParser.g:863:3: ( (lv_tableName_1_0= ruleTableOrAlias ) )
            // InternalSQLParser.g:864:4: (lv_tableName_1_0= ruleTableOrAlias )
            {
            // InternalSQLParser.g:864:4: (lv_tableName_1_0= ruleTableOrAlias )
            // InternalSQLParser.g:865:5: lv_tableName_1_0= ruleTableOrAlias
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getCreateTableAccess().getTableNameTableOrAliasParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_11);
            lv_tableName_1_0=ruleTableOrAlias();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getCreateTableRule());
              					}
              					set(
              						current,
              						"tableName",
              						lv_tableName_1_0,
              						"org.xtext.example.mydsl_sql.SQL.TableOrAlias");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_2=(Token)match(input,LeftParenthesis,FOLLOW_17); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getCreateTableAccess().getLeftParenthesisKeyword_2());
              		
            }
            // InternalSQLParser.g:886:3: ( (lv_tableElementList_3_0= ruleTableElementList ) )
            // InternalSQLParser.g:887:4: (lv_tableElementList_3_0= ruleTableElementList )
            {
            // InternalSQLParser.g:887:4: (lv_tableElementList_3_0= ruleTableElementList )
            // InternalSQLParser.g:888:5: lv_tableElementList_3_0= ruleTableElementList
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getCreateTableAccess().getTableElementListTableElementListParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_9);
            lv_tableElementList_3_0=ruleTableElementList();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getCreateTableRule());
              					}
              					set(
              						current,
              						"tableElementList",
              						lv_tableElementList_3_0,
              						"org.xtext.example.mydsl_sql.SQL.TableElementList");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_4=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getCreateTableAccess().getRightParenthesisKeyword_4());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleCreateTable"


    // $ANTLR start "entryRuleTableElementList"
    // InternalSQLParser.g:913:1: entryRuleTableElementList returns [EObject current=null] : iv_ruleTableElementList= ruleTableElementList EOF ;
    public final EObject entryRuleTableElementList() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTableElementList = null;


        try {
            // InternalSQLParser.g:913:57: (iv_ruleTableElementList= ruleTableElementList EOF )
            // InternalSQLParser.g:914:2: iv_ruleTableElementList= ruleTableElementList EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTableElementListRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTableElementList=ruleTableElementList();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTableElementList; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTableElementList"


    // $ANTLR start "ruleTableElementList"
    // InternalSQLParser.g:920:1: ruleTableElementList returns [EObject current=null] : ( ( (lv_tableElement_0_0= ruleTableElement ) ) (otherlv_1= Comma ( (lv_tableElement_2_0= ruleTableElement ) ) )* ) ;
    public final EObject ruleTableElementList() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_tableElement_0_0 = null;

        EObject lv_tableElement_2_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:926:2: ( ( ( (lv_tableElement_0_0= ruleTableElement ) ) (otherlv_1= Comma ( (lv_tableElement_2_0= ruleTableElement ) ) )* ) )
            // InternalSQLParser.g:927:2: ( ( (lv_tableElement_0_0= ruleTableElement ) ) (otherlv_1= Comma ( (lv_tableElement_2_0= ruleTableElement ) ) )* )
            {
            // InternalSQLParser.g:927:2: ( ( (lv_tableElement_0_0= ruleTableElement ) ) (otherlv_1= Comma ( (lv_tableElement_2_0= ruleTableElement ) ) )* )
            // InternalSQLParser.g:928:3: ( (lv_tableElement_0_0= ruleTableElement ) ) (otherlv_1= Comma ( (lv_tableElement_2_0= ruleTableElement ) ) )*
            {
            // InternalSQLParser.g:928:3: ( (lv_tableElement_0_0= ruleTableElement ) )
            // InternalSQLParser.g:929:4: (lv_tableElement_0_0= ruleTableElement )
            {
            // InternalSQLParser.g:929:4: (lv_tableElement_0_0= ruleTableElement )
            // InternalSQLParser.g:930:5: lv_tableElement_0_0= ruleTableElement
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getTableElementListAccess().getTableElementTableElementParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_12);
            lv_tableElement_0_0=ruleTableElement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTableElementListRule());
              					}
              					add(
              						current,
              						"tableElement",
              						lv_tableElement_0_0,
              						"org.xtext.example.mydsl_sql.SQL.TableElement");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:947:3: (otherlv_1= Comma ( (lv_tableElement_2_0= ruleTableElement ) ) )*
            loop14:
            do {
                int alt14=2;
                int LA14_0 = input.LA(1);

                if ( (LA14_0==Comma) ) {
                    alt14=1;
                }


                switch (alt14) {
            	case 1 :
            	    // InternalSQLParser.g:948:4: otherlv_1= Comma ( (lv_tableElement_2_0= ruleTableElement ) )
            	    {
            	    otherlv_1=(Token)match(input,Comma,FOLLOW_17); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_1, grammarAccess.getTableElementListAccess().getCommaKeyword_1_0());
            	      			
            	    }
            	    // InternalSQLParser.g:952:4: ( (lv_tableElement_2_0= ruleTableElement ) )
            	    // InternalSQLParser.g:953:5: (lv_tableElement_2_0= ruleTableElement )
            	    {
            	    // InternalSQLParser.g:953:5: (lv_tableElement_2_0= ruleTableElement )
            	    // InternalSQLParser.g:954:6: lv_tableElement_2_0= ruleTableElement
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getTableElementListAccess().getTableElementTableElementParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_12);
            	    lv_tableElement_2_0=ruleTableElement();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getTableElementListRule());
            	      						}
            	      						add(
            	      							current,
            	      							"tableElement",
            	      							lv_tableElement_2_0,
            	      							"org.xtext.example.mydsl_sql.SQL.TableElement");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop14;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTableElementList"


    // $ANTLR start "entryRuleTableElement"
    // InternalSQLParser.g:976:1: entryRuleTableElement returns [EObject current=null] : iv_ruleTableElement= ruleTableElement EOF ;
    public final EObject entryRuleTableElement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTableElement = null;


        try {
            // InternalSQLParser.g:976:53: (iv_ruleTableElement= ruleTableElement EOF )
            // InternalSQLParser.g:977:2: iv_ruleTableElement= ruleTableElement EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTableElementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTableElement=ruleTableElement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTableElement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTableElement"


    // $ANTLR start "ruleTableElement"
    // InternalSQLParser.g:983:1: ruleTableElement returns [EObject current=null] : ( ( (lv_columnDefinition_0_0= ruleColumnDefinition ) ) | ( (lv_tableConstraintDef_1_0= ruleTableConstraintDef ) ) ) ;
    public final EObject ruleTableElement() throws RecognitionException {
        EObject current = null;

        EObject lv_columnDefinition_0_0 = null;

        EObject lv_tableConstraintDef_1_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:989:2: ( ( ( (lv_columnDefinition_0_0= ruleColumnDefinition ) ) | ( (lv_tableConstraintDef_1_0= ruleTableConstraintDef ) ) ) )
            // InternalSQLParser.g:990:2: ( ( (lv_columnDefinition_0_0= ruleColumnDefinition ) ) | ( (lv_tableConstraintDef_1_0= ruleTableConstraintDef ) ) )
            {
            // InternalSQLParser.g:990:2: ( ( (lv_columnDefinition_0_0= ruleColumnDefinition ) ) | ( (lv_tableConstraintDef_1_0= ruleTableConstraintDef ) ) )
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==RULE_ID) ) {
                alt15=1;
            }
            else if ( (LA15_0==FOREIGN||LA15_0==PRIMARY) ) {
                alt15=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 15, 0, input);

                throw nvae;
            }
            switch (alt15) {
                case 1 :
                    // InternalSQLParser.g:991:3: ( (lv_columnDefinition_0_0= ruleColumnDefinition ) )
                    {
                    // InternalSQLParser.g:991:3: ( (lv_columnDefinition_0_0= ruleColumnDefinition ) )
                    // InternalSQLParser.g:992:4: (lv_columnDefinition_0_0= ruleColumnDefinition )
                    {
                    // InternalSQLParser.g:992:4: (lv_columnDefinition_0_0= ruleColumnDefinition )
                    // InternalSQLParser.g:993:5: lv_columnDefinition_0_0= ruleColumnDefinition
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getTableElementAccess().getColumnDefinitionColumnDefinitionParserRuleCall_0_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_columnDefinition_0_0=ruleColumnDefinition();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getTableElementRule());
                      					}
                      					set(
                      						current,
                      						"columnDefinition",
                      						lv_columnDefinition_0_0,
                      						"org.xtext.example.mydsl_sql.SQL.ColumnDefinition");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:1011:3: ( (lv_tableConstraintDef_1_0= ruleTableConstraintDef ) )
                    {
                    // InternalSQLParser.g:1011:3: ( (lv_tableConstraintDef_1_0= ruleTableConstraintDef ) )
                    // InternalSQLParser.g:1012:4: (lv_tableConstraintDef_1_0= ruleTableConstraintDef )
                    {
                    // InternalSQLParser.g:1012:4: (lv_tableConstraintDef_1_0= ruleTableConstraintDef )
                    // InternalSQLParser.g:1013:5: lv_tableConstraintDef_1_0= ruleTableConstraintDef
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getTableElementAccess().getTableConstraintDefTableConstraintDefParserRuleCall_1_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_tableConstraintDef_1_0=ruleTableConstraintDef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getTableElementRule());
                      					}
                      					set(
                      						current,
                      						"tableConstraintDef",
                      						lv_tableConstraintDef_1_0,
                      						"org.xtext.example.mydsl_sql.SQL.TableConstraintDef");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTableElement"


    // $ANTLR start "entryRuleColumnDefinition"
    // InternalSQLParser.g:1034:1: entryRuleColumnDefinition returns [EObject current=null] : iv_ruleColumnDefinition= ruleColumnDefinition EOF ;
    public final EObject entryRuleColumnDefinition() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleColumnDefinition = null;


        try {
            // InternalSQLParser.g:1034:57: (iv_ruleColumnDefinition= ruleColumnDefinition EOF )
            // InternalSQLParser.g:1035:2: iv_ruleColumnDefinition= ruleColumnDefinition EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getColumnDefinitionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleColumnDefinition=ruleColumnDefinition();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleColumnDefinition; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleColumnDefinition"


    // $ANTLR start "ruleColumnDefinition"
    // InternalSQLParser.g:1041:1: ruleColumnDefinition returns [EObject current=null] : ( ( (lv_columnName_0_0= RULE_ID ) ) ( (lv_fieldDefinition_1_0= ruleFieldDefinition ) ) ) ;
    public final EObject ruleColumnDefinition() throws RecognitionException {
        EObject current = null;

        Token lv_columnName_0_0=null;
        AntlrDatatypeRuleToken lv_fieldDefinition_1_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:1047:2: ( ( ( (lv_columnName_0_0= RULE_ID ) ) ( (lv_fieldDefinition_1_0= ruleFieldDefinition ) ) ) )
            // InternalSQLParser.g:1048:2: ( ( (lv_columnName_0_0= RULE_ID ) ) ( (lv_fieldDefinition_1_0= ruleFieldDefinition ) ) )
            {
            // InternalSQLParser.g:1048:2: ( ( (lv_columnName_0_0= RULE_ID ) ) ( (lv_fieldDefinition_1_0= ruleFieldDefinition ) ) )
            // InternalSQLParser.g:1049:3: ( (lv_columnName_0_0= RULE_ID ) ) ( (lv_fieldDefinition_1_0= ruleFieldDefinition ) )
            {
            // InternalSQLParser.g:1049:3: ( (lv_columnName_0_0= RULE_ID ) )
            // InternalSQLParser.g:1050:4: (lv_columnName_0_0= RULE_ID )
            {
            // InternalSQLParser.g:1050:4: (lv_columnName_0_0= RULE_ID )
            // InternalSQLParser.g:1051:5: lv_columnName_0_0= RULE_ID
            {
            lv_columnName_0_0=(Token)match(input,RULE_ID,FOLLOW_18); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_columnName_0_0, grammarAccess.getColumnDefinitionAccess().getColumnNameIDTerminalRuleCall_0_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getColumnDefinitionRule());
              					}
              					setWithLastConsumed(
              						current,
              						"columnName",
              						lv_columnName_0_0,
              						"org.xtext.example.mydsl_sql.SQL.ID");
              				
            }

            }


            }

            // InternalSQLParser.g:1067:3: ( (lv_fieldDefinition_1_0= ruleFieldDefinition ) )
            // InternalSQLParser.g:1068:4: (lv_fieldDefinition_1_0= ruleFieldDefinition )
            {
            // InternalSQLParser.g:1068:4: (lv_fieldDefinition_1_0= ruleFieldDefinition )
            // InternalSQLParser.g:1069:5: lv_fieldDefinition_1_0= ruleFieldDefinition
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getColumnDefinitionAccess().getFieldDefinitionFieldDefinitionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_fieldDefinition_1_0=ruleFieldDefinition();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getColumnDefinitionRule());
              					}
              					set(
              						current,
              						"fieldDefinition",
              						lv_fieldDefinition_1_0,
              						"org.xtext.example.mydsl_sql.SQL.FieldDefinition");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleColumnDefinition"


    // $ANTLR start "entryRuleTableConstraintDef"
    // InternalSQLParser.g:1090:1: entryRuleTableConstraintDef returns [EObject current=null] : iv_ruleTableConstraintDef= ruleTableConstraintDef EOF ;
    public final EObject entryRuleTableConstraintDef() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTableConstraintDef = null;


        try {
            // InternalSQLParser.g:1090:59: (iv_ruleTableConstraintDef= ruleTableConstraintDef EOF )
            // InternalSQLParser.g:1091:2: iv_ruleTableConstraintDef= ruleTableConstraintDef EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTableConstraintDefRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTableConstraintDef=ruleTableConstraintDef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTableConstraintDef; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTableConstraintDef"


    // $ANTLR start "ruleTableConstraintDef"
    // InternalSQLParser.g:1097:1: ruleTableConstraintDef returns [EObject current=null] : ( (otherlv_0= PRIMARY otherlv_1= KEY otherlv_2= LeftParenthesis ( (lv_columnNameList_3_0= ruleColumnNameList ) ) otherlv_4= RightParenthesis ) | (otherlv_5= FOREIGN otherlv_6= KEY otherlv_7= LeftParenthesis ( (lv_columnNameList_8_0= ruleColumnNameList ) ) otherlv_9= RightParenthesis otherlv_10= REFERENCES ( (lv_tableName_11_0= ruleTableName ) ) otherlv_12= LeftParenthesis ( (lv_refColumnNameList_13_0= ruleColumnNameList ) ) otherlv_14= RightParenthesis ) ) ;
    public final EObject ruleTableConstraintDef() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        Token otherlv_7=null;
        Token otherlv_9=null;
        Token otherlv_10=null;
        Token otherlv_12=null;
        Token otherlv_14=null;
        EObject lv_columnNameList_3_0 = null;

        EObject lv_columnNameList_8_0 = null;

        AntlrDatatypeRuleToken lv_tableName_11_0 = null;

        EObject lv_refColumnNameList_13_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:1103:2: ( ( (otherlv_0= PRIMARY otherlv_1= KEY otherlv_2= LeftParenthesis ( (lv_columnNameList_3_0= ruleColumnNameList ) ) otherlv_4= RightParenthesis ) | (otherlv_5= FOREIGN otherlv_6= KEY otherlv_7= LeftParenthesis ( (lv_columnNameList_8_0= ruleColumnNameList ) ) otherlv_9= RightParenthesis otherlv_10= REFERENCES ( (lv_tableName_11_0= ruleTableName ) ) otherlv_12= LeftParenthesis ( (lv_refColumnNameList_13_0= ruleColumnNameList ) ) otherlv_14= RightParenthesis ) ) )
            // InternalSQLParser.g:1104:2: ( (otherlv_0= PRIMARY otherlv_1= KEY otherlv_2= LeftParenthesis ( (lv_columnNameList_3_0= ruleColumnNameList ) ) otherlv_4= RightParenthesis ) | (otherlv_5= FOREIGN otherlv_6= KEY otherlv_7= LeftParenthesis ( (lv_columnNameList_8_0= ruleColumnNameList ) ) otherlv_9= RightParenthesis otherlv_10= REFERENCES ( (lv_tableName_11_0= ruleTableName ) ) otherlv_12= LeftParenthesis ( (lv_refColumnNameList_13_0= ruleColumnNameList ) ) otherlv_14= RightParenthesis ) )
            {
            // InternalSQLParser.g:1104:2: ( (otherlv_0= PRIMARY otherlv_1= KEY otherlv_2= LeftParenthesis ( (lv_columnNameList_3_0= ruleColumnNameList ) ) otherlv_4= RightParenthesis ) | (otherlv_5= FOREIGN otherlv_6= KEY otherlv_7= LeftParenthesis ( (lv_columnNameList_8_0= ruleColumnNameList ) ) otherlv_9= RightParenthesis otherlv_10= REFERENCES ( (lv_tableName_11_0= ruleTableName ) ) otherlv_12= LeftParenthesis ( (lv_refColumnNameList_13_0= ruleColumnNameList ) ) otherlv_14= RightParenthesis ) )
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==PRIMARY) ) {
                alt16=1;
            }
            else if ( (LA16_0==FOREIGN) ) {
                alt16=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 16, 0, input);

                throw nvae;
            }
            switch (alt16) {
                case 1 :
                    // InternalSQLParser.g:1105:3: (otherlv_0= PRIMARY otherlv_1= KEY otherlv_2= LeftParenthesis ( (lv_columnNameList_3_0= ruleColumnNameList ) ) otherlv_4= RightParenthesis )
                    {
                    // InternalSQLParser.g:1105:3: (otherlv_0= PRIMARY otherlv_1= KEY otherlv_2= LeftParenthesis ( (lv_columnNameList_3_0= ruleColumnNameList ) ) otherlv_4= RightParenthesis )
                    // InternalSQLParser.g:1106:4: otherlv_0= PRIMARY otherlv_1= KEY otherlv_2= LeftParenthesis ( (lv_columnNameList_3_0= ruleColumnNameList ) ) otherlv_4= RightParenthesis
                    {
                    otherlv_0=(Token)match(input,PRIMARY,FOLLOW_19); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_0, grammarAccess.getTableConstraintDefAccess().getPRIMARYKeyword_0_0());
                      			
                    }
                    otherlv_1=(Token)match(input,KEY,FOLLOW_11); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getTableConstraintDefAccess().getKEYKeyword_0_1());
                      			
                    }
                    otherlv_2=(Token)match(input,LeftParenthesis,FOLLOW_8); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getTableConstraintDefAccess().getLeftParenthesisKeyword_0_2());
                      			
                    }
                    // InternalSQLParser.g:1118:4: ( (lv_columnNameList_3_0= ruleColumnNameList ) )
                    // InternalSQLParser.g:1119:5: (lv_columnNameList_3_0= ruleColumnNameList )
                    {
                    // InternalSQLParser.g:1119:5: (lv_columnNameList_3_0= ruleColumnNameList )
                    // InternalSQLParser.g:1120:6: lv_columnNameList_3_0= ruleColumnNameList
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTableConstraintDefAccess().getColumnNameListColumnNameListParserRuleCall_0_3_0());
                      					
                    }
                    pushFollow(FOLLOW_9);
                    lv_columnNameList_3_0=ruleColumnNameList();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTableConstraintDefRule());
                      						}
                      						set(
                      							current,
                      							"columnNameList",
                      							lv_columnNameList_3_0,
                      							"org.xtext.example.mydsl_sql.SQL.ColumnNameList");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_4=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_4, grammarAccess.getTableConstraintDefAccess().getRightParenthesisKeyword_0_4());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:1143:3: (otherlv_5= FOREIGN otherlv_6= KEY otherlv_7= LeftParenthesis ( (lv_columnNameList_8_0= ruleColumnNameList ) ) otherlv_9= RightParenthesis otherlv_10= REFERENCES ( (lv_tableName_11_0= ruleTableName ) ) otherlv_12= LeftParenthesis ( (lv_refColumnNameList_13_0= ruleColumnNameList ) ) otherlv_14= RightParenthesis )
                    {
                    // InternalSQLParser.g:1143:3: (otherlv_5= FOREIGN otherlv_6= KEY otherlv_7= LeftParenthesis ( (lv_columnNameList_8_0= ruleColumnNameList ) ) otherlv_9= RightParenthesis otherlv_10= REFERENCES ( (lv_tableName_11_0= ruleTableName ) ) otherlv_12= LeftParenthesis ( (lv_refColumnNameList_13_0= ruleColumnNameList ) ) otherlv_14= RightParenthesis )
                    // InternalSQLParser.g:1144:4: otherlv_5= FOREIGN otherlv_6= KEY otherlv_7= LeftParenthesis ( (lv_columnNameList_8_0= ruleColumnNameList ) ) otherlv_9= RightParenthesis otherlv_10= REFERENCES ( (lv_tableName_11_0= ruleTableName ) ) otherlv_12= LeftParenthesis ( (lv_refColumnNameList_13_0= ruleColumnNameList ) ) otherlv_14= RightParenthesis
                    {
                    otherlv_5=(Token)match(input,FOREIGN,FOLLOW_19); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_5, grammarAccess.getTableConstraintDefAccess().getFOREIGNKeyword_1_0());
                      			
                    }
                    otherlv_6=(Token)match(input,KEY,FOLLOW_11); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_6, grammarAccess.getTableConstraintDefAccess().getKEYKeyword_1_1());
                      			
                    }
                    otherlv_7=(Token)match(input,LeftParenthesis,FOLLOW_8); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_7, grammarAccess.getTableConstraintDefAccess().getLeftParenthesisKeyword_1_2());
                      			
                    }
                    // InternalSQLParser.g:1156:4: ( (lv_columnNameList_8_0= ruleColumnNameList ) )
                    // InternalSQLParser.g:1157:5: (lv_columnNameList_8_0= ruleColumnNameList )
                    {
                    // InternalSQLParser.g:1157:5: (lv_columnNameList_8_0= ruleColumnNameList )
                    // InternalSQLParser.g:1158:6: lv_columnNameList_8_0= ruleColumnNameList
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTableConstraintDefAccess().getColumnNameListColumnNameListParserRuleCall_1_3_0());
                      					
                    }
                    pushFollow(FOLLOW_9);
                    lv_columnNameList_8_0=ruleColumnNameList();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTableConstraintDefRule());
                      						}
                      						set(
                      							current,
                      							"columnNameList",
                      							lv_columnNameList_8_0,
                      							"org.xtext.example.mydsl_sql.SQL.ColumnNameList");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_9=(Token)match(input,RightParenthesis,FOLLOW_20); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_9, grammarAccess.getTableConstraintDefAccess().getRightParenthesisKeyword_1_4());
                      			
                    }
                    otherlv_10=(Token)match(input,REFERENCES,FOLLOW_8); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_10, grammarAccess.getTableConstraintDefAccess().getREFERENCESKeyword_1_5());
                      			
                    }
                    // InternalSQLParser.g:1183:4: ( (lv_tableName_11_0= ruleTableName ) )
                    // InternalSQLParser.g:1184:5: (lv_tableName_11_0= ruleTableName )
                    {
                    // InternalSQLParser.g:1184:5: (lv_tableName_11_0= ruleTableName )
                    // InternalSQLParser.g:1185:6: lv_tableName_11_0= ruleTableName
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTableConstraintDefAccess().getTableNameTableNameParserRuleCall_1_6_0());
                      					
                    }
                    pushFollow(FOLLOW_11);
                    lv_tableName_11_0=ruleTableName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTableConstraintDefRule());
                      						}
                      						set(
                      							current,
                      							"tableName",
                      							lv_tableName_11_0,
                      							"org.xtext.example.mydsl_sql.SQL.TableName");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_12=(Token)match(input,LeftParenthesis,FOLLOW_8); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_12, grammarAccess.getTableConstraintDefAccess().getLeftParenthesisKeyword_1_7());
                      			
                    }
                    // InternalSQLParser.g:1206:4: ( (lv_refColumnNameList_13_0= ruleColumnNameList ) )
                    // InternalSQLParser.g:1207:5: (lv_refColumnNameList_13_0= ruleColumnNameList )
                    {
                    // InternalSQLParser.g:1207:5: (lv_refColumnNameList_13_0= ruleColumnNameList )
                    // InternalSQLParser.g:1208:6: lv_refColumnNameList_13_0= ruleColumnNameList
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTableConstraintDefAccess().getRefColumnNameListColumnNameListParserRuleCall_1_8_0());
                      					
                    }
                    pushFollow(FOLLOW_9);
                    lv_refColumnNameList_13_0=ruleColumnNameList();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTableConstraintDefRule());
                      						}
                      						set(
                      							current,
                      							"refColumnNameList",
                      							lv_refColumnNameList_13_0,
                      							"org.xtext.example.mydsl_sql.SQL.ColumnNameList");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_14=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_14, grammarAccess.getTableConstraintDefAccess().getRightParenthesisKeyword_1_9());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTableConstraintDef"


    // $ANTLR start "entryRuleColumnNameList"
    // InternalSQLParser.g:1234:1: entryRuleColumnNameList returns [EObject current=null] : iv_ruleColumnNameList= ruleColumnNameList EOF ;
    public final EObject entryRuleColumnNameList() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleColumnNameList = null;


        try {
            // InternalSQLParser.g:1234:55: (iv_ruleColumnNameList= ruleColumnNameList EOF )
            // InternalSQLParser.g:1235:2: iv_ruleColumnNameList= ruleColumnNameList EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getColumnNameListRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleColumnNameList=ruleColumnNameList();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleColumnNameList; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleColumnNameList"


    // $ANTLR start "ruleColumnNameList"
    // InternalSQLParser.g:1241:1: ruleColumnNameList returns [EObject current=null] : ( ( (lv_columnName_0_0= RULE_ID ) ) (otherlv_1= Comma ( (lv_columnName_2_0= RULE_ID ) ) )* ) ;
    public final EObject ruleColumnNameList() throws RecognitionException {
        EObject current = null;

        Token lv_columnName_0_0=null;
        Token otherlv_1=null;
        Token lv_columnName_2_0=null;


        	enterRule();

        try {
            // InternalSQLParser.g:1247:2: ( ( ( (lv_columnName_0_0= RULE_ID ) ) (otherlv_1= Comma ( (lv_columnName_2_0= RULE_ID ) ) )* ) )
            // InternalSQLParser.g:1248:2: ( ( (lv_columnName_0_0= RULE_ID ) ) (otherlv_1= Comma ( (lv_columnName_2_0= RULE_ID ) ) )* )
            {
            // InternalSQLParser.g:1248:2: ( ( (lv_columnName_0_0= RULE_ID ) ) (otherlv_1= Comma ( (lv_columnName_2_0= RULE_ID ) ) )* )
            // InternalSQLParser.g:1249:3: ( (lv_columnName_0_0= RULE_ID ) ) (otherlv_1= Comma ( (lv_columnName_2_0= RULE_ID ) ) )*
            {
            // InternalSQLParser.g:1249:3: ( (lv_columnName_0_0= RULE_ID ) )
            // InternalSQLParser.g:1250:4: (lv_columnName_0_0= RULE_ID )
            {
            // InternalSQLParser.g:1250:4: (lv_columnName_0_0= RULE_ID )
            // InternalSQLParser.g:1251:5: lv_columnName_0_0= RULE_ID
            {
            lv_columnName_0_0=(Token)match(input,RULE_ID,FOLLOW_12); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_columnName_0_0, grammarAccess.getColumnNameListAccess().getColumnNameIDTerminalRuleCall_0_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getColumnNameListRule());
              					}
              					addWithLastConsumed(
              						current,
              						"columnName",
              						lv_columnName_0_0,
              						"org.xtext.example.mydsl_sql.SQL.ID");
              				
            }

            }


            }

            // InternalSQLParser.g:1267:3: (otherlv_1= Comma ( (lv_columnName_2_0= RULE_ID ) ) )*
            loop17:
            do {
                int alt17=2;
                int LA17_0 = input.LA(1);

                if ( (LA17_0==Comma) ) {
                    alt17=1;
                }


                switch (alt17) {
            	case 1 :
            	    // InternalSQLParser.g:1268:4: otherlv_1= Comma ( (lv_columnName_2_0= RULE_ID ) )
            	    {
            	    otherlv_1=(Token)match(input,Comma,FOLLOW_8); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_1, grammarAccess.getColumnNameListAccess().getCommaKeyword_1_0());
            	      			
            	    }
            	    // InternalSQLParser.g:1272:4: ( (lv_columnName_2_0= RULE_ID ) )
            	    // InternalSQLParser.g:1273:5: (lv_columnName_2_0= RULE_ID )
            	    {
            	    // InternalSQLParser.g:1273:5: (lv_columnName_2_0= RULE_ID )
            	    // InternalSQLParser.g:1274:6: lv_columnName_2_0= RULE_ID
            	    {
            	    lv_columnName_2_0=(Token)match(input,RULE_ID,FOLLOW_12); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						newLeafNode(lv_columnName_2_0, grammarAccess.getColumnNameListAccess().getColumnNameIDTerminalRuleCall_1_1_0());
            	      					
            	    }
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElement(grammarAccess.getColumnNameListRule());
            	      						}
            	      						addWithLastConsumed(
            	      							current,
            	      							"columnName",
            	      							lv_columnName_2_0,
            	      							"org.xtext.example.mydsl_sql.SQL.ID");
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop17;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleColumnNameList"


    // $ANTLR start "entryRuleFieldDefinition"
    // InternalSQLParser.g:1295:1: entryRuleFieldDefinition returns [String current=null] : iv_ruleFieldDefinition= ruleFieldDefinition EOF ;
    public final String entryRuleFieldDefinition() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleFieldDefinition = null;


        try {
            // InternalSQLParser.g:1295:55: (iv_ruleFieldDefinition= ruleFieldDefinition EOF )
            // InternalSQLParser.g:1296:2: iv_ruleFieldDefinition= ruleFieldDefinition EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFieldDefinitionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFieldDefinition=ruleFieldDefinition();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFieldDefinition.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFieldDefinition"


    // $ANTLR start "ruleFieldDefinition"
    // InternalSQLParser.g:1302:1: ruleFieldDefinition returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_DataType_0= ruleDataType (this_ColumnAttribute_1= ruleColumnAttribute )* ) ;
    public final AntlrDatatypeRuleToken ruleFieldDefinition() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        AntlrDatatypeRuleToken this_DataType_0 = null;

        AntlrDatatypeRuleToken this_ColumnAttribute_1 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:1308:2: ( (this_DataType_0= ruleDataType (this_ColumnAttribute_1= ruleColumnAttribute )* ) )
            // InternalSQLParser.g:1309:2: (this_DataType_0= ruleDataType (this_ColumnAttribute_1= ruleColumnAttribute )* )
            {
            // InternalSQLParser.g:1309:2: (this_DataType_0= ruleDataType (this_ColumnAttribute_1= ruleColumnAttribute )* )
            // InternalSQLParser.g:1310:3: this_DataType_0= ruleDataType (this_ColumnAttribute_1= ruleColumnAttribute )*
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getFieldDefinitionAccess().getDataTypeParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_21);
            this_DataType_0=ruleDataType();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(this_DataType_0);
              		
            }
            if ( state.backtracking==0 ) {

              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:1320:3: (this_ColumnAttribute_1= ruleColumnAttribute )*
            loop18:
            do {
                int alt18=2;
                int LA18_0 = input.LA(1);

                if ( (LA18_0==AUTO_INCREMENT||LA18_0==COMMENT||LA18_0==DEFAULT||LA18_0==PRIMARY||LA18_0==UNIQUE||LA18_0==NULL||LA18_0==NOT) ) {
                    alt18=1;
                }


                switch (alt18) {
            	case 1 :
            	    // InternalSQLParser.g:1321:4: this_ColumnAttribute_1= ruleColumnAttribute
            	    {
            	    if ( state.backtracking==0 ) {

            	      				newCompositeNode(grammarAccess.getFieldDefinitionAccess().getColumnAttributeParserRuleCall_1());
            	      			
            	    }
            	    pushFollow(FOLLOW_21);
            	    this_ColumnAttribute_1=ruleColumnAttribute();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				current.merge(this_ColumnAttribute_1);
            	      			
            	    }
            	    if ( state.backtracking==0 ) {

            	      				afterParserOrEnumRuleCall();
            	      			
            	    }

            	    }
            	    break;

            	default :
            	    break loop18;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFieldDefinition"


    // $ANTLR start "entryRuleDataType"
    // InternalSQLParser.g:1336:1: entryRuleDataType returns [String current=null] : iv_ruleDataType= ruleDataType EOF ;
    public final String entryRuleDataType() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleDataType = null;


        try {
            // InternalSQLParser.g:1336:48: (iv_ruleDataType= ruleDataType EOF )
            // InternalSQLParser.g:1337:2: iv_ruleDataType= ruleDataType EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDataTypeRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDataType=ruleDataType();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDataType.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleDataType"


    // $ANTLR start "ruleDataType"
    // InternalSQLParser.g:1343:1: ruleDataType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_SimpleType_0= ruleSimpleType (this_FieldLength_1= ruleFieldLength )? (this_FieldOptions_2= ruleFieldOptions )? ) ;
    public final AntlrDatatypeRuleToken ruleDataType() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        AntlrDatatypeRuleToken this_SimpleType_0 = null;

        AntlrDatatypeRuleToken this_FieldLength_1 = null;

        AntlrDatatypeRuleToken this_FieldOptions_2 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:1349:2: ( (this_SimpleType_0= ruleSimpleType (this_FieldLength_1= ruleFieldLength )? (this_FieldOptions_2= ruleFieldOptions )? ) )
            // InternalSQLParser.g:1350:2: (this_SimpleType_0= ruleSimpleType (this_FieldLength_1= ruleFieldLength )? (this_FieldOptions_2= ruleFieldOptions )? )
            {
            // InternalSQLParser.g:1350:2: (this_SimpleType_0= ruleSimpleType (this_FieldLength_1= ruleFieldLength )? (this_FieldOptions_2= ruleFieldOptions )? )
            // InternalSQLParser.g:1351:3: this_SimpleType_0= ruleSimpleType (this_FieldLength_1= ruleFieldLength )? (this_FieldOptions_2= ruleFieldOptions )?
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getDataTypeAccess().getSimpleTypeParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_22);
            this_SimpleType_0=ruleSimpleType();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(this_SimpleType_0);
              		
            }
            if ( state.backtracking==0 ) {

              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:1361:3: (this_FieldLength_1= ruleFieldLength )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==LeftParenthesis) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // InternalSQLParser.g:1362:4: this_FieldLength_1= ruleFieldLength
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getDataTypeAccess().getFieldLengthParserRuleCall_1());
                      			
                    }
                    pushFollow(FOLLOW_23);
                    this_FieldLength_1=ruleFieldLength();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(this_FieldLength_1);
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }

            // InternalSQLParser.g:1373:3: (this_FieldOptions_2= ruleFieldOptions )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( ((LA20_0>=UNSIGNED && LA20_0<=ZEROFILL)||LA20_0==SIGNED) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // InternalSQLParser.g:1374:4: this_FieldOptions_2= ruleFieldOptions
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getDataTypeAccess().getFieldOptionsParserRuleCall_2());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_FieldOptions_2=ruleFieldOptions();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(this_FieldOptions_2);
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleDataType"


    // $ANTLR start "entryRuleSimpleType"
    // InternalSQLParser.g:1389:1: entryRuleSimpleType returns [String current=null] : iv_ruleSimpleType= ruleSimpleType EOF ;
    public final String entryRuleSimpleType() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleSimpleType = null;


        try {
            // InternalSQLParser.g:1389:50: (iv_ruleSimpleType= ruleSimpleType EOF )
            // InternalSQLParser.g:1390:2: iv_ruleSimpleType= ruleSimpleType EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSimpleTypeRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSimpleType=ruleSimpleType();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSimpleType.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSimpleType"


    // $ANTLR start "ruleSimpleType"
    // InternalSQLParser.g:1396:1: ruleSimpleType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= INT | kw= TINYINT | kw= SMALLINT | kw= MEDIUMINT | kw= BIGINT | kw= REAL | kw= DOUBLE | kw= FLOAT | kw= DECIMAL | kw= NUMERIC | kw= BIT | kw= BOOL | kw= BOOLEAN | kw= CHAR | kw= VARCHAR | kw= BINARY | kw= VARBINARY | kw= DATE | kw= TIME | kw= TIMESTAMP | kw= DATETIME | kw= BLOB | kw= TEXT ) ;
    public final AntlrDatatypeRuleToken ruleSimpleType() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            // InternalSQLParser.g:1402:2: ( (kw= INT | kw= TINYINT | kw= SMALLINT | kw= MEDIUMINT | kw= BIGINT | kw= REAL | kw= DOUBLE | kw= FLOAT | kw= DECIMAL | kw= NUMERIC | kw= BIT | kw= BOOL | kw= BOOLEAN | kw= CHAR | kw= VARCHAR | kw= BINARY | kw= VARBINARY | kw= DATE | kw= TIME | kw= TIMESTAMP | kw= DATETIME | kw= BLOB | kw= TEXT ) )
            // InternalSQLParser.g:1403:2: (kw= INT | kw= TINYINT | kw= SMALLINT | kw= MEDIUMINT | kw= BIGINT | kw= REAL | kw= DOUBLE | kw= FLOAT | kw= DECIMAL | kw= NUMERIC | kw= BIT | kw= BOOL | kw= BOOLEAN | kw= CHAR | kw= VARCHAR | kw= BINARY | kw= VARBINARY | kw= DATE | kw= TIME | kw= TIMESTAMP | kw= DATETIME | kw= BLOB | kw= TEXT )
            {
            // InternalSQLParser.g:1403:2: (kw= INT | kw= TINYINT | kw= SMALLINT | kw= MEDIUMINT | kw= BIGINT | kw= REAL | kw= DOUBLE | kw= FLOAT | kw= DECIMAL | kw= NUMERIC | kw= BIT | kw= BOOL | kw= BOOLEAN | kw= CHAR | kw= VARCHAR | kw= BINARY | kw= VARBINARY | kw= DATE | kw= TIME | kw= TIMESTAMP | kw= DATETIME | kw= BLOB | kw= TEXT )
            int alt21=23;
            switch ( input.LA(1) ) {
            case INT:
                {
                alt21=1;
                }
                break;
            case TINYINT:
                {
                alt21=2;
                }
                break;
            case SMALLINT:
                {
                alt21=3;
                }
                break;
            case MEDIUMINT:
                {
                alt21=4;
                }
                break;
            case BIGINT:
                {
                alt21=5;
                }
                break;
            case REAL:
                {
                alt21=6;
                }
                break;
            case DOUBLE:
                {
                alt21=7;
                }
                break;
            case FLOAT:
                {
                alt21=8;
                }
                break;
            case DECIMAL:
                {
                alt21=9;
                }
                break;
            case NUMERIC:
                {
                alt21=10;
                }
                break;
            case BIT:
                {
                alt21=11;
                }
                break;
            case BOOL:
                {
                alt21=12;
                }
                break;
            case BOOLEAN:
                {
                alt21=13;
                }
                break;
            case CHAR:
                {
                alt21=14;
                }
                break;
            case VARCHAR:
                {
                alt21=15;
                }
                break;
            case BINARY:
                {
                alt21=16;
                }
                break;
            case VARBINARY:
                {
                alt21=17;
                }
                break;
            case DATE:
                {
                alt21=18;
                }
                break;
            case TIME:
                {
                alt21=19;
                }
                break;
            case TIMESTAMP:
                {
                alt21=20;
                }
                break;
            case DATETIME:
                {
                alt21=21;
                }
                break;
            case BLOB:
                {
                alt21=22;
                }
                break;
            case TEXT:
                {
                alt21=23;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 21, 0, input);

                throw nvae;
            }

            switch (alt21) {
                case 1 :
                    // InternalSQLParser.g:1404:3: kw= INT
                    {
                    kw=(Token)match(input,INT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSimpleTypeAccess().getINTKeyword_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:1410:3: kw= TINYINT
                    {
                    kw=(Token)match(input,TINYINT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSimpleTypeAccess().getTINYINTKeyword_1());
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:1416:3: kw= SMALLINT
                    {
                    kw=(Token)match(input,SMALLINT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSimpleTypeAccess().getSMALLINTKeyword_2());
                      		
                    }

                    }
                    break;
                case 4 :
                    // InternalSQLParser.g:1422:3: kw= MEDIUMINT
                    {
                    kw=(Token)match(input,MEDIUMINT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSimpleTypeAccess().getMEDIUMINTKeyword_3());
                      		
                    }

                    }
                    break;
                case 5 :
                    // InternalSQLParser.g:1428:3: kw= BIGINT
                    {
                    kw=(Token)match(input,BIGINT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSimpleTypeAccess().getBIGINTKeyword_4());
                      		
                    }

                    }
                    break;
                case 6 :
                    // InternalSQLParser.g:1434:3: kw= REAL
                    {
                    kw=(Token)match(input,REAL,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSimpleTypeAccess().getREALKeyword_5());
                      		
                    }

                    }
                    break;
                case 7 :
                    // InternalSQLParser.g:1440:3: kw= DOUBLE
                    {
                    kw=(Token)match(input,DOUBLE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSimpleTypeAccess().getDOUBLEKeyword_6());
                      		
                    }

                    }
                    break;
                case 8 :
                    // InternalSQLParser.g:1446:3: kw= FLOAT
                    {
                    kw=(Token)match(input,FLOAT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSimpleTypeAccess().getFLOATKeyword_7());
                      		
                    }

                    }
                    break;
                case 9 :
                    // InternalSQLParser.g:1452:3: kw= DECIMAL
                    {
                    kw=(Token)match(input,DECIMAL,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSimpleTypeAccess().getDECIMALKeyword_8());
                      		
                    }

                    }
                    break;
                case 10 :
                    // InternalSQLParser.g:1458:3: kw= NUMERIC
                    {
                    kw=(Token)match(input,NUMERIC,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSimpleTypeAccess().getNUMERICKeyword_9());
                      		
                    }

                    }
                    break;
                case 11 :
                    // InternalSQLParser.g:1464:3: kw= BIT
                    {
                    kw=(Token)match(input,BIT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSimpleTypeAccess().getBITKeyword_10());
                      		
                    }

                    }
                    break;
                case 12 :
                    // InternalSQLParser.g:1470:3: kw= BOOL
                    {
                    kw=(Token)match(input,BOOL,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSimpleTypeAccess().getBOOLKeyword_11());
                      		
                    }

                    }
                    break;
                case 13 :
                    // InternalSQLParser.g:1476:3: kw= BOOLEAN
                    {
                    kw=(Token)match(input,BOOLEAN,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSimpleTypeAccess().getBOOLEANKeyword_12());
                      		
                    }

                    }
                    break;
                case 14 :
                    // InternalSQLParser.g:1482:3: kw= CHAR
                    {
                    kw=(Token)match(input,CHAR,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSimpleTypeAccess().getCHARKeyword_13());
                      		
                    }

                    }
                    break;
                case 15 :
                    // InternalSQLParser.g:1488:3: kw= VARCHAR
                    {
                    kw=(Token)match(input,VARCHAR,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSimpleTypeAccess().getVARCHARKeyword_14());
                      		
                    }

                    }
                    break;
                case 16 :
                    // InternalSQLParser.g:1494:3: kw= BINARY
                    {
                    kw=(Token)match(input,BINARY,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSimpleTypeAccess().getBINARYKeyword_15());
                      		
                    }

                    }
                    break;
                case 17 :
                    // InternalSQLParser.g:1500:3: kw= VARBINARY
                    {
                    kw=(Token)match(input,VARBINARY,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSimpleTypeAccess().getVARBINARYKeyword_16());
                      		
                    }

                    }
                    break;
                case 18 :
                    // InternalSQLParser.g:1506:3: kw= DATE
                    {
                    kw=(Token)match(input,DATE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSimpleTypeAccess().getDATEKeyword_17());
                      		
                    }

                    }
                    break;
                case 19 :
                    // InternalSQLParser.g:1512:3: kw= TIME
                    {
                    kw=(Token)match(input,TIME,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSimpleTypeAccess().getTIMEKeyword_18());
                      		
                    }

                    }
                    break;
                case 20 :
                    // InternalSQLParser.g:1518:3: kw= TIMESTAMP
                    {
                    kw=(Token)match(input,TIMESTAMP,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSimpleTypeAccess().getTIMESTAMPKeyword_19());
                      		
                    }

                    }
                    break;
                case 21 :
                    // InternalSQLParser.g:1524:3: kw= DATETIME
                    {
                    kw=(Token)match(input,DATETIME,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSimpleTypeAccess().getDATETIMEKeyword_20());
                      		
                    }

                    }
                    break;
                case 22 :
                    // InternalSQLParser.g:1530:3: kw= BLOB
                    {
                    kw=(Token)match(input,BLOB,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSimpleTypeAccess().getBLOBKeyword_21());
                      		
                    }

                    }
                    break;
                case 23 :
                    // InternalSQLParser.g:1536:3: kw= TEXT
                    {
                    kw=(Token)match(input,TEXT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSimpleTypeAccess().getTEXTKeyword_22());
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSimpleType"


    // $ANTLR start "entryRuleFieldLength"
    // InternalSQLParser.g:1545:1: entryRuleFieldLength returns [String current=null] : iv_ruleFieldLength= ruleFieldLength EOF ;
    public final String entryRuleFieldLength() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleFieldLength = null;


        try {
            // InternalSQLParser.g:1545:51: (iv_ruleFieldLength= ruleFieldLength EOF )
            // InternalSQLParser.g:1546:2: iv_ruleFieldLength= ruleFieldLength EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFieldLengthRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFieldLength=ruleFieldLength();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFieldLength.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFieldLength"


    // $ANTLR start "ruleFieldLength"
    // InternalSQLParser.g:1552:1: ruleFieldLength returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= LeftParenthesis this_UNSIGNED_1= RULE_UNSIGNED kw= RightParenthesis ) ;
    public final AntlrDatatypeRuleToken ruleFieldLength() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;
        Token this_UNSIGNED_1=null;


        	enterRule();

        try {
            // InternalSQLParser.g:1558:2: ( (kw= LeftParenthesis this_UNSIGNED_1= RULE_UNSIGNED kw= RightParenthesis ) )
            // InternalSQLParser.g:1559:2: (kw= LeftParenthesis this_UNSIGNED_1= RULE_UNSIGNED kw= RightParenthesis )
            {
            // InternalSQLParser.g:1559:2: (kw= LeftParenthesis this_UNSIGNED_1= RULE_UNSIGNED kw= RightParenthesis )
            // InternalSQLParser.g:1560:3: kw= LeftParenthesis this_UNSIGNED_1= RULE_UNSIGNED kw= RightParenthesis
            {
            kw=(Token)match(input,LeftParenthesis,FOLLOW_24); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(kw);
              			newLeafNode(kw, grammarAccess.getFieldLengthAccess().getLeftParenthesisKeyword_0());
              		
            }
            this_UNSIGNED_1=(Token)match(input,RULE_UNSIGNED,FOLLOW_9); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(this_UNSIGNED_1);
              		
            }
            if ( state.backtracking==0 ) {

              			newLeafNode(this_UNSIGNED_1, grammarAccess.getFieldLengthAccess().getUNSIGNEDTerminalRuleCall_1());
              		
            }
            kw=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(kw);
              			newLeafNode(kw, grammarAccess.getFieldLengthAccess().getRightParenthesisKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFieldLength"


    // $ANTLR start "entryRuleFieldOptions"
    // InternalSQLParser.g:1581:1: entryRuleFieldOptions returns [String current=null] : iv_ruleFieldOptions= ruleFieldOptions EOF ;
    public final String entryRuleFieldOptions() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleFieldOptions = null;


        try {
            // InternalSQLParser.g:1581:52: (iv_ruleFieldOptions= ruleFieldOptions EOF )
            // InternalSQLParser.g:1582:2: iv_ruleFieldOptions= ruleFieldOptions EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFieldOptionsRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFieldOptions=ruleFieldOptions();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFieldOptions.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFieldOptions"


    // $ANTLR start "ruleFieldOptions"
    // InternalSQLParser.g:1588:1: ruleFieldOptions returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= SIGNED | kw= UNSIGNED | kw= ZEROFILL )+ ;
    public final AntlrDatatypeRuleToken ruleFieldOptions() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            // InternalSQLParser.g:1594:2: ( (kw= SIGNED | kw= UNSIGNED | kw= ZEROFILL )+ )
            // InternalSQLParser.g:1595:2: (kw= SIGNED | kw= UNSIGNED | kw= ZEROFILL )+
            {
            // InternalSQLParser.g:1595:2: (kw= SIGNED | kw= UNSIGNED | kw= ZEROFILL )+
            int cnt22=0;
            loop22:
            do {
                int alt22=4;
                switch ( input.LA(1) ) {
                case SIGNED:
                    {
                    alt22=1;
                    }
                    break;
                case UNSIGNED:
                    {
                    alt22=2;
                    }
                    break;
                case ZEROFILL:
                    {
                    alt22=3;
                    }
                    break;

                }

                switch (alt22) {
            	case 1 :
            	    // InternalSQLParser.g:1596:3: kw= SIGNED
            	    {
            	    kw=(Token)match(input,SIGNED,FOLLOW_23); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      			current.merge(kw);
            	      			newLeafNode(kw, grammarAccess.getFieldOptionsAccess().getSIGNEDKeyword_0());
            	      		
            	    }

            	    }
            	    break;
            	case 2 :
            	    // InternalSQLParser.g:1602:3: kw= UNSIGNED
            	    {
            	    kw=(Token)match(input,UNSIGNED,FOLLOW_23); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      			current.merge(kw);
            	      			newLeafNode(kw, grammarAccess.getFieldOptionsAccess().getUNSIGNEDKeyword_1());
            	      		
            	    }

            	    }
            	    break;
            	case 3 :
            	    // InternalSQLParser.g:1608:3: kw= ZEROFILL
            	    {
            	    kw=(Token)match(input,ZEROFILL,FOLLOW_23); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      			current.merge(kw);
            	      			newLeafNode(kw, grammarAccess.getFieldOptionsAccess().getZEROFILLKeyword_2());
            	      		
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt22 >= 1 ) break loop22;
            	    if (state.backtracking>0) {state.failed=true; return current;}
                        EarlyExitException eee =
                            new EarlyExitException(22, input);
                        throw eee;
                }
                cnt22++;
            } while (true);


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFieldOptions"


    // $ANTLR start "entryRuleColumnAttribute"
    // InternalSQLParser.g:1617:1: entryRuleColumnAttribute returns [String current=null] : iv_ruleColumnAttribute= ruleColumnAttribute EOF ;
    public final String entryRuleColumnAttribute() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleColumnAttribute = null;


        try {
            // InternalSQLParser.g:1617:55: (iv_ruleColumnAttribute= ruleColumnAttribute EOF )
            // InternalSQLParser.g:1618:2: iv_ruleColumnAttribute= ruleColumnAttribute EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getColumnAttributeRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleColumnAttribute=ruleColumnAttribute();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleColumnAttribute.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleColumnAttribute"


    // $ANTLR start "ruleColumnAttribute"
    // InternalSQLParser.g:1624:1: ruleColumnAttribute returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_NullAttribute_0= ruleNullAttribute | this_DefaultValue_1= ruleDefaultValue | this_AutoIncrement_2= ruleAutoIncrement | this_PrimaryKey_3= rulePrimaryKey | this_UniqueKey_4= ruleUniqueKey | this_Comment_5= ruleComment ) ;
    public final AntlrDatatypeRuleToken ruleColumnAttribute() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        AntlrDatatypeRuleToken this_NullAttribute_0 = null;

        AntlrDatatypeRuleToken this_DefaultValue_1 = null;

        AntlrDatatypeRuleToken this_AutoIncrement_2 = null;

        AntlrDatatypeRuleToken this_PrimaryKey_3 = null;

        AntlrDatatypeRuleToken this_UniqueKey_4 = null;

        AntlrDatatypeRuleToken this_Comment_5 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:1630:2: ( (this_NullAttribute_0= ruleNullAttribute | this_DefaultValue_1= ruleDefaultValue | this_AutoIncrement_2= ruleAutoIncrement | this_PrimaryKey_3= rulePrimaryKey | this_UniqueKey_4= ruleUniqueKey | this_Comment_5= ruleComment ) )
            // InternalSQLParser.g:1631:2: (this_NullAttribute_0= ruleNullAttribute | this_DefaultValue_1= ruleDefaultValue | this_AutoIncrement_2= ruleAutoIncrement | this_PrimaryKey_3= rulePrimaryKey | this_UniqueKey_4= ruleUniqueKey | this_Comment_5= ruleComment )
            {
            // InternalSQLParser.g:1631:2: (this_NullAttribute_0= ruleNullAttribute | this_DefaultValue_1= ruleDefaultValue | this_AutoIncrement_2= ruleAutoIncrement | this_PrimaryKey_3= rulePrimaryKey | this_UniqueKey_4= ruleUniqueKey | this_Comment_5= ruleComment )
            int alt23=6;
            switch ( input.LA(1) ) {
            case NULL:
            case NOT:
                {
                alt23=1;
                }
                break;
            case DEFAULT:
                {
                alt23=2;
                }
                break;
            case AUTO_INCREMENT:
                {
                alt23=3;
                }
                break;
            case PRIMARY:
                {
                alt23=4;
                }
                break;
            case UNIQUE:
                {
                alt23=5;
                }
                break;
            case COMMENT:
                {
                alt23=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 23, 0, input);

                throw nvae;
            }

            switch (alt23) {
                case 1 :
                    // InternalSQLParser.g:1632:3: this_NullAttribute_0= ruleNullAttribute
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getColumnAttributeAccess().getNullAttributeParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_NullAttribute_0=ruleNullAttribute();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_NullAttribute_0);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:1643:3: this_DefaultValue_1= ruleDefaultValue
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getColumnAttributeAccess().getDefaultValueParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_DefaultValue_1=ruleDefaultValue();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_DefaultValue_1);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:1654:3: this_AutoIncrement_2= ruleAutoIncrement
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getColumnAttributeAccess().getAutoIncrementParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_AutoIncrement_2=ruleAutoIncrement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_AutoIncrement_2);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 4 :
                    // InternalSQLParser.g:1665:3: this_PrimaryKey_3= rulePrimaryKey
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getColumnAttributeAccess().getPrimaryKeyParserRuleCall_3());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_PrimaryKey_3=rulePrimaryKey();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_PrimaryKey_3);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 5 :
                    // InternalSQLParser.g:1676:3: this_UniqueKey_4= ruleUniqueKey
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getColumnAttributeAccess().getUniqueKeyParserRuleCall_4());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_UniqueKey_4=ruleUniqueKey();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_UniqueKey_4);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 6 :
                    // InternalSQLParser.g:1687:3: this_Comment_5= ruleComment
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getColumnAttributeAccess().getCommentParserRuleCall_5());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Comment_5=ruleComment();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_Comment_5);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleColumnAttribute"


    // $ANTLR start "entryRuleNullAttribute"
    // InternalSQLParser.g:1701:1: entryRuleNullAttribute returns [String current=null] : iv_ruleNullAttribute= ruleNullAttribute EOF ;
    public final String entryRuleNullAttribute() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleNullAttribute = null;


        try {
            // InternalSQLParser.g:1701:53: (iv_ruleNullAttribute= ruleNullAttribute EOF )
            // InternalSQLParser.g:1702:2: iv_ruleNullAttribute= ruleNullAttribute EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNullAttributeRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNullAttribute=ruleNullAttribute();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNullAttribute.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleNullAttribute"


    // $ANTLR start "ruleNullAttribute"
    // InternalSQLParser.g:1708:1: ruleNullAttribute returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : ( (kw= NOT )? kw= NULL ) ;
    public final AntlrDatatypeRuleToken ruleNullAttribute() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            // InternalSQLParser.g:1714:2: ( ( (kw= NOT )? kw= NULL ) )
            // InternalSQLParser.g:1715:2: ( (kw= NOT )? kw= NULL )
            {
            // InternalSQLParser.g:1715:2: ( (kw= NOT )? kw= NULL )
            // InternalSQLParser.g:1716:3: (kw= NOT )? kw= NULL
            {
            // InternalSQLParser.g:1716:3: (kw= NOT )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==NOT) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // InternalSQLParser.g:1717:4: kw= NOT
                    {
                    kw=(Token)match(input,NOT,FOLLOW_25); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getNullAttributeAccess().getNOTKeyword_0());
                      			
                    }

                    }
                    break;

            }

            kw=(Token)match(input,NULL,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(kw);
              			newLeafNode(kw, grammarAccess.getNullAttributeAccess().getNULLKeyword_1());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleNullAttribute"


    // $ANTLR start "entryRuleDefaultValue"
    // InternalSQLParser.g:1732:1: entryRuleDefaultValue returns [String current=null] : iv_ruleDefaultValue= ruleDefaultValue EOF ;
    public final String entryRuleDefaultValue() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleDefaultValue = null;


        try {
            // InternalSQLParser.g:1732:52: (iv_ruleDefaultValue= ruleDefaultValue EOF )
            // InternalSQLParser.g:1733:2: iv_ruleDefaultValue= ruleDefaultValue EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDefaultValueRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDefaultValue=ruleDefaultValue();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDefaultValue.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleDefaultValue"


    // $ANTLR start "ruleDefaultValue"
    // InternalSQLParser.g:1739:1: ruleDefaultValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= DEFAULT (this_SignedLiteral_1= ruleSignedLiteral | kw= NOW ) ) ;
    public final AntlrDatatypeRuleToken ruleDefaultValue() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;
        AntlrDatatypeRuleToken this_SignedLiteral_1 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:1745:2: ( (kw= DEFAULT (this_SignedLiteral_1= ruleSignedLiteral | kw= NOW ) ) )
            // InternalSQLParser.g:1746:2: (kw= DEFAULT (this_SignedLiteral_1= ruleSignedLiteral | kw= NOW ) )
            {
            // InternalSQLParser.g:1746:2: (kw= DEFAULT (this_SignedLiteral_1= ruleSignedLiteral | kw= NOW ) )
            // InternalSQLParser.g:1747:3: kw= DEFAULT (this_SignedLiteral_1= ruleSignedLiteral | kw= NOW )
            {
            kw=(Token)match(input,DEFAULT,FOLLOW_26); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(kw);
              			newLeafNode(kw, grammarAccess.getDefaultValueAccess().getDEFAULTKeyword_0());
              		
            }
            // InternalSQLParser.g:1752:3: (this_SignedLiteral_1= ruleSignedLiteral | kw= NOW )
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==TIMESTAMP||LA25_0==FALSE||LA25_0==DATE||LA25_0==NULL||(LA25_0>=TIME && LA25_0<=TRUE)||LA25_0==PlusSign||LA25_0==HyphenMinus||(LA25_0>=RULE_UNSIGNED && LA25_0<=RULE_INT)||LA25_0==RULE_STRING_) ) {
                alt25=1;
            }
            else if ( (LA25_0==NOW) ) {
                alt25=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 25, 0, input);

                throw nvae;
            }
            switch (alt25) {
                case 1 :
                    // InternalSQLParser.g:1753:4: this_SignedLiteral_1= ruleSignedLiteral
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getDefaultValueAccess().getSignedLiteralParserRuleCall_1_0());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_SignedLiteral_1=ruleSignedLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(this_SignedLiteral_1);
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:1764:4: kw= NOW
                    {
                    kw=(Token)match(input,NOW,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getDefaultValueAccess().getNOWKeyword_1_1());
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleDefaultValue"


    // $ANTLR start "entryRuleAutoIncrement"
    // InternalSQLParser.g:1774:1: entryRuleAutoIncrement returns [String current=null] : iv_ruleAutoIncrement= ruleAutoIncrement EOF ;
    public final String entryRuleAutoIncrement() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleAutoIncrement = null;


        try {
            // InternalSQLParser.g:1774:53: (iv_ruleAutoIncrement= ruleAutoIncrement EOF )
            // InternalSQLParser.g:1775:2: iv_ruleAutoIncrement= ruleAutoIncrement EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAutoIncrementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAutoIncrement=ruleAutoIncrement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAutoIncrement.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleAutoIncrement"


    // $ANTLR start "ruleAutoIncrement"
    // InternalSQLParser.g:1781:1: ruleAutoIncrement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : kw= AUTO_INCREMENT ;
    public final AntlrDatatypeRuleToken ruleAutoIncrement() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            // InternalSQLParser.g:1787:2: (kw= AUTO_INCREMENT )
            // InternalSQLParser.g:1788:2: kw= AUTO_INCREMENT
            {
            kw=(Token)match(input,AUTO_INCREMENT,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current.merge(kw);
              		newLeafNode(kw, grammarAccess.getAutoIncrementAccess().getAUTO_INCREMENTKeyword());
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleAutoIncrement"


    // $ANTLR start "entryRulePrimaryKey"
    // InternalSQLParser.g:1796:1: entryRulePrimaryKey returns [String current=null] : iv_rulePrimaryKey= rulePrimaryKey EOF ;
    public final String entryRulePrimaryKey() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_rulePrimaryKey = null;


        try {
            // InternalSQLParser.g:1796:50: (iv_rulePrimaryKey= rulePrimaryKey EOF )
            // InternalSQLParser.g:1797:2: iv_rulePrimaryKey= rulePrimaryKey EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPrimaryKeyRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePrimaryKey=rulePrimaryKey();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePrimaryKey.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePrimaryKey"


    // $ANTLR start "rulePrimaryKey"
    // InternalSQLParser.g:1803:1: rulePrimaryKey returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= PRIMARY kw= KEY ) ;
    public final AntlrDatatypeRuleToken rulePrimaryKey() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            // InternalSQLParser.g:1809:2: ( (kw= PRIMARY kw= KEY ) )
            // InternalSQLParser.g:1810:2: (kw= PRIMARY kw= KEY )
            {
            // InternalSQLParser.g:1810:2: (kw= PRIMARY kw= KEY )
            // InternalSQLParser.g:1811:3: kw= PRIMARY kw= KEY
            {
            kw=(Token)match(input,PRIMARY,FOLLOW_19); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(kw);
              			newLeafNode(kw, grammarAccess.getPrimaryKeyAccess().getPRIMARYKeyword_0());
              		
            }
            kw=(Token)match(input,KEY,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(kw);
              			newLeafNode(kw, grammarAccess.getPrimaryKeyAccess().getKEYKeyword_1());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePrimaryKey"


    // $ANTLR start "entryRuleUniqueKey"
    // InternalSQLParser.g:1825:1: entryRuleUniqueKey returns [String current=null] : iv_ruleUniqueKey= ruleUniqueKey EOF ;
    public final String entryRuleUniqueKey() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleUniqueKey = null;


        try {
            // InternalSQLParser.g:1825:49: (iv_ruleUniqueKey= ruleUniqueKey EOF )
            // InternalSQLParser.g:1826:2: iv_ruleUniqueKey= ruleUniqueKey EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getUniqueKeyRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleUniqueKey=ruleUniqueKey();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleUniqueKey.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleUniqueKey"


    // $ANTLR start "ruleUniqueKey"
    // InternalSQLParser.g:1832:1: ruleUniqueKey returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : kw= UNIQUE ;
    public final AntlrDatatypeRuleToken ruleUniqueKey() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            // InternalSQLParser.g:1838:2: (kw= UNIQUE )
            // InternalSQLParser.g:1839:2: kw= UNIQUE
            {
            kw=(Token)match(input,UNIQUE,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current.merge(kw);
              		newLeafNode(kw, grammarAccess.getUniqueKeyAccess().getUNIQUEKeyword());
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleUniqueKey"


    // $ANTLR start "entryRuleComment"
    // InternalSQLParser.g:1847:1: entryRuleComment returns [String current=null] : iv_ruleComment= ruleComment EOF ;
    public final String entryRuleComment() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleComment = null;


        try {
            // InternalSQLParser.g:1847:47: (iv_ruleComment= ruleComment EOF )
            // InternalSQLParser.g:1848:2: iv_ruleComment= ruleComment EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCommentRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleComment=ruleComment();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleComment.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleComment"


    // $ANTLR start "ruleComment"
    // InternalSQLParser.g:1854:1: ruleComment returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= COMMENT this_TextLiteral_1= ruleTextLiteral ) ;
    public final AntlrDatatypeRuleToken ruleComment() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;
        AntlrDatatypeRuleToken this_TextLiteral_1 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:1860:2: ( (kw= COMMENT this_TextLiteral_1= ruleTextLiteral ) )
            // InternalSQLParser.g:1861:2: (kw= COMMENT this_TextLiteral_1= ruleTextLiteral )
            {
            // InternalSQLParser.g:1861:2: (kw= COMMENT this_TextLiteral_1= ruleTextLiteral )
            // InternalSQLParser.g:1862:3: kw= COMMENT this_TextLiteral_1= ruleTextLiteral
            {
            kw=(Token)match(input,COMMENT,FOLLOW_27); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(kw);
              			newLeafNode(kw, grammarAccess.getCommentAccess().getCOMMENTKeyword_0());
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getCommentAccess().getTextLiteralParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_2);
            this_TextLiteral_1=ruleTextLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(this_TextLiteral_1);
              		
            }
            if ( state.backtracking==0 ) {

              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleComment"


    // $ANTLR start "entryRuleTableName"
    // InternalSQLParser.g:1881:1: entryRuleTableName returns [String current=null] : iv_ruleTableName= ruleTableName EOF ;
    public final String entryRuleTableName() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleTableName = null;


        try {
            // InternalSQLParser.g:1881:49: (iv_ruleTableName= ruleTableName EOF )
            // InternalSQLParser.g:1882:2: iv_ruleTableName= ruleTableName EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTableNameRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTableName=ruleTableName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTableName.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTableName"


    // $ANTLR start "ruleTableName"
    // InternalSQLParser.g:1888:1: ruleTableName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : this_ID_0= RULE_ID ;
    public final AntlrDatatypeRuleToken ruleTableName() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_ID_0=null;


        	enterRule();

        try {
            // InternalSQLParser.g:1894:2: (this_ID_0= RULE_ID )
            // InternalSQLParser.g:1895:2: this_ID_0= RULE_ID
            {
            this_ID_0=(Token)match(input,RULE_ID,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current.merge(this_ID_0);
              	
            }
            if ( state.backtracking==0 ) {

              		newLeafNode(this_ID_0, grammarAccess.getTableNameAccess().getIDTerminalRuleCall());
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTableName"


    // $ANTLR start "entryRuleWithQuery"
    // InternalSQLParser.g:1905:1: entryRuleWithQuery returns [EObject current=null] : iv_ruleWithQuery= ruleWithQuery EOF ;
    public final EObject entryRuleWithQuery() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleWithQuery = null;


        try {
            // InternalSQLParser.g:1905:50: (iv_ruleWithQuery= ruleWithQuery EOF )
            // InternalSQLParser.g:1906:2: iv_ruleWithQuery= ruleWithQuery EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getWithQueryRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleWithQuery=ruleWithQuery();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleWithQuery; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleWithQuery"


    // $ANTLR start "ruleWithQuery"
    // InternalSQLParser.g:1912:1: ruleWithQuery returns [EObject current=null] : ( ( (lv_w_0_0= WITH ) ) ( (lv_wname_1_0= ruleDbObjectName ) ) ( (lv_withCols_2_0= ruleWithColumns ) )? otherlv_3= AS otherlv_4= LeftParenthesis ( (lv_query_5_0= ruleSelectQuery ) ) otherlv_6= RightParenthesis (otherlv_7= Comma ( (lv_additionalWname_8_0= ruleDbObjectName ) ) ( (lv_additionalWithCols_9_0= ruleWithColumns ) )? otherlv_10= AS otherlv_11= LeftParenthesis ( (lv_additionalQueries_12_0= ruleSelectQuery ) ) otherlv_13= RightParenthesis )* ) ;
    public final EObject ruleWithQuery() throws RecognitionException {
        EObject current = null;

        Token lv_w_0_0=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        Token otherlv_7=null;
        Token otherlv_10=null;
        Token otherlv_11=null;
        Token otherlv_13=null;
        EObject lv_wname_1_0 = null;

        EObject lv_withCols_2_0 = null;

        EObject lv_query_5_0 = null;

        EObject lv_additionalWname_8_0 = null;

        EObject lv_additionalWithCols_9_0 = null;

        EObject lv_additionalQueries_12_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:1918:2: ( ( ( (lv_w_0_0= WITH ) ) ( (lv_wname_1_0= ruleDbObjectName ) ) ( (lv_withCols_2_0= ruleWithColumns ) )? otherlv_3= AS otherlv_4= LeftParenthesis ( (lv_query_5_0= ruleSelectQuery ) ) otherlv_6= RightParenthesis (otherlv_7= Comma ( (lv_additionalWname_8_0= ruleDbObjectName ) ) ( (lv_additionalWithCols_9_0= ruleWithColumns ) )? otherlv_10= AS otherlv_11= LeftParenthesis ( (lv_additionalQueries_12_0= ruleSelectQuery ) ) otherlv_13= RightParenthesis )* ) )
            // InternalSQLParser.g:1919:2: ( ( (lv_w_0_0= WITH ) ) ( (lv_wname_1_0= ruleDbObjectName ) ) ( (lv_withCols_2_0= ruleWithColumns ) )? otherlv_3= AS otherlv_4= LeftParenthesis ( (lv_query_5_0= ruleSelectQuery ) ) otherlv_6= RightParenthesis (otherlv_7= Comma ( (lv_additionalWname_8_0= ruleDbObjectName ) ) ( (lv_additionalWithCols_9_0= ruleWithColumns ) )? otherlv_10= AS otherlv_11= LeftParenthesis ( (lv_additionalQueries_12_0= ruleSelectQuery ) ) otherlv_13= RightParenthesis )* )
            {
            // InternalSQLParser.g:1919:2: ( ( (lv_w_0_0= WITH ) ) ( (lv_wname_1_0= ruleDbObjectName ) ) ( (lv_withCols_2_0= ruleWithColumns ) )? otherlv_3= AS otherlv_4= LeftParenthesis ( (lv_query_5_0= ruleSelectQuery ) ) otherlv_6= RightParenthesis (otherlv_7= Comma ( (lv_additionalWname_8_0= ruleDbObjectName ) ) ( (lv_additionalWithCols_9_0= ruleWithColumns ) )? otherlv_10= AS otherlv_11= LeftParenthesis ( (lv_additionalQueries_12_0= ruleSelectQuery ) ) otherlv_13= RightParenthesis )* )
            // InternalSQLParser.g:1920:3: ( (lv_w_0_0= WITH ) ) ( (lv_wname_1_0= ruleDbObjectName ) ) ( (lv_withCols_2_0= ruleWithColumns ) )? otherlv_3= AS otherlv_4= LeftParenthesis ( (lv_query_5_0= ruleSelectQuery ) ) otherlv_6= RightParenthesis (otherlv_7= Comma ( (lv_additionalWname_8_0= ruleDbObjectName ) ) ( (lv_additionalWithCols_9_0= ruleWithColumns ) )? otherlv_10= AS otherlv_11= LeftParenthesis ( (lv_additionalQueries_12_0= ruleSelectQuery ) ) otherlv_13= RightParenthesis )*
            {
            // InternalSQLParser.g:1920:3: ( (lv_w_0_0= WITH ) )
            // InternalSQLParser.g:1921:4: (lv_w_0_0= WITH )
            {
            // InternalSQLParser.g:1921:4: (lv_w_0_0= WITH )
            // InternalSQLParser.g:1922:5: lv_w_0_0= WITH
            {
            lv_w_0_0=(Token)match(input,WITH,FOLLOW_28); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_w_0_0, grammarAccess.getWithQueryAccess().getWWITHKeyword_0_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getWithQueryRule());
              					}
              					setWithLastConsumed(current, "w", lv_w_0_0, "WITH");
              				
            }

            }


            }

            // InternalSQLParser.g:1934:3: ( (lv_wname_1_0= ruleDbObjectName ) )
            // InternalSQLParser.g:1935:4: (lv_wname_1_0= ruleDbObjectName )
            {
            // InternalSQLParser.g:1935:4: (lv_wname_1_0= ruleDbObjectName )
            // InternalSQLParser.g:1936:5: lv_wname_1_0= ruleDbObjectName
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getWithQueryAccess().getWnameDbObjectNameParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_29);
            lv_wname_1_0=ruleDbObjectName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getWithQueryRule());
              					}
              					set(
              						current,
              						"wname",
              						lv_wname_1_0,
              						"org.xtext.example.mydsl_sql.SQL.DbObjectName");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:1953:3: ( (lv_withCols_2_0= ruleWithColumns ) )?
            int alt26=2;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==LeftParenthesis) ) {
                alt26=1;
            }
            switch (alt26) {
                case 1 :
                    // InternalSQLParser.g:1954:4: (lv_withCols_2_0= ruleWithColumns )
                    {
                    // InternalSQLParser.g:1954:4: (lv_withCols_2_0= ruleWithColumns )
                    // InternalSQLParser.g:1955:5: lv_withCols_2_0= ruleWithColumns
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getWithQueryAccess().getWithColsWithColumnsParserRuleCall_2_0());
                      				
                    }
                    pushFollow(FOLLOW_30);
                    lv_withCols_2_0=ruleWithColumns();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getWithQueryRule());
                      					}
                      					set(
                      						current,
                      						"withCols",
                      						lv_withCols_2_0,
                      						"org.xtext.example.mydsl_sql.SQL.WithColumns");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_3=(Token)match(input,AS,FOLLOW_11); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getWithQueryAccess().getASKeyword_3());
              		
            }
            otherlv_4=(Token)match(input,LeftParenthesis,FOLLOW_3); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getWithQueryAccess().getLeftParenthesisKeyword_4());
              		
            }
            // InternalSQLParser.g:1980:3: ( (lv_query_5_0= ruleSelectQuery ) )
            // InternalSQLParser.g:1981:4: (lv_query_5_0= ruleSelectQuery )
            {
            // InternalSQLParser.g:1981:4: (lv_query_5_0= ruleSelectQuery )
            // InternalSQLParser.g:1982:5: lv_query_5_0= ruleSelectQuery
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getWithQueryAccess().getQuerySelectQueryParserRuleCall_5_0());
              				
            }
            pushFollow(FOLLOW_9);
            lv_query_5_0=ruleSelectQuery();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getWithQueryRule());
              					}
              					set(
              						current,
              						"query",
              						lv_query_5_0,
              						"org.xtext.example.mydsl_sql.SQL.SelectQuery");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_6=(Token)match(input,RightParenthesis,FOLLOW_12); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_6, grammarAccess.getWithQueryAccess().getRightParenthesisKeyword_6());
              		
            }
            // InternalSQLParser.g:2003:3: (otherlv_7= Comma ( (lv_additionalWname_8_0= ruleDbObjectName ) ) ( (lv_additionalWithCols_9_0= ruleWithColumns ) )? otherlv_10= AS otherlv_11= LeftParenthesis ( (lv_additionalQueries_12_0= ruleSelectQuery ) ) otherlv_13= RightParenthesis )*
            loop28:
            do {
                int alt28=2;
                int LA28_0 = input.LA(1);

                if ( (LA28_0==Comma) ) {
                    alt28=1;
                }


                switch (alt28) {
            	case 1 :
            	    // InternalSQLParser.g:2004:4: otherlv_7= Comma ( (lv_additionalWname_8_0= ruleDbObjectName ) ) ( (lv_additionalWithCols_9_0= ruleWithColumns ) )? otherlv_10= AS otherlv_11= LeftParenthesis ( (lv_additionalQueries_12_0= ruleSelectQuery ) ) otherlv_13= RightParenthesis
            	    {
            	    otherlv_7=(Token)match(input,Comma,FOLLOW_28); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_7, grammarAccess.getWithQueryAccess().getCommaKeyword_7_0());
            	      			
            	    }
            	    // InternalSQLParser.g:2008:4: ( (lv_additionalWname_8_0= ruleDbObjectName ) )
            	    // InternalSQLParser.g:2009:5: (lv_additionalWname_8_0= ruleDbObjectName )
            	    {
            	    // InternalSQLParser.g:2009:5: (lv_additionalWname_8_0= ruleDbObjectName )
            	    // InternalSQLParser.g:2010:6: lv_additionalWname_8_0= ruleDbObjectName
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getWithQueryAccess().getAdditionalWnameDbObjectNameParserRuleCall_7_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_29);
            	    lv_additionalWname_8_0=ruleDbObjectName();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getWithQueryRule());
            	      						}
            	      						add(
            	      							current,
            	      							"additionalWname",
            	      							lv_additionalWname_8_0,
            	      							"org.xtext.example.mydsl_sql.SQL.DbObjectName");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }

            	    // InternalSQLParser.g:2027:4: ( (lv_additionalWithCols_9_0= ruleWithColumns ) )?
            	    int alt27=2;
            	    int LA27_0 = input.LA(1);

            	    if ( (LA27_0==LeftParenthesis) ) {
            	        alt27=1;
            	    }
            	    switch (alt27) {
            	        case 1 :
            	            // InternalSQLParser.g:2028:5: (lv_additionalWithCols_9_0= ruleWithColumns )
            	            {
            	            // InternalSQLParser.g:2028:5: (lv_additionalWithCols_9_0= ruleWithColumns )
            	            // InternalSQLParser.g:2029:6: lv_additionalWithCols_9_0= ruleWithColumns
            	            {
            	            if ( state.backtracking==0 ) {

            	              						newCompositeNode(grammarAccess.getWithQueryAccess().getAdditionalWithColsWithColumnsParserRuleCall_7_2_0());
            	              					
            	            }
            	            pushFollow(FOLLOW_30);
            	            lv_additionalWithCols_9_0=ruleWithColumns();

            	            state._fsp--;
            	            if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              						if (current==null) {
            	              							current = createModelElementForParent(grammarAccess.getWithQueryRule());
            	              						}
            	              						add(
            	              							current,
            	              							"additionalWithCols",
            	              							lv_additionalWithCols_9_0,
            	              							"org.xtext.example.mydsl_sql.SQL.WithColumns");
            	              						afterParserOrEnumRuleCall();
            	              					
            	            }

            	            }


            	            }
            	            break;

            	    }

            	    otherlv_10=(Token)match(input,AS,FOLLOW_11); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_10, grammarAccess.getWithQueryAccess().getASKeyword_7_3());
            	      			
            	    }
            	    otherlv_11=(Token)match(input,LeftParenthesis,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_11, grammarAccess.getWithQueryAccess().getLeftParenthesisKeyword_7_4());
            	      			
            	    }
            	    // InternalSQLParser.g:2054:4: ( (lv_additionalQueries_12_0= ruleSelectQuery ) )
            	    // InternalSQLParser.g:2055:5: (lv_additionalQueries_12_0= ruleSelectQuery )
            	    {
            	    // InternalSQLParser.g:2055:5: (lv_additionalQueries_12_0= ruleSelectQuery )
            	    // InternalSQLParser.g:2056:6: lv_additionalQueries_12_0= ruleSelectQuery
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getWithQueryAccess().getAdditionalQueriesSelectQueryParserRuleCall_7_5_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_9);
            	    lv_additionalQueries_12_0=ruleSelectQuery();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getWithQueryRule());
            	      						}
            	      						add(
            	      							current,
            	      							"additionalQueries",
            	      							lv_additionalQueries_12_0,
            	      							"org.xtext.example.mydsl_sql.SQL.SelectQuery");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }

            	    otherlv_13=(Token)match(input,RightParenthesis,FOLLOW_12); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_13, grammarAccess.getWithQueryAccess().getRightParenthesisKeyword_7_6());
            	      			
            	    }

            	    }
            	    break;

            	default :
            	    break loop28;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleWithQuery"


    // $ANTLR start "entryRuleWithColumns"
    // InternalSQLParser.g:2082:1: entryRuleWithColumns returns [EObject current=null] : iv_ruleWithColumns= ruleWithColumns EOF ;
    public final EObject entryRuleWithColumns() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleWithColumns = null;


        try {
            // InternalSQLParser.g:2082:52: (iv_ruleWithColumns= ruleWithColumns EOF )
            // InternalSQLParser.g:2083:2: iv_ruleWithColumns= ruleWithColumns EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getWithColumnsRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleWithColumns=ruleWithColumns();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleWithColumns; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleWithColumns"


    // $ANTLR start "ruleWithColumns"
    // InternalSQLParser.g:2089:1: ruleWithColumns returns [EObject current=null] : (otherlv_0= LeftParenthesis this_UsingCols_1= ruleUsingCols otherlv_2= RightParenthesis ) ;
    public final EObject ruleWithColumns() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject this_UsingCols_1 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:2095:2: ( (otherlv_0= LeftParenthesis this_UsingCols_1= ruleUsingCols otherlv_2= RightParenthesis ) )
            // InternalSQLParser.g:2096:2: (otherlv_0= LeftParenthesis this_UsingCols_1= ruleUsingCols otherlv_2= RightParenthesis )
            {
            // InternalSQLParser.g:2096:2: (otherlv_0= LeftParenthesis this_UsingCols_1= ruleUsingCols otherlv_2= RightParenthesis )
            // InternalSQLParser.g:2097:3: otherlv_0= LeftParenthesis this_UsingCols_1= ruleUsingCols otherlv_2= RightParenthesis
            {
            otherlv_0=(Token)match(input,LeftParenthesis,FOLLOW_28); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getWithColumnsAccess().getLeftParenthesisKeyword_0());
              		
            }
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getWithColumnsAccess().getUsingColsParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_9);
            this_UsingCols_1=ruleUsingCols();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_UsingCols_1;
              			afterParserOrEnumRuleCall();
              		
            }
            otherlv_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getWithColumnsAccess().getRightParenthesisKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleWithColumns"


    // $ANTLR start "entryRuleFetchFirst"
    // InternalSQLParser.g:2120:1: entryRuleFetchFirst returns [EObject current=null] : iv_ruleFetchFirst= ruleFetchFirst EOF ;
    public final EObject entryRuleFetchFirst() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFetchFirst = null;


        try {
            // InternalSQLParser.g:2120:51: (iv_ruleFetchFirst= ruleFetchFirst EOF )
            // InternalSQLParser.g:2121:2: iv_ruleFetchFirst= ruleFetchFirst EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFetchFirstRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFetchFirst=ruleFetchFirst();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFetchFirst; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFetchFirst"


    // $ANTLR start "ruleFetchFirst"
    // InternalSQLParser.g:2127:1: ruleFetchFirst returns [EObject current=null] : ( ( (lv_fetchFirst_0_0= ruleUnsignedValue ) ) ( ( (lv_row_1_1= ROW | lv_row_1_2= ROWS ) ) ) otherlv_2= ONLY ) ;
    public final EObject ruleFetchFirst() throws RecognitionException {
        EObject current = null;

        Token lv_row_1_1=null;
        Token lv_row_1_2=null;
        Token otherlv_2=null;
        EObject lv_fetchFirst_0_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:2133:2: ( ( ( (lv_fetchFirst_0_0= ruleUnsignedValue ) ) ( ( (lv_row_1_1= ROW | lv_row_1_2= ROWS ) ) ) otherlv_2= ONLY ) )
            // InternalSQLParser.g:2134:2: ( ( (lv_fetchFirst_0_0= ruleUnsignedValue ) ) ( ( (lv_row_1_1= ROW | lv_row_1_2= ROWS ) ) ) otherlv_2= ONLY )
            {
            // InternalSQLParser.g:2134:2: ( ( (lv_fetchFirst_0_0= ruleUnsignedValue ) ) ( ( (lv_row_1_1= ROW | lv_row_1_2= ROWS ) ) ) otherlv_2= ONLY )
            // InternalSQLParser.g:2135:3: ( (lv_fetchFirst_0_0= ruleUnsignedValue ) ) ( ( (lv_row_1_1= ROW | lv_row_1_2= ROWS ) ) ) otherlv_2= ONLY
            {
            // InternalSQLParser.g:2135:3: ( (lv_fetchFirst_0_0= ruleUnsignedValue ) )
            // InternalSQLParser.g:2136:4: (lv_fetchFirst_0_0= ruleUnsignedValue )
            {
            // InternalSQLParser.g:2136:4: (lv_fetchFirst_0_0= ruleUnsignedValue )
            // InternalSQLParser.g:2137:5: lv_fetchFirst_0_0= ruleUnsignedValue
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getFetchFirstAccess().getFetchFirstUnsignedValueParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_31);
            lv_fetchFirst_0_0=ruleUnsignedValue();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getFetchFirstRule());
              					}
              					set(
              						current,
              						"fetchFirst",
              						lv_fetchFirst_0_0,
              						"org.xtext.example.mydsl_sql.SQL.UnsignedValue");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:2154:3: ( ( (lv_row_1_1= ROW | lv_row_1_2= ROWS ) ) )
            // InternalSQLParser.g:2155:4: ( (lv_row_1_1= ROW | lv_row_1_2= ROWS ) )
            {
            // InternalSQLParser.g:2155:4: ( (lv_row_1_1= ROW | lv_row_1_2= ROWS ) )
            // InternalSQLParser.g:2156:5: (lv_row_1_1= ROW | lv_row_1_2= ROWS )
            {
            // InternalSQLParser.g:2156:5: (lv_row_1_1= ROW | lv_row_1_2= ROWS )
            int alt29=2;
            int LA29_0 = input.LA(1);

            if ( (LA29_0==ROW) ) {
                alt29=1;
            }
            else if ( (LA29_0==ROWS) ) {
                alt29=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 29, 0, input);

                throw nvae;
            }
            switch (alt29) {
                case 1 :
                    // InternalSQLParser.g:2157:6: lv_row_1_1= ROW
                    {
                    lv_row_1_1=(Token)match(input,ROW,FOLLOW_32); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_row_1_1, grammarAccess.getFetchFirstAccess().getRowROWKeyword_1_0_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getFetchFirstRule());
                      						}
                      						setWithLastConsumed(current, "row", lv_row_1_1, null);
                      					
                    }

                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:2168:6: lv_row_1_2= ROWS
                    {
                    lv_row_1_2=(Token)match(input,ROWS,FOLLOW_32); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_row_1_2, grammarAccess.getFetchFirstAccess().getRowROWSKeyword_1_0_1());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getFetchFirstRule());
                      						}
                      						setWithLastConsumed(current, "row", lv_row_1_2, null);
                      					
                    }

                    }
                    break;

            }


            }


            }

            otherlv_2=(Token)match(input,ONLY,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getFetchFirstAccess().getONLYKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFetchFirst"


    // $ANTLR start "entryRuleOffset"
    // InternalSQLParser.g:2189:1: entryRuleOffset returns [EObject current=null] : iv_ruleOffset= ruleOffset EOF ;
    public final EObject entryRuleOffset() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOffset = null;


        try {
            // InternalSQLParser.g:2189:47: (iv_ruleOffset= ruleOffset EOF )
            // InternalSQLParser.g:2190:2: iv_ruleOffset= ruleOffset EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOffsetRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOffset=ruleOffset();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOffset; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOffset"


    // $ANTLR start "ruleOffset"
    // InternalSQLParser.g:2196:1: ruleOffset returns [EObject current=null] : ( (lv_offset_0_0= RULE_INT ) ) ;
    public final EObject ruleOffset() throws RecognitionException {
        EObject current = null;

        Token lv_offset_0_0=null;


        	enterRule();

        try {
            // InternalSQLParser.g:2202:2: ( ( (lv_offset_0_0= RULE_INT ) ) )
            // InternalSQLParser.g:2203:2: ( (lv_offset_0_0= RULE_INT ) )
            {
            // InternalSQLParser.g:2203:2: ( (lv_offset_0_0= RULE_INT ) )
            // InternalSQLParser.g:2204:3: (lv_offset_0_0= RULE_INT )
            {
            // InternalSQLParser.g:2204:3: (lv_offset_0_0= RULE_INT )
            // InternalSQLParser.g:2205:4: lv_offset_0_0= RULE_INT
            {
            lv_offset_0_0=(Token)match(input,RULE_INT,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(lv_offset_0_0, grammarAccess.getOffsetAccess().getOffsetINTTerminalRuleCall_0());
              			
            }
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getOffsetRule());
              				}
              				setWithLastConsumed(
              					current,
              					"offset",
              					lv_offset_0_0,
              					"org.xtext.example.mydsl_sql.SQL.INT");
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOffset"


    // $ANTLR start "entryRuleLimit"
    // InternalSQLParser.g:2224:1: entryRuleLimit returns [EObject current=null] : iv_ruleLimit= ruleLimit EOF ;
    public final EObject entryRuleLimit() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleLimit = null;


        try {
            // InternalSQLParser.g:2224:46: (iv_ruleLimit= ruleLimit EOF )
            // InternalSQLParser.g:2225:2: iv_ruleLimit= ruleLimit EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLimitRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLimit=ruleLimit();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLimit; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleLimit"


    // $ANTLR start "ruleLimit"
    // InternalSQLParser.g:2231:1: ruleLimit returns [EObject current=null] : ( ( () otherlv_1= ALL ) | ( ( (lv_l1_2_0= RULE_UNSIGNED ) ) (otherlv_3= Comma ( (lv_l2_4_0= RULE_UNSIGNED ) ) )? ) ) ;
    public final EObject ruleLimit() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token lv_l1_2_0=null;
        Token otherlv_3=null;
        Token lv_l2_4_0=null;


        	enterRule();

        try {
            // InternalSQLParser.g:2237:2: ( ( ( () otherlv_1= ALL ) | ( ( (lv_l1_2_0= RULE_UNSIGNED ) ) (otherlv_3= Comma ( (lv_l2_4_0= RULE_UNSIGNED ) ) )? ) ) )
            // InternalSQLParser.g:2238:2: ( ( () otherlv_1= ALL ) | ( ( (lv_l1_2_0= RULE_UNSIGNED ) ) (otherlv_3= Comma ( (lv_l2_4_0= RULE_UNSIGNED ) ) )? ) )
            {
            // InternalSQLParser.g:2238:2: ( ( () otherlv_1= ALL ) | ( ( (lv_l1_2_0= RULE_UNSIGNED ) ) (otherlv_3= Comma ( (lv_l2_4_0= RULE_UNSIGNED ) ) )? ) )
            int alt31=2;
            int LA31_0 = input.LA(1);

            if ( (LA31_0==ALL) ) {
                alt31=1;
            }
            else if ( (LA31_0==RULE_UNSIGNED) ) {
                alt31=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 31, 0, input);

                throw nvae;
            }
            switch (alt31) {
                case 1 :
                    // InternalSQLParser.g:2239:3: ( () otherlv_1= ALL )
                    {
                    // InternalSQLParser.g:2239:3: ( () otherlv_1= ALL )
                    // InternalSQLParser.g:2240:4: () otherlv_1= ALL
                    {
                    // InternalSQLParser.g:2240:4: ()
                    // InternalSQLParser.g:2241:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getLimitAccess().getLimitAction_0_0(),
                      						current);
                      				
                    }

                    }

                    otherlv_1=(Token)match(input,ALL,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getLimitAccess().getALLKeyword_0_1());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:2256:3: ( ( (lv_l1_2_0= RULE_UNSIGNED ) ) (otherlv_3= Comma ( (lv_l2_4_0= RULE_UNSIGNED ) ) )? )
                    {
                    // InternalSQLParser.g:2256:3: ( ( (lv_l1_2_0= RULE_UNSIGNED ) ) (otherlv_3= Comma ( (lv_l2_4_0= RULE_UNSIGNED ) ) )? )
                    // InternalSQLParser.g:2257:4: ( (lv_l1_2_0= RULE_UNSIGNED ) ) (otherlv_3= Comma ( (lv_l2_4_0= RULE_UNSIGNED ) ) )?
                    {
                    // InternalSQLParser.g:2257:4: ( (lv_l1_2_0= RULE_UNSIGNED ) )
                    // InternalSQLParser.g:2258:5: (lv_l1_2_0= RULE_UNSIGNED )
                    {
                    // InternalSQLParser.g:2258:5: (lv_l1_2_0= RULE_UNSIGNED )
                    // InternalSQLParser.g:2259:6: lv_l1_2_0= RULE_UNSIGNED
                    {
                    lv_l1_2_0=(Token)match(input,RULE_UNSIGNED,FOLLOW_12); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_l1_2_0, grammarAccess.getLimitAccess().getL1UNSIGNEDTerminalRuleCall_1_0_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getLimitRule());
                      						}
                      						setWithLastConsumed(
                      							current,
                      							"l1",
                      							lv_l1_2_0,
                      							"org.xtext.example.mydsl_sql.SQL.UNSIGNED");
                      					
                    }

                    }


                    }

                    // InternalSQLParser.g:2275:4: (otherlv_3= Comma ( (lv_l2_4_0= RULE_UNSIGNED ) ) )?
                    int alt30=2;
                    int LA30_0 = input.LA(1);

                    if ( (LA30_0==Comma) ) {
                        alt30=1;
                    }
                    switch (alt30) {
                        case 1 :
                            // InternalSQLParser.g:2276:5: otherlv_3= Comma ( (lv_l2_4_0= RULE_UNSIGNED ) )
                            {
                            otherlv_3=(Token)match(input,Comma,FOLLOW_24); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(otherlv_3, grammarAccess.getLimitAccess().getCommaKeyword_1_1_0());
                              				
                            }
                            // InternalSQLParser.g:2280:5: ( (lv_l2_4_0= RULE_UNSIGNED ) )
                            // InternalSQLParser.g:2281:6: (lv_l2_4_0= RULE_UNSIGNED )
                            {
                            // InternalSQLParser.g:2281:6: (lv_l2_4_0= RULE_UNSIGNED )
                            // InternalSQLParser.g:2282:7: lv_l2_4_0= RULE_UNSIGNED
                            {
                            lv_l2_4_0=(Token)match(input,RULE_UNSIGNED,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(lv_l2_4_0, grammarAccess.getLimitAccess().getL2UNSIGNEDTerminalRuleCall_1_1_1_0());
                              						
                            }
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getLimitRule());
                              							}
                              							setWithLastConsumed(
                              								current,
                              								"l2",
                              								lv_l2_4_0,
                              								"org.xtext.example.mydsl_sql.SQL.UNSIGNED");
                              						
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleLimit"


    // $ANTLR start "entryRuleSelectQuery"
    // InternalSQLParser.g:2304:1: entryRuleSelectQuery returns [EObject current=null] : iv_ruleSelectQuery= ruleSelectQuery EOF ;
    public final EObject entryRuleSelectQuery() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSelectQuery = null;


        try {
            // InternalSQLParser.g:2304:52: (iv_ruleSelectQuery= ruleSelectQuery EOF )
            // InternalSQLParser.g:2305:2: iv_ruleSelectQuery= ruleSelectQuery EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSelectQueryRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSelectQuery=ruleSelectQuery();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSelectQuery; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSelectQuery"


    // $ANTLR start "ruleSelectQuery"
    // InternalSQLParser.g:2311:1: ruleSelectQuery returns [EObject current=null] : (this_Select_0= ruleSelect ( (lv_op_1_0= ruleSelectSubSet ) )* ) ;
    public final EObject ruleSelectQuery() throws RecognitionException {
        EObject current = null;

        EObject this_Select_0 = null;

        EObject lv_op_1_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:2317:2: ( (this_Select_0= ruleSelect ( (lv_op_1_0= ruleSelectSubSet ) )* ) )
            // InternalSQLParser.g:2318:2: (this_Select_0= ruleSelect ( (lv_op_1_0= ruleSelectSubSet ) )* )
            {
            // InternalSQLParser.g:2318:2: (this_Select_0= ruleSelect ( (lv_op_1_0= ruleSelectSubSet ) )* )
            // InternalSQLParser.g:2319:3: this_Select_0= ruleSelect ( (lv_op_1_0= ruleSelectSubSet ) )*
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getSelectQueryAccess().getSelectParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_33);
            this_Select_0=ruleSelect();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_Select_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:2330:3: ( (lv_op_1_0= ruleSelectSubSet ) )*
            loop32:
            do {
                int alt32=2;
                int LA32_0 = input.LA(1);

                if ( (LA32_0==INTERSECT||LA32_0==EXCEPT||LA32_0==MINUS||LA32_0==UNION) ) {
                    alt32=1;
                }


                switch (alt32) {
            	case 1 :
            	    // InternalSQLParser.g:2331:4: (lv_op_1_0= ruleSelectSubSet )
            	    {
            	    // InternalSQLParser.g:2331:4: (lv_op_1_0= ruleSelectSubSet )
            	    // InternalSQLParser.g:2332:5: lv_op_1_0= ruleSelectSubSet
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getSelectQueryAccess().getOpSelectSubSetParserRuleCall_1_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_33);
            	    lv_op_1_0=ruleSelectSubSet();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getSelectQueryRule());
            	      					}
            	      					add(
            	      						current,
            	      						"op",
            	      						lv_op_1_0,
            	      						"org.xtext.example.mydsl_sql.SQL.SelectSubSet");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop32;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSelectQuery"


    // $ANTLR start "entryRuleSelectSubSet"
    // InternalSQLParser.g:2353:1: entryRuleSelectSubSet returns [EObject current=null] : iv_ruleSelectSubSet= ruleSelectSubSet EOF ;
    public final EObject entryRuleSelectSubSet() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSelectSubSet = null;


        try {
            // InternalSQLParser.g:2353:53: (iv_ruleSelectSubSet= ruleSelectSubSet EOF )
            // InternalSQLParser.g:2354:2: iv_ruleSelectSubSet= ruleSelectSubSet EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSelectSubSetRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSelectSubSet=ruleSelectSubSet();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSelectSubSet; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSelectSubSet"


    // $ANTLR start "ruleSelectSubSet"
    // InternalSQLParser.g:2360:1: ruleSelectSubSet returns [EObject current=null] : ( ( ( (lv_op_0_1= UNION | lv_op_0_2= INTERSECT | lv_op_0_3= MINUS | lv_op_0_4= EXCEPT ) ) ) ( (lv_all_1_0= ALL ) )? ( (lv_query_2_0= ruleSelect ) ) ) ;
    public final EObject ruleSelectSubSet() throws RecognitionException {
        EObject current = null;

        Token lv_op_0_1=null;
        Token lv_op_0_2=null;
        Token lv_op_0_3=null;
        Token lv_op_0_4=null;
        Token lv_all_1_0=null;
        EObject lv_query_2_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:2366:2: ( ( ( ( (lv_op_0_1= UNION | lv_op_0_2= INTERSECT | lv_op_0_3= MINUS | lv_op_0_4= EXCEPT ) ) ) ( (lv_all_1_0= ALL ) )? ( (lv_query_2_0= ruleSelect ) ) ) )
            // InternalSQLParser.g:2367:2: ( ( ( (lv_op_0_1= UNION | lv_op_0_2= INTERSECT | lv_op_0_3= MINUS | lv_op_0_4= EXCEPT ) ) ) ( (lv_all_1_0= ALL ) )? ( (lv_query_2_0= ruleSelect ) ) )
            {
            // InternalSQLParser.g:2367:2: ( ( ( (lv_op_0_1= UNION | lv_op_0_2= INTERSECT | lv_op_0_3= MINUS | lv_op_0_4= EXCEPT ) ) ) ( (lv_all_1_0= ALL ) )? ( (lv_query_2_0= ruleSelect ) ) )
            // InternalSQLParser.g:2368:3: ( ( (lv_op_0_1= UNION | lv_op_0_2= INTERSECT | lv_op_0_3= MINUS | lv_op_0_4= EXCEPT ) ) ) ( (lv_all_1_0= ALL ) )? ( (lv_query_2_0= ruleSelect ) )
            {
            // InternalSQLParser.g:2368:3: ( ( (lv_op_0_1= UNION | lv_op_0_2= INTERSECT | lv_op_0_3= MINUS | lv_op_0_4= EXCEPT ) ) )
            // InternalSQLParser.g:2369:4: ( (lv_op_0_1= UNION | lv_op_0_2= INTERSECT | lv_op_0_3= MINUS | lv_op_0_4= EXCEPT ) )
            {
            // InternalSQLParser.g:2369:4: ( (lv_op_0_1= UNION | lv_op_0_2= INTERSECT | lv_op_0_3= MINUS | lv_op_0_4= EXCEPT ) )
            // InternalSQLParser.g:2370:5: (lv_op_0_1= UNION | lv_op_0_2= INTERSECT | lv_op_0_3= MINUS | lv_op_0_4= EXCEPT )
            {
            // InternalSQLParser.g:2370:5: (lv_op_0_1= UNION | lv_op_0_2= INTERSECT | lv_op_0_3= MINUS | lv_op_0_4= EXCEPT )
            int alt33=4;
            switch ( input.LA(1) ) {
            case UNION:
                {
                alt33=1;
                }
                break;
            case INTERSECT:
                {
                alt33=2;
                }
                break;
            case MINUS:
                {
                alt33=3;
                }
                break;
            case EXCEPT:
                {
                alt33=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 33, 0, input);

                throw nvae;
            }

            switch (alt33) {
                case 1 :
                    // InternalSQLParser.g:2371:6: lv_op_0_1= UNION
                    {
                    lv_op_0_1=(Token)match(input,UNION,FOLLOW_34); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_op_0_1, grammarAccess.getSelectSubSetAccess().getOpUNIONKeyword_0_0_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getSelectSubSetRule());
                      						}
                      						setWithLastConsumed(current, "op", lv_op_0_1, null);
                      					
                    }

                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:2382:6: lv_op_0_2= INTERSECT
                    {
                    lv_op_0_2=(Token)match(input,INTERSECT,FOLLOW_34); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_op_0_2, grammarAccess.getSelectSubSetAccess().getOpINTERSECTKeyword_0_0_1());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getSelectSubSetRule());
                      						}
                      						setWithLastConsumed(current, "op", lv_op_0_2, null);
                      					
                    }

                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:2393:6: lv_op_0_3= MINUS
                    {
                    lv_op_0_3=(Token)match(input,MINUS,FOLLOW_34); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_op_0_3, grammarAccess.getSelectSubSetAccess().getOpMINUSKeyword_0_0_2());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getSelectSubSetRule());
                      						}
                      						setWithLastConsumed(current, "op", lv_op_0_3, null);
                      					
                    }

                    }
                    break;
                case 4 :
                    // InternalSQLParser.g:2404:6: lv_op_0_4= EXCEPT
                    {
                    lv_op_0_4=(Token)match(input,EXCEPT,FOLLOW_34); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_op_0_4, grammarAccess.getSelectSubSetAccess().getOpEXCEPTKeyword_0_0_3());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getSelectSubSetRule());
                      						}
                      						setWithLastConsumed(current, "op", lv_op_0_4, null);
                      					
                    }

                    }
                    break;

            }


            }


            }

            // InternalSQLParser.g:2417:3: ( (lv_all_1_0= ALL ) )?
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==ALL) ) {
                alt34=1;
            }
            switch (alt34) {
                case 1 :
                    // InternalSQLParser.g:2418:4: (lv_all_1_0= ALL )
                    {
                    // InternalSQLParser.g:2418:4: (lv_all_1_0= ALL )
                    // InternalSQLParser.g:2419:5: lv_all_1_0= ALL
                    {
                    lv_all_1_0=(Token)match(input,ALL,FOLLOW_3); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_all_1_0, grammarAccess.getSelectSubSetAccess().getAllALLKeyword_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getSelectSubSetRule());
                      					}
                      					setWithLastConsumed(current, "all", lv_all_1_0, "ALL");
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalSQLParser.g:2431:3: ( (lv_query_2_0= ruleSelect ) )
            // InternalSQLParser.g:2432:4: (lv_query_2_0= ruleSelect )
            {
            // InternalSQLParser.g:2432:4: (lv_query_2_0= ruleSelect )
            // InternalSQLParser.g:2433:5: lv_query_2_0= ruleSelect
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getSelectSubSetAccess().getQuerySelectParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_query_2_0=ruleSelect();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getSelectSubSetRule());
              					}
              					set(
              						current,
              						"query",
              						lv_query_2_0,
              						"org.xtext.example.mydsl_sql.SQL.Select");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSelectSubSet"


    // $ANTLR start "entryRuleSelect"
    // InternalSQLParser.g:2454:1: entryRuleSelect returns [EObject current=null] : iv_ruleSelect= ruleSelect EOF ;
    public final EObject entryRuleSelect() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSelect = null;


        try {
            // InternalSQLParser.g:2454:47: (iv_ruleSelect= ruleSelect EOF )
            // InternalSQLParser.g:2455:2: iv_ruleSelect= ruleSelect EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSelectRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSelect=ruleSelect();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSelect; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSelect"


    // $ANTLR start "ruleSelect"
    // InternalSQLParser.g:2461:1: ruleSelect returns [EObject current=null] : ( ( (lv_select_0_0= SELECT ) ) (otherlv_1= DISTINCT )? (otherlv_2= TOP (this_INT_3= RULE_INT | this_SIGNED_DOUBLE_4= RULE_SIGNED_DOUBLE ) (otherlv_5= PERCENT )? (otherlv_6= WITH otherlv_7= TIES )? )? ( (lv_cols_8_0= ruleColumns ) ) otherlv_9= FROM ( (lv_tbl_10_0= ruleTables ) ) (otherlv_11= WHERE ( (lv_whereExpression_12_0= ruleFullExpression ) ) )? (otherlv_13= GROUP otherlv_14= BY ( (lv_groupByEntry_15_0= ruleGroupByColumns ) ) )? (otherlv_16= HAVING ( (lv_havingEntry_17_0= ruleFullExpression ) ) )? (otherlv_18= ORDER otherlv_19= BY ( (lv_orderByEntry_20_0= ruleOrderByColumns ) ) )? (otherlv_21= LIMIT ( (lv_lim_22_0= ruleLimit ) ) )? (otherlv_23= OFFSET ( (lv_offset_24_0= ruleOffset ) ) )? (otherlv_25= FETCH otherlv_26= FIRST ( (lv_fetchFirst_27_0= ruleFetchFirst ) ) )? ) ;
    public final EObject ruleSelect() throws RecognitionException {
        EObject current = null;

        Token lv_select_0_0=null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        Token this_INT_3=null;
        Token this_SIGNED_DOUBLE_4=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        Token otherlv_7=null;
        Token otherlv_9=null;
        Token otherlv_11=null;
        Token otherlv_13=null;
        Token otherlv_14=null;
        Token otherlv_16=null;
        Token otherlv_18=null;
        Token otherlv_19=null;
        Token otherlv_21=null;
        Token otherlv_23=null;
        Token otherlv_25=null;
        Token otherlv_26=null;
        EObject lv_cols_8_0 = null;

        EObject lv_tbl_10_0 = null;

        EObject lv_whereExpression_12_0 = null;

        EObject lv_groupByEntry_15_0 = null;

        EObject lv_havingEntry_17_0 = null;

        EObject lv_orderByEntry_20_0 = null;

        EObject lv_lim_22_0 = null;

        EObject lv_offset_24_0 = null;

        EObject lv_fetchFirst_27_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:2467:2: ( ( ( (lv_select_0_0= SELECT ) ) (otherlv_1= DISTINCT )? (otherlv_2= TOP (this_INT_3= RULE_INT | this_SIGNED_DOUBLE_4= RULE_SIGNED_DOUBLE ) (otherlv_5= PERCENT )? (otherlv_6= WITH otherlv_7= TIES )? )? ( (lv_cols_8_0= ruleColumns ) ) otherlv_9= FROM ( (lv_tbl_10_0= ruleTables ) ) (otherlv_11= WHERE ( (lv_whereExpression_12_0= ruleFullExpression ) ) )? (otherlv_13= GROUP otherlv_14= BY ( (lv_groupByEntry_15_0= ruleGroupByColumns ) ) )? (otherlv_16= HAVING ( (lv_havingEntry_17_0= ruleFullExpression ) ) )? (otherlv_18= ORDER otherlv_19= BY ( (lv_orderByEntry_20_0= ruleOrderByColumns ) ) )? (otherlv_21= LIMIT ( (lv_lim_22_0= ruleLimit ) ) )? (otherlv_23= OFFSET ( (lv_offset_24_0= ruleOffset ) ) )? (otherlv_25= FETCH otherlv_26= FIRST ( (lv_fetchFirst_27_0= ruleFetchFirst ) ) )? ) )
            // InternalSQLParser.g:2468:2: ( ( (lv_select_0_0= SELECT ) ) (otherlv_1= DISTINCT )? (otherlv_2= TOP (this_INT_3= RULE_INT | this_SIGNED_DOUBLE_4= RULE_SIGNED_DOUBLE ) (otherlv_5= PERCENT )? (otherlv_6= WITH otherlv_7= TIES )? )? ( (lv_cols_8_0= ruleColumns ) ) otherlv_9= FROM ( (lv_tbl_10_0= ruleTables ) ) (otherlv_11= WHERE ( (lv_whereExpression_12_0= ruleFullExpression ) ) )? (otherlv_13= GROUP otherlv_14= BY ( (lv_groupByEntry_15_0= ruleGroupByColumns ) ) )? (otherlv_16= HAVING ( (lv_havingEntry_17_0= ruleFullExpression ) ) )? (otherlv_18= ORDER otherlv_19= BY ( (lv_orderByEntry_20_0= ruleOrderByColumns ) ) )? (otherlv_21= LIMIT ( (lv_lim_22_0= ruleLimit ) ) )? (otherlv_23= OFFSET ( (lv_offset_24_0= ruleOffset ) ) )? (otherlv_25= FETCH otherlv_26= FIRST ( (lv_fetchFirst_27_0= ruleFetchFirst ) ) )? )
            {
            // InternalSQLParser.g:2468:2: ( ( (lv_select_0_0= SELECT ) ) (otherlv_1= DISTINCT )? (otherlv_2= TOP (this_INT_3= RULE_INT | this_SIGNED_DOUBLE_4= RULE_SIGNED_DOUBLE ) (otherlv_5= PERCENT )? (otherlv_6= WITH otherlv_7= TIES )? )? ( (lv_cols_8_0= ruleColumns ) ) otherlv_9= FROM ( (lv_tbl_10_0= ruleTables ) ) (otherlv_11= WHERE ( (lv_whereExpression_12_0= ruleFullExpression ) ) )? (otherlv_13= GROUP otherlv_14= BY ( (lv_groupByEntry_15_0= ruleGroupByColumns ) ) )? (otherlv_16= HAVING ( (lv_havingEntry_17_0= ruleFullExpression ) ) )? (otherlv_18= ORDER otherlv_19= BY ( (lv_orderByEntry_20_0= ruleOrderByColumns ) ) )? (otherlv_21= LIMIT ( (lv_lim_22_0= ruleLimit ) ) )? (otherlv_23= OFFSET ( (lv_offset_24_0= ruleOffset ) ) )? (otherlv_25= FETCH otherlv_26= FIRST ( (lv_fetchFirst_27_0= ruleFetchFirst ) ) )? )
            // InternalSQLParser.g:2469:3: ( (lv_select_0_0= SELECT ) ) (otherlv_1= DISTINCT )? (otherlv_2= TOP (this_INT_3= RULE_INT | this_SIGNED_DOUBLE_4= RULE_SIGNED_DOUBLE ) (otherlv_5= PERCENT )? (otherlv_6= WITH otherlv_7= TIES )? )? ( (lv_cols_8_0= ruleColumns ) ) otherlv_9= FROM ( (lv_tbl_10_0= ruleTables ) ) (otherlv_11= WHERE ( (lv_whereExpression_12_0= ruleFullExpression ) ) )? (otherlv_13= GROUP otherlv_14= BY ( (lv_groupByEntry_15_0= ruleGroupByColumns ) ) )? (otherlv_16= HAVING ( (lv_havingEntry_17_0= ruleFullExpression ) ) )? (otherlv_18= ORDER otherlv_19= BY ( (lv_orderByEntry_20_0= ruleOrderByColumns ) ) )? (otherlv_21= LIMIT ( (lv_lim_22_0= ruleLimit ) ) )? (otherlv_23= OFFSET ( (lv_offset_24_0= ruleOffset ) ) )? (otherlv_25= FETCH otherlv_26= FIRST ( (lv_fetchFirst_27_0= ruleFetchFirst ) ) )?
            {
            // InternalSQLParser.g:2469:3: ( (lv_select_0_0= SELECT ) )
            // InternalSQLParser.g:2470:4: (lv_select_0_0= SELECT )
            {
            // InternalSQLParser.g:2470:4: (lv_select_0_0= SELECT )
            // InternalSQLParser.g:2471:5: lv_select_0_0= SELECT
            {
            lv_select_0_0=(Token)match(input,SELECT,FOLLOW_35); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_select_0_0, grammarAccess.getSelectAccess().getSelectSELECTKeyword_0_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getSelectRule());
              					}
              					setWithLastConsumed(current, "select", lv_select_0_0, "SELECT");
              				
            }

            }


            }

            // InternalSQLParser.g:2483:3: (otherlv_1= DISTINCT )?
            int alt35=2;
            int LA35_0 = input.LA(1);

            if ( (LA35_0==DISTINCT) ) {
                alt35=1;
            }
            switch (alt35) {
                case 1 :
                    // InternalSQLParser.g:2484:4: otherlv_1= DISTINCT
                    {
                    otherlv_1=(Token)match(input,DISTINCT,FOLLOW_35); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getSelectAccess().getDISTINCTKeyword_1());
                      			
                    }

                    }
                    break;

            }

            // InternalSQLParser.g:2489:3: (otherlv_2= TOP (this_INT_3= RULE_INT | this_SIGNED_DOUBLE_4= RULE_SIGNED_DOUBLE ) (otherlv_5= PERCENT )? (otherlv_6= WITH otherlv_7= TIES )? )?
            int alt39=2;
            int LA39_0 = input.LA(1);

            if ( (LA39_0==TOP) ) {
                alt39=1;
            }
            switch (alt39) {
                case 1 :
                    // InternalSQLParser.g:2490:4: otherlv_2= TOP (this_INT_3= RULE_INT | this_SIGNED_DOUBLE_4= RULE_SIGNED_DOUBLE ) (otherlv_5= PERCENT )? (otherlv_6= WITH otherlv_7= TIES )?
                    {
                    otherlv_2=(Token)match(input,TOP,FOLLOW_36); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getSelectAccess().getTOPKeyword_2_0());
                      			
                    }
                    // InternalSQLParser.g:2494:4: (this_INT_3= RULE_INT | this_SIGNED_DOUBLE_4= RULE_SIGNED_DOUBLE )
                    int alt36=2;
                    int LA36_0 = input.LA(1);

                    if ( (LA36_0==RULE_INT) ) {
                        alt36=1;
                    }
                    else if ( (LA36_0==RULE_SIGNED_DOUBLE) ) {
                        alt36=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 36, 0, input);

                        throw nvae;
                    }
                    switch (alt36) {
                        case 1 :
                            // InternalSQLParser.g:2495:5: this_INT_3= RULE_INT
                            {
                            this_INT_3=(Token)match(input,RULE_INT,FOLLOW_37); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(this_INT_3, grammarAccess.getSelectAccess().getINTTerminalRuleCall_2_1_0());
                              				
                            }

                            }
                            break;
                        case 2 :
                            // InternalSQLParser.g:2500:5: this_SIGNED_DOUBLE_4= RULE_SIGNED_DOUBLE
                            {
                            this_SIGNED_DOUBLE_4=(Token)match(input,RULE_SIGNED_DOUBLE,FOLLOW_37); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(this_SIGNED_DOUBLE_4, grammarAccess.getSelectAccess().getSIGNED_DOUBLETerminalRuleCall_2_1_1());
                              				
                            }

                            }
                            break;

                    }

                    // InternalSQLParser.g:2505:4: (otherlv_5= PERCENT )?
                    int alt37=2;
                    int LA37_0 = input.LA(1);

                    if ( (LA37_0==PERCENT) ) {
                        alt37=1;
                    }
                    switch (alt37) {
                        case 1 :
                            // InternalSQLParser.g:2506:5: otherlv_5= PERCENT
                            {
                            otherlv_5=(Token)match(input,PERCENT,FOLLOW_38); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(otherlv_5, grammarAccess.getSelectAccess().getPERCENTKeyword_2_2());
                              				
                            }

                            }
                            break;

                    }

                    // InternalSQLParser.g:2511:4: (otherlv_6= WITH otherlv_7= TIES )?
                    int alt38=2;
                    int LA38_0 = input.LA(1);

                    if ( (LA38_0==WITH) ) {
                        alt38=1;
                    }
                    switch (alt38) {
                        case 1 :
                            // InternalSQLParser.g:2512:5: otherlv_6= WITH otherlv_7= TIES
                            {
                            otherlv_6=(Token)match(input,WITH,FOLLOW_39); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(otherlv_6, grammarAccess.getSelectAccess().getWITHKeyword_2_3_0());
                              				
                            }
                            otherlv_7=(Token)match(input,TIES,FOLLOW_35); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(otherlv_7, grammarAccess.getSelectAccess().getTIESKeyword_2_3_1());
                              				
                            }

                            }
                            break;

                    }


                    }
                    break;

            }

            // InternalSQLParser.g:2522:3: ( (lv_cols_8_0= ruleColumns ) )
            // InternalSQLParser.g:2523:4: (lv_cols_8_0= ruleColumns )
            {
            // InternalSQLParser.g:2523:4: (lv_cols_8_0= ruleColumns )
            // InternalSQLParser.g:2524:5: lv_cols_8_0= ruleColumns
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getSelectAccess().getColsColumnsParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_40);
            lv_cols_8_0=ruleColumns();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getSelectRule());
              					}
              					set(
              						current,
              						"cols",
              						lv_cols_8_0,
              						"org.xtext.example.mydsl_sql.SQL.Columns");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_9=(Token)match(input,FROM,FOLLOW_5); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_9, grammarAccess.getSelectAccess().getFROMKeyword_4());
              		
            }
            // InternalSQLParser.g:2545:3: ( (lv_tbl_10_0= ruleTables ) )
            // InternalSQLParser.g:2546:4: (lv_tbl_10_0= ruleTables )
            {
            // InternalSQLParser.g:2546:4: (lv_tbl_10_0= ruleTables )
            // InternalSQLParser.g:2547:5: lv_tbl_10_0= ruleTables
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getSelectAccess().getTblTablesParserRuleCall_5_0());
              				
            }
            pushFollow(FOLLOW_41);
            lv_tbl_10_0=ruleTables();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getSelectRule());
              					}
              					set(
              						current,
              						"tbl",
              						lv_tbl_10_0,
              						"org.xtext.example.mydsl_sql.SQL.Tables");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:2564:3: (otherlv_11= WHERE ( (lv_whereExpression_12_0= ruleFullExpression ) ) )?
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==WHERE) ) {
                alt40=1;
            }
            switch (alt40) {
                case 1 :
                    // InternalSQLParser.g:2565:4: otherlv_11= WHERE ( (lv_whereExpression_12_0= ruleFullExpression ) )
                    {
                    otherlv_11=(Token)match(input,WHERE,FOLLOW_42); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_11, grammarAccess.getSelectAccess().getWHEREKeyword_6_0());
                      			
                    }
                    // InternalSQLParser.g:2569:4: ( (lv_whereExpression_12_0= ruleFullExpression ) )
                    // InternalSQLParser.g:2570:5: (lv_whereExpression_12_0= ruleFullExpression )
                    {
                    // InternalSQLParser.g:2570:5: (lv_whereExpression_12_0= ruleFullExpression )
                    // InternalSQLParser.g:2571:6: lv_whereExpression_12_0= ruleFullExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getSelectAccess().getWhereExpressionFullExpressionParserRuleCall_6_1_0());
                      					
                    }
                    pushFollow(FOLLOW_43);
                    lv_whereExpression_12_0=ruleFullExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSelectRule());
                      						}
                      						set(
                      							current,
                      							"whereExpression",
                      							lv_whereExpression_12_0,
                      							"org.xtext.example.mydsl_sql.SQL.FullExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            // InternalSQLParser.g:2589:3: (otherlv_13= GROUP otherlv_14= BY ( (lv_groupByEntry_15_0= ruleGroupByColumns ) ) )?
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( (LA41_0==GROUP) ) {
                alt41=1;
            }
            switch (alt41) {
                case 1 :
                    // InternalSQLParser.g:2590:4: otherlv_13= GROUP otherlv_14= BY ( (lv_groupByEntry_15_0= ruleGroupByColumns ) )
                    {
                    otherlv_13=(Token)match(input,GROUP,FOLLOW_44); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_13, grammarAccess.getSelectAccess().getGROUPKeyword_7_0());
                      			
                    }
                    otherlv_14=(Token)match(input,BY,FOLLOW_45); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_14, grammarAccess.getSelectAccess().getBYKeyword_7_1());
                      			
                    }
                    // InternalSQLParser.g:2598:4: ( (lv_groupByEntry_15_0= ruleGroupByColumns ) )
                    // InternalSQLParser.g:2599:5: (lv_groupByEntry_15_0= ruleGroupByColumns )
                    {
                    // InternalSQLParser.g:2599:5: (lv_groupByEntry_15_0= ruleGroupByColumns )
                    // InternalSQLParser.g:2600:6: lv_groupByEntry_15_0= ruleGroupByColumns
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getSelectAccess().getGroupByEntryGroupByColumnsParserRuleCall_7_2_0());
                      					
                    }
                    pushFollow(FOLLOW_46);
                    lv_groupByEntry_15_0=ruleGroupByColumns();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSelectRule());
                      						}
                      						set(
                      							current,
                      							"groupByEntry",
                      							lv_groupByEntry_15_0,
                      							"org.xtext.example.mydsl_sql.SQL.GroupByColumns");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            // InternalSQLParser.g:2618:3: (otherlv_16= HAVING ( (lv_havingEntry_17_0= ruleFullExpression ) ) )?
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==HAVING) ) {
                alt42=1;
            }
            switch (alt42) {
                case 1 :
                    // InternalSQLParser.g:2619:4: otherlv_16= HAVING ( (lv_havingEntry_17_0= ruleFullExpression ) )
                    {
                    otherlv_16=(Token)match(input,HAVING,FOLLOW_42); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_16, grammarAccess.getSelectAccess().getHAVINGKeyword_8_0());
                      			
                    }
                    // InternalSQLParser.g:2623:4: ( (lv_havingEntry_17_0= ruleFullExpression ) )
                    // InternalSQLParser.g:2624:5: (lv_havingEntry_17_0= ruleFullExpression )
                    {
                    // InternalSQLParser.g:2624:5: (lv_havingEntry_17_0= ruleFullExpression )
                    // InternalSQLParser.g:2625:6: lv_havingEntry_17_0= ruleFullExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getSelectAccess().getHavingEntryFullExpressionParserRuleCall_8_1_0());
                      					
                    }
                    pushFollow(FOLLOW_47);
                    lv_havingEntry_17_0=ruleFullExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSelectRule());
                      						}
                      						set(
                      							current,
                      							"havingEntry",
                      							lv_havingEntry_17_0,
                      							"org.xtext.example.mydsl_sql.SQL.FullExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            // InternalSQLParser.g:2643:3: (otherlv_18= ORDER otherlv_19= BY ( (lv_orderByEntry_20_0= ruleOrderByColumns ) ) )?
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==ORDER) ) {
                alt43=1;
            }
            switch (alt43) {
                case 1 :
                    // InternalSQLParser.g:2644:4: otherlv_18= ORDER otherlv_19= BY ( (lv_orderByEntry_20_0= ruleOrderByColumns ) )
                    {
                    otherlv_18=(Token)match(input,ORDER,FOLLOW_44); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_18, grammarAccess.getSelectAccess().getORDERKeyword_9_0());
                      			
                    }
                    otherlv_19=(Token)match(input,BY,FOLLOW_45); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_19, grammarAccess.getSelectAccess().getBYKeyword_9_1());
                      			
                    }
                    // InternalSQLParser.g:2652:4: ( (lv_orderByEntry_20_0= ruleOrderByColumns ) )
                    // InternalSQLParser.g:2653:5: (lv_orderByEntry_20_0= ruleOrderByColumns )
                    {
                    // InternalSQLParser.g:2653:5: (lv_orderByEntry_20_0= ruleOrderByColumns )
                    // InternalSQLParser.g:2654:6: lv_orderByEntry_20_0= ruleOrderByColumns
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getSelectAccess().getOrderByEntryOrderByColumnsParserRuleCall_9_2_0());
                      					
                    }
                    pushFollow(FOLLOW_48);
                    lv_orderByEntry_20_0=ruleOrderByColumns();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSelectRule());
                      						}
                      						set(
                      							current,
                      							"orderByEntry",
                      							lv_orderByEntry_20_0,
                      							"org.xtext.example.mydsl_sql.SQL.OrderByColumns");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            // InternalSQLParser.g:2672:3: (otherlv_21= LIMIT ( (lv_lim_22_0= ruleLimit ) ) )?
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==LIMIT) ) {
                alt44=1;
            }
            switch (alt44) {
                case 1 :
                    // InternalSQLParser.g:2673:4: otherlv_21= LIMIT ( (lv_lim_22_0= ruleLimit ) )
                    {
                    otherlv_21=(Token)match(input,LIMIT,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_21, grammarAccess.getSelectAccess().getLIMITKeyword_10_0());
                      			
                    }
                    // InternalSQLParser.g:2677:4: ( (lv_lim_22_0= ruleLimit ) )
                    // InternalSQLParser.g:2678:5: (lv_lim_22_0= ruleLimit )
                    {
                    // InternalSQLParser.g:2678:5: (lv_lim_22_0= ruleLimit )
                    // InternalSQLParser.g:2679:6: lv_lim_22_0= ruleLimit
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getSelectAccess().getLimLimitParserRuleCall_10_1_0());
                      					
                    }
                    pushFollow(FOLLOW_50);
                    lv_lim_22_0=ruleLimit();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSelectRule());
                      						}
                      						set(
                      							current,
                      							"lim",
                      							lv_lim_22_0,
                      							"org.xtext.example.mydsl_sql.SQL.Limit");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            // InternalSQLParser.g:2697:3: (otherlv_23= OFFSET ( (lv_offset_24_0= ruleOffset ) ) )?
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==OFFSET) ) {
                alt45=1;
            }
            switch (alt45) {
                case 1 :
                    // InternalSQLParser.g:2698:4: otherlv_23= OFFSET ( (lv_offset_24_0= ruleOffset ) )
                    {
                    otherlv_23=(Token)match(input,OFFSET,FOLLOW_51); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_23, grammarAccess.getSelectAccess().getOFFSETKeyword_11_0());
                      			
                    }
                    // InternalSQLParser.g:2702:4: ( (lv_offset_24_0= ruleOffset ) )
                    // InternalSQLParser.g:2703:5: (lv_offset_24_0= ruleOffset )
                    {
                    // InternalSQLParser.g:2703:5: (lv_offset_24_0= ruleOffset )
                    // InternalSQLParser.g:2704:6: lv_offset_24_0= ruleOffset
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getSelectAccess().getOffsetOffsetParserRuleCall_11_1_0());
                      					
                    }
                    pushFollow(FOLLOW_52);
                    lv_offset_24_0=ruleOffset();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSelectRule());
                      						}
                      						set(
                      							current,
                      							"offset",
                      							lv_offset_24_0,
                      							"org.xtext.example.mydsl_sql.SQL.Offset");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            // InternalSQLParser.g:2722:3: (otherlv_25= FETCH otherlv_26= FIRST ( (lv_fetchFirst_27_0= ruleFetchFirst ) ) )?
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==FETCH) ) {
                alt46=1;
            }
            switch (alt46) {
                case 1 :
                    // InternalSQLParser.g:2723:4: otherlv_25= FETCH otherlv_26= FIRST ( (lv_fetchFirst_27_0= ruleFetchFirst ) )
                    {
                    otherlv_25=(Token)match(input,FETCH,FOLLOW_53); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_25, grammarAccess.getSelectAccess().getFETCHKeyword_12_0());
                      			
                    }
                    otherlv_26=(Token)match(input,FIRST,FOLLOW_24); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_26, grammarAccess.getSelectAccess().getFIRSTKeyword_12_1());
                      			
                    }
                    // InternalSQLParser.g:2731:4: ( (lv_fetchFirst_27_0= ruleFetchFirst ) )
                    // InternalSQLParser.g:2732:5: (lv_fetchFirst_27_0= ruleFetchFirst )
                    {
                    // InternalSQLParser.g:2732:5: (lv_fetchFirst_27_0= ruleFetchFirst )
                    // InternalSQLParser.g:2733:6: lv_fetchFirst_27_0= ruleFetchFirst
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getSelectAccess().getFetchFirstFetchFirstParserRuleCall_12_2_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_fetchFirst_27_0=ruleFetchFirst();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSelectRule());
                      						}
                      						set(
                      							current,
                      							"fetchFirst",
                      							lv_fetchFirst_27_0,
                      							"org.xtext.example.mydsl_sql.SQL.FetchFirst");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSelect"


    // $ANTLR start "entryRuleColumns"
    // InternalSQLParser.g:2755:1: entryRuleColumns returns [EObject current=null] : iv_ruleColumns= ruleColumns EOF ;
    public final EObject entryRuleColumns() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleColumns = null;


        try {
            // InternalSQLParser.g:2755:48: (iv_ruleColumns= ruleColumns EOF )
            // InternalSQLParser.g:2756:2: iv_ruleColumns= ruleColumns EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getColumnsRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleColumns=ruleColumns();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleColumns; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleColumns"


    // $ANTLR start "ruleColumns"
    // InternalSQLParser.g:2762:1: ruleColumns returns [EObject current=null] : (this_ColumnOrAlias_0= ruleColumnOrAlias ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleColumnOrAlias ) ) )+ )? ) ;
    public final EObject ruleColumns() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_ColumnOrAlias_0 = null;

        EObject lv_entries_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:2768:2: ( (this_ColumnOrAlias_0= ruleColumnOrAlias ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleColumnOrAlias ) ) )+ )? ) )
            // InternalSQLParser.g:2769:2: (this_ColumnOrAlias_0= ruleColumnOrAlias ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleColumnOrAlias ) ) )+ )? )
            {
            // InternalSQLParser.g:2769:2: (this_ColumnOrAlias_0= ruleColumnOrAlias ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleColumnOrAlias ) ) )+ )? )
            // InternalSQLParser.g:2770:3: this_ColumnOrAlias_0= ruleColumnOrAlias ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleColumnOrAlias ) ) )+ )?
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getColumnsAccess().getColumnOrAliasParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_12);
            this_ColumnOrAlias_0=ruleColumnOrAlias();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ColumnOrAlias_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:2781:3: ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleColumnOrAlias ) ) )+ )?
            int alt48=2;
            int LA48_0 = input.LA(1);

            if ( (LA48_0==Comma) ) {
                alt48=1;
            }
            switch (alt48) {
                case 1 :
                    // InternalSQLParser.g:2782:4: () (otherlv_2= Comma ( (lv_entries_3_0= ruleColumnOrAlias ) ) )+
                    {
                    // InternalSQLParser.g:2782:4: ()
                    // InternalSQLParser.g:2783:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getColumnsAccess().getOrColumnEntriesAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalSQLParser.g:2792:4: (otherlv_2= Comma ( (lv_entries_3_0= ruleColumnOrAlias ) ) )+
                    int cnt47=0;
                    loop47:
                    do {
                        int alt47=2;
                        int LA47_0 = input.LA(1);

                        if ( (LA47_0==Comma) ) {
                            alt47=1;
                        }


                        switch (alt47) {
                    	case 1 :
                    	    // InternalSQLParser.g:2793:5: otherlv_2= Comma ( (lv_entries_3_0= ruleColumnOrAlias ) )
                    	    {
                    	    otherlv_2=(Token)match(input,Comma,FOLLOW_35); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_2, grammarAccess.getColumnsAccess().getCommaKeyword_1_1_0());
                    	      				
                    	    }
                    	    // InternalSQLParser.g:2797:5: ( (lv_entries_3_0= ruleColumnOrAlias ) )
                    	    // InternalSQLParser.g:2798:6: (lv_entries_3_0= ruleColumnOrAlias )
                    	    {
                    	    // InternalSQLParser.g:2798:6: (lv_entries_3_0= ruleColumnOrAlias )
                    	    // InternalSQLParser.g:2799:7: lv_entries_3_0= ruleColumnOrAlias
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getColumnsAccess().getEntriesColumnOrAliasParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_12);
                    	    lv_entries_3_0=ruleColumnOrAlias();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getColumnsRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"entries",
                    	      								lv_entries_3_0,
                    	      								"org.xtext.example.mydsl_sql.SQL.ColumnOrAlias");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt47 >= 1 ) break loop47;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(47, input);
                                throw eee;
                        }
                        cnt47++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleColumns"


    // $ANTLR start "entryRuleColumnOrAlias"
    // InternalSQLParser.g:2822:1: entryRuleColumnOrAlias returns [EObject current=null] : iv_ruleColumnOrAlias= ruleColumnOrAlias EOF ;
    public final EObject entryRuleColumnOrAlias() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleColumnOrAlias = null;


        try {
            // InternalSQLParser.g:2822:54: (iv_ruleColumnOrAlias= ruleColumnOrAlias EOF )
            // InternalSQLParser.g:2823:2: iv_ruleColumnOrAlias= ruleColumnOrAlias EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getColumnOrAliasRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleColumnOrAlias=ruleColumnOrAlias();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleColumnOrAlias; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleColumnOrAlias"


    // $ANTLR start "ruleColumnOrAlias"
    // InternalSQLParser.g:2829:1: ruleColumnOrAlias returns [EObject current=null] : ( ( ( (lv_ce_0_0= ruleOperandGroup ) ) ( (lv_alias_1_0= AS ) )? ( (lv_colAlias_2_0= ruleDbObjectName ) )? ) | ( (lv_allCols_3_0= RULE_STAR ) ) | ( (lv_dbAllCols_4_0= ruleDbObjectNameAll ) ) ) ;
    public final EObject ruleColumnOrAlias() throws RecognitionException {
        EObject current = null;

        Token lv_alias_1_0=null;
        Token lv_allCols_3_0=null;
        EObject lv_ce_0_0 = null;

        EObject lv_colAlias_2_0 = null;

        EObject lv_dbAllCols_4_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:2835:2: ( ( ( ( (lv_ce_0_0= ruleOperandGroup ) ) ( (lv_alias_1_0= AS ) )? ( (lv_colAlias_2_0= ruleDbObjectName ) )? ) | ( (lv_allCols_3_0= RULE_STAR ) ) | ( (lv_dbAllCols_4_0= ruleDbObjectNameAll ) ) ) )
            // InternalSQLParser.g:2836:2: ( ( ( (lv_ce_0_0= ruleOperandGroup ) ) ( (lv_alias_1_0= AS ) )? ( (lv_colAlias_2_0= ruleDbObjectName ) )? ) | ( (lv_allCols_3_0= RULE_STAR ) ) | ( (lv_dbAllCols_4_0= ruleDbObjectNameAll ) ) )
            {
            // InternalSQLParser.g:2836:2: ( ( ( (lv_ce_0_0= ruleOperandGroup ) ) ( (lv_alias_1_0= AS ) )? ( (lv_colAlias_2_0= ruleDbObjectName ) )? ) | ( (lv_allCols_3_0= RULE_STAR ) ) | ( (lv_dbAllCols_4_0= ruleDbObjectNameAll ) ) )
            int alt51=3;
            switch ( input.LA(1) ) {
            case RULE_ID:
                {
                int LA51_1 = input.LA(2);

                if ( (LA51_1==EOF||LA51_1==FROM||LA51_1==LeftParenthesisPlusSignRightParenthesis||LA51_1==AS||(LA51_1>=VerticalLineVerticalLine && LA51_1<=HyphenMinus)||LA51_1==Solidus||LA51_1==RULE_STAR||(LA51_1>=RULE_STRING && LA51_1<=RULE_ID)) ) {
                    alt51=1;
                }
                else if ( (LA51_1==FullStop) ) {
                    int LA51_6 = input.LA(3);

                    if ( (LA51_6==RULE_STAR) ) {
                        alt51=3;
                    }
                    else if ( ((LA51_6>=RULE_STRING && LA51_6<=RULE_ID)) ) {
                        alt51=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 51, 6, input);

                        throw nvae;
                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 51, 1, input);

                    throw nvae;
                }
                }
                break;
            case RULE_DBNAME:
                {
                int LA51_2 = input.LA(2);

                if ( (LA51_2==FullStop) ) {
                    int LA51_6 = input.LA(3);

                    if ( (LA51_6==RULE_STAR) ) {
                        alt51=3;
                    }
                    else if ( ((LA51_6>=RULE_STRING && LA51_6<=RULE_ID)) ) {
                        alt51=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 51, 6, input);

                        throw nvae;
                    }
                }
                else if ( (LA51_2==EOF||LA51_2==FROM||LA51_2==LeftParenthesisPlusSignRightParenthesis||LA51_2==AS||LA51_2==VerticalLineVerticalLine||(LA51_2>=RightParenthesis && LA51_2<=HyphenMinus)||LA51_2==Solidus||LA51_2==RULE_STAR||(LA51_2>=RULE_STRING && LA51_2<=RULE_ID)) ) {
                    alt51=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 51, 2, input);

                    throw nvae;
                }
                }
                break;
            case RULE_STRING:
                {
                int LA51_3 = input.LA(2);

                if ( (LA51_3==FullStop) ) {
                    int LA51_6 = input.LA(3);

                    if ( (LA51_6==RULE_STAR) ) {
                        alt51=3;
                    }
                    else if ( ((LA51_6>=RULE_STRING && LA51_6<=RULE_ID)) ) {
                        alt51=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 51, 6, input);

                        throw nvae;
                    }
                }
                else if ( (LA51_3==EOF||LA51_3==FROM||LA51_3==LeftParenthesisPlusSignRightParenthesis||LA51_3==AS||LA51_3==VerticalLineVerticalLine||(LA51_3>=RightParenthesis && LA51_3<=HyphenMinus)||LA51_3==Solidus||LA51_3==RULE_STAR||(LA51_3>=RULE_STRING && LA51_3<=RULE_ID)) ) {
                    alt51=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 51, 3, input);

                    throw nvae;
                }
                }
                break;
            case EXTRACT:
            case CAST:
            case FALSE:
            case CASE:
            case TRUE:
            case LeftParenthesis:
            case RULE_JRPARAM:
            case RULE_JRNPARAM:
            case RULE_UNSIGNED:
            case RULE_INT:
            case RULE_SIGNED_DOUBLE:
            case RULE_STRING_:
                {
                alt51=1;
                }
                break;
            case RULE_STAR:
                {
                alt51=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 51, 0, input);

                throw nvae;
            }

            switch (alt51) {
                case 1 :
                    // InternalSQLParser.g:2837:3: ( ( (lv_ce_0_0= ruleOperandGroup ) ) ( (lv_alias_1_0= AS ) )? ( (lv_colAlias_2_0= ruleDbObjectName ) )? )
                    {
                    // InternalSQLParser.g:2837:3: ( ( (lv_ce_0_0= ruleOperandGroup ) ) ( (lv_alias_1_0= AS ) )? ( (lv_colAlias_2_0= ruleDbObjectName ) )? )
                    // InternalSQLParser.g:2838:4: ( (lv_ce_0_0= ruleOperandGroup ) ) ( (lv_alias_1_0= AS ) )? ( (lv_colAlias_2_0= ruleDbObjectName ) )?
                    {
                    // InternalSQLParser.g:2838:4: ( (lv_ce_0_0= ruleOperandGroup ) )
                    // InternalSQLParser.g:2839:5: (lv_ce_0_0= ruleOperandGroup )
                    {
                    // InternalSQLParser.g:2839:5: (lv_ce_0_0= ruleOperandGroup )
                    // InternalSQLParser.g:2840:6: lv_ce_0_0= ruleOperandGroup
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getColumnOrAliasAccess().getCeOperandGroupParserRuleCall_0_0_0());
                      					
                    }
                    pushFollow(FOLLOW_54);
                    lv_ce_0_0=ruleOperandGroup();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getColumnOrAliasRule());
                      						}
                      						set(
                      							current,
                      							"ce",
                      							lv_ce_0_0,
                      							"org.xtext.example.mydsl_sql.SQL.OperandGroup");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalSQLParser.g:2857:4: ( (lv_alias_1_0= AS ) )?
                    int alt49=2;
                    int LA49_0 = input.LA(1);

                    if ( (LA49_0==AS) ) {
                        alt49=1;
                    }
                    switch (alt49) {
                        case 1 :
                            // InternalSQLParser.g:2858:5: (lv_alias_1_0= AS )
                            {
                            // InternalSQLParser.g:2858:5: (lv_alias_1_0= AS )
                            // InternalSQLParser.g:2859:6: lv_alias_1_0= AS
                            {
                            lv_alias_1_0=(Token)match(input,AS,FOLLOW_55); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(lv_alias_1_0, grammarAccess.getColumnOrAliasAccess().getAliasASKeyword_0_1_0());
                              					
                            }
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getColumnOrAliasRule());
                              						}
                              						setWithLastConsumed(current, "alias", lv_alias_1_0, "AS");
                              					
                            }

                            }


                            }
                            break;

                    }

                    // InternalSQLParser.g:2871:4: ( (lv_colAlias_2_0= ruleDbObjectName ) )?
                    int alt50=2;
                    int LA50_0 = input.LA(1);

                    if ( ((LA50_0>=RULE_STRING && LA50_0<=RULE_ID)) ) {
                        alt50=1;
                    }
                    switch (alt50) {
                        case 1 :
                            // InternalSQLParser.g:2872:5: (lv_colAlias_2_0= ruleDbObjectName )
                            {
                            // InternalSQLParser.g:2872:5: (lv_colAlias_2_0= ruleDbObjectName )
                            // InternalSQLParser.g:2873:6: lv_colAlias_2_0= ruleDbObjectName
                            {
                            if ( state.backtracking==0 ) {

                              						newCompositeNode(grammarAccess.getColumnOrAliasAccess().getColAliasDbObjectNameParserRuleCall_0_2_0());
                              					
                            }
                            pushFollow(FOLLOW_2);
                            lv_colAlias_2_0=ruleDbObjectName();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElementForParent(grammarAccess.getColumnOrAliasRule());
                              						}
                              						set(
                              							current,
                              							"colAlias",
                              							lv_colAlias_2_0,
                              							"org.xtext.example.mydsl_sql.SQL.DbObjectName");
                              						afterParserOrEnumRuleCall();
                              					
                            }

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:2892:3: ( (lv_allCols_3_0= RULE_STAR ) )
                    {
                    // InternalSQLParser.g:2892:3: ( (lv_allCols_3_0= RULE_STAR ) )
                    // InternalSQLParser.g:2893:4: (lv_allCols_3_0= RULE_STAR )
                    {
                    // InternalSQLParser.g:2893:4: (lv_allCols_3_0= RULE_STAR )
                    // InternalSQLParser.g:2894:5: lv_allCols_3_0= RULE_STAR
                    {
                    lv_allCols_3_0=(Token)match(input,RULE_STAR,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_allCols_3_0, grammarAccess.getColumnOrAliasAccess().getAllColsSTARTerminalRuleCall_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getColumnOrAliasRule());
                      					}
                      					setWithLastConsumed(
                      						current,
                      						"allCols",
                      						lv_allCols_3_0,
                      						"org.xtext.example.mydsl_sql.SQL.STAR");
                      				
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:2911:3: ( (lv_dbAllCols_4_0= ruleDbObjectNameAll ) )
                    {
                    // InternalSQLParser.g:2911:3: ( (lv_dbAllCols_4_0= ruleDbObjectNameAll ) )
                    // InternalSQLParser.g:2912:4: (lv_dbAllCols_4_0= ruleDbObjectNameAll )
                    {
                    // InternalSQLParser.g:2912:4: (lv_dbAllCols_4_0= ruleDbObjectNameAll )
                    // InternalSQLParser.g:2913:5: lv_dbAllCols_4_0= ruleDbObjectNameAll
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getColumnOrAliasAccess().getDbAllColsDbObjectNameAllParserRuleCall_2_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_dbAllCols_4_0=ruleDbObjectNameAll();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getColumnOrAliasRule());
                      					}
                      					set(
                      						current,
                      						"dbAllCols",
                      						lv_dbAllCols_4_0,
                      						"org.xtext.example.mydsl_sql.SQL.DbObjectNameAll");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleColumnOrAlias"


    // $ANTLR start "entryRuleColumnFull"
    // InternalSQLParser.g:2934:1: entryRuleColumnFull returns [EObject current=null] : iv_ruleColumnFull= ruleColumnFull EOF ;
    public final EObject entryRuleColumnFull() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleColumnFull = null;


        try {
            // InternalSQLParser.g:2934:51: (iv_ruleColumnFull= ruleColumnFull EOF )
            // InternalSQLParser.g:2935:2: iv_ruleColumnFull= ruleColumnFull EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getColumnFullRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleColumnFull=ruleColumnFull();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleColumnFull; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleColumnFull"


    // $ANTLR start "ruleColumnFull"
    // InternalSQLParser.g:2941:1: ruleColumnFull returns [EObject current=null] : (this_DbObjectName_0= ruleDbObjectName ( () (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )? ) ;
    public final EObject ruleColumnFull() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_DbObjectName_0 = null;

        EObject lv_entries_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:2947:2: ( (this_DbObjectName_0= ruleDbObjectName ( () (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )? ) )
            // InternalSQLParser.g:2948:2: (this_DbObjectName_0= ruleDbObjectName ( () (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )? )
            {
            // InternalSQLParser.g:2948:2: (this_DbObjectName_0= ruleDbObjectName ( () (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )? )
            // InternalSQLParser.g:2949:3: this_DbObjectName_0= ruleDbObjectName ( () (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )?
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getColumnFullAccess().getDbObjectNameParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_56);
            this_DbObjectName_0=ruleDbObjectName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_DbObjectName_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:2960:3: ( () (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )?
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==FullStop) ) {
                alt53=1;
            }
            switch (alt53) {
                case 1 :
                    // InternalSQLParser.g:2961:4: () (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+
                    {
                    // InternalSQLParser.g:2961:4: ()
                    // InternalSQLParser.g:2962:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getColumnFullAccess().getColEntriesAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalSQLParser.g:2971:4: (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+
                    int cnt52=0;
                    loop52:
                    do {
                        int alt52=2;
                        int LA52_0 = input.LA(1);

                        if ( (LA52_0==FullStop) ) {
                            alt52=1;
                        }


                        switch (alt52) {
                    	case 1 :
                    	    // InternalSQLParser.g:2972:5: otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) )
                    	    {
                    	    otherlv_2=(Token)match(input,FullStop,FOLLOW_28); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_2, grammarAccess.getColumnFullAccess().getFullStopKeyword_1_1_0());
                    	      				
                    	    }
                    	    // InternalSQLParser.g:2976:5: ( (lv_entries_3_0= ruleDbObjectName ) )
                    	    // InternalSQLParser.g:2977:6: (lv_entries_3_0= ruleDbObjectName )
                    	    {
                    	    // InternalSQLParser.g:2977:6: (lv_entries_3_0= ruleDbObjectName )
                    	    // InternalSQLParser.g:2978:7: lv_entries_3_0= ruleDbObjectName
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getColumnFullAccess().getEntriesDbObjectNameParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_56);
                    	    lv_entries_3_0=ruleDbObjectName();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getColumnFullRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"entries",
                    	      								lv_entries_3_0,
                    	      								"org.xtext.example.mydsl_sql.SQL.DbObjectName");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt52 >= 1 ) break loop52;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(52, input);
                                throw eee;
                        }
                        cnt52++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleColumnFull"


    // $ANTLR start "entryRuleTables"
    // InternalSQLParser.g:3001:1: entryRuleTables returns [EObject current=null] : iv_ruleTables= ruleTables EOF ;
    public final EObject entryRuleTables() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTables = null;


        try {
            // InternalSQLParser.g:3001:47: (iv_ruleTables= ruleTables EOF )
            // InternalSQLParser.g:3002:2: iv_ruleTables= ruleTables EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTablesRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTables=ruleTables();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTables; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTables"


    // $ANTLR start "ruleTables"
    // InternalSQLParser.g:3008:1: ruleTables returns [EObject current=null] : (this_FromTable_0= ruleFromTable ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleFromTable ) ) )+ )? ) ;
    public final EObject ruleTables() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_FromTable_0 = null;

        EObject lv_entries_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:3014:2: ( (this_FromTable_0= ruleFromTable ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleFromTable ) ) )+ )? ) )
            // InternalSQLParser.g:3015:2: (this_FromTable_0= ruleFromTable ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleFromTable ) ) )+ )? )
            {
            // InternalSQLParser.g:3015:2: (this_FromTable_0= ruleFromTable ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleFromTable ) ) )+ )? )
            // InternalSQLParser.g:3016:3: this_FromTable_0= ruleFromTable ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleFromTable ) ) )+ )?
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getTablesAccess().getFromTableParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_12);
            this_FromTable_0=ruleFromTable();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_FromTable_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:3027:3: ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleFromTable ) ) )+ )?
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==Comma) ) {
                alt55=1;
            }
            switch (alt55) {
                case 1 :
                    // InternalSQLParser.g:3028:4: () (otherlv_2= Comma ( (lv_entries_3_0= ruleFromTable ) ) )+
                    {
                    // InternalSQLParser.g:3028:4: ()
                    // InternalSQLParser.g:3029:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getTablesAccess().getOrTableEntriesAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalSQLParser.g:3038:4: (otherlv_2= Comma ( (lv_entries_3_0= ruleFromTable ) ) )+
                    int cnt54=0;
                    loop54:
                    do {
                        int alt54=2;
                        int LA54_0 = input.LA(1);

                        if ( (LA54_0==Comma) ) {
                            alt54=1;
                        }


                        switch (alt54) {
                    	case 1 :
                    	    // InternalSQLParser.g:3039:5: otherlv_2= Comma ( (lv_entries_3_0= ruleFromTable ) )
                    	    {
                    	    otherlv_2=(Token)match(input,Comma,FOLLOW_5); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_2, grammarAccess.getTablesAccess().getCommaKeyword_1_1_0());
                    	      				
                    	    }
                    	    // InternalSQLParser.g:3043:5: ( (lv_entries_3_0= ruleFromTable ) )
                    	    // InternalSQLParser.g:3044:6: (lv_entries_3_0= ruleFromTable )
                    	    {
                    	    // InternalSQLParser.g:3044:6: (lv_entries_3_0= ruleFromTable )
                    	    // InternalSQLParser.g:3045:7: lv_entries_3_0= ruleFromTable
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getTablesAccess().getEntriesFromTableParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_12);
                    	    lv_entries_3_0=ruleFromTable();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getTablesRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"entries",
                    	      								lv_entries_3_0,
                    	      								"org.xtext.example.mydsl_sql.SQL.FromTable");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt54 >= 1 ) break loop54;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(54, input);
                                throw eee;
                        }
                        cnt54++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTables"


    // $ANTLR start "entryRuleFromTable"
    // InternalSQLParser.g:3068:1: entryRuleFromTable returns [EObject current=null] : iv_ruleFromTable= ruleFromTable EOF ;
    public final EObject entryRuleFromTable() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFromTable = null;


        try {
            // InternalSQLParser.g:3068:50: (iv_ruleFromTable= ruleFromTable EOF )
            // InternalSQLParser.g:3069:2: iv_ruleFromTable= ruleFromTable EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFromTableRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFromTable=ruleFromTable();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFromTable; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFromTable"


    // $ANTLR start "ruleFromTable"
    // InternalSQLParser.g:3075:1: ruleFromTable returns [EObject current=null] : ( ( (lv_table_0_0= ruleTableOrAlias ) ) ( (lv_fjoin_1_0= ruleFromTableJoin ) )* ) ;
    public final EObject ruleFromTable() throws RecognitionException {
        EObject current = null;

        EObject lv_table_0_0 = null;

        EObject lv_fjoin_1_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:3081:2: ( ( ( (lv_table_0_0= ruleTableOrAlias ) ) ( (lv_fjoin_1_0= ruleFromTableJoin ) )* ) )
            // InternalSQLParser.g:3082:2: ( ( (lv_table_0_0= ruleTableOrAlias ) ) ( (lv_fjoin_1_0= ruleFromTableJoin ) )* )
            {
            // InternalSQLParser.g:3082:2: ( ( (lv_table_0_0= ruleTableOrAlias ) ) ( (lv_fjoin_1_0= ruleFromTableJoin ) )* )
            // InternalSQLParser.g:3083:3: ( (lv_table_0_0= ruleTableOrAlias ) ) ( (lv_fjoin_1_0= ruleFromTableJoin ) )*
            {
            // InternalSQLParser.g:3083:3: ( (lv_table_0_0= ruleTableOrAlias ) )
            // InternalSQLParser.g:3084:4: (lv_table_0_0= ruleTableOrAlias )
            {
            // InternalSQLParser.g:3084:4: (lv_table_0_0= ruleTableOrAlias )
            // InternalSQLParser.g:3085:5: lv_table_0_0= ruleTableOrAlias
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getFromTableAccess().getTableTableOrAliasParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_57);
            lv_table_0_0=ruleTableOrAlias();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getFromTableRule());
              					}
              					set(
              						current,
              						"table",
              						lv_table_0_0,
              						"org.xtext.example.mydsl_sql.SQL.TableOrAlias");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:3102:3: ( (lv_fjoin_1_0= ruleFromTableJoin ) )*
            loop56:
            do {
                int alt56=2;
                int LA56_0 = input.LA(1);

                if ( (LA56_0==STRAIGHT_JOIN||LA56_0==NATURAL||LA56_0==CROSS||LA56_0==INNER||LA56_0==RIGHT||LA56_0==FULL||LA56_0==JOIN||LA56_0==LEFT) ) {
                    alt56=1;
                }


                switch (alt56) {
            	case 1 :
            	    // InternalSQLParser.g:3103:4: (lv_fjoin_1_0= ruleFromTableJoin )
            	    {
            	    // InternalSQLParser.g:3103:4: (lv_fjoin_1_0= ruleFromTableJoin )
            	    // InternalSQLParser.g:3104:5: lv_fjoin_1_0= ruleFromTableJoin
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getFromTableAccess().getFjoinFromTableJoinParserRuleCall_1_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_57);
            	    lv_fjoin_1_0=ruleFromTableJoin();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getFromTableRule());
            	      					}
            	      					add(
            	      						current,
            	      						"fjoin",
            	      						lv_fjoin_1_0,
            	      						"org.xtext.example.mydsl_sql.SQL.FromTableJoin");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop56;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFromTable"


    // $ANTLR start "entryRuleFromTableJoin"
    // InternalSQLParser.g:3125:1: entryRuleFromTableJoin returns [EObject current=null] : iv_ruleFromTableJoin= ruleFromTableJoin EOF ;
    public final EObject entryRuleFromTableJoin() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFromTableJoin = null;


        try {
            // InternalSQLParser.g:3125:54: (iv_ruleFromTableJoin= ruleFromTableJoin EOF )
            // InternalSQLParser.g:3126:2: iv_ruleFromTableJoin= ruleFromTableJoin EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFromTableJoinRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFromTableJoin=ruleFromTableJoin();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFromTableJoin; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFromTableJoin"


    // $ANTLR start "ruleFromTableJoin"
    // InternalSQLParser.g:3132:1: ruleFromTableJoin returns [EObject current=null] : ( ( (lv_join_0_0= ruleJoinType ) ) ( (lv_onTable_1_0= ruleTableOrAlias ) ) ( (otherlv_2= ON ( (lv_joinExpr_3_0= ruleFullExpression ) ) ) | ( (lv_joinCond_4_0= ruleJoinCondition ) ) ) ) ;
    public final EObject ruleFromTableJoin() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        AntlrDatatypeRuleToken lv_join_0_0 = null;

        EObject lv_onTable_1_0 = null;

        EObject lv_joinExpr_3_0 = null;

        EObject lv_joinCond_4_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:3138:2: ( ( ( (lv_join_0_0= ruleJoinType ) ) ( (lv_onTable_1_0= ruleTableOrAlias ) ) ( (otherlv_2= ON ( (lv_joinExpr_3_0= ruleFullExpression ) ) ) | ( (lv_joinCond_4_0= ruleJoinCondition ) ) ) ) )
            // InternalSQLParser.g:3139:2: ( ( (lv_join_0_0= ruleJoinType ) ) ( (lv_onTable_1_0= ruleTableOrAlias ) ) ( (otherlv_2= ON ( (lv_joinExpr_3_0= ruleFullExpression ) ) ) | ( (lv_joinCond_4_0= ruleJoinCondition ) ) ) )
            {
            // InternalSQLParser.g:3139:2: ( ( (lv_join_0_0= ruleJoinType ) ) ( (lv_onTable_1_0= ruleTableOrAlias ) ) ( (otherlv_2= ON ( (lv_joinExpr_3_0= ruleFullExpression ) ) ) | ( (lv_joinCond_4_0= ruleJoinCondition ) ) ) )
            // InternalSQLParser.g:3140:3: ( (lv_join_0_0= ruleJoinType ) ) ( (lv_onTable_1_0= ruleTableOrAlias ) ) ( (otherlv_2= ON ( (lv_joinExpr_3_0= ruleFullExpression ) ) ) | ( (lv_joinCond_4_0= ruleJoinCondition ) ) )
            {
            // InternalSQLParser.g:3140:3: ( (lv_join_0_0= ruleJoinType ) )
            // InternalSQLParser.g:3141:4: (lv_join_0_0= ruleJoinType )
            {
            // InternalSQLParser.g:3141:4: (lv_join_0_0= ruleJoinType )
            // InternalSQLParser.g:3142:5: lv_join_0_0= ruleJoinType
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getFromTableJoinAccess().getJoinJoinTypeParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_5);
            lv_join_0_0=ruleJoinType();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getFromTableJoinRule());
              					}
              					set(
              						current,
              						"join",
              						lv_join_0_0,
              						"org.xtext.example.mydsl_sql.SQL.JoinType");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:3159:3: ( (lv_onTable_1_0= ruleTableOrAlias ) )
            // InternalSQLParser.g:3160:4: (lv_onTable_1_0= ruleTableOrAlias )
            {
            // InternalSQLParser.g:3160:4: (lv_onTable_1_0= ruleTableOrAlias )
            // InternalSQLParser.g:3161:5: lv_onTable_1_0= ruleTableOrAlias
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getFromTableJoinAccess().getOnTableTableOrAliasParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_58);
            lv_onTable_1_0=ruleTableOrAlias();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getFromTableJoinRule());
              					}
              					set(
              						current,
              						"onTable",
              						lv_onTable_1_0,
              						"org.xtext.example.mydsl_sql.SQL.TableOrAlias");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:3178:3: ( (otherlv_2= ON ( (lv_joinExpr_3_0= ruleFullExpression ) ) ) | ( (lv_joinCond_4_0= ruleJoinCondition ) ) )
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==ON) ) {
                alt57=1;
            }
            else if ( (LA57_0==USING) ) {
                alt57=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 57, 0, input);

                throw nvae;
            }
            switch (alt57) {
                case 1 :
                    // InternalSQLParser.g:3179:4: (otherlv_2= ON ( (lv_joinExpr_3_0= ruleFullExpression ) ) )
                    {
                    // InternalSQLParser.g:3179:4: (otherlv_2= ON ( (lv_joinExpr_3_0= ruleFullExpression ) ) )
                    // InternalSQLParser.g:3180:5: otherlv_2= ON ( (lv_joinExpr_3_0= ruleFullExpression ) )
                    {
                    otherlv_2=(Token)match(input,ON,FOLLOW_42); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_2, grammarAccess.getFromTableJoinAccess().getONKeyword_2_0_0());
                      				
                    }
                    // InternalSQLParser.g:3184:5: ( (lv_joinExpr_3_0= ruleFullExpression ) )
                    // InternalSQLParser.g:3185:6: (lv_joinExpr_3_0= ruleFullExpression )
                    {
                    // InternalSQLParser.g:3185:6: (lv_joinExpr_3_0= ruleFullExpression )
                    // InternalSQLParser.g:3186:7: lv_joinExpr_3_0= ruleFullExpression
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getFromTableJoinAccess().getJoinExprFullExpressionParserRuleCall_2_0_1_0());
                      						
                    }
                    pushFollow(FOLLOW_2);
                    lv_joinExpr_3_0=ruleFullExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getFromTableJoinRule());
                      							}
                      							set(
                      								current,
                      								"joinExpr",
                      								lv_joinExpr_3_0,
                      								"org.xtext.example.mydsl_sql.SQL.FullExpression");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:3205:4: ( (lv_joinCond_4_0= ruleJoinCondition ) )
                    {
                    // InternalSQLParser.g:3205:4: ( (lv_joinCond_4_0= ruleJoinCondition ) )
                    // InternalSQLParser.g:3206:5: (lv_joinCond_4_0= ruleJoinCondition )
                    {
                    // InternalSQLParser.g:3206:5: (lv_joinCond_4_0= ruleJoinCondition )
                    // InternalSQLParser.g:3207:6: lv_joinCond_4_0= ruleJoinCondition
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getFromTableJoinAccess().getJoinCondJoinConditionParserRuleCall_2_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_joinCond_4_0=ruleJoinCondition();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getFromTableJoinRule());
                      						}
                      						set(
                      							current,
                      							"joinCond",
                      							lv_joinCond_4_0,
                      							"org.xtext.example.mydsl_sql.SQL.JoinCondition");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFromTableJoin"


    // $ANTLR start "entryRuleJoinCondition"
    // InternalSQLParser.g:3229:1: entryRuleJoinCondition returns [EObject current=null] : iv_ruleJoinCondition= ruleJoinCondition EOF ;
    public final EObject entryRuleJoinCondition() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleJoinCondition = null;


        try {
            // InternalSQLParser.g:3229:54: (iv_ruleJoinCondition= ruleJoinCondition EOF )
            // InternalSQLParser.g:3230:2: iv_ruleJoinCondition= ruleJoinCondition EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getJoinConditionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleJoinCondition=ruleJoinCondition();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleJoinCondition; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleJoinCondition"


    // $ANTLR start "ruleJoinCondition"
    // InternalSQLParser.g:3236:1: ruleJoinCondition returns [EObject current=null] : (otherlv_0= USING otherlv_1= LeftParenthesis ( (lv_useCols_2_0= ruleUsingCols ) ) otherlv_3= RightParenthesis ) ;
    public final EObject ruleJoinCondition() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_useCols_2_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:3242:2: ( (otherlv_0= USING otherlv_1= LeftParenthesis ( (lv_useCols_2_0= ruleUsingCols ) ) otherlv_3= RightParenthesis ) )
            // InternalSQLParser.g:3243:2: (otherlv_0= USING otherlv_1= LeftParenthesis ( (lv_useCols_2_0= ruleUsingCols ) ) otherlv_3= RightParenthesis )
            {
            // InternalSQLParser.g:3243:2: (otherlv_0= USING otherlv_1= LeftParenthesis ( (lv_useCols_2_0= ruleUsingCols ) ) otherlv_3= RightParenthesis )
            // InternalSQLParser.g:3244:3: otherlv_0= USING otherlv_1= LeftParenthesis ( (lv_useCols_2_0= ruleUsingCols ) ) otherlv_3= RightParenthesis
            {
            otherlv_0=(Token)match(input,USING,FOLLOW_11); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getJoinConditionAccess().getUSINGKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_28); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getJoinConditionAccess().getLeftParenthesisKeyword_1());
              		
            }
            // InternalSQLParser.g:3252:3: ( (lv_useCols_2_0= ruleUsingCols ) )
            // InternalSQLParser.g:3253:4: (lv_useCols_2_0= ruleUsingCols )
            {
            // InternalSQLParser.g:3253:4: (lv_useCols_2_0= ruleUsingCols )
            // InternalSQLParser.g:3254:5: lv_useCols_2_0= ruleUsingCols
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getJoinConditionAccess().getUseColsUsingColsParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_9);
            lv_useCols_2_0=ruleUsingCols();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getJoinConditionRule());
              					}
              					set(
              						current,
              						"useCols",
              						lv_useCols_2_0,
              						"org.xtext.example.mydsl_sql.SQL.UsingCols");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getJoinConditionAccess().getRightParenthesisKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleJoinCondition"


    // $ANTLR start "entryRuleUsingCols"
    // InternalSQLParser.g:3279:1: entryRuleUsingCols returns [EObject current=null] : iv_ruleUsingCols= ruleUsingCols EOF ;
    public final EObject entryRuleUsingCols() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleUsingCols = null;


        try {
            // InternalSQLParser.g:3279:50: (iv_ruleUsingCols= ruleUsingCols EOF )
            // InternalSQLParser.g:3280:2: iv_ruleUsingCols= ruleUsingCols EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getUsingColsRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleUsingCols=ruleUsingCols();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleUsingCols; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleUsingCols"


    // $ANTLR start "ruleUsingCols"
    // InternalSQLParser.g:3286:1: ruleUsingCols returns [EObject current=null] : (this_DbObjectName_0= ruleDbObjectName ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )? ) ;
    public final EObject ruleUsingCols() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_DbObjectName_0 = null;

        EObject lv_entries_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:3292:2: ( (this_DbObjectName_0= ruleDbObjectName ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )? ) )
            // InternalSQLParser.g:3293:2: (this_DbObjectName_0= ruleDbObjectName ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )? )
            {
            // InternalSQLParser.g:3293:2: (this_DbObjectName_0= ruleDbObjectName ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )? )
            // InternalSQLParser.g:3294:3: this_DbObjectName_0= ruleDbObjectName ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )?
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getUsingColsAccess().getDbObjectNameParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_12);
            this_DbObjectName_0=ruleDbObjectName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_DbObjectName_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:3305:3: ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )?
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==Comma) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    // InternalSQLParser.g:3306:4: () (otherlv_2= Comma ( (lv_entries_3_0= ruleDbObjectName ) ) )+
                    {
                    // InternalSQLParser.g:3306:4: ()
                    // InternalSQLParser.g:3307:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getUsingColsAccess().getUsingColsEntriesAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalSQLParser.g:3316:4: (otherlv_2= Comma ( (lv_entries_3_0= ruleDbObjectName ) ) )+
                    int cnt58=0;
                    loop58:
                    do {
                        int alt58=2;
                        int LA58_0 = input.LA(1);

                        if ( (LA58_0==Comma) ) {
                            alt58=1;
                        }


                        switch (alt58) {
                    	case 1 :
                    	    // InternalSQLParser.g:3317:5: otherlv_2= Comma ( (lv_entries_3_0= ruleDbObjectName ) )
                    	    {
                    	    otherlv_2=(Token)match(input,Comma,FOLLOW_28); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_2, grammarAccess.getUsingColsAccess().getCommaKeyword_1_1_0());
                    	      				
                    	    }
                    	    // InternalSQLParser.g:3321:5: ( (lv_entries_3_0= ruleDbObjectName ) )
                    	    // InternalSQLParser.g:3322:6: (lv_entries_3_0= ruleDbObjectName )
                    	    {
                    	    // InternalSQLParser.g:3322:6: (lv_entries_3_0= ruleDbObjectName )
                    	    // InternalSQLParser.g:3323:7: lv_entries_3_0= ruleDbObjectName
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getUsingColsAccess().getEntriesDbObjectNameParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_12);
                    	    lv_entries_3_0=ruleDbObjectName();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getUsingColsRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"entries",
                    	      								lv_entries_3_0,
                    	      								"org.xtext.example.mydsl_sql.SQL.DbObjectName");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt58 >= 1 ) break loop58;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(58, input);
                                throw eee;
                        }
                        cnt58++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleUsingCols"


    // $ANTLR start "entryRuleTableOrAlias"
    // InternalSQLParser.g:3346:1: entryRuleTableOrAlias returns [EObject current=null] : iv_ruleTableOrAlias= ruleTableOrAlias EOF ;
    public final EObject entryRuleTableOrAlias() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTableOrAlias = null;


        try {
            // InternalSQLParser.g:3346:53: (iv_ruleTableOrAlias= ruleTableOrAlias EOF )
            // InternalSQLParser.g:3347:2: iv_ruleTableOrAlias= ruleTableOrAlias EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTableOrAliasRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTableOrAlias=ruleTableOrAlias();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTableOrAlias; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTableOrAlias"


    // $ANTLR start "ruleTableOrAlias"
    // InternalSQLParser.g:3353:1: ruleTableOrAlias returns [EObject current=null] : ( ( ( (lv_tfull_0_0= ruleTableFull ) ) | ( (lv_sq_1_0= ruleSubQueryOperand ) ) | ( (lv_values_2_0= ruleFromValues ) ) ) ( ( (lv_pivot_3_0= rulePivotTable ) ) | ( (lv_unpivot_4_0= ruleUnpivotTable ) ) )? ( (lv_alias_5_0= AS ) )? ( (lv_tblAlias_6_0= ruleDbObjectName ) )? ) ;
    public final EObject ruleTableOrAlias() throws RecognitionException {
        EObject current = null;

        Token lv_alias_5_0=null;
        EObject lv_tfull_0_0 = null;

        EObject lv_sq_1_0 = null;

        EObject lv_values_2_0 = null;

        EObject lv_pivot_3_0 = null;

        EObject lv_unpivot_4_0 = null;

        EObject lv_tblAlias_6_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:3359:2: ( ( ( ( (lv_tfull_0_0= ruleTableFull ) ) | ( (lv_sq_1_0= ruleSubQueryOperand ) ) | ( (lv_values_2_0= ruleFromValues ) ) ) ( ( (lv_pivot_3_0= rulePivotTable ) ) | ( (lv_unpivot_4_0= ruleUnpivotTable ) ) )? ( (lv_alias_5_0= AS ) )? ( (lv_tblAlias_6_0= ruleDbObjectName ) )? ) )
            // InternalSQLParser.g:3360:2: ( ( ( (lv_tfull_0_0= ruleTableFull ) ) | ( (lv_sq_1_0= ruleSubQueryOperand ) ) | ( (lv_values_2_0= ruleFromValues ) ) ) ( ( (lv_pivot_3_0= rulePivotTable ) ) | ( (lv_unpivot_4_0= ruleUnpivotTable ) ) )? ( (lv_alias_5_0= AS ) )? ( (lv_tblAlias_6_0= ruleDbObjectName ) )? )
            {
            // InternalSQLParser.g:3360:2: ( ( ( (lv_tfull_0_0= ruleTableFull ) ) | ( (lv_sq_1_0= ruleSubQueryOperand ) ) | ( (lv_values_2_0= ruleFromValues ) ) ) ( ( (lv_pivot_3_0= rulePivotTable ) ) | ( (lv_unpivot_4_0= ruleUnpivotTable ) ) )? ( (lv_alias_5_0= AS ) )? ( (lv_tblAlias_6_0= ruleDbObjectName ) )? )
            // InternalSQLParser.g:3361:3: ( ( (lv_tfull_0_0= ruleTableFull ) ) | ( (lv_sq_1_0= ruleSubQueryOperand ) ) | ( (lv_values_2_0= ruleFromValues ) ) ) ( ( (lv_pivot_3_0= rulePivotTable ) ) | ( (lv_unpivot_4_0= ruleUnpivotTable ) ) )? ( (lv_alias_5_0= AS ) )? ( (lv_tblAlias_6_0= ruleDbObjectName ) )?
            {
            // InternalSQLParser.g:3361:3: ( ( (lv_tfull_0_0= ruleTableFull ) ) | ( (lv_sq_1_0= ruleSubQueryOperand ) ) | ( (lv_values_2_0= ruleFromValues ) ) )
            int alt60=3;
            int LA60_0 = input.LA(1);

            if ( ((LA60_0>=RULE_STRING && LA60_0<=RULE_ID)) ) {
                alt60=1;
            }
            else if ( (LA60_0==LeftParenthesis) ) {
                int LA60_2 = input.LA(2);

                if ( (LA60_2==SELECT) ) {
                    alt60=2;
                }
                else if ( (LA60_2==VALUES) ) {
                    alt60=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 60, 2, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 60, 0, input);

                throw nvae;
            }
            switch (alt60) {
                case 1 :
                    // InternalSQLParser.g:3362:4: ( (lv_tfull_0_0= ruleTableFull ) )
                    {
                    // InternalSQLParser.g:3362:4: ( (lv_tfull_0_0= ruleTableFull ) )
                    // InternalSQLParser.g:3363:5: (lv_tfull_0_0= ruleTableFull )
                    {
                    // InternalSQLParser.g:3363:5: (lv_tfull_0_0= ruleTableFull )
                    // InternalSQLParser.g:3364:6: lv_tfull_0_0= ruleTableFull
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTableOrAliasAccess().getTfullTableFullParserRuleCall_0_0_0());
                      					
                    }
                    pushFollow(FOLLOW_59);
                    lv_tfull_0_0=ruleTableFull();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTableOrAliasRule());
                      						}
                      						set(
                      							current,
                      							"tfull",
                      							lv_tfull_0_0,
                      							"org.xtext.example.mydsl_sql.SQL.TableFull");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:3382:4: ( (lv_sq_1_0= ruleSubQueryOperand ) )
                    {
                    // InternalSQLParser.g:3382:4: ( (lv_sq_1_0= ruleSubQueryOperand ) )
                    // InternalSQLParser.g:3383:5: (lv_sq_1_0= ruleSubQueryOperand )
                    {
                    // InternalSQLParser.g:3383:5: (lv_sq_1_0= ruleSubQueryOperand )
                    // InternalSQLParser.g:3384:6: lv_sq_1_0= ruleSubQueryOperand
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTableOrAliasAccess().getSqSubQueryOperandParserRuleCall_0_1_0());
                      					
                    }
                    pushFollow(FOLLOW_59);
                    lv_sq_1_0=ruleSubQueryOperand();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTableOrAliasRule());
                      						}
                      						set(
                      							current,
                      							"sq",
                      							lv_sq_1_0,
                      							"org.xtext.example.mydsl_sql.SQL.SubQueryOperand");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:3402:4: ( (lv_values_2_0= ruleFromValues ) )
                    {
                    // InternalSQLParser.g:3402:4: ( (lv_values_2_0= ruleFromValues ) )
                    // InternalSQLParser.g:3403:5: (lv_values_2_0= ruleFromValues )
                    {
                    // InternalSQLParser.g:3403:5: (lv_values_2_0= ruleFromValues )
                    // InternalSQLParser.g:3404:6: lv_values_2_0= ruleFromValues
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTableOrAliasAccess().getValuesFromValuesParserRuleCall_0_2_0());
                      					
                    }
                    pushFollow(FOLLOW_59);
                    lv_values_2_0=ruleFromValues();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTableOrAliasRule());
                      						}
                      						set(
                      							current,
                      							"values",
                      							lv_values_2_0,
                      							"org.xtext.example.mydsl_sql.SQL.FromValues");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            // InternalSQLParser.g:3422:3: ( ( (lv_pivot_3_0= rulePivotTable ) ) | ( (lv_unpivot_4_0= ruleUnpivotTable ) ) )?
            int alt61=3;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==PIVOT) ) {
                alt61=1;
            }
            else if ( (LA61_0==UNPIVOT) ) {
                alt61=2;
            }
            switch (alt61) {
                case 1 :
                    // InternalSQLParser.g:3423:4: ( (lv_pivot_3_0= rulePivotTable ) )
                    {
                    // InternalSQLParser.g:3423:4: ( (lv_pivot_3_0= rulePivotTable ) )
                    // InternalSQLParser.g:3424:5: (lv_pivot_3_0= rulePivotTable )
                    {
                    // InternalSQLParser.g:3424:5: (lv_pivot_3_0= rulePivotTable )
                    // InternalSQLParser.g:3425:6: lv_pivot_3_0= rulePivotTable
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTableOrAliasAccess().getPivotPivotTableParserRuleCall_1_0_0());
                      					
                    }
                    pushFollow(FOLLOW_54);
                    lv_pivot_3_0=rulePivotTable();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTableOrAliasRule());
                      						}
                      						set(
                      							current,
                      							"pivot",
                      							lv_pivot_3_0,
                      							"org.xtext.example.mydsl_sql.SQL.PivotTable");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:3443:4: ( (lv_unpivot_4_0= ruleUnpivotTable ) )
                    {
                    // InternalSQLParser.g:3443:4: ( (lv_unpivot_4_0= ruleUnpivotTable ) )
                    // InternalSQLParser.g:3444:5: (lv_unpivot_4_0= ruleUnpivotTable )
                    {
                    // InternalSQLParser.g:3444:5: (lv_unpivot_4_0= ruleUnpivotTable )
                    // InternalSQLParser.g:3445:6: lv_unpivot_4_0= ruleUnpivotTable
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTableOrAliasAccess().getUnpivotUnpivotTableParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_54);
                    lv_unpivot_4_0=ruleUnpivotTable();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTableOrAliasRule());
                      						}
                      						set(
                      							current,
                      							"unpivot",
                      							lv_unpivot_4_0,
                      							"org.xtext.example.mydsl_sql.SQL.UnpivotTable");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            // InternalSQLParser.g:3463:3: ( (lv_alias_5_0= AS ) )?
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==AS) ) {
                alt62=1;
            }
            switch (alt62) {
                case 1 :
                    // InternalSQLParser.g:3464:4: (lv_alias_5_0= AS )
                    {
                    // InternalSQLParser.g:3464:4: (lv_alias_5_0= AS )
                    // InternalSQLParser.g:3465:5: lv_alias_5_0= AS
                    {
                    lv_alias_5_0=(Token)match(input,AS,FOLLOW_55); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_alias_5_0, grammarAccess.getTableOrAliasAccess().getAliasASKeyword_2_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getTableOrAliasRule());
                      					}
                      					setWithLastConsumed(current, "alias", lv_alias_5_0, "AS");
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalSQLParser.g:3477:3: ( (lv_tblAlias_6_0= ruleDbObjectName ) )?
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( ((LA63_0>=RULE_STRING && LA63_0<=RULE_ID)) ) {
                alt63=1;
            }
            switch (alt63) {
                case 1 :
                    // InternalSQLParser.g:3478:4: (lv_tblAlias_6_0= ruleDbObjectName )
                    {
                    // InternalSQLParser.g:3478:4: (lv_tblAlias_6_0= ruleDbObjectName )
                    // InternalSQLParser.g:3479:5: lv_tblAlias_6_0= ruleDbObjectName
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getTableOrAliasAccess().getTblAliasDbObjectNameParserRuleCall_3_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_tblAlias_6_0=ruleDbObjectName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getTableOrAliasRule());
                      					}
                      					set(
                      						current,
                      						"tblAlias",
                      						lv_tblAlias_6_0,
                      						"org.xtext.example.mydsl_sql.SQL.DbObjectName");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTableOrAlias"


    // $ANTLR start "entryRuleFromValues"
    // InternalSQLParser.g:3500:1: entryRuleFromValues returns [EObject current=null] : iv_ruleFromValues= ruleFromValues EOF ;
    public final EObject entryRuleFromValues() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFromValues = null;


        try {
            // InternalSQLParser.g:3500:51: (iv_ruleFromValues= ruleFromValues EOF )
            // InternalSQLParser.g:3501:2: iv_ruleFromValues= ruleFromValues EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFromValuesRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFromValues=ruleFromValues();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFromValues; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFromValues"


    // $ANTLR start "ruleFromValues"
    // InternalSQLParser.g:3507:1: ruleFromValues returns [EObject current=null] : ( ( (lv_values_0_0= ruleValues ) ) ( (lv_c_1_0= ruleFromValuesColumns ) )? ) ;
    public final EObject ruleFromValues() throws RecognitionException {
        EObject current = null;

        EObject lv_values_0_0 = null;

        EObject lv_c_1_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:3513:2: ( ( ( (lv_values_0_0= ruleValues ) ) ( (lv_c_1_0= ruleFromValuesColumns ) )? ) )
            // InternalSQLParser.g:3514:2: ( ( (lv_values_0_0= ruleValues ) ) ( (lv_c_1_0= ruleFromValuesColumns ) )? )
            {
            // InternalSQLParser.g:3514:2: ( ( (lv_values_0_0= ruleValues ) ) ( (lv_c_1_0= ruleFromValuesColumns ) )? )
            // InternalSQLParser.g:3515:3: ( (lv_values_0_0= ruleValues ) ) ( (lv_c_1_0= ruleFromValuesColumns ) )?
            {
            // InternalSQLParser.g:3515:3: ( (lv_values_0_0= ruleValues ) )
            // InternalSQLParser.g:3516:4: (lv_values_0_0= ruleValues )
            {
            // InternalSQLParser.g:3516:4: (lv_values_0_0= ruleValues )
            // InternalSQLParser.g:3517:5: lv_values_0_0= ruleValues
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getFromValuesAccess().getValuesValuesParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_60);
            lv_values_0_0=ruleValues();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getFromValuesRule());
              					}
              					set(
              						current,
              						"values",
              						lv_values_0_0,
              						"org.xtext.example.mydsl_sql.SQL.Values");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:3534:3: ( (lv_c_1_0= ruleFromValuesColumns ) )?
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==RULE_ID) ) {
                int LA64_1 = input.LA(2);

                if ( (LA64_1==LeftParenthesis) ) {
                    int LA64_3 = input.LA(3);

                    if ( (LA64_3==RULE_STRING) ) {
                        alt64=1;
                    }
                }
            }
            switch (alt64) {
                case 1 :
                    // InternalSQLParser.g:3535:4: (lv_c_1_0= ruleFromValuesColumns )
                    {
                    // InternalSQLParser.g:3535:4: (lv_c_1_0= ruleFromValuesColumns )
                    // InternalSQLParser.g:3536:5: lv_c_1_0= ruleFromValuesColumns
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getFromValuesAccess().getCFromValuesColumnsParserRuleCall_1_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_c_1_0=ruleFromValuesColumns();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getFromValuesRule());
                      					}
                      					set(
                      						current,
                      						"c",
                      						lv_c_1_0,
                      						"org.xtext.example.mydsl_sql.SQL.FromValuesColumns");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFromValues"


    // $ANTLR start "entryRuleFromValuesColumns"
    // InternalSQLParser.g:3557:1: entryRuleFromValuesColumns returns [EObject current=null] : iv_ruleFromValuesColumns= ruleFromValuesColumns EOF ;
    public final EObject entryRuleFromValuesColumns() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFromValuesColumns = null;


        try {
            // InternalSQLParser.g:3557:58: (iv_ruleFromValuesColumns= ruleFromValuesColumns EOF )
            // InternalSQLParser.g:3558:2: iv_ruleFromValuesColumns= ruleFromValuesColumns EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFromValuesColumnsRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFromValuesColumns=ruleFromValuesColumns();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFromValuesColumns; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFromValuesColumns"


    // $ANTLR start "ruleFromValuesColumns"
    // InternalSQLParser.g:3564:1: ruleFromValuesColumns returns [EObject current=null] : (this_ID_0= RULE_ID otherlv_1= LeftParenthesis ( (lv_fvCols_2_0= ruleFromValuesColumnNames ) ) otherlv_3= RightParenthesis ) ;
    public final EObject ruleFromValuesColumns() throws RecognitionException {
        EObject current = null;

        Token this_ID_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_fvCols_2_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:3570:2: ( (this_ID_0= RULE_ID otherlv_1= LeftParenthesis ( (lv_fvCols_2_0= ruleFromValuesColumnNames ) ) otherlv_3= RightParenthesis ) )
            // InternalSQLParser.g:3571:2: (this_ID_0= RULE_ID otherlv_1= LeftParenthesis ( (lv_fvCols_2_0= ruleFromValuesColumnNames ) ) otherlv_3= RightParenthesis )
            {
            // InternalSQLParser.g:3571:2: (this_ID_0= RULE_ID otherlv_1= LeftParenthesis ( (lv_fvCols_2_0= ruleFromValuesColumnNames ) ) otherlv_3= RightParenthesis )
            // InternalSQLParser.g:3572:3: this_ID_0= RULE_ID otherlv_1= LeftParenthesis ( (lv_fvCols_2_0= ruleFromValuesColumnNames ) ) otherlv_3= RightParenthesis
            {
            this_ID_0=(Token)match(input,RULE_ID,FOLLOW_11); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(this_ID_0, grammarAccess.getFromValuesColumnsAccess().getIDTerminalRuleCall_0());
              		
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_61); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getFromValuesColumnsAccess().getLeftParenthesisKeyword_1());
              		
            }
            // InternalSQLParser.g:3580:3: ( (lv_fvCols_2_0= ruleFromValuesColumnNames ) )
            // InternalSQLParser.g:3581:4: (lv_fvCols_2_0= ruleFromValuesColumnNames )
            {
            // InternalSQLParser.g:3581:4: (lv_fvCols_2_0= ruleFromValuesColumnNames )
            // InternalSQLParser.g:3582:5: lv_fvCols_2_0= ruleFromValuesColumnNames
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getFromValuesColumnsAccess().getFvColsFromValuesColumnNamesParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_9);
            lv_fvCols_2_0=ruleFromValuesColumnNames();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getFromValuesColumnsRule());
              					}
              					set(
              						current,
              						"fvCols",
              						lv_fvCols_2_0,
              						"org.xtext.example.mydsl_sql.SQL.FromValuesColumnNames");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getFromValuesColumnsAccess().getRightParenthesisKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFromValuesColumns"


    // $ANTLR start "entryRuleFromValuesColumnNames"
    // InternalSQLParser.g:3607:1: entryRuleFromValuesColumnNames returns [EObject current=null] : iv_ruleFromValuesColumnNames= ruleFromValuesColumnNames EOF ;
    public final EObject entryRuleFromValuesColumnNames() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFromValuesColumnNames = null;


        try {
            // InternalSQLParser.g:3607:62: (iv_ruleFromValuesColumnNames= ruleFromValuesColumnNames EOF )
            // InternalSQLParser.g:3608:2: iv_ruleFromValuesColumnNames= ruleFromValuesColumnNames EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFromValuesColumnNamesRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFromValuesColumnNames=ruleFromValuesColumnNames();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFromValuesColumnNames; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFromValuesColumnNames"


    // $ANTLR start "ruleFromValuesColumnNames"
    // InternalSQLParser.g:3614:1: ruleFromValuesColumnNames returns [EObject current=null] : (this_ColumnName_0= ruleColumnName ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleColumnName ) ) )+ )? ) ;
    public final EObject ruleFromValuesColumnNames() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_ColumnName_0 = null;

        EObject lv_entries_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:3620:2: ( (this_ColumnName_0= ruleColumnName ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleColumnName ) ) )+ )? ) )
            // InternalSQLParser.g:3621:2: (this_ColumnName_0= ruleColumnName ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleColumnName ) ) )+ )? )
            {
            // InternalSQLParser.g:3621:2: (this_ColumnName_0= ruleColumnName ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleColumnName ) ) )+ )? )
            // InternalSQLParser.g:3622:3: this_ColumnName_0= ruleColumnName ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleColumnName ) ) )+ )?
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getFromValuesColumnNamesAccess().getColumnNameParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_12);
            this_ColumnName_0=ruleColumnName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ColumnName_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:3633:3: ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleColumnName ) ) )+ )?
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==Comma) ) {
                alt66=1;
            }
            switch (alt66) {
                case 1 :
                    // InternalSQLParser.g:3634:4: () (otherlv_2= Comma ( (lv_entries_3_0= ruleColumnName ) ) )+
                    {
                    // InternalSQLParser.g:3634:4: ()
                    // InternalSQLParser.g:3635:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getFromValuesColumnNamesAccess().getAbcEntriesAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalSQLParser.g:3644:4: (otherlv_2= Comma ( (lv_entries_3_0= ruleColumnName ) ) )+
                    int cnt65=0;
                    loop65:
                    do {
                        int alt65=2;
                        int LA65_0 = input.LA(1);

                        if ( (LA65_0==Comma) ) {
                            alt65=1;
                        }


                        switch (alt65) {
                    	case 1 :
                    	    // InternalSQLParser.g:3645:5: otherlv_2= Comma ( (lv_entries_3_0= ruleColumnName ) )
                    	    {
                    	    otherlv_2=(Token)match(input,Comma,FOLLOW_61); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_2, grammarAccess.getFromValuesColumnNamesAccess().getCommaKeyword_1_1_0());
                    	      				
                    	    }
                    	    // InternalSQLParser.g:3649:5: ( (lv_entries_3_0= ruleColumnName ) )
                    	    // InternalSQLParser.g:3650:6: (lv_entries_3_0= ruleColumnName )
                    	    {
                    	    // InternalSQLParser.g:3650:6: (lv_entries_3_0= ruleColumnName )
                    	    // InternalSQLParser.g:3651:7: lv_entries_3_0= ruleColumnName
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getFromValuesColumnNamesAccess().getEntriesColumnNameParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_12);
                    	    lv_entries_3_0=ruleColumnName();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getFromValuesColumnNamesRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"entries",
                    	      								lv_entries_3_0,
                    	      								"org.xtext.example.mydsl_sql.SQL.ColumnName");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt65 >= 1 ) break loop65;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(65, input);
                                throw eee;
                        }
                        cnt65++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFromValuesColumnNames"


    // $ANTLR start "entryRuleColumnName"
    // InternalSQLParser.g:3674:1: entryRuleColumnName returns [EObject current=null] : iv_ruleColumnName= ruleColumnName EOF ;
    public final EObject entryRuleColumnName() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleColumnName = null;


        try {
            // InternalSQLParser.g:3674:51: (iv_ruleColumnName= ruleColumnName EOF )
            // InternalSQLParser.g:3675:2: iv_ruleColumnName= ruleColumnName EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getColumnNameRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleColumnName=ruleColumnName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleColumnName; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleColumnName"


    // $ANTLR start "ruleColumnName"
    // InternalSQLParser.g:3681:1: ruleColumnName returns [EObject current=null] : ( (lv_colName_0_0= RULE_STRING ) ) ;
    public final EObject ruleColumnName() throws RecognitionException {
        EObject current = null;

        Token lv_colName_0_0=null;


        	enterRule();

        try {
            // InternalSQLParser.g:3687:2: ( ( (lv_colName_0_0= RULE_STRING ) ) )
            // InternalSQLParser.g:3688:2: ( (lv_colName_0_0= RULE_STRING ) )
            {
            // InternalSQLParser.g:3688:2: ( (lv_colName_0_0= RULE_STRING ) )
            // InternalSQLParser.g:3689:3: (lv_colName_0_0= RULE_STRING )
            {
            // InternalSQLParser.g:3689:3: (lv_colName_0_0= RULE_STRING )
            // InternalSQLParser.g:3690:4: lv_colName_0_0= RULE_STRING
            {
            lv_colName_0_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(lv_colName_0_0, grammarAccess.getColumnNameAccess().getColNameSTRINGTerminalRuleCall_0());
              			
            }
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getColumnNameRule());
              				}
              				setWithLastConsumed(
              					current,
              					"colName",
              					lv_colName_0_0,
              					"org.xtext.example.mydsl_sql.SQL.STRING");
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleColumnName"


    // $ANTLR start "entryRuleValues"
    // InternalSQLParser.g:3709:1: entryRuleValues returns [EObject current=null] : iv_ruleValues= ruleValues EOF ;
    public final EObject entryRuleValues() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleValues = null;


        try {
            // InternalSQLParser.g:3709:47: (iv_ruleValues= ruleValues EOF )
            // InternalSQLParser.g:3710:2: iv_ruleValues= ruleValues EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getValuesRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleValues=ruleValues();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleValues; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleValues"


    // $ANTLR start "ruleValues"
    // InternalSQLParser.g:3716:1: ruleValues returns [EObject current=null] : (otherlv_0= LeftParenthesis otherlv_1= VALUES ( (lv_rows_2_0= ruleRows ) ) otherlv_3= RightParenthesis ) ;
    public final EObject ruleValues() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_rows_2_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:3722:2: ( (otherlv_0= LeftParenthesis otherlv_1= VALUES ( (lv_rows_2_0= ruleRows ) ) otherlv_3= RightParenthesis ) )
            // InternalSQLParser.g:3723:2: (otherlv_0= LeftParenthesis otherlv_1= VALUES ( (lv_rows_2_0= ruleRows ) ) otherlv_3= RightParenthesis )
            {
            // InternalSQLParser.g:3723:2: (otherlv_0= LeftParenthesis otherlv_1= VALUES ( (lv_rows_2_0= ruleRows ) ) otherlv_3= RightParenthesis )
            // InternalSQLParser.g:3724:3: otherlv_0= LeftParenthesis otherlv_1= VALUES ( (lv_rows_2_0= ruleRows ) ) otherlv_3= RightParenthesis
            {
            otherlv_0=(Token)match(input,LeftParenthesis,FOLLOW_10); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getValuesAccess().getLeftParenthesisKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,VALUES,FOLLOW_11); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getValuesAccess().getVALUESKeyword_1());
              		
            }
            // InternalSQLParser.g:3732:3: ( (lv_rows_2_0= ruleRows ) )
            // InternalSQLParser.g:3733:4: (lv_rows_2_0= ruleRows )
            {
            // InternalSQLParser.g:3733:4: (lv_rows_2_0= ruleRows )
            // InternalSQLParser.g:3734:5: lv_rows_2_0= ruleRows
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getValuesAccess().getRowsRowsParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_9);
            lv_rows_2_0=ruleRows();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getValuesRule());
              					}
              					set(
              						current,
              						"rows",
              						lv_rows_2_0,
              						"org.xtext.example.mydsl_sql.SQL.Rows");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getValuesAccess().getRightParenthesisKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleValues"


    // $ANTLR start "entryRuleRows"
    // InternalSQLParser.g:3759:1: entryRuleRows returns [EObject current=null] : iv_ruleRows= ruleRows EOF ;
    public final EObject entryRuleRows() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleRows = null;


        try {
            // InternalSQLParser.g:3759:45: (iv_ruleRows= ruleRows EOF )
            // InternalSQLParser.g:3760:2: iv_ruleRows= ruleRows EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRowsRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRows=ruleRows();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRows; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleRows"


    // $ANTLR start "ruleRows"
    // InternalSQLParser.g:3766:1: ruleRows returns [EObject current=null] : (this_Row_0= ruleRow ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleRow ) ) )+ )? ) ;
    public final EObject ruleRows() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_Row_0 = null;

        EObject lv_entries_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:3772:2: ( (this_Row_0= ruleRow ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleRow ) ) )+ )? ) )
            // InternalSQLParser.g:3773:2: (this_Row_0= ruleRow ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleRow ) ) )+ )? )
            {
            // InternalSQLParser.g:3773:2: (this_Row_0= ruleRow ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleRow ) ) )+ )? )
            // InternalSQLParser.g:3774:3: this_Row_0= ruleRow ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleRow ) ) )+ )?
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getRowsAccess().getRowParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_12);
            this_Row_0=ruleRow();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_Row_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:3785:3: ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleRow ) ) )+ )?
            int alt68=2;
            int LA68_0 = input.LA(1);

            if ( (LA68_0==Comma) ) {
                alt68=1;
            }
            switch (alt68) {
                case 1 :
                    // InternalSQLParser.g:3786:4: () (otherlv_2= Comma ( (lv_entries_3_0= ruleRow ) ) )+
                    {
                    // InternalSQLParser.g:3786:4: ()
                    // InternalSQLParser.g:3787:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getRowsAccess().getRowsEntriesAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalSQLParser.g:3796:4: (otherlv_2= Comma ( (lv_entries_3_0= ruleRow ) ) )+
                    int cnt67=0;
                    loop67:
                    do {
                        int alt67=2;
                        int LA67_0 = input.LA(1);

                        if ( (LA67_0==Comma) ) {
                            alt67=1;
                        }


                        switch (alt67) {
                    	case 1 :
                    	    // InternalSQLParser.g:3797:5: otherlv_2= Comma ( (lv_entries_3_0= ruleRow ) )
                    	    {
                    	    otherlv_2=(Token)match(input,Comma,FOLLOW_11); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_2, grammarAccess.getRowsAccess().getCommaKeyword_1_1_0());
                    	      				
                    	    }
                    	    // InternalSQLParser.g:3801:5: ( (lv_entries_3_0= ruleRow ) )
                    	    // InternalSQLParser.g:3802:6: (lv_entries_3_0= ruleRow )
                    	    {
                    	    // InternalSQLParser.g:3802:6: (lv_entries_3_0= ruleRow )
                    	    // InternalSQLParser.g:3803:7: lv_entries_3_0= ruleRow
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getRowsAccess().getEntriesRowParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_12);
                    	    lv_entries_3_0=ruleRow();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getRowsRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"entries",
                    	      								lv_entries_3_0,
                    	      								"org.xtext.example.mydsl_sql.SQL.Row");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt67 >= 1 ) break loop67;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(67, input);
                                throw eee;
                        }
                        cnt67++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleRows"


    // $ANTLR start "entryRuleRow"
    // InternalSQLParser.g:3826:1: entryRuleRow returns [EObject current=null] : iv_ruleRow= ruleRow EOF ;
    public final EObject entryRuleRow() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleRow = null;


        try {
            // InternalSQLParser.g:3826:44: (iv_ruleRow= ruleRow EOF )
            // InternalSQLParser.g:3827:2: iv_ruleRow= ruleRow EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRowRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRow=ruleRow();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRow; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleRow"


    // $ANTLR start "ruleRow"
    // InternalSQLParser.g:3833:1: ruleRow returns [EObject current=null] : (otherlv_0= LeftParenthesis ( (lv_rowValues_1_0= ruleRowValues ) ) otherlv_2= RightParenthesis ) ;
    public final EObject ruleRow() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_rowValues_1_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:3839:2: ( (otherlv_0= LeftParenthesis ( (lv_rowValues_1_0= ruleRowValues ) ) otherlv_2= RightParenthesis ) )
            // InternalSQLParser.g:3840:2: (otherlv_0= LeftParenthesis ( (lv_rowValues_1_0= ruleRowValues ) ) otherlv_2= RightParenthesis )
            {
            // InternalSQLParser.g:3840:2: (otherlv_0= LeftParenthesis ( (lv_rowValues_1_0= ruleRowValues ) ) otherlv_2= RightParenthesis )
            // InternalSQLParser.g:3841:3: otherlv_0= LeftParenthesis ( (lv_rowValues_1_0= ruleRowValues ) ) otherlv_2= RightParenthesis
            {
            otherlv_0=(Token)match(input,LeftParenthesis,FOLLOW_62); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getRowAccess().getLeftParenthesisKeyword_0());
              		
            }
            // InternalSQLParser.g:3845:3: ( (lv_rowValues_1_0= ruleRowValues ) )
            // InternalSQLParser.g:3846:4: (lv_rowValues_1_0= ruleRowValues )
            {
            // InternalSQLParser.g:3846:4: (lv_rowValues_1_0= ruleRowValues )
            // InternalSQLParser.g:3847:5: lv_rowValues_1_0= ruleRowValues
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getRowAccess().getRowValuesRowValuesParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_9);
            lv_rowValues_1_0=ruleRowValues();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getRowRule());
              					}
              					set(
              						current,
              						"rowValues",
              						lv_rowValues_1_0,
              						"org.xtext.example.mydsl_sql.SQL.RowValues");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getRowAccess().getRightParenthesisKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleRow"


    // $ANTLR start "entryRuleRowValues"
    // InternalSQLParser.g:3872:1: entryRuleRowValues returns [EObject current=null] : iv_ruleRowValues= ruleRowValues EOF ;
    public final EObject entryRuleRowValues() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleRowValues = null;


        try {
            // InternalSQLParser.g:3872:50: (iv_ruleRowValues= ruleRowValues EOF )
            // InternalSQLParser.g:3873:2: iv_ruleRowValues= ruleRowValues EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRowValuesRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRowValues=ruleRowValues();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRowValues; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleRowValues"


    // $ANTLR start "ruleRowValues"
    // InternalSQLParser.g:3879:1: ruleRowValues returns [EObject current=null] : (this_RowValue_0= ruleRowValue ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleRowValue ) ) )+ )? ) ;
    public final EObject ruleRowValues() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_RowValue_0 = null;

        EObject lv_entries_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:3885:2: ( (this_RowValue_0= ruleRowValue ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleRowValue ) ) )+ )? ) )
            // InternalSQLParser.g:3886:2: (this_RowValue_0= ruleRowValue ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleRowValue ) ) )+ )? )
            {
            // InternalSQLParser.g:3886:2: (this_RowValue_0= ruleRowValue ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleRowValue ) ) )+ )? )
            // InternalSQLParser.g:3887:3: this_RowValue_0= ruleRowValue ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleRowValue ) ) )+ )?
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getRowValuesAccess().getRowValueParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_12);
            this_RowValue_0=ruleRowValue();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_RowValue_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:3898:3: ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleRowValue ) ) )+ )?
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==Comma) ) {
                alt70=1;
            }
            switch (alt70) {
                case 1 :
                    // InternalSQLParser.g:3899:4: () (otherlv_2= Comma ( (lv_entries_3_0= ruleRowValue ) ) )+
                    {
                    // InternalSQLParser.g:3899:4: ()
                    // InternalSQLParser.g:3900:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getRowValuesAccess().getRowValuesEntriesAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalSQLParser.g:3909:4: (otherlv_2= Comma ( (lv_entries_3_0= ruleRowValue ) ) )+
                    int cnt69=0;
                    loop69:
                    do {
                        int alt69=2;
                        int LA69_0 = input.LA(1);

                        if ( (LA69_0==Comma) ) {
                            alt69=1;
                        }


                        switch (alt69) {
                    	case 1 :
                    	    // InternalSQLParser.g:3910:5: otherlv_2= Comma ( (lv_entries_3_0= ruleRowValue ) )
                    	    {
                    	    otherlv_2=(Token)match(input,Comma,FOLLOW_62); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_2, grammarAccess.getRowValuesAccess().getCommaKeyword_1_1_0());
                    	      				
                    	    }
                    	    // InternalSQLParser.g:3914:5: ( (lv_entries_3_0= ruleRowValue ) )
                    	    // InternalSQLParser.g:3915:6: (lv_entries_3_0= ruleRowValue )
                    	    {
                    	    // InternalSQLParser.g:3915:6: (lv_entries_3_0= ruleRowValue )
                    	    // InternalSQLParser.g:3916:7: lv_entries_3_0= ruleRowValue
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getRowValuesAccess().getEntriesRowValueParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_12);
                    	    lv_entries_3_0=ruleRowValue();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getRowValuesRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"entries",
                    	      								lv_entries_3_0,
                    	      								"org.xtext.example.mydsl_sql.SQL.RowValue");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt69 >= 1 ) break loop69;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(69, input);
                                throw eee;
                        }
                        cnt69++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleRowValues"


    // $ANTLR start "entryRuleRowValue"
    // InternalSQLParser.g:3939:1: entryRuleRowValue returns [EObject current=null] : iv_ruleRowValue= ruleRowValue EOF ;
    public final EObject entryRuleRowValue() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleRowValue = null;


        try {
            // InternalSQLParser.g:3939:49: (iv_ruleRowValue= ruleRowValue EOF )
            // InternalSQLParser.g:3940:2: iv_ruleRowValue= ruleRowValue EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRowValueRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRowValue=ruleRowValue();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRowValue; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleRowValue"


    // $ANTLR start "ruleRowValue"
    // InternalSQLParser.g:3946:1: ruleRowValue returns [EObject current=null] : (this_ScalarNumberOperand_0= ruleScalarNumberOperand | ( (lv_null_1_0= NULL ) ) ) ;
    public final EObject ruleRowValue() throws RecognitionException {
        EObject current = null;

        Token lv_null_1_0=null;
        EObject this_ScalarNumberOperand_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:3952:2: ( (this_ScalarNumberOperand_0= ruleScalarNumberOperand | ( (lv_null_1_0= NULL ) ) ) )
            // InternalSQLParser.g:3953:2: (this_ScalarNumberOperand_0= ruleScalarNumberOperand | ( (lv_null_1_0= NULL ) ) )
            {
            // InternalSQLParser.g:3953:2: (this_ScalarNumberOperand_0= ruleScalarNumberOperand | ( (lv_null_1_0= NULL ) ) )
            int alt71=2;
            int LA71_0 = input.LA(1);

            if ( ((LA71_0>=RULE_UNSIGNED && LA71_0<=RULE_SIGNED_DOUBLE)||LA71_0==RULE_STRING_) ) {
                alt71=1;
            }
            else if ( (LA71_0==NULL) ) {
                alt71=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 71, 0, input);

                throw nvae;
            }
            switch (alt71) {
                case 1 :
                    // InternalSQLParser.g:3954:3: this_ScalarNumberOperand_0= ruleScalarNumberOperand
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getRowValueAccess().getScalarNumberOperandParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ScalarNumberOperand_0=ruleScalarNumberOperand();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ScalarNumberOperand_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:3966:3: ( (lv_null_1_0= NULL ) )
                    {
                    // InternalSQLParser.g:3966:3: ( (lv_null_1_0= NULL ) )
                    // InternalSQLParser.g:3967:4: (lv_null_1_0= NULL )
                    {
                    // InternalSQLParser.g:3967:4: (lv_null_1_0= NULL )
                    // InternalSQLParser.g:3968:5: lv_null_1_0= NULL
                    {
                    lv_null_1_0=(Token)match(input,NULL,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_null_1_0, grammarAccess.getRowValueAccess().getNullNULLKeyword_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getRowValueRule());
                      					}
                      					setWithLastConsumed(current, "null", lv_null_1_0, "NULL");
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleRowValue"


    // $ANTLR start "entryRulePivotTable"
    // InternalSQLParser.g:3984:1: entryRulePivotTable returns [EObject current=null] : iv_rulePivotTable= rulePivotTable EOF ;
    public final EObject entryRulePivotTable() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePivotTable = null;


        try {
            // InternalSQLParser.g:3984:51: (iv_rulePivotTable= rulePivotTable EOF )
            // InternalSQLParser.g:3985:2: iv_rulePivotTable= rulePivotTable EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPivotTableRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePivotTable=rulePivotTable();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePivotTable; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePivotTable"


    // $ANTLR start "rulePivotTable"
    // InternalSQLParser.g:3991:1: rulePivotTable returns [EObject current=null] : (otherlv_0= PIVOT (otherlv_1= XML )? otherlv_2= LeftParenthesis ( (lv_pfun_3_0= rulePivotFunctions ) ) ( (lv_pfor_4_0= rulePivotForClause ) ) ( (lv_pin_5_0= rulePivotInClause ) ) otherlv_6= RightParenthesis ) ;
    public final EObject rulePivotTable() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_6=null;
        EObject lv_pfun_3_0 = null;

        EObject lv_pfor_4_0 = null;

        EObject lv_pin_5_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:3997:2: ( (otherlv_0= PIVOT (otherlv_1= XML )? otherlv_2= LeftParenthesis ( (lv_pfun_3_0= rulePivotFunctions ) ) ( (lv_pfor_4_0= rulePivotForClause ) ) ( (lv_pin_5_0= rulePivotInClause ) ) otherlv_6= RightParenthesis ) )
            // InternalSQLParser.g:3998:2: (otherlv_0= PIVOT (otherlv_1= XML )? otherlv_2= LeftParenthesis ( (lv_pfun_3_0= rulePivotFunctions ) ) ( (lv_pfor_4_0= rulePivotForClause ) ) ( (lv_pin_5_0= rulePivotInClause ) ) otherlv_6= RightParenthesis )
            {
            // InternalSQLParser.g:3998:2: (otherlv_0= PIVOT (otherlv_1= XML )? otherlv_2= LeftParenthesis ( (lv_pfun_3_0= rulePivotFunctions ) ) ( (lv_pfor_4_0= rulePivotForClause ) ) ( (lv_pin_5_0= rulePivotInClause ) ) otherlv_6= RightParenthesis )
            // InternalSQLParser.g:3999:3: otherlv_0= PIVOT (otherlv_1= XML )? otherlv_2= LeftParenthesis ( (lv_pfun_3_0= rulePivotFunctions ) ) ( (lv_pfor_4_0= rulePivotForClause ) ) ( (lv_pin_5_0= rulePivotInClause ) ) otherlv_6= RightParenthesis
            {
            otherlv_0=(Token)match(input,PIVOT,FOLLOW_63); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getPivotTableAccess().getPIVOTKeyword_0());
              		
            }
            // InternalSQLParser.g:4003:3: (otherlv_1= XML )?
            int alt72=2;
            int LA72_0 = input.LA(1);

            if ( (LA72_0==XML) ) {
                alt72=1;
            }
            switch (alt72) {
                case 1 :
                    // InternalSQLParser.g:4004:4: otherlv_1= XML
                    {
                    otherlv_1=(Token)match(input,XML,FOLLOW_11); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getPivotTableAccess().getXMLKeyword_1());
                      			
                    }

                    }
                    break;

            }

            otherlv_2=(Token)match(input,LeftParenthesis,FOLLOW_8); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getPivotTableAccess().getLeftParenthesisKeyword_2());
              		
            }
            // InternalSQLParser.g:4013:3: ( (lv_pfun_3_0= rulePivotFunctions ) )
            // InternalSQLParser.g:4014:4: (lv_pfun_3_0= rulePivotFunctions )
            {
            // InternalSQLParser.g:4014:4: (lv_pfun_3_0= rulePivotFunctions )
            // InternalSQLParser.g:4015:5: lv_pfun_3_0= rulePivotFunctions
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getPivotTableAccess().getPfunPivotFunctionsParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_64);
            lv_pfun_3_0=rulePivotFunctions();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPivotTableRule());
              					}
              					set(
              						current,
              						"pfun",
              						lv_pfun_3_0,
              						"org.xtext.example.mydsl_sql.SQL.PivotFunctions");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:4032:3: ( (lv_pfor_4_0= rulePivotForClause ) )
            // InternalSQLParser.g:4033:4: (lv_pfor_4_0= rulePivotForClause )
            {
            // InternalSQLParser.g:4033:4: (lv_pfor_4_0= rulePivotForClause )
            // InternalSQLParser.g:4034:5: lv_pfor_4_0= rulePivotForClause
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getPivotTableAccess().getPforPivotForClauseParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_65);
            lv_pfor_4_0=rulePivotForClause();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPivotTableRule());
              					}
              					set(
              						current,
              						"pfor",
              						lv_pfor_4_0,
              						"org.xtext.example.mydsl_sql.SQL.PivotForClause");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:4051:3: ( (lv_pin_5_0= rulePivotInClause ) )
            // InternalSQLParser.g:4052:4: (lv_pin_5_0= rulePivotInClause )
            {
            // InternalSQLParser.g:4052:4: (lv_pin_5_0= rulePivotInClause )
            // InternalSQLParser.g:4053:5: lv_pin_5_0= rulePivotInClause
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getPivotTableAccess().getPinPivotInClauseParserRuleCall_5_0());
              				
            }
            pushFollow(FOLLOW_9);
            lv_pin_5_0=rulePivotInClause();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPivotTableRule());
              					}
              					set(
              						current,
              						"pin",
              						lv_pin_5_0,
              						"org.xtext.example.mydsl_sql.SQL.PivotInClause");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_6=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_6, grammarAccess.getPivotTableAccess().getRightParenthesisKeyword_6());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePivotTable"


    // $ANTLR start "entryRulePivotFunctions"
    // InternalSQLParser.g:4078:1: entryRulePivotFunctions returns [EObject current=null] : iv_rulePivotFunctions= rulePivotFunctions EOF ;
    public final EObject entryRulePivotFunctions() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePivotFunctions = null;


        try {
            // InternalSQLParser.g:4078:55: (iv_rulePivotFunctions= rulePivotFunctions EOF )
            // InternalSQLParser.g:4079:2: iv_rulePivotFunctions= rulePivotFunctions EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPivotFunctionsRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePivotFunctions=rulePivotFunctions();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePivotFunctions; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePivotFunctions"


    // $ANTLR start "rulePivotFunctions"
    // InternalSQLParser.g:4085:1: rulePivotFunctions returns [EObject current=null] : ( (lv_abc_0_0= RULE_ID ) ) ;
    public final EObject rulePivotFunctions() throws RecognitionException {
        EObject current = null;

        Token lv_abc_0_0=null;


        	enterRule();

        try {
            // InternalSQLParser.g:4091:2: ( ( (lv_abc_0_0= RULE_ID ) ) )
            // InternalSQLParser.g:4092:2: ( (lv_abc_0_0= RULE_ID ) )
            {
            // InternalSQLParser.g:4092:2: ( (lv_abc_0_0= RULE_ID ) )
            // InternalSQLParser.g:4093:3: (lv_abc_0_0= RULE_ID )
            {
            // InternalSQLParser.g:4093:3: (lv_abc_0_0= RULE_ID )
            // InternalSQLParser.g:4094:4: lv_abc_0_0= RULE_ID
            {
            lv_abc_0_0=(Token)match(input,RULE_ID,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(lv_abc_0_0, grammarAccess.getPivotFunctionsAccess().getAbcIDTerminalRuleCall_0());
              			
            }
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getPivotFunctionsRule());
              				}
              				setWithLastConsumed(
              					current,
              					"abc",
              					lv_abc_0_0,
              					"org.xtext.example.mydsl_sql.SQL.ID");
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePivotFunctions"


    // $ANTLR start "entryRulePivotInClause"
    // InternalSQLParser.g:4113:1: entryRulePivotInClause returns [EObject current=null] : iv_rulePivotInClause= rulePivotInClause EOF ;
    public final EObject entryRulePivotInClause() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePivotInClause = null;


        try {
            // InternalSQLParser.g:4113:54: (iv_rulePivotInClause= rulePivotInClause EOF )
            // InternalSQLParser.g:4114:2: iv_rulePivotInClause= rulePivotInClause EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPivotInClauseRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePivotInClause=rulePivotInClause();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePivotInClause; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePivotInClause"


    // $ANTLR start "rulePivotInClause"
    // InternalSQLParser.g:4120:1: rulePivotInClause returns [EObject current=null] : (otherlv_0= IN otherlv_1= LeftParenthesis ( ( (lv_sq_2_0= ruleSubQueryOperand ) ) | ( (lv_args_3_0= ruleUnpivotInClauseArgs ) ) | ( (lv_pinany_4_0= rulePivotInClauseAny ) ) ) otherlv_5= RightParenthesis ) ;
    public final EObject rulePivotInClause() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_5=null;
        EObject lv_sq_2_0 = null;

        EObject lv_args_3_0 = null;

        AntlrDatatypeRuleToken lv_pinany_4_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:4126:2: ( (otherlv_0= IN otherlv_1= LeftParenthesis ( ( (lv_sq_2_0= ruleSubQueryOperand ) ) | ( (lv_args_3_0= ruleUnpivotInClauseArgs ) ) | ( (lv_pinany_4_0= rulePivotInClauseAny ) ) ) otherlv_5= RightParenthesis ) )
            // InternalSQLParser.g:4127:2: (otherlv_0= IN otherlv_1= LeftParenthesis ( ( (lv_sq_2_0= ruleSubQueryOperand ) ) | ( (lv_args_3_0= ruleUnpivotInClauseArgs ) ) | ( (lv_pinany_4_0= rulePivotInClauseAny ) ) ) otherlv_5= RightParenthesis )
            {
            // InternalSQLParser.g:4127:2: (otherlv_0= IN otherlv_1= LeftParenthesis ( ( (lv_sq_2_0= ruleSubQueryOperand ) ) | ( (lv_args_3_0= ruleUnpivotInClauseArgs ) ) | ( (lv_pinany_4_0= rulePivotInClauseAny ) ) ) otherlv_5= RightParenthesis )
            // InternalSQLParser.g:4128:3: otherlv_0= IN otherlv_1= LeftParenthesis ( ( (lv_sq_2_0= ruleSubQueryOperand ) ) | ( (lv_args_3_0= ruleUnpivotInClauseArgs ) ) | ( (lv_pinany_4_0= rulePivotInClauseAny ) ) ) otherlv_5= RightParenthesis
            {
            otherlv_0=(Token)match(input,IN,FOLLOW_11); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getPivotInClauseAccess().getINKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_66); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getPivotInClauseAccess().getLeftParenthesisKeyword_1());
              		
            }
            // InternalSQLParser.g:4136:3: ( ( (lv_sq_2_0= ruleSubQueryOperand ) ) | ( (lv_args_3_0= ruleUnpivotInClauseArgs ) ) | ( (lv_pinany_4_0= rulePivotInClauseAny ) ) )
            int alt73=3;
            switch ( input.LA(1) ) {
            case LeftParenthesis:
                {
                int LA73_1 = input.LA(2);

                if ( (LA73_1==SELECT) ) {
                    alt73=1;
                }
                else if ( ((LA73_1>=RULE_STRING && LA73_1<=RULE_ID)) ) {
                    alt73=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 73, 1, input);

                    throw nvae;
                }
                }
                break;
            case RULE_STRING:
            case RULE_DBNAME:
            case RULE_ID:
                {
                alt73=2;
                }
                break;
            case ANY:
                {
                alt73=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 73, 0, input);

                throw nvae;
            }

            switch (alt73) {
                case 1 :
                    // InternalSQLParser.g:4137:4: ( (lv_sq_2_0= ruleSubQueryOperand ) )
                    {
                    // InternalSQLParser.g:4137:4: ( (lv_sq_2_0= ruleSubQueryOperand ) )
                    // InternalSQLParser.g:4138:5: (lv_sq_2_0= ruleSubQueryOperand )
                    {
                    // InternalSQLParser.g:4138:5: (lv_sq_2_0= ruleSubQueryOperand )
                    // InternalSQLParser.g:4139:6: lv_sq_2_0= ruleSubQueryOperand
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getPivotInClauseAccess().getSqSubQueryOperandParserRuleCall_2_0_0());
                      					
                    }
                    pushFollow(FOLLOW_9);
                    lv_sq_2_0=ruleSubQueryOperand();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getPivotInClauseRule());
                      						}
                      						set(
                      							current,
                      							"sq",
                      							lv_sq_2_0,
                      							"org.xtext.example.mydsl_sql.SQL.SubQueryOperand");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:4157:4: ( (lv_args_3_0= ruleUnpivotInClauseArgs ) )
                    {
                    // InternalSQLParser.g:4157:4: ( (lv_args_3_0= ruleUnpivotInClauseArgs ) )
                    // InternalSQLParser.g:4158:5: (lv_args_3_0= ruleUnpivotInClauseArgs )
                    {
                    // InternalSQLParser.g:4158:5: (lv_args_3_0= ruleUnpivotInClauseArgs )
                    // InternalSQLParser.g:4159:6: lv_args_3_0= ruleUnpivotInClauseArgs
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getPivotInClauseAccess().getArgsUnpivotInClauseArgsParserRuleCall_2_1_0());
                      					
                    }
                    pushFollow(FOLLOW_9);
                    lv_args_3_0=ruleUnpivotInClauseArgs();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getPivotInClauseRule());
                      						}
                      						set(
                      							current,
                      							"args",
                      							lv_args_3_0,
                      							"org.xtext.example.mydsl_sql.SQL.UnpivotInClauseArgs");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:4177:4: ( (lv_pinany_4_0= rulePivotInClauseAny ) )
                    {
                    // InternalSQLParser.g:4177:4: ( (lv_pinany_4_0= rulePivotInClauseAny ) )
                    // InternalSQLParser.g:4178:5: (lv_pinany_4_0= rulePivotInClauseAny )
                    {
                    // InternalSQLParser.g:4178:5: (lv_pinany_4_0= rulePivotInClauseAny )
                    // InternalSQLParser.g:4179:6: lv_pinany_4_0= rulePivotInClauseAny
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getPivotInClauseAccess().getPinanyPivotInClauseAnyParserRuleCall_2_2_0());
                      					
                    }
                    pushFollow(FOLLOW_9);
                    lv_pinany_4_0=rulePivotInClauseAny();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getPivotInClauseRule());
                      						}
                      						set(
                      							current,
                      							"pinany",
                      							lv_pinany_4_0,
                      							"org.xtext.example.mydsl_sql.SQL.PivotInClauseAny");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getPivotInClauseAccess().getRightParenthesisKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePivotInClause"


    // $ANTLR start "entryRulePivotInClauseAny"
    // InternalSQLParser.g:4205:1: entryRulePivotInClauseAny returns [String current=null] : iv_rulePivotInClauseAny= rulePivotInClauseAny EOF ;
    public final String entryRulePivotInClauseAny() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_rulePivotInClauseAny = null;


        try {
            // InternalSQLParser.g:4205:56: (iv_rulePivotInClauseAny= rulePivotInClauseAny EOF )
            // InternalSQLParser.g:4206:2: iv_rulePivotInClauseAny= rulePivotInClauseAny EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPivotInClauseAnyRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePivotInClauseAny=rulePivotInClauseAny();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePivotInClauseAny.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePivotInClauseAny"


    // $ANTLR start "rulePivotInClauseAny"
    // InternalSQLParser.g:4212:1: rulePivotInClauseAny returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= ANY (kw= Comma kw= ANY )* ) ;
    public final AntlrDatatypeRuleToken rulePivotInClauseAny() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            // InternalSQLParser.g:4218:2: ( (kw= ANY (kw= Comma kw= ANY )* ) )
            // InternalSQLParser.g:4219:2: (kw= ANY (kw= Comma kw= ANY )* )
            {
            // InternalSQLParser.g:4219:2: (kw= ANY (kw= Comma kw= ANY )* )
            // InternalSQLParser.g:4220:3: kw= ANY (kw= Comma kw= ANY )*
            {
            kw=(Token)match(input,ANY,FOLLOW_12); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(kw);
              			newLeafNode(kw, grammarAccess.getPivotInClauseAnyAccess().getANYKeyword_0());
              		
            }
            // InternalSQLParser.g:4225:3: (kw= Comma kw= ANY )*
            loop74:
            do {
                int alt74=2;
                int LA74_0 = input.LA(1);

                if ( (LA74_0==Comma) ) {
                    alt74=1;
                }


                switch (alt74) {
            	case 1 :
            	    // InternalSQLParser.g:4226:4: kw= Comma kw= ANY
            	    {
            	    kw=(Token)match(input,Comma,FOLLOW_67); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				current.merge(kw);
            	      				newLeafNode(kw, grammarAccess.getPivotInClauseAnyAccess().getCommaKeyword_1_0());
            	      			
            	    }
            	    kw=(Token)match(input,ANY,FOLLOW_12); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				current.merge(kw);
            	      				newLeafNode(kw, grammarAccess.getPivotInClauseAnyAccess().getANYKeyword_1_1());
            	      			
            	    }

            	    }
            	    break;

            	default :
            	    break loop74;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePivotInClauseAny"


    // $ANTLR start "entryRuleUnpivotTable"
    // InternalSQLParser.g:4241:1: entryRuleUnpivotTable returns [EObject current=null] : iv_ruleUnpivotTable= ruleUnpivotTable EOF ;
    public final EObject entryRuleUnpivotTable() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleUnpivotTable = null;


        try {
            // InternalSQLParser.g:4241:53: (iv_ruleUnpivotTable= ruleUnpivotTable EOF )
            // InternalSQLParser.g:4242:2: iv_ruleUnpivotTable= ruleUnpivotTable EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getUnpivotTableRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleUnpivotTable=ruleUnpivotTable();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleUnpivotTable; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleUnpivotTable"


    // $ANTLR start "ruleUnpivotTable"
    // InternalSQLParser.g:4248:1: ruleUnpivotTable returns [EObject current=null] : (otherlv_0= UNPIVOT ( (otherlv_1= INCLUDE | otherlv_2= EXCLUDE ) otherlv_3= NULLS )? otherlv_4= LeftParenthesis ( (lv_pcols_5_0= rulePivotColumns ) ) ( (lv_pfor_6_0= rulePivotForClause ) ) ( (lv_inop_7_0= ruleUnpivotInClause ) ) otherlv_8= RightParenthesis ) ;
    public final EObject ruleUnpivotTable() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        Token otherlv_8=null;
        EObject lv_pcols_5_0 = null;

        EObject lv_pfor_6_0 = null;

        EObject lv_inop_7_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:4254:2: ( (otherlv_0= UNPIVOT ( (otherlv_1= INCLUDE | otherlv_2= EXCLUDE ) otherlv_3= NULLS )? otherlv_4= LeftParenthesis ( (lv_pcols_5_0= rulePivotColumns ) ) ( (lv_pfor_6_0= rulePivotForClause ) ) ( (lv_inop_7_0= ruleUnpivotInClause ) ) otherlv_8= RightParenthesis ) )
            // InternalSQLParser.g:4255:2: (otherlv_0= UNPIVOT ( (otherlv_1= INCLUDE | otherlv_2= EXCLUDE ) otherlv_3= NULLS )? otherlv_4= LeftParenthesis ( (lv_pcols_5_0= rulePivotColumns ) ) ( (lv_pfor_6_0= rulePivotForClause ) ) ( (lv_inop_7_0= ruleUnpivotInClause ) ) otherlv_8= RightParenthesis )
            {
            // InternalSQLParser.g:4255:2: (otherlv_0= UNPIVOT ( (otherlv_1= INCLUDE | otherlv_2= EXCLUDE ) otherlv_3= NULLS )? otherlv_4= LeftParenthesis ( (lv_pcols_5_0= rulePivotColumns ) ) ( (lv_pfor_6_0= rulePivotForClause ) ) ( (lv_inop_7_0= ruleUnpivotInClause ) ) otherlv_8= RightParenthesis )
            // InternalSQLParser.g:4256:3: otherlv_0= UNPIVOT ( (otherlv_1= INCLUDE | otherlv_2= EXCLUDE ) otherlv_3= NULLS )? otherlv_4= LeftParenthesis ( (lv_pcols_5_0= rulePivotColumns ) ) ( (lv_pfor_6_0= rulePivotForClause ) ) ( (lv_inop_7_0= ruleUnpivotInClause ) ) otherlv_8= RightParenthesis
            {
            otherlv_0=(Token)match(input,UNPIVOT,FOLLOW_68); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getUnpivotTableAccess().getUNPIVOTKeyword_0());
              		
            }
            // InternalSQLParser.g:4260:3: ( (otherlv_1= INCLUDE | otherlv_2= EXCLUDE ) otherlv_3= NULLS )?
            int alt76=2;
            int LA76_0 = input.LA(1);

            if ( (LA76_0==EXCLUDE||LA76_0==INCLUDE) ) {
                alt76=1;
            }
            switch (alt76) {
                case 1 :
                    // InternalSQLParser.g:4261:4: (otherlv_1= INCLUDE | otherlv_2= EXCLUDE ) otherlv_3= NULLS
                    {
                    // InternalSQLParser.g:4261:4: (otherlv_1= INCLUDE | otherlv_2= EXCLUDE )
                    int alt75=2;
                    int LA75_0 = input.LA(1);

                    if ( (LA75_0==INCLUDE) ) {
                        alt75=1;
                    }
                    else if ( (LA75_0==EXCLUDE) ) {
                        alt75=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 75, 0, input);

                        throw nvae;
                    }
                    switch (alt75) {
                        case 1 :
                            // InternalSQLParser.g:4262:5: otherlv_1= INCLUDE
                            {
                            otherlv_1=(Token)match(input,INCLUDE,FOLLOW_69); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(otherlv_1, grammarAccess.getUnpivotTableAccess().getINCLUDEKeyword_1_0_0());
                              				
                            }

                            }
                            break;
                        case 2 :
                            // InternalSQLParser.g:4267:5: otherlv_2= EXCLUDE
                            {
                            otherlv_2=(Token)match(input,EXCLUDE,FOLLOW_69); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(otherlv_2, grammarAccess.getUnpivotTableAccess().getEXCLUDEKeyword_1_0_1());
                              				
                            }

                            }
                            break;

                    }

                    otherlv_3=(Token)match(input,NULLS,FOLLOW_11); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_3, grammarAccess.getUnpivotTableAccess().getNULLSKeyword_1_1());
                      			
                    }

                    }
                    break;

            }

            otherlv_4=(Token)match(input,LeftParenthesis,FOLLOW_5); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getUnpivotTableAccess().getLeftParenthesisKeyword_2());
              		
            }
            // InternalSQLParser.g:4281:3: ( (lv_pcols_5_0= rulePivotColumns ) )
            // InternalSQLParser.g:4282:4: (lv_pcols_5_0= rulePivotColumns )
            {
            // InternalSQLParser.g:4282:4: (lv_pcols_5_0= rulePivotColumns )
            // InternalSQLParser.g:4283:5: lv_pcols_5_0= rulePivotColumns
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getUnpivotTableAccess().getPcolsPivotColumnsParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_64);
            lv_pcols_5_0=rulePivotColumns();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getUnpivotTableRule());
              					}
              					set(
              						current,
              						"pcols",
              						lv_pcols_5_0,
              						"org.xtext.example.mydsl_sql.SQL.PivotColumns");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:4300:3: ( (lv_pfor_6_0= rulePivotForClause ) )
            // InternalSQLParser.g:4301:4: (lv_pfor_6_0= rulePivotForClause )
            {
            // InternalSQLParser.g:4301:4: (lv_pfor_6_0= rulePivotForClause )
            // InternalSQLParser.g:4302:5: lv_pfor_6_0= rulePivotForClause
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getUnpivotTableAccess().getPforPivotForClauseParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_65);
            lv_pfor_6_0=rulePivotForClause();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getUnpivotTableRule());
              					}
              					set(
              						current,
              						"pfor",
              						lv_pfor_6_0,
              						"org.xtext.example.mydsl_sql.SQL.PivotForClause");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:4319:3: ( (lv_inop_7_0= ruleUnpivotInClause ) )
            // InternalSQLParser.g:4320:4: (lv_inop_7_0= ruleUnpivotInClause )
            {
            // InternalSQLParser.g:4320:4: (lv_inop_7_0= ruleUnpivotInClause )
            // InternalSQLParser.g:4321:5: lv_inop_7_0= ruleUnpivotInClause
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getUnpivotTableAccess().getInopUnpivotInClauseParserRuleCall_5_0());
              				
            }
            pushFollow(FOLLOW_9);
            lv_inop_7_0=ruleUnpivotInClause();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getUnpivotTableRule());
              					}
              					set(
              						current,
              						"inop",
              						lv_inop_7_0,
              						"org.xtext.example.mydsl_sql.SQL.UnpivotInClause");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_8=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_8, grammarAccess.getUnpivotTableAccess().getRightParenthesisKeyword_6());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleUnpivotTable"


    // $ANTLR start "entryRuleUnpivotInClause"
    // InternalSQLParser.g:4346:1: entryRuleUnpivotInClause returns [EObject current=null] : iv_ruleUnpivotInClause= ruleUnpivotInClause EOF ;
    public final EObject entryRuleUnpivotInClause() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleUnpivotInClause = null;


        try {
            // InternalSQLParser.g:4346:56: (iv_ruleUnpivotInClause= ruleUnpivotInClause EOF )
            // InternalSQLParser.g:4347:2: iv_ruleUnpivotInClause= ruleUnpivotInClause EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getUnpivotInClauseRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleUnpivotInClause=ruleUnpivotInClause();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleUnpivotInClause; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleUnpivotInClause"


    // $ANTLR start "ruleUnpivotInClause"
    // InternalSQLParser.g:4353:1: ruleUnpivotInClause returns [EObject current=null] : ( () ( (lv_op_1_0= IN ) ) otherlv_2= LeftParenthesis ( (lv_args_3_0= ruleUnpivotInClauseArgs ) ) otherlv_4= RightParenthesis ) ;
    public final EObject ruleUnpivotInClause() throws RecognitionException {
        EObject current = null;

        Token lv_op_1_0=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject lv_args_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:4359:2: ( ( () ( (lv_op_1_0= IN ) ) otherlv_2= LeftParenthesis ( (lv_args_3_0= ruleUnpivotInClauseArgs ) ) otherlv_4= RightParenthesis ) )
            // InternalSQLParser.g:4360:2: ( () ( (lv_op_1_0= IN ) ) otherlv_2= LeftParenthesis ( (lv_args_3_0= ruleUnpivotInClauseArgs ) ) otherlv_4= RightParenthesis )
            {
            // InternalSQLParser.g:4360:2: ( () ( (lv_op_1_0= IN ) ) otherlv_2= LeftParenthesis ( (lv_args_3_0= ruleUnpivotInClauseArgs ) ) otherlv_4= RightParenthesis )
            // InternalSQLParser.g:4361:3: () ( (lv_op_1_0= IN ) ) otherlv_2= LeftParenthesis ( (lv_args_3_0= ruleUnpivotInClauseArgs ) ) otherlv_4= RightParenthesis
            {
            // InternalSQLParser.g:4361:3: ()
            // InternalSQLParser.g:4362:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getUnpivotInClauseAccess().getUnipivotInClauseAction_0(),
              					current);
              			
            }

            }

            // InternalSQLParser.g:4371:3: ( (lv_op_1_0= IN ) )
            // InternalSQLParser.g:4372:4: (lv_op_1_0= IN )
            {
            // InternalSQLParser.g:4372:4: (lv_op_1_0= IN )
            // InternalSQLParser.g:4373:5: lv_op_1_0= IN
            {
            lv_op_1_0=(Token)match(input,IN,FOLLOW_11); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_op_1_0, grammarAccess.getUnpivotInClauseAccess().getOpINKeyword_1_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getUnpivotInClauseRule());
              					}
              					setWithLastConsumed(current, "op", lv_op_1_0, "IN");
              				
            }

            }


            }

            otherlv_2=(Token)match(input,LeftParenthesis,FOLLOW_5); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getUnpivotInClauseAccess().getLeftParenthesisKeyword_2());
              		
            }
            // InternalSQLParser.g:4389:3: ( (lv_args_3_0= ruleUnpivotInClauseArgs ) )
            // InternalSQLParser.g:4390:4: (lv_args_3_0= ruleUnpivotInClauseArgs )
            {
            // InternalSQLParser.g:4390:4: (lv_args_3_0= ruleUnpivotInClauseArgs )
            // InternalSQLParser.g:4391:5: lv_args_3_0= ruleUnpivotInClauseArgs
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getUnpivotInClauseAccess().getArgsUnpivotInClauseArgsParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_9);
            lv_args_3_0=ruleUnpivotInClauseArgs();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getUnpivotInClauseRule());
              					}
              					set(
              						current,
              						"args",
              						lv_args_3_0,
              						"org.xtext.example.mydsl_sql.SQL.UnpivotInClauseArgs");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_4=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getUnpivotInClauseAccess().getRightParenthesisKeyword_4());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleUnpivotInClause"


    // $ANTLR start "entryRuleUnpivotInClauseArgs"
    // InternalSQLParser.g:4416:1: entryRuleUnpivotInClauseArgs returns [EObject current=null] : iv_ruleUnpivotInClauseArgs= ruleUnpivotInClauseArgs EOF ;
    public final EObject entryRuleUnpivotInClauseArgs() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleUnpivotInClauseArgs = null;


        try {
            // InternalSQLParser.g:4416:60: (iv_ruleUnpivotInClauseArgs= ruleUnpivotInClauseArgs EOF )
            // InternalSQLParser.g:4417:2: iv_ruleUnpivotInClauseArgs= ruleUnpivotInClauseArgs EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getUnpivotInClauseArgsRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleUnpivotInClauseArgs=ruleUnpivotInClauseArgs();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleUnpivotInClauseArgs; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleUnpivotInClauseArgs"


    // $ANTLR start "ruleUnpivotInClauseArgs"
    // InternalSQLParser.g:4423:1: ruleUnpivotInClauseArgs returns [EObject current=null] : (this_UnpivotInClauseArg_0= ruleUnpivotInClauseArg ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleUnpivotInClauseArg ) ) )+ )? ) ;
    public final EObject ruleUnpivotInClauseArgs() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_UnpivotInClauseArg_0 = null;

        EObject lv_entries_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:4429:2: ( (this_UnpivotInClauseArg_0= ruleUnpivotInClauseArg ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleUnpivotInClauseArg ) ) )+ )? ) )
            // InternalSQLParser.g:4430:2: (this_UnpivotInClauseArg_0= ruleUnpivotInClauseArg ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleUnpivotInClauseArg ) ) )+ )? )
            {
            // InternalSQLParser.g:4430:2: (this_UnpivotInClauseArg_0= ruleUnpivotInClauseArg ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleUnpivotInClauseArg ) ) )+ )? )
            // InternalSQLParser.g:4431:3: this_UnpivotInClauseArg_0= ruleUnpivotInClauseArg ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleUnpivotInClauseArg ) ) )+ )?
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getUnpivotInClauseArgsAccess().getUnpivotInClauseArgParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_12);
            this_UnpivotInClauseArg_0=ruleUnpivotInClauseArg();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_UnpivotInClauseArg_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:4442:3: ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleUnpivotInClauseArg ) ) )+ )?
            int alt78=2;
            int LA78_0 = input.LA(1);

            if ( (LA78_0==Comma) ) {
                alt78=1;
            }
            switch (alt78) {
                case 1 :
                    // InternalSQLParser.g:4443:4: () (otherlv_2= Comma ( (lv_entries_3_0= ruleUnpivotInClauseArg ) ) )+
                    {
                    // InternalSQLParser.g:4443:4: ()
                    // InternalSQLParser.g:4444:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getUnpivotInClauseArgsAccess().getUicargsEntriesAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalSQLParser.g:4453:4: (otherlv_2= Comma ( (lv_entries_3_0= ruleUnpivotInClauseArg ) ) )+
                    int cnt77=0;
                    loop77:
                    do {
                        int alt77=2;
                        int LA77_0 = input.LA(1);

                        if ( (LA77_0==Comma) ) {
                            alt77=1;
                        }


                        switch (alt77) {
                    	case 1 :
                    	    // InternalSQLParser.g:4454:5: otherlv_2= Comma ( (lv_entries_3_0= ruleUnpivotInClauseArg ) )
                    	    {
                    	    otherlv_2=(Token)match(input,Comma,FOLLOW_5); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_2, grammarAccess.getUnpivotInClauseArgsAccess().getCommaKeyword_1_1_0());
                    	      				
                    	    }
                    	    // InternalSQLParser.g:4458:5: ( (lv_entries_3_0= ruleUnpivotInClauseArg ) )
                    	    // InternalSQLParser.g:4459:6: (lv_entries_3_0= ruleUnpivotInClauseArg )
                    	    {
                    	    // InternalSQLParser.g:4459:6: (lv_entries_3_0= ruleUnpivotInClauseArg )
                    	    // InternalSQLParser.g:4460:7: lv_entries_3_0= ruleUnpivotInClauseArg
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getUnpivotInClauseArgsAccess().getEntriesUnpivotInClauseArgParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_12);
                    	    lv_entries_3_0=ruleUnpivotInClauseArg();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getUnpivotInClauseArgsRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"entries",
                    	      								lv_entries_3_0,
                    	      								"org.xtext.example.mydsl_sql.SQL.UnpivotInClauseArg");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt77 >= 1 ) break loop77;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(77, input);
                                throw eee;
                        }
                        cnt77++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleUnpivotInClauseArgs"


    // $ANTLR start "entryRuleUnpivotInClauseArg"
    // InternalSQLParser.g:4483:1: entryRuleUnpivotInClauseArg returns [EObject current=null] : iv_ruleUnpivotInClauseArg= ruleUnpivotInClauseArg EOF ;
    public final EObject entryRuleUnpivotInClauseArg() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleUnpivotInClauseArg = null;


        try {
            // InternalSQLParser.g:4483:59: (iv_ruleUnpivotInClauseArg= ruleUnpivotInClauseArg EOF )
            // InternalSQLParser.g:4484:2: iv_ruleUnpivotInClauseArg= ruleUnpivotInClauseArg EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getUnpivotInClauseArgRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleUnpivotInClauseArg=ruleUnpivotInClauseArg();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleUnpivotInClauseArg; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleUnpivotInClauseArg"


    // $ANTLR start "ruleUnpivotInClauseArg"
    // InternalSQLParser.g:4490:1: ruleUnpivotInClauseArg returns [EObject current=null] : ( ( (lv_pcols_0_0= rulePivotColumns ) ) (otherlv_1= AS ( (lv_cfuls_2_0= rulePivotColumns ) ) )? ) ;
    public final EObject ruleUnpivotInClauseArg() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_pcols_0_0 = null;

        EObject lv_cfuls_2_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:4496:2: ( ( ( (lv_pcols_0_0= rulePivotColumns ) ) (otherlv_1= AS ( (lv_cfuls_2_0= rulePivotColumns ) ) )? ) )
            // InternalSQLParser.g:4497:2: ( ( (lv_pcols_0_0= rulePivotColumns ) ) (otherlv_1= AS ( (lv_cfuls_2_0= rulePivotColumns ) ) )? )
            {
            // InternalSQLParser.g:4497:2: ( ( (lv_pcols_0_0= rulePivotColumns ) ) (otherlv_1= AS ( (lv_cfuls_2_0= rulePivotColumns ) ) )? )
            // InternalSQLParser.g:4498:3: ( (lv_pcols_0_0= rulePivotColumns ) ) (otherlv_1= AS ( (lv_cfuls_2_0= rulePivotColumns ) ) )?
            {
            // InternalSQLParser.g:4498:3: ( (lv_pcols_0_0= rulePivotColumns ) )
            // InternalSQLParser.g:4499:4: (lv_pcols_0_0= rulePivotColumns )
            {
            // InternalSQLParser.g:4499:4: (lv_pcols_0_0= rulePivotColumns )
            // InternalSQLParser.g:4500:5: lv_pcols_0_0= rulePivotColumns
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getUnpivotInClauseArgAccess().getPcolsPivotColumnsParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_70);
            lv_pcols_0_0=rulePivotColumns();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getUnpivotInClauseArgRule());
              					}
              					set(
              						current,
              						"pcols",
              						lv_pcols_0_0,
              						"org.xtext.example.mydsl_sql.SQL.PivotColumns");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:4517:3: (otherlv_1= AS ( (lv_cfuls_2_0= rulePivotColumns ) ) )?
            int alt79=2;
            int LA79_0 = input.LA(1);

            if ( (LA79_0==AS) ) {
                alt79=1;
            }
            switch (alt79) {
                case 1 :
                    // InternalSQLParser.g:4518:4: otherlv_1= AS ( (lv_cfuls_2_0= rulePivotColumns ) )
                    {
                    otherlv_1=(Token)match(input,AS,FOLLOW_5); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getUnpivotInClauseArgAccess().getASKeyword_1_0());
                      			
                    }
                    // InternalSQLParser.g:4522:4: ( (lv_cfuls_2_0= rulePivotColumns ) )
                    // InternalSQLParser.g:4523:5: (lv_cfuls_2_0= rulePivotColumns )
                    {
                    // InternalSQLParser.g:4523:5: (lv_cfuls_2_0= rulePivotColumns )
                    // InternalSQLParser.g:4524:6: lv_cfuls_2_0= rulePivotColumns
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getUnpivotInClauseArgAccess().getCfulsPivotColumnsParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_cfuls_2_0=rulePivotColumns();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getUnpivotInClauseArgRule());
                      						}
                      						set(
                      							current,
                      							"cfuls",
                      							lv_cfuls_2_0,
                      							"org.xtext.example.mydsl_sql.SQL.PivotColumns");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleUnpivotInClauseArg"


    // $ANTLR start "entryRulePivotForClause"
    // InternalSQLParser.g:4546:1: entryRulePivotForClause returns [EObject current=null] : iv_rulePivotForClause= rulePivotForClause EOF ;
    public final EObject entryRulePivotForClause() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePivotForClause = null;


        try {
            // InternalSQLParser.g:4546:55: (iv_rulePivotForClause= rulePivotForClause EOF )
            // InternalSQLParser.g:4547:2: iv_rulePivotForClause= rulePivotForClause EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPivotForClauseRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePivotForClause=rulePivotForClause();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePivotForClause; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePivotForClause"


    // $ANTLR start "rulePivotForClause"
    // InternalSQLParser.g:4553:1: rulePivotForClause returns [EObject current=null] : (otherlv_0= FOR (this_ColumnFull_1= ruleColumnFull | (otherlv_2= LeftParenthesis this_Columns_3= ruleColumns otherlv_4= RightParenthesis ) ) ) ;
    public final EObject rulePivotForClause() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject this_ColumnFull_1 = null;

        EObject this_Columns_3 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:4559:2: ( (otherlv_0= FOR (this_ColumnFull_1= ruleColumnFull | (otherlv_2= LeftParenthesis this_Columns_3= ruleColumns otherlv_4= RightParenthesis ) ) ) )
            // InternalSQLParser.g:4560:2: (otherlv_0= FOR (this_ColumnFull_1= ruleColumnFull | (otherlv_2= LeftParenthesis this_Columns_3= ruleColumns otherlv_4= RightParenthesis ) ) )
            {
            // InternalSQLParser.g:4560:2: (otherlv_0= FOR (this_ColumnFull_1= ruleColumnFull | (otherlv_2= LeftParenthesis this_Columns_3= ruleColumns otherlv_4= RightParenthesis ) ) )
            // InternalSQLParser.g:4561:3: otherlv_0= FOR (this_ColumnFull_1= ruleColumnFull | (otherlv_2= LeftParenthesis this_Columns_3= ruleColumns otherlv_4= RightParenthesis ) )
            {
            otherlv_0=(Token)match(input,FOR,FOLLOW_5); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getPivotForClauseAccess().getFORKeyword_0());
              		
            }
            // InternalSQLParser.g:4565:3: (this_ColumnFull_1= ruleColumnFull | (otherlv_2= LeftParenthesis this_Columns_3= ruleColumns otherlv_4= RightParenthesis ) )
            int alt80=2;
            int LA80_0 = input.LA(1);

            if ( ((LA80_0>=RULE_STRING && LA80_0<=RULE_ID)) ) {
                alt80=1;
            }
            else if ( (LA80_0==LeftParenthesis) ) {
                alt80=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 80, 0, input);

                throw nvae;
            }
            switch (alt80) {
                case 1 :
                    // InternalSQLParser.g:4566:4: this_ColumnFull_1= ruleColumnFull
                    {
                    if ( state.backtracking==0 ) {

                      				/* */
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getPivotForClauseAccess().getColumnFullParserRuleCall_1_0());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_ColumnFull_1=ruleColumnFull();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ColumnFull_1;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:4578:4: (otherlv_2= LeftParenthesis this_Columns_3= ruleColumns otherlv_4= RightParenthesis )
                    {
                    // InternalSQLParser.g:4578:4: (otherlv_2= LeftParenthesis this_Columns_3= ruleColumns otherlv_4= RightParenthesis )
                    // InternalSQLParser.g:4579:5: otherlv_2= LeftParenthesis this_Columns_3= ruleColumns otherlv_4= RightParenthesis
                    {
                    otherlv_2=(Token)match(input,LeftParenthesis,FOLLOW_35); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_2, grammarAccess.getPivotForClauseAccess().getLeftParenthesisKeyword_1_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getPivotForClauseAccess().getColumnsParserRuleCall_1_1_1());
                      				
                    }
                    pushFollow(FOLLOW_9);
                    this_Columns_3=ruleColumns();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_Columns_3;
                      					afterParserOrEnumRuleCall();
                      				
                    }
                    otherlv_4=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_4, grammarAccess.getPivotForClauseAccess().getRightParenthesisKeyword_1_1_2());
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePivotForClause"


    // $ANTLR start "entryRulePivotColumns"
    // InternalSQLParser.g:4604:1: entryRulePivotColumns returns [EObject current=null] : iv_rulePivotColumns= rulePivotColumns EOF ;
    public final EObject entryRulePivotColumns() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePivotColumns = null;


        try {
            // InternalSQLParser.g:4604:53: (iv_rulePivotColumns= rulePivotColumns EOF )
            // InternalSQLParser.g:4605:2: iv_rulePivotColumns= rulePivotColumns EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPivotColumnsRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePivotColumns=rulePivotColumns();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePivotColumns; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePivotColumns"


    // $ANTLR start "rulePivotColumns"
    // InternalSQLParser.g:4611:1: rulePivotColumns returns [EObject current=null] : (this_PivotCol_0= rulePivotCol | (otherlv_1= LeftParenthesis this_PivotCols_2= rulePivotCols otherlv_3= RightParenthesis ) ) ;
    public final EObject rulePivotColumns() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject this_PivotCol_0 = null;

        EObject this_PivotCols_2 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:4617:2: ( (this_PivotCol_0= rulePivotCol | (otherlv_1= LeftParenthesis this_PivotCols_2= rulePivotCols otherlv_3= RightParenthesis ) ) )
            // InternalSQLParser.g:4618:2: (this_PivotCol_0= rulePivotCol | (otherlv_1= LeftParenthesis this_PivotCols_2= rulePivotCols otherlv_3= RightParenthesis ) )
            {
            // InternalSQLParser.g:4618:2: (this_PivotCol_0= rulePivotCol | (otherlv_1= LeftParenthesis this_PivotCols_2= rulePivotCols otherlv_3= RightParenthesis ) )
            int alt81=2;
            int LA81_0 = input.LA(1);

            if ( ((LA81_0>=RULE_STRING && LA81_0<=RULE_ID)) ) {
                alt81=1;
            }
            else if ( (LA81_0==LeftParenthesis) ) {
                alt81=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 81, 0, input);

                throw nvae;
            }
            switch (alt81) {
                case 1 :
                    // InternalSQLParser.g:4619:3: this_PivotCol_0= rulePivotCol
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPivotColumnsAccess().getPivotColParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_PivotCol_0=rulePivotCol();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_PivotCol_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:4631:3: (otherlv_1= LeftParenthesis this_PivotCols_2= rulePivotCols otherlv_3= RightParenthesis )
                    {
                    // InternalSQLParser.g:4631:3: (otherlv_1= LeftParenthesis this_PivotCols_2= rulePivotCols otherlv_3= RightParenthesis )
                    // InternalSQLParser.g:4632:4: otherlv_1= LeftParenthesis this_PivotCols_2= rulePivotCols otherlv_3= RightParenthesis
                    {
                    otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_28); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getPivotColumnsAccess().getLeftParenthesisKeyword_1_0());
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				/* */
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getPivotColumnsAccess().getPivotColsParserRuleCall_1_1());
                      			
                    }
                    pushFollow(FOLLOW_9);
                    this_PivotCols_2=rulePivotCols();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_PivotCols_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }
                    otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_3, grammarAccess.getPivotColumnsAccess().getRightParenthesisKeyword_1_2());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePivotColumns"


    // $ANTLR start "entryRulePivotCols"
    // InternalSQLParser.g:4656:1: entryRulePivotCols returns [EObject current=null] : iv_rulePivotCols= rulePivotCols EOF ;
    public final EObject entryRulePivotCols() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePivotCols = null;


        try {
            // InternalSQLParser.g:4656:50: (iv_rulePivotCols= rulePivotCols EOF )
            // InternalSQLParser.g:4657:2: iv_rulePivotCols= rulePivotCols EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPivotColsRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePivotCols=rulePivotCols();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePivotCols; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePivotCols"


    // $ANTLR start "rulePivotCols"
    // InternalSQLParser.g:4663:1: rulePivotCols returns [EObject current=null] : (this_PivotCol_0= rulePivotCol ( () (otherlv_2= Comma ( (lv_entries_3_0= rulePivotCol ) ) )+ )? ) ;
    public final EObject rulePivotCols() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_PivotCol_0 = null;

        EObject lv_entries_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:4669:2: ( (this_PivotCol_0= rulePivotCol ( () (otherlv_2= Comma ( (lv_entries_3_0= rulePivotCol ) ) )+ )? ) )
            // InternalSQLParser.g:4670:2: (this_PivotCol_0= rulePivotCol ( () (otherlv_2= Comma ( (lv_entries_3_0= rulePivotCol ) ) )+ )? )
            {
            // InternalSQLParser.g:4670:2: (this_PivotCol_0= rulePivotCol ( () (otherlv_2= Comma ( (lv_entries_3_0= rulePivotCol ) ) )+ )? )
            // InternalSQLParser.g:4671:3: this_PivotCol_0= rulePivotCol ( () (otherlv_2= Comma ( (lv_entries_3_0= rulePivotCol ) ) )+ )?
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getPivotColsAccess().getPivotColParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_12);
            this_PivotCol_0=rulePivotCol();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_PivotCol_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:4682:3: ( () (otherlv_2= Comma ( (lv_entries_3_0= rulePivotCol ) ) )+ )?
            int alt83=2;
            int LA83_0 = input.LA(1);

            if ( (LA83_0==Comma) ) {
                alt83=1;
            }
            switch (alt83) {
                case 1 :
                    // InternalSQLParser.g:4683:4: () (otherlv_2= Comma ( (lv_entries_3_0= rulePivotCol ) ) )+
                    {
                    // InternalSQLParser.g:4683:4: ()
                    // InternalSQLParser.g:4684:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getPivotColsAccess().getPvcsEntriesAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalSQLParser.g:4693:4: (otherlv_2= Comma ( (lv_entries_3_0= rulePivotCol ) ) )+
                    int cnt82=0;
                    loop82:
                    do {
                        int alt82=2;
                        int LA82_0 = input.LA(1);

                        if ( (LA82_0==Comma) ) {
                            alt82=1;
                        }


                        switch (alt82) {
                    	case 1 :
                    	    // InternalSQLParser.g:4694:5: otherlv_2= Comma ( (lv_entries_3_0= rulePivotCol ) )
                    	    {
                    	    otherlv_2=(Token)match(input,Comma,FOLLOW_28); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_2, grammarAccess.getPivotColsAccess().getCommaKeyword_1_1_0());
                    	      				
                    	    }
                    	    // InternalSQLParser.g:4698:5: ( (lv_entries_3_0= rulePivotCol ) )
                    	    // InternalSQLParser.g:4699:6: (lv_entries_3_0= rulePivotCol )
                    	    {
                    	    // InternalSQLParser.g:4699:6: (lv_entries_3_0= rulePivotCol )
                    	    // InternalSQLParser.g:4700:7: lv_entries_3_0= rulePivotCol
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getPivotColsAccess().getEntriesPivotColParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_12);
                    	    lv_entries_3_0=rulePivotCol();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getPivotColsRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"entries",
                    	      								lv_entries_3_0,
                    	      								"org.xtext.example.mydsl_sql.SQL.PivotCol");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt82 >= 1 ) break loop82;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(82, input);
                                throw eee;
                        }
                        cnt82++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePivotCols"


    // $ANTLR start "entryRulePivotCol"
    // InternalSQLParser.g:4723:1: entryRulePivotCol returns [EObject current=null] : iv_rulePivotCol= rulePivotCol EOF ;
    public final EObject entryRulePivotCol() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePivotCol = null;


        try {
            // InternalSQLParser.g:4723:49: (iv_rulePivotCol= rulePivotCol EOF )
            // InternalSQLParser.g:4724:2: iv_rulePivotCol= rulePivotCol EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPivotColRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePivotCol=rulePivotCol();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePivotCol; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePivotCol"


    // $ANTLR start "rulePivotCol"
    // InternalSQLParser.g:4730:1: rulePivotCol returns [EObject current=null] : (this_DbObjectName_0= ruleDbObjectName ( () (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )? ) ;
    public final EObject rulePivotCol() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_DbObjectName_0 = null;

        EObject lv_entries_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:4736:2: ( (this_DbObjectName_0= ruleDbObjectName ( () (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )? ) )
            // InternalSQLParser.g:4737:2: (this_DbObjectName_0= ruleDbObjectName ( () (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )? )
            {
            // InternalSQLParser.g:4737:2: (this_DbObjectName_0= ruleDbObjectName ( () (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )? )
            // InternalSQLParser.g:4738:3: this_DbObjectName_0= ruleDbObjectName ( () (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )?
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getPivotColAccess().getDbObjectNameParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_56);
            this_DbObjectName_0=ruleDbObjectName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_DbObjectName_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:4749:3: ( () (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )?
            int alt85=2;
            int LA85_0 = input.LA(1);

            if ( (LA85_0==FullStop) ) {
                alt85=1;
            }
            switch (alt85) {
                case 1 :
                    // InternalSQLParser.g:4750:4: () (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+
                    {
                    // InternalSQLParser.g:4750:4: ()
                    // InternalSQLParser.g:4751:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getPivotColAccess().getPcolsEntriesAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalSQLParser.g:4760:4: (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+
                    int cnt84=0;
                    loop84:
                    do {
                        int alt84=2;
                        int LA84_0 = input.LA(1);

                        if ( (LA84_0==FullStop) ) {
                            alt84=1;
                        }


                        switch (alt84) {
                    	case 1 :
                    	    // InternalSQLParser.g:4761:5: otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) )
                    	    {
                    	    otherlv_2=(Token)match(input,FullStop,FOLLOW_28); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_2, grammarAccess.getPivotColAccess().getFullStopKeyword_1_1_0());
                    	      				
                    	    }
                    	    // InternalSQLParser.g:4765:5: ( (lv_entries_3_0= ruleDbObjectName ) )
                    	    // InternalSQLParser.g:4766:6: (lv_entries_3_0= ruleDbObjectName )
                    	    {
                    	    // InternalSQLParser.g:4766:6: (lv_entries_3_0= ruleDbObjectName )
                    	    // InternalSQLParser.g:4767:7: lv_entries_3_0= ruleDbObjectName
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getPivotColAccess().getEntriesDbObjectNameParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_56);
                    	    lv_entries_3_0=ruleDbObjectName();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getPivotColRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"entries",
                    	      								lv_entries_3_0,
                    	      								"org.xtext.example.mydsl_sql.SQL.DbObjectName");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt84 >= 1 ) break loop84;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(84, input);
                                throw eee;
                        }
                        cnt84++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePivotCol"


    // $ANTLR start "entryRuleTableFull"
    // InternalSQLParser.g:4790:1: entryRuleTableFull returns [EObject current=null] : iv_ruleTableFull= ruleTableFull EOF ;
    public final EObject entryRuleTableFull() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTableFull = null;


        try {
            // InternalSQLParser.g:4790:50: (iv_ruleTableFull= ruleTableFull EOF )
            // InternalSQLParser.g:4791:2: iv_ruleTableFull= ruleTableFull EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTableFullRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTableFull=ruleTableFull();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTableFull; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTableFull"


    // $ANTLR start "ruleTableFull"
    // InternalSQLParser.g:4797:1: ruleTableFull returns [EObject current=null] : (this_DbObjectName_0= ruleDbObjectName ( () (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )? ) ;
    public final EObject ruleTableFull() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_DbObjectName_0 = null;

        EObject lv_entries_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:4803:2: ( (this_DbObjectName_0= ruleDbObjectName ( () (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )? ) )
            // InternalSQLParser.g:4804:2: (this_DbObjectName_0= ruleDbObjectName ( () (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )? )
            {
            // InternalSQLParser.g:4804:2: (this_DbObjectName_0= ruleDbObjectName ( () (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )? )
            // InternalSQLParser.g:4805:3: this_DbObjectName_0= ruleDbObjectName ( () (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )?
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getTableFullAccess().getDbObjectNameParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_56);
            this_DbObjectName_0=ruleDbObjectName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_DbObjectName_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:4816:3: ( () (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )?
            int alt87=2;
            int LA87_0 = input.LA(1);

            if ( (LA87_0==FullStop) ) {
                alt87=1;
            }
            switch (alt87) {
                case 1 :
                    // InternalSQLParser.g:4817:4: () (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+
                    {
                    // InternalSQLParser.g:4817:4: ()
                    // InternalSQLParser.g:4818:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getTableFullAccess().getTblsEntriesAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalSQLParser.g:4827:4: (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+
                    int cnt86=0;
                    loop86:
                    do {
                        int alt86=2;
                        int LA86_0 = input.LA(1);

                        if ( (LA86_0==FullStop) ) {
                            alt86=1;
                        }


                        switch (alt86) {
                    	case 1 :
                    	    // InternalSQLParser.g:4828:5: otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) )
                    	    {
                    	    otherlv_2=(Token)match(input,FullStop,FOLLOW_28); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_2, grammarAccess.getTableFullAccess().getFullStopKeyword_1_1_0());
                    	      				
                    	    }
                    	    // InternalSQLParser.g:4832:5: ( (lv_entries_3_0= ruleDbObjectName ) )
                    	    // InternalSQLParser.g:4833:6: (lv_entries_3_0= ruleDbObjectName )
                    	    {
                    	    // InternalSQLParser.g:4833:6: (lv_entries_3_0= ruleDbObjectName )
                    	    // InternalSQLParser.g:4834:7: lv_entries_3_0= ruleDbObjectName
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getTableFullAccess().getEntriesDbObjectNameParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_56);
                    	    lv_entries_3_0=ruleDbObjectName();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getTableFullRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"entries",
                    	      								lv_entries_3_0,
                    	      								"org.xtext.example.mydsl_sql.SQL.DbObjectName");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt86 >= 1 ) break loop86;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(86, input);
                                throw eee;
                        }
                        cnt86++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTableFull"


    // $ANTLR start "entryRuleDbObjectNameAll"
    // InternalSQLParser.g:4857:1: entryRuleDbObjectNameAll returns [EObject current=null] : iv_ruleDbObjectNameAll= ruleDbObjectNameAll EOF ;
    public final EObject entryRuleDbObjectNameAll() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleDbObjectNameAll = null;


        try {
            // InternalSQLParser.g:4857:56: (iv_ruleDbObjectNameAll= ruleDbObjectNameAll EOF )
            // InternalSQLParser.g:4858:2: iv_ruleDbObjectNameAll= ruleDbObjectNameAll EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDbObjectNameAllRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDbObjectNameAll=ruleDbObjectNameAll();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDbObjectNameAll; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleDbObjectNameAll"


    // $ANTLR start "ruleDbObjectNameAll"
    // InternalSQLParser.g:4864:1: ruleDbObjectNameAll returns [EObject current=null] : ( ( (lv_dbname_0_0= ruleDBID ) ) otherlv_1= FullStop this_STAR_2= RULE_STAR ) ;
    public final EObject ruleDbObjectNameAll() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token this_STAR_2=null;
        AntlrDatatypeRuleToken lv_dbname_0_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:4870:2: ( ( ( (lv_dbname_0_0= ruleDBID ) ) otherlv_1= FullStop this_STAR_2= RULE_STAR ) )
            // InternalSQLParser.g:4871:2: ( ( (lv_dbname_0_0= ruleDBID ) ) otherlv_1= FullStop this_STAR_2= RULE_STAR )
            {
            // InternalSQLParser.g:4871:2: ( ( (lv_dbname_0_0= ruleDBID ) ) otherlv_1= FullStop this_STAR_2= RULE_STAR )
            // InternalSQLParser.g:4872:3: ( (lv_dbname_0_0= ruleDBID ) ) otherlv_1= FullStop this_STAR_2= RULE_STAR
            {
            // InternalSQLParser.g:4872:3: ( (lv_dbname_0_0= ruleDBID ) )
            // InternalSQLParser.g:4873:4: (lv_dbname_0_0= ruleDBID )
            {
            // InternalSQLParser.g:4873:4: (lv_dbname_0_0= ruleDBID )
            // InternalSQLParser.g:4874:5: lv_dbname_0_0= ruleDBID
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getDbObjectNameAllAccess().getDbnameDBIDParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_71);
            lv_dbname_0_0=ruleDBID();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getDbObjectNameAllRule());
              					}
              					set(
              						current,
              						"dbname",
              						lv_dbname_0_0,
              						"org.xtext.example.mydsl_sql.SQL.DBID");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_1=(Token)match(input,FullStop,FOLLOW_72); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getDbObjectNameAllAccess().getFullStopKeyword_1());
              		
            }
            this_STAR_2=(Token)match(input,RULE_STAR,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(this_STAR_2, grammarAccess.getDbObjectNameAllAccess().getSTARTerminalRuleCall_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleDbObjectNameAll"


    // $ANTLR start "entryRuleDbObjectName"
    // InternalSQLParser.g:4903:1: entryRuleDbObjectName returns [EObject current=null] : iv_ruleDbObjectName= ruleDbObjectName EOF ;
    public final EObject entryRuleDbObjectName() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleDbObjectName = null;


        try {
            // InternalSQLParser.g:4903:53: (iv_ruleDbObjectName= ruleDbObjectName EOF )
            // InternalSQLParser.g:4904:2: iv_ruleDbObjectName= ruleDbObjectName EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDbObjectNameRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDbObjectName=ruleDbObjectName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDbObjectName; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleDbObjectName"


    // $ANTLR start "ruleDbObjectName"
    // InternalSQLParser.g:4910:1: ruleDbObjectName returns [EObject current=null] : ( (lv_dbname_0_0= ruleDBID ) ) ;
    public final EObject ruleDbObjectName() throws RecognitionException {
        EObject current = null;

        AntlrDatatypeRuleToken lv_dbname_0_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:4916:2: ( ( (lv_dbname_0_0= ruleDBID ) ) )
            // InternalSQLParser.g:4917:2: ( (lv_dbname_0_0= ruleDBID ) )
            {
            // InternalSQLParser.g:4917:2: ( (lv_dbname_0_0= ruleDBID ) )
            // InternalSQLParser.g:4918:3: (lv_dbname_0_0= ruleDBID )
            {
            // InternalSQLParser.g:4918:3: (lv_dbname_0_0= ruleDBID )
            // InternalSQLParser.g:4919:4: lv_dbname_0_0= ruleDBID
            {
            if ( state.backtracking==0 ) {

              				newCompositeNode(grammarAccess.getDbObjectNameAccess().getDbnameDBIDParserRuleCall_0());
              			
            }
            pushFollow(FOLLOW_2);
            lv_dbname_0_0=ruleDBID();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getDbObjectNameRule());
              				}
              				set(
              					current,
              					"dbname",
              					lv_dbname_0_0,
              					"org.xtext.example.mydsl_sql.SQL.DBID");
              				afterParserOrEnumRuleCall();
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleDbObjectName"


    // $ANTLR start "entryRuleOrderByColumns"
    // InternalSQLParser.g:4939:1: entryRuleOrderByColumns returns [EObject current=null] : iv_ruleOrderByColumns= ruleOrderByColumns EOF ;
    public final EObject entryRuleOrderByColumns() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOrderByColumns = null;


        try {
            // InternalSQLParser.g:4939:55: (iv_ruleOrderByColumns= ruleOrderByColumns EOF )
            // InternalSQLParser.g:4940:2: iv_ruleOrderByColumns= ruleOrderByColumns EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOrderByColumnsRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOrderByColumns=ruleOrderByColumns();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOrderByColumns; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOrderByColumns"


    // $ANTLR start "ruleOrderByColumns"
    // InternalSQLParser.g:4946:1: ruleOrderByColumns returns [EObject current=null] : (this_OrderByColumnFull_0= ruleOrderByColumnFull ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleOrderByColumnFull ) ) )+ )? ) ;
    public final EObject ruleOrderByColumns() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_OrderByColumnFull_0 = null;

        EObject lv_entries_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:4952:2: ( (this_OrderByColumnFull_0= ruleOrderByColumnFull ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleOrderByColumnFull ) ) )+ )? ) )
            // InternalSQLParser.g:4953:2: (this_OrderByColumnFull_0= ruleOrderByColumnFull ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleOrderByColumnFull ) ) )+ )? )
            {
            // InternalSQLParser.g:4953:2: (this_OrderByColumnFull_0= ruleOrderByColumnFull ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleOrderByColumnFull ) ) )+ )? )
            // InternalSQLParser.g:4954:3: this_OrderByColumnFull_0= ruleOrderByColumnFull ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleOrderByColumnFull ) ) )+ )?
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getOrderByColumnsAccess().getOrderByColumnFullParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_12);
            this_OrderByColumnFull_0=ruleOrderByColumnFull();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_OrderByColumnFull_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:4965:3: ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleOrderByColumnFull ) ) )+ )?
            int alt89=2;
            int LA89_0 = input.LA(1);

            if ( (LA89_0==Comma) ) {
                alt89=1;
            }
            switch (alt89) {
                case 1 :
                    // InternalSQLParser.g:4966:4: () (otherlv_2= Comma ( (lv_entries_3_0= ruleOrderByColumnFull ) ) )+
                    {
                    // InternalSQLParser.g:4966:4: ()
                    // InternalSQLParser.g:4967:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getOrderByColumnsAccess().getOrOrderByColumnEntriesAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalSQLParser.g:4976:4: (otherlv_2= Comma ( (lv_entries_3_0= ruleOrderByColumnFull ) ) )+
                    int cnt88=0;
                    loop88:
                    do {
                        int alt88=2;
                        int LA88_0 = input.LA(1);

                        if ( (LA88_0==Comma) ) {
                            alt88=1;
                        }


                        switch (alt88) {
                    	case 1 :
                    	    // InternalSQLParser.g:4977:5: otherlv_2= Comma ( (lv_entries_3_0= ruleOrderByColumnFull ) )
                    	    {
                    	    otherlv_2=(Token)match(input,Comma,FOLLOW_45); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_2, grammarAccess.getOrderByColumnsAccess().getCommaKeyword_1_1_0());
                    	      				
                    	    }
                    	    // InternalSQLParser.g:4981:5: ( (lv_entries_3_0= ruleOrderByColumnFull ) )
                    	    // InternalSQLParser.g:4982:6: (lv_entries_3_0= ruleOrderByColumnFull )
                    	    {
                    	    // InternalSQLParser.g:4982:6: (lv_entries_3_0= ruleOrderByColumnFull )
                    	    // InternalSQLParser.g:4983:7: lv_entries_3_0= ruleOrderByColumnFull
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getOrderByColumnsAccess().getEntriesOrderByColumnFullParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_12);
                    	    lv_entries_3_0=ruleOrderByColumnFull();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getOrderByColumnsRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"entries",
                    	      								lv_entries_3_0,
                    	      								"org.xtext.example.mydsl_sql.SQL.OrderByColumnFull");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt88 >= 1 ) break loop88;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(88, input);
                                throw eee;
                        }
                        cnt88++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOrderByColumns"


    // $ANTLR start "entryRuleOrderByColumnFull"
    // InternalSQLParser.g:5006:1: entryRuleOrderByColumnFull returns [EObject current=null] : iv_ruleOrderByColumnFull= ruleOrderByColumnFull EOF ;
    public final EObject entryRuleOrderByColumnFull() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOrderByColumnFull = null;


        try {
            // InternalSQLParser.g:5006:58: (iv_ruleOrderByColumnFull= ruleOrderByColumnFull EOF )
            // InternalSQLParser.g:5007:2: iv_ruleOrderByColumnFull= ruleOrderByColumnFull EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOrderByColumnFullRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOrderByColumnFull=ruleOrderByColumnFull();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOrderByColumnFull; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOrderByColumnFull"


    // $ANTLR start "ruleOrderByColumnFull"
    // InternalSQLParser.g:5013:1: ruleOrderByColumnFull returns [EObject current=null] : ( ( ( (lv_colOrder_0_0= ruleColumnFull ) ) | ( (lv_colOrderInt_1_0= RULE_UNSIGNED ) ) ) ( ( (lv_direction_2_1= ASC | lv_direction_2_2= DESC ) ) )? ) ;
    public final EObject ruleOrderByColumnFull() throws RecognitionException {
        EObject current = null;

        Token lv_colOrderInt_1_0=null;
        Token lv_direction_2_1=null;
        Token lv_direction_2_2=null;
        EObject lv_colOrder_0_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:5019:2: ( ( ( ( (lv_colOrder_0_0= ruleColumnFull ) ) | ( (lv_colOrderInt_1_0= RULE_UNSIGNED ) ) ) ( ( (lv_direction_2_1= ASC | lv_direction_2_2= DESC ) ) )? ) )
            // InternalSQLParser.g:5020:2: ( ( ( (lv_colOrder_0_0= ruleColumnFull ) ) | ( (lv_colOrderInt_1_0= RULE_UNSIGNED ) ) ) ( ( (lv_direction_2_1= ASC | lv_direction_2_2= DESC ) ) )? )
            {
            // InternalSQLParser.g:5020:2: ( ( ( (lv_colOrder_0_0= ruleColumnFull ) ) | ( (lv_colOrderInt_1_0= RULE_UNSIGNED ) ) ) ( ( (lv_direction_2_1= ASC | lv_direction_2_2= DESC ) ) )? )
            // InternalSQLParser.g:5021:3: ( ( (lv_colOrder_0_0= ruleColumnFull ) ) | ( (lv_colOrderInt_1_0= RULE_UNSIGNED ) ) ) ( ( (lv_direction_2_1= ASC | lv_direction_2_2= DESC ) ) )?
            {
            // InternalSQLParser.g:5021:3: ( ( (lv_colOrder_0_0= ruleColumnFull ) ) | ( (lv_colOrderInt_1_0= RULE_UNSIGNED ) ) )
            int alt90=2;
            int LA90_0 = input.LA(1);

            if ( ((LA90_0>=RULE_STRING && LA90_0<=RULE_ID)) ) {
                alt90=1;
            }
            else if ( (LA90_0==RULE_UNSIGNED) ) {
                alt90=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 90, 0, input);

                throw nvae;
            }
            switch (alt90) {
                case 1 :
                    // InternalSQLParser.g:5022:4: ( (lv_colOrder_0_0= ruleColumnFull ) )
                    {
                    // InternalSQLParser.g:5022:4: ( (lv_colOrder_0_0= ruleColumnFull ) )
                    // InternalSQLParser.g:5023:5: (lv_colOrder_0_0= ruleColumnFull )
                    {
                    // InternalSQLParser.g:5023:5: (lv_colOrder_0_0= ruleColumnFull )
                    // InternalSQLParser.g:5024:6: lv_colOrder_0_0= ruleColumnFull
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getOrderByColumnFullAccess().getColOrderColumnFullParserRuleCall_0_0_0());
                      					
                    }
                    pushFollow(FOLLOW_73);
                    lv_colOrder_0_0=ruleColumnFull();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getOrderByColumnFullRule());
                      						}
                      						set(
                      							current,
                      							"colOrder",
                      							lv_colOrder_0_0,
                      							"org.xtext.example.mydsl_sql.SQL.ColumnFull");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:5042:4: ( (lv_colOrderInt_1_0= RULE_UNSIGNED ) )
                    {
                    // InternalSQLParser.g:5042:4: ( (lv_colOrderInt_1_0= RULE_UNSIGNED ) )
                    // InternalSQLParser.g:5043:5: (lv_colOrderInt_1_0= RULE_UNSIGNED )
                    {
                    // InternalSQLParser.g:5043:5: (lv_colOrderInt_1_0= RULE_UNSIGNED )
                    // InternalSQLParser.g:5044:6: lv_colOrderInt_1_0= RULE_UNSIGNED
                    {
                    lv_colOrderInt_1_0=(Token)match(input,RULE_UNSIGNED,FOLLOW_73); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_colOrderInt_1_0, grammarAccess.getOrderByColumnFullAccess().getColOrderIntUNSIGNEDTerminalRuleCall_0_1_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getOrderByColumnFullRule());
                      						}
                      						setWithLastConsumed(
                      							current,
                      							"colOrderInt",
                      							lv_colOrderInt_1_0,
                      							"org.xtext.example.mydsl_sql.SQL.UNSIGNED");
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            // InternalSQLParser.g:5061:3: ( ( (lv_direction_2_1= ASC | lv_direction_2_2= DESC ) ) )?
            int alt92=2;
            int LA92_0 = input.LA(1);

            if ( (LA92_0==DESC||LA92_0==ASC) ) {
                alt92=1;
            }
            switch (alt92) {
                case 1 :
                    // InternalSQLParser.g:5062:4: ( (lv_direction_2_1= ASC | lv_direction_2_2= DESC ) )
                    {
                    // InternalSQLParser.g:5062:4: ( (lv_direction_2_1= ASC | lv_direction_2_2= DESC ) )
                    // InternalSQLParser.g:5063:5: (lv_direction_2_1= ASC | lv_direction_2_2= DESC )
                    {
                    // InternalSQLParser.g:5063:5: (lv_direction_2_1= ASC | lv_direction_2_2= DESC )
                    int alt91=2;
                    int LA91_0 = input.LA(1);

                    if ( (LA91_0==ASC) ) {
                        alt91=1;
                    }
                    else if ( (LA91_0==DESC) ) {
                        alt91=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 91, 0, input);

                        throw nvae;
                    }
                    switch (alt91) {
                        case 1 :
                            // InternalSQLParser.g:5064:6: lv_direction_2_1= ASC
                            {
                            lv_direction_2_1=(Token)match(input,ASC,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(lv_direction_2_1, grammarAccess.getOrderByColumnFullAccess().getDirectionASCKeyword_1_0_0());
                              					
                            }
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getOrderByColumnFullRule());
                              						}
                              						setWithLastConsumed(current, "direction", lv_direction_2_1, null);
                              					
                            }

                            }
                            break;
                        case 2 :
                            // InternalSQLParser.g:5075:6: lv_direction_2_2= DESC
                            {
                            lv_direction_2_2=(Token)match(input,DESC,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(lv_direction_2_2, grammarAccess.getOrderByColumnFullAccess().getDirectionDESCKeyword_1_0_1());
                              					
                            }
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getOrderByColumnFullRule());
                              						}
                              						setWithLastConsumed(current, "direction", lv_direction_2_2, null);
                              					
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOrderByColumnFull"


    // $ANTLR start "entryRuleGroupByColumns"
    // InternalSQLParser.g:5092:1: entryRuleGroupByColumns returns [EObject current=null] : iv_ruleGroupByColumns= ruleGroupByColumns EOF ;
    public final EObject entryRuleGroupByColumns() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleGroupByColumns = null;


        try {
            // InternalSQLParser.g:5092:55: (iv_ruleGroupByColumns= ruleGroupByColumns EOF )
            // InternalSQLParser.g:5093:2: iv_ruleGroupByColumns= ruleGroupByColumns EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getGroupByColumnsRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleGroupByColumns=ruleGroupByColumns();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleGroupByColumns; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleGroupByColumns"


    // $ANTLR start "ruleGroupByColumns"
    // InternalSQLParser.g:5099:1: ruleGroupByColumns returns [EObject current=null] : (this_GroupByColumnFull_0= ruleGroupByColumnFull ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleGroupByColumnFull ) ) )+ )? ) ;
    public final EObject ruleGroupByColumns() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_GroupByColumnFull_0 = null;

        EObject lv_entries_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:5105:2: ( (this_GroupByColumnFull_0= ruleGroupByColumnFull ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleGroupByColumnFull ) ) )+ )? ) )
            // InternalSQLParser.g:5106:2: (this_GroupByColumnFull_0= ruleGroupByColumnFull ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleGroupByColumnFull ) ) )+ )? )
            {
            // InternalSQLParser.g:5106:2: (this_GroupByColumnFull_0= ruleGroupByColumnFull ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleGroupByColumnFull ) ) )+ )? )
            // InternalSQLParser.g:5107:3: this_GroupByColumnFull_0= ruleGroupByColumnFull ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleGroupByColumnFull ) ) )+ )?
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getGroupByColumnsAccess().getGroupByColumnFullParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_12);
            this_GroupByColumnFull_0=ruleGroupByColumnFull();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_GroupByColumnFull_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:5118:3: ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleGroupByColumnFull ) ) )+ )?
            int alt94=2;
            int LA94_0 = input.LA(1);

            if ( (LA94_0==Comma) ) {
                alt94=1;
            }
            switch (alt94) {
                case 1 :
                    // InternalSQLParser.g:5119:4: () (otherlv_2= Comma ( (lv_entries_3_0= ruleGroupByColumnFull ) ) )+
                    {
                    // InternalSQLParser.g:5119:4: ()
                    // InternalSQLParser.g:5120:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getGroupByColumnsAccess().getOrGroupByColumnEntriesAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalSQLParser.g:5129:4: (otherlv_2= Comma ( (lv_entries_3_0= ruleGroupByColumnFull ) ) )+
                    int cnt93=0;
                    loop93:
                    do {
                        int alt93=2;
                        int LA93_0 = input.LA(1);

                        if ( (LA93_0==Comma) ) {
                            alt93=1;
                        }


                        switch (alt93) {
                    	case 1 :
                    	    // InternalSQLParser.g:5130:5: otherlv_2= Comma ( (lv_entries_3_0= ruleGroupByColumnFull ) )
                    	    {
                    	    otherlv_2=(Token)match(input,Comma,FOLLOW_45); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_2, grammarAccess.getGroupByColumnsAccess().getCommaKeyword_1_1_0());
                    	      				
                    	    }
                    	    // InternalSQLParser.g:5134:5: ( (lv_entries_3_0= ruleGroupByColumnFull ) )
                    	    // InternalSQLParser.g:5135:6: (lv_entries_3_0= ruleGroupByColumnFull )
                    	    {
                    	    // InternalSQLParser.g:5135:6: (lv_entries_3_0= ruleGroupByColumnFull )
                    	    // InternalSQLParser.g:5136:7: lv_entries_3_0= ruleGroupByColumnFull
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getGroupByColumnsAccess().getEntriesGroupByColumnFullParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_12);
                    	    lv_entries_3_0=ruleGroupByColumnFull();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getGroupByColumnsRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"entries",
                    	      								lv_entries_3_0,
                    	      								"org.xtext.example.mydsl_sql.SQL.GroupByColumnFull");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt93 >= 1 ) break loop93;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(93, input);
                                throw eee;
                        }
                        cnt93++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleGroupByColumns"


    // $ANTLR start "entryRuleGroupByColumnFull"
    // InternalSQLParser.g:5159:1: entryRuleGroupByColumnFull returns [EObject current=null] : iv_ruleGroupByColumnFull= ruleGroupByColumnFull EOF ;
    public final EObject entryRuleGroupByColumnFull() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleGroupByColumnFull = null;


        try {
            // InternalSQLParser.g:5159:58: (iv_ruleGroupByColumnFull= ruleGroupByColumnFull EOF )
            // InternalSQLParser.g:5160:2: iv_ruleGroupByColumnFull= ruleGroupByColumnFull EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getGroupByColumnFullRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleGroupByColumnFull=ruleGroupByColumnFull();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleGroupByColumnFull; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleGroupByColumnFull"


    // $ANTLR start "ruleGroupByColumnFull"
    // InternalSQLParser.g:5166:1: ruleGroupByColumnFull returns [EObject current=null] : ( ( (lv_colGrBy_0_0= ruleColumnFull ) ) | ( (lv_gbFunction_1_0= ruleOperandFunction ) ) | ( (lv_grByInt_2_0= RULE_UNSIGNED ) ) ) ;
    public final EObject ruleGroupByColumnFull() throws RecognitionException {
        EObject current = null;

        Token lv_grByInt_2_0=null;
        EObject lv_colGrBy_0_0 = null;

        EObject lv_gbFunction_1_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:5172:2: ( ( ( (lv_colGrBy_0_0= ruleColumnFull ) ) | ( (lv_gbFunction_1_0= ruleOperandFunction ) ) | ( (lv_grByInt_2_0= RULE_UNSIGNED ) ) ) )
            // InternalSQLParser.g:5173:2: ( ( (lv_colGrBy_0_0= ruleColumnFull ) ) | ( (lv_gbFunction_1_0= ruleOperandFunction ) ) | ( (lv_grByInt_2_0= RULE_UNSIGNED ) ) )
            {
            // InternalSQLParser.g:5173:2: ( ( (lv_colGrBy_0_0= ruleColumnFull ) ) | ( (lv_gbFunction_1_0= ruleOperandFunction ) ) | ( (lv_grByInt_2_0= RULE_UNSIGNED ) ) )
            int alt95=3;
            switch ( input.LA(1) ) {
            case RULE_ID:
                {
                int LA95_1 = input.LA(2);

                if ( (LA95_1==EOF||LA95_1==INTERSECT||LA95_1==EXCEPT||LA95_1==HAVING||LA95_1==OFFSET||LA95_1==FETCH||(LA95_1>=LIMIT && LA95_1<=MINUS)||LA95_1==ORDER||LA95_1==UNION||LA95_1==RightParenthesis||LA95_1==Comma||LA95_1==FullStop||LA95_1==Semicolon) ) {
                    alt95=1;
                }
                else if ( (LA95_1==LeftParenthesis) ) {
                    alt95=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 95, 1, input);

                    throw nvae;
                }
                }
                break;
            case RULE_STRING:
            case RULE_DBNAME:
                {
                alt95=1;
                }
                break;
            case RULE_UNSIGNED:
                {
                alt95=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 95, 0, input);

                throw nvae;
            }

            switch (alt95) {
                case 1 :
                    // InternalSQLParser.g:5174:3: ( (lv_colGrBy_0_0= ruleColumnFull ) )
                    {
                    // InternalSQLParser.g:5174:3: ( (lv_colGrBy_0_0= ruleColumnFull ) )
                    // InternalSQLParser.g:5175:4: (lv_colGrBy_0_0= ruleColumnFull )
                    {
                    // InternalSQLParser.g:5175:4: (lv_colGrBy_0_0= ruleColumnFull )
                    // InternalSQLParser.g:5176:5: lv_colGrBy_0_0= ruleColumnFull
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getGroupByColumnFullAccess().getColGrByColumnFullParserRuleCall_0_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_colGrBy_0_0=ruleColumnFull();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getGroupByColumnFullRule());
                      					}
                      					set(
                      						current,
                      						"colGrBy",
                      						lv_colGrBy_0_0,
                      						"org.xtext.example.mydsl_sql.SQL.ColumnFull");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:5194:3: ( (lv_gbFunction_1_0= ruleOperandFunction ) )
                    {
                    // InternalSQLParser.g:5194:3: ( (lv_gbFunction_1_0= ruleOperandFunction ) )
                    // InternalSQLParser.g:5195:4: (lv_gbFunction_1_0= ruleOperandFunction )
                    {
                    // InternalSQLParser.g:5195:4: (lv_gbFunction_1_0= ruleOperandFunction )
                    // InternalSQLParser.g:5196:5: lv_gbFunction_1_0= ruleOperandFunction
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getGroupByColumnFullAccess().getGbFunctionOperandFunctionParserRuleCall_1_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_gbFunction_1_0=ruleOperandFunction();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getGroupByColumnFullRule());
                      					}
                      					set(
                      						current,
                      						"gbFunction",
                      						lv_gbFunction_1_0,
                      						"org.xtext.example.mydsl_sql.SQL.OperandFunction");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:5214:3: ( (lv_grByInt_2_0= RULE_UNSIGNED ) )
                    {
                    // InternalSQLParser.g:5214:3: ( (lv_grByInt_2_0= RULE_UNSIGNED ) )
                    // InternalSQLParser.g:5215:4: (lv_grByInt_2_0= RULE_UNSIGNED )
                    {
                    // InternalSQLParser.g:5215:4: (lv_grByInt_2_0= RULE_UNSIGNED )
                    // InternalSQLParser.g:5216:5: lv_grByInt_2_0= RULE_UNSIGNED
                    {
                    lv_grByInt_2_0=(Token)match(input,RULE_UNSIGNED,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_grByInt_2_0, grammarAccess.getGroupByColumnFullAccess().getGrByIntUNSIGNEDTerminalRuleCall_2_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getGroupByColumnFullRule());
                      					}
                      					setWithLastConsumed(
                      						current,
                      						"grByInt",
                      						lv_grByInt_2_0,
                      						"org.xtext.example.mydsl_sql.SQL.UNSIGNED");
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleGroupByColumnFull"


    // $ANTLR start "entryRuleFullExpression"
    // InternalSQLParser.g:5236:1: entryRuleFullExpression returns [EObject current=null] : iv_ruleFullExpression= ruleFullExpression EOF ;
    public final EObject entryRuleFullExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFullExpression = null;


        try {
            // InternalSQLParser.g:5236:55: (iv_ruleFullExpression= ruleFullExpression EOF )
            // InternalSQLParser.g:5237:2: iv_ruleFullExpression= ruleFullExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFullExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFullExpression=ruleFullExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFullExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFullExpression"


    // $ANTLR start "ruleFullExpression"
    // InternalSQLParser.g:5243:1: ruleFullExpression returns [EObject current=null] : (this_ExpressionFragment_0= ruleExpressionFragment ( () ( (lv_entries_2_0= ruleExpressionFragmentSecond ) )+ )? ) ;
    public final EObject ruleFullExpression() throws RecognitionException {
        EObject current = null;

        EObject this_ExpressionFragment_0 = null;

        EObject lv_entries_2_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:5249:2: ( (this_ExpressionFragment_0= ruleExpressionFragment ( () ( (lv_entries_2_0= ruleExpressionFragmentSecond ) )+ )? ) )
            // InternalSQLParser.g:5250:2: (this_ExpressionFragment_0= ruleExpressionFragment ( () ( (lv_entries_2_0= ruleExpressionFragmentSecond ) )+ )? )
            {
            // InternalSQLParser.g:5250:2: (this_ExpressionFragment_0= ruleExpressionFragment ( () ( (lv_entries_2_0= ruleExpressionFragmentSecond ) )+ )? )
            // InternalSQLParser.g:5251:3: this_ExpressionFragment_0= ruleExpressionFragment ( () ( (lv_entries_2_0= ruleExpressionFragmentSecond ) )+ )?
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getFullExpressionAccess().getExpressionFragmentParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_74);
            this_ExpressionFragment_0=ruleExpressionFragment();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ExpressionFragment_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:5262:3: ( () ( (lv_entries_2_0= ruleExpressionFragmentSecond ) )+ )?
            int alt97=2;
            int LA97_0 = input.LA(1);

            if ( (LA97_0==AND||LA97_0==OR||LA97_0==RULE_JRNPARAM) ) {
                alt97=1;
            }
            switch (alt97) {
                case 1 :
                    // InternalSQLParser.g:5263:4: () ( (lv_entries_2_0= ruleExpressionFragmentSecond ) )+
                    {
                    // InternalSQLParser.g:5263:4: ()
                    // InternalSQLParser.g:5264:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getFullExpressionAccess().getOrExprEntriesAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalSQLParser.g:5273:4: ( (lv_entries_2_0= ruleExpressionFragmentSecond ) )+
                    int cnt96=0;
                    loop96:
                    do {
                        int alt96=2;
                        int LA96_0 = input.LA(1);

                        if ( (LA96_0==AND||LA96_0==OR||LA96_0==RULE_JRNPARAM) ) {
                            alt96=1;
                        }


                        switch (alt96) {
                    	case 1 :
                    	    // InternalSQLParser.g:5274:5: (lv_entries_2_0= ruleExpressionFragmentSecond )
                    	    {
                    	    // InternalSQLParser.g:5274:5: (lv_entries_2_0= ruleExpressionFragmentSecond )
                    	    // InternalSQLParser.g:5275:6: lv_entries_2_0= ruleExpressionFragmentSecond
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      						newCompositeNode(grammarAccess.getFullExpressionAccess().getEntriesExpressionFragmentSecondParserRuleCall_1_1_0());
                    	      					
                    	    }
                    	    pushFollow(FOLLOW_74);
                    	    lv_entries_2_0=ruleExpressionFragmentSecond();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						if (current==null) {
                    	      							current = createModelElementForParent(grammarAccess.getFullExpressionRule());
                    	      						}
                    	      						add(
                    	      							current,
                    	      							"entries",
                    	      							lv_entries_2_0,
                    	      							"org.xtext.example.mydsl_sql.SQL.ExpressionFragmentSecond");
                    	      						afterParserOrEnumRuleCall();
                    	      					
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt96 >= 1 ) break loop96;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(96, input);
                                throw eee;
                        }
                        cnt96++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFullExpression"


    // $ANTLR start "entryRuleExpressionFragmentSecond"
    // InternalSQLParser.g:5297:1: entryRuleExpressionFragmentSecond returns [EObject current=null] : iv_ruleExpressionFragmentSecond= ruleExpressionFragmentSecond EOF ;
    public final EObject entryRuleExpressionFragmentSecond() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExpressionFragmentSecond = null;


        try {
            // InternalSQLParser.g:5297:65: (iv_ruleExpressionFragmentSecond= ruleExpressionFragmentSecond EOF )
            // InternalSQLParser.g:5298:2: iv_ruleExpressionFragmentSecond= ruleExpressionFragmentSecond EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExpressionFragmentSecondRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExpressionFragmentSecond=ruleExpressionFragmentSecond();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExpressionFragmentSecond; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleExpressionFragmentSecond"


    // $ANTLR start "ruleExpressionFragmentSecond"
    // InternalSQLParser.g:5304:1: ruleExpressionFragmentSecond returns [EObject current=null] : ( ( ( ( (lv_c_0_1= AND | lv_c_0_2= OR ) ) ) ( (lv_efrag_1_0= ruleExpressionFragment ) ) ) | ( (lv_notPrm_2_0= RULE_JRNPARAM ) ) ) ;
    public final EObject ruleExpressionFragmentSecond() throws RecognitionException {
        EObject current = null;

        Token lv_c_0_1=null;
        Token lv_c_0_2=null;
        Token lv_notPrm_2_0=null;
        EObject lv_efrag_1_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:5310:2: ( ( ( ( ( (lv_c_0_1= AND | lv_c_0_2= OR ) ) ) ( (lv_efrag_1_0= ruleExpressionFragment ) ) ) | ( (lv_notPrm_2_0= RULE_JRNPARAM ) ) ) )
            // InternalSQLParser.g:5311:2: ( ( ( ( (lv_c_0_1= AND | lv_c_0_2= OR ) ) ) ( (lv_efrag_1_0= ruleExpressionFragment ) ) ) | ( (lv_notPrm_2_0= RULE_JRNPARAM ) ) )
            {
            // InternalSQLParser.g:5311:2: ( ( ( ( (lv_c_0_1= AND | lv_c_0_2= OR ) ) ) ( (lv_efrag_1_0= ruleExpressionFragment ) ) ) | ( (lv_notPrm_2_0= RULE_JRNPARAM ) ) )
            int alt99=2;
            int LA99_0 = input.LA(1);

            if ( (LA99_0==AND||LA99_0==OR) ) {
                alt99=1;
            }
            else if ( (LA99_0==RULE_JRNPARAM) ) {
                alt99=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 99, 0, input);

                throw nvae;
            }
            switch (alt99) {
                case 1 :
                    // InternalSQLParser.g:5312:3: ( ( ( (lv_c_0_1= AND | lv_c_0_2= OR ) ) ) ( (lv_efrag_1_0= ruleExpressionFragment ) ) )
                    {
                    // InternalSQLParser.g:5312:3: ( ( ( (lv_c_0_1= AND | lv_c_0_2= OR ) ) ) ( (lv_efrag_1_0= ruleExpressionFragment ) ) )
                    // InternalSQLParser.g:5313:4: ( ( (lv_c_0_1= AND | lv_c_0_2= OR ) ) ) ( (lv_efrag_1_0= ruleExpressionFragment ) )
                    {
                    // InternalSQLParser.g:5313:4: ( ( (lv_c_0_1= AND | lv_c_0_2= OR ) ) )
                    // InternalSQLParser.g:5314:5: ( (lv_c_0_1= AND | lv_c_0_2= OR ) )
                    {
                    // InternalSQLParser.g:5314:5: ( (lv_c_0_1= AND | lv_c_0_2= OR ) )
                    // InternalSQLParser.g:5315:6: (lv_c_0_1= AND | lv_c_0_2= OR )
                    {
                    // InternalSQLParser.g:5315:6: (lv_c_0_1= AND | lv_c_0_2= OR )
                    int alt98=2;
                    int LA98_0 = input.LA(1);

                    if ( (LA98_0==AND) ) {
                        alt98=1;
                    }
                    else if ( (LA98_0==OR) ) {
                        alt98=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 98, 0, input);

                        throw nvae;
                    }
                    switch (alt98) {
                        case 1 :
                            // InternalSQLParser.g:5316:7: lv_c_0_1= AND
                            {
                            lv_c_0_1=(Token)match(input,AND,FOLLOW_42); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(lv_c_0_1, grammarAccess.getExpressionFragmentSecondAccess().getCANDKeyword_0_0_0_0());
                              						
                            }
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getExpressionFragmentSecondRule());
                              							}
                              							setWithLastConsumed(current, "c", lv_c_0_1, null);
                              						
                            }

                            }
                            break;
                        case 2 :
                            // InternalSQLParser.g:5327:7: lv_c_0_2= OR
                            {
                            lv_c_0_2=(Token)match(input,OR,FOLLOW_42); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(lv_c_0_2, grammarAccess.getExpressionFragmentSecondAccess().getCORKeyword_0_0_0_1());
                              						
                            }
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getExpressionFragmentSecondRule());
                              							}
                              							setWithLastConsumed(current, "c", lv_c_0_2, null);
                              						
                            }

                            }
                            break;

                    }


                    }


                    }

                    // InternalSQLParser.g:5340:4: ( (lv_efrag_1_0= ruleExpressionFragment ) )
                    // InternalSQLParser.g:5341:5: (lv_efrag_1_0= ruleExpressionFragment )
                    {
                    // InternalSQLParser.g:5341:5: (lv_efrag_1_0= ruleExpressionFragment )
                    // InternalSQLParser.g:5342:6: lv_efrag_1_0= ruleExpressionFragment
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getExpressionFragmentSecondAccess().getEfragExpressionFragmentParserRuleCall_0_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_efrag_1_0=ruleExpressionFragment();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExpressionFragmentSecondRule());
                      						}
                      						set(
                      							current,
                      							"efrag",
                      							lv_efrag_1_0,
                      							"org.xtext.example.mydsl_sql.SQL.ExpressionFragment");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:5361:3: ( (lv_notPrm_2_0= RULE_JRNPARAM ) )
                    {
                    // InternalSQLParser.g:5361:3: ( (lv_notPrm_2_0= RULE_JRNPARAM ) )
                    // InternalSQLParser.g:5362:4: (lv_notPrm_2_0= RULE_JRNPARAM )
                    {
                    // InternalSQLParser.g:5362:4: (lv_notPrm_2_0= RULE_JRNPARAM )
                    // InternalSQLParser.g:5363:5: lv_notPrm_2_0= RULE_JRNPARAM
                    {
                    lv_notPrm_2_0=(Token)match(input,RULE_JRNPARAM,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_notPrm_2_0, grammarAccess.getExpressionFragmentSecondAccess().getNotPrmJRNPARAMTerminalRuleCall_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getExpressionFragmentSecondRule());
                      					}
                      					setWithLastConsumed(
                      						current,
                      						"notPrm",
                      						lv_notPrm_2_0,
                      						"org.xtext.example.mydsl_sql.SQL.JRNPARAM");
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleExpressionFragmentSecond"


    // $ANTLR start "entryRuleExpressionFragment"
    // InternalSQLParser.g:5383:1: entryRuleExpressionFragment returns [EObject current=null] : iv_ruleExpressionFragment= ruleExpressionFragment EOF ;
    public final EObject entryRuleExpressionFragment() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExpressionFragment = null;


        try {
            // InternalSQLParser.g:5383:59: (iv_ruleExpressionFragment= ruleExpressionFragment EOF )
            // InternalSQLParser.g:5384:2: iv_ruleExpressionFragment= ruleExpressionFragment EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExpressionFragmentRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExpressionFragment=ruleExpressionFragment();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExpressionFragment; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleExpressionFragment"


    // $ANTLR start "ruleExpressionFragment"
    // InternalSQLParser.g:5390:1: ruleExpressionFragment returns [EObject current=null] : ( ( (lv_expgroup_0_0= ruleExpressionGroup ) ) | ( (lv_exp_1_0= ruleExpression ) ) | ( ( (lv_xexp_2_1= ruleXExpression | lv_xexp_2_2= ruleXExpression_ ) ) ) | ( (lv_notPrm_3_0= RULE_JRNPARAM ) ) | ( (lv_in_4_0= ruleInOperator ) ) | ( (lv_exists_5_0= ruleExistsOperator ) ) ) ;
    public final EObject ruleExpressionFragment() throws RecognitionException {
        EObject current = null;

        Token lv_notPrm_3_0=null;
        EObject lv_expgroup_0_0 = null;

        EObject lv_exp_1_0 = null;

        EObject lv_xexp_2_1 = null;

        EObject lv_xexp_2_2 = null;

        EObject lv_in_4_0 = null;

        EObject lv_exists_5_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:5396:2: ( ( ( (lv_expgroup_0_0= ruleExpressionGroup ) ) | ( (lv_exp_1_0= ruleExpression ) ) | ( ( (lv_xexp_2_1= ruleXExpression | lv_xexp_2_2= ruleXExpression_ ) ) ) | ( (lv_notPrm_3_0= RULE_JRNPARAM ) ) | ( (lv_in_4_0= ruleInOperator ) ) | ( (lv_exists_5_0= ruleExistsOperator ) ) ) )
            // InternalSQLParser.g:5397:2: ( ( (lv_expgroup_0_0= ruleExpressionGroup ) ) | ( (lv_exp_1_0= ruleExpression ) ) | ( ( (lv_xexp_2_1= ruleXExpression | lv_xexp_2_2= ruleXExpression_ ) ) ) | ( (lv_notPrm_3_0= RULE_JRNPARAM ) ) | ( (lv_in_4_0= ruleInOperator ) ) | ( (lv_exists_5_0= ruleExistsOperator ) ) )
            {
            // InternalSQLParser.g:5397:2: ( ( (lv_expgroup_0_0= ruleExpressionGroup ) ) | ( (lv_exp_1_0= ruleExpression ) ) | ( ( (lv_xexp_2_1= ruleXExpression | lv_xexp_2_2= ruleXExpression_ ) ) ) | ( (lv_notPrm_3_0= RULE_JRNPARAM ) ) | ( (lv_in_4_0= ruleInOperator ) ) | ( (lv_exists_5_0= ruleExistsOperator ) ) )
            int alt101=6;
            alt101 = dfa101.predict(input);
            switch (alt101) {
                case 1 :
                    // InternalSQLParser.g:5398:3: ( (lv_expgroup_0_0= ruleExpressionGroup ) )
                    {
                    // InternalSQLParser.g:5398:3: ( (lv_expgroup_0_0= ruleExpressionGroup ) )
                    // InternalSQLParser.g:5399:4: (lv_expgroup_0_0= ruleExpressionGroup )
                    {
                    // InternalSQLParser.g:5399:4: (lv_expgroup_0_0= ruleExpressionGroup )
                    // InternalSQLParser.g:5400:5: lv_expgroup_0_0= ruleExpressionGroup
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getExpressionFragmentAccess().getExpgroupExpressionGroupParserRuleCall_0_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_expgroup_0_0=ruleExpressionGroup();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getExpressionFragmentRule());
                      					}
                      					set(
                      						current,
                      						"expgroup",
                      						lv_expgroup_0_0,
                      						"org.xtext.example.mydsl_sql.SQL.ExpressionGroup");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:5418:3: ( (lv_exp_1_0= ruleExpression ) )
                    {
                    // InternalSQLParser.g:5418:3: ( (lv_exp_1_0= ruleExpression ) )
                    // InternalSQLParser.g:5419:4: (lv_exp_1_0= ruleExpression )
                    {
                    // InternalSQLParser.g:5419:4: (lv_exp_1_0= ruleExpression )
                    // InternalSQLParser.g:5420:5: lv_exp_1_0= ruleExpression
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getExpressionFragmentAccess().getExpExpressionParserRuleCall_1_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_exp_1_0=ruleExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getExpressionFragmentRule());
                      					}
                      					set(
                      						current,
                      						"exp",
                      						lv_exp_1_0,
                      						"org.xtext.example.mydsl_sql.SQL.Expression");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:5438:3: ( ( (lv_xexp_2_1= ruleXExpression | lv_xexp_2_2= ruleXExpression_ ) ) )
                    {
                    // InternalSQLParser.g:5438:3: ( ( (lv_xexp_2_1= ruleXExpression | lv_xexp_2_2= ruleXExpression_ ) ) )
                    // InternalSQLParser.g:5439:4: ( (lv_xexp_2_1= ruleXExpression | lv_xexp_2_2= ruleXExpression_ ) )
                    {
                    // InternalSQLParser.g:5439:4: ( (lv_xexp_2_1= ruleXExpression | lv_xexp_2_2= ruleXExpression_ ) )
                    // InternalSQLParser.g:5440:5: (lv_xexp_2_1= ruleXExpression | lv_xexp_2_2= ruleXExpression_ )
                    {
                    // InternalSQLParser.g:5440:5: (lv_xexp_2_1= ruleXExpression | lv_xexp_2_2= ruleXExpression_ )
                    int alt100=2;
                    alt100 = dfa100.predict(input);
                    switch (alt100) {
                        case 1 :
                            // InternalSQLParser.g:5441:6: lv_xexp_2_1= ruleXExpression
                            {
                            if ( state.backtracking==0 ) {

                              						newCompositeNode(grammarAccess.getExpressionFragmentAccess().getXexpXExpressionParserRuleCall_2_0_0());
                              					
                            }
                            pushFollow(FOLLOW_2);
                            lv_xexp_2_1=ruleXExpression();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElementForParent(grammarAccess.getExpressionFragmentRule());
                              						}
                              						set(
                              							current,
                              							"xexp",
                              							lv_xexp_2_1,
                              							"org.xtext.example.mydsl_sql.SQL.XExpression");
                              						afterParserOrEnumRuleCall();
                              					
                            }

                            }
                            break;
                        case 2 :
                            // InternalSQLParser.g:5457:6: lv_xexp_2_2= ruleXExpression_
                            {
                            if ( state.backtracking==0 ) {

                              						newCompositeNode(grammarAccess.getExpressionFragmentAccess().getXexpXExpression_ParserRuleCall_2_0_1());
                              					
                            }
                            pushFollow(FOLLOW_2);
                            lv_xexp_2_2=ruleXExpression_();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElementForParent(grammarAccess.getExpressionFragmentRule());
                              						}
                              						set(
                              							current,
                              							"xexp",
                              							lv_xexp_2_2,
                              							"org.xtext.example.mydsl_sql.SQL.XExpression_");
                              						afterParserOrEnumRuleCall();
                              					
                            }

                            }
                            break;

                    }


                    }


                    }


                    }
                    break;
                case 4 :
                    // InternalSQLParser.g:5476:3: ( (lv_notPrm_3_0= RULE_JRNPARAM ) )
                    {
                    // InternalSQLParser.g:5476:3: ( (lv_notPrm_3_0= RULE_JRNPARAM ) )
                    // InternalSQLParser.g:5477:4: (lv_notPrm_3_0= RULE_JRNPARAM )
                    {
                    // InternalSQLParser.g:5477:4: (lv_notPrm_3_0= RULE_JRNPARAM )
                    // InternalSQLParser.g:5478:5: lv_notPrm_3_0= RULE_JRNPARAM
                    {
                    lv_notPrm_3_0=(Token)match(input,RULE_JRNPARAM,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_notPrm_3_0, grammarAccess.getExpressionFragmentAccess().getNotPrmJRNPARAMTerminalRuleCall_3_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getExpressionFragmentRule());
                      					}
                      					setWithLastConsumed(
                      						current,
                      						"notPrm",
                      						lv_notPrm_3_0,
                      						"org.xtext.example.mydsl_sql.SQL.JRNPARAM");
                      				
                    }

                    }


                    }


                    }
                    break;
                case 5 :
                    // InternalSQLParser.g:5495:3: ( (lv_in_4_0= ruleInOperator ) )
                    {
                    // InternalSQLParser.g:5495:3: ( (lv_in_4_0= ruleInOperator ) )
                    // InternalSQLParser.g:5496:4: (lv_in_4_0= ruleInOperator )
                    {
                    // InternalSQLParser.g:5496:4: (lv_in_4_0= ruleInOperator )
                    // InternalSQLParser.g:5497:5: lv_in_4_0= ruleInOperator
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getExpressionFragmentAccess().getInInOperatorParserRuleCall_4_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_in_4_0=ruleInOperator();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getExpressionFragmentRule());
                      					}
                      					set(
                      						current,
                      						"in",
                      						lv_in_4_0,
                      						"org.xtext.example.mydsl_sql.SQL.InOperator");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 6 :
                    // InternalSQLParser.g:5515:3: ( (lv_exists_5_0= ruleExistsOperator ) )
                    {
                    // InternalSQLParser.g:5515:3: ( (lv_exists_5_0= ruleExistsOperator ) )
                    // InternalSQLParser.g:5516:4: (lv_exists_5_0= ruleExistsOperator )
                    {
                    // InternalSQLParser.g:5516:4: (lv_exists_5_0= ruleExistsOperator )
                    // InternalSQLParser.g:5517:5: lv_exists_5_0= ruleExistsOperator
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getExpressionFragmentAccess().getExistsExistsOperatorParserRuleCall_5_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_exists_5_0=ruleExistsOperator();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getExpressionFragmentRule());
                      					}
                      					set(
                      						current,
                      						"exists",
                      						lv_exists_5_0,
                      						"org.xtext.example.mydsl_sql.SQL.ExistsOperator");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleExpressionFragment"


    // $ANTLR start "entryRuleExpressionGroup"
    // InternalSQLParser.g:5538:1: entryRuleExpressionGroup returns [EObject current=null] : iv_ruleExpressionGroup= ruleExpressionGroup EOF ;
    public final EObject entryRuleExpressionGroup() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExpressionGroup = null;


        try {
            // InternalSQLParser.g:5538:56: (iv_ruleExpressionGroup= ruleExpressionGroup EOF )
            // InternalSQLParser.g:5539:2: iv_ruleExpressionGroup= ruleExpressionGroup EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExpressionGroupRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExpressionGroup=ruleExpressionGroup();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExpressionGroup; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleExpressionGroup"


    // $ANTLR start "ruleExpressionGroup"
    // InternalSQLParser.g:5545:1: ruleExpressionGroup returns [EObject current=null] : ( () ( ( (lv_isnot_1_1= NOT | lv_isnot_1_2= NOT_1 ) ) )? otherlv_2= LeftParenthesis ( (lv_expr_3_0= ruleFullExpression ) ) otherlv_4= RightParenthesis ) ;
    public final EObject ruleExpressionGroup() throws RecognitionException {
        EObject current = null;

        Token lv_isnot_1_1=null;
        Token lv_isnot_1_2=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject lv_expr_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:5551:2: ( ( () ( ( (lv_isnot_1_1= NOT | lv_isnot_1_2= NOT_1 ) ) )? otherlv_2= LeftParenthesis ( (lv_expr_3_0= ruleFullExpression ) ) otherlv_4= RightParenthesis ) )
            // InternalSQLParser.g:5552:2: ( () ( ( (lv_isnot_1_1= NOT | lv_isnot_1_2= NOT_1 ) ) )? otherlv_2= LeftParenthesis ( (lv_expr_3_0= ruleFullExpression ) ) otherlv_4= RightParenthesis )
            {
            // InternalSQLParser.g:5552:2: ( () ( ( (lv_isnot_1_1= NOT | lv_isnot_1_2= NOT_1 ) ) )? otherlv_2= LeftParenthesis ( (lv_expr_3_0= ruleFullExpression ) ) otherlv_4= RightParenthesis )
            // InternalSQLParser.g:5553:3: () ( ( (lv_isnot_1_1= NOT | lv_isnot_1_2= NOT_1 ) ) )? otherlv_2= LeftParenthesis ( (lv_expr_3_0= ruleFullExpression ) ) otherlv_4= RightParenthesis
            {
            // InternalSQLParser.g:5553:3: ()
            // InternalSQLParser.g:5554:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getExpressionGroupAccess().getExprGroupAction_0(),
              					current);
              			
            }

            }

            // InternalSQLParser.g:5563:3: ( ( (lv_isnot_1_1= NOT | lv_isnot_1_2= NOT_1 ) ) )?
            int alt103=2;
            int LA103_0 = input.LA(1);

            if ( (LA103_0==NOT_1||LA103_0==NOT) ) {
                alt103=1;
            }
            switch (alt103) {
                case 1 :
                    // InternalSQLParser.g:5564:4: ( (lv_isnot_1_1= NOT | lv_isnot_1_2= NOT_1 ) )
                    {
                    // InternalSQLParser.g:5564:4: ( (lv_isnot_1_1= NOT | lv_isnot_1_2= NOT_1 ) )
                    // InternalSQLParser.g:5565:5: (lv_isnot_1_1= NOT | lv_isnot_1_2= NOT_1 )
                    {
                    // InternalSQLParser.g:5565:5: (lv_isnot_1_1= NOT | lv_isnot_1_2= NOT_1 )
                    int alt102=2;
                    int LA102_0 = input.LA(1);

                    if ( (LA102_0==NOT) ) {
                        alt102=1;
                    }
                    else if ( (LA102_0==NOT_1) ) {
                        alt102=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 102, 0, input);

                        throw nvae;
                    }
                    switch (alt102) {
                        case 1 :
                            // InternalSQLParser.g:5566:6: lv_isnot_1_1= NOT
                            {
                            lv_isnot_1_1=(Token)match(input,NOT,FOLLOW_11); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(lv_isnot_1_1, grammarAccess.getExpressionGroupAccess().getIsnotNOTKeyword_1_0_0());
                              					
                            }
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getExpressionGroupRule());
                              						}
                              						setWithLastConsumed(current, "isnot", lv_isnot_1_1, null);
                              					
                            }

                            }
                            break;
                        case 2 :
                            // InternalSQLParser.g:5577:6: lv_isnot_1_2= NOT_1
                            {
                            lv_isnot_1_2=(Token)match(input,NOT_1,FOLLOW_11); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(lv_isnot_1_2, grammarAccess.getExpressionGroupAccess().getIsnotNOTKeyword_1_0_1());
                              					
                            }
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getExpressionGroupRule());
                              						}
                              						setWithLastConsumed(current, "isnot", lv_isnot_1_2, null);
                              					
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;

            }

            otherlv_2=(Token)match(input,LeftParenthesis,FOLLOW_42); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getExpressionGroupAccess().getLeftParenthesisKeyword_2());
              		
            }
            // InternalSQLParser.g:5594:3: ( (lv_expr_3_0= ruleFullExpression ) )
            // InternalSQLParser.g:5595:4: (lv_expr_3_0= ruleFullExpression )
            {
            // InternalSQLParser.g:5595:4: (lv_expr_3_0= ruleFullExpression )
            // InternalSQLParser.g:5596:5: lv_expr_3_0= ruleFullExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getExpressionGroupAccess().getExprFullExpressionParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_9);
            lv_expr_3_0=ruleFullExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getExpressionGroupRule());
              					}
              					set(
              						current,
              						"expr",
              						lv_expr_3_0,
              						"org.xtext.example.mydsl_sql.SQL.FullExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_4=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getExpressionGroupAccess().getRightParenthesisKeyword_4());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleExpressionGroup"


    // $ANTLR start "entryRuleXExpression"
    // InternalSQLParser.g:5621:1: entryRuleXExpression returns [EObject current=null] : iv_ruleXExpression= ruleXExpression EOF ;
    public final EObject entryRuleXExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleXExpression = null;


        try {
            // InternalSQLParser.g:5621:52: (iv_ruleXExpression= ruleXExpression EOF )
            // InternalSQLParser.g:5622:2: iv_ruleXExpression= ruleXExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getXExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleXExpression=ruleXExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleXExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleXExpression"


    // $ANTLR start "ruleXExpression"
    // InternalSQLParser.g:5628:1: ruleXExpression returns [EObject current=null] : (otherlv_0= X () ( (lv_xf_2_0= ruleXFunction ) ) otherlv_3= Comma ( (lv_col_4_0= ruleOperandGroup ) ) (otherlv_5= Comma ( (lv_prm_6_0= ruleXExpressionParams ) ) )? otherlv_7= RightCurlyBracket ) ;
    public final EObject ruleXExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Token otherlv_7=null;
        Enumerator lv_xf_2_0 = null;

        EObject lv_col_4_0 = null;

        EObject lv_prm_6_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:5634:2: ( (otherlv_0= X () ( (lv_xf_2_0= ruleXFunction ) ) otherlv_3= Comma ( (lv_col_4_0= ruleOperandGroup ) ) (otherlv_5= Comma ( (lv_prm_6_0= ruleXExpressionParams ) ) )? otherlv_7= RightCurlyBracket ) )
            // InternalSQLParser.g:5635:2: (otherlv_0= X () ( (lv_xf_2_0= ruleXFunction ) ) otherlv_3= Comma ( (lv_col_4_0= ruleOperandGroup ) ) (otherlv_5= Comma ( (lv_prm_6_0= ruleXExpressionParams ) ) )? otherlv_7= RightCurlyBracket )
            {
            // InternalSQLParser.g:5635:2: (otherlv_0= X () ( (lv_xf_2_0= ruleXFunction ) ) otherlv_3= Comma ( (lv_col_4_0= ruleOperandGroup ) ) (otherlv_5= Comma ( (lv_prm_6_0= ruleXExpressionParams ) ) )? otherlv_7= RightCurlyBracket )
            // InternalSQLParser.g:5636:3: otherlv_0= X () ( (lv_xf_2_0= ruleXFunction ) ) otherlv_3= Comma ( (lv_col_4_0= ruleOperandGroup ) ) (otherlv_5= Comma ( (lv_prm_6_0= ruleXExpressionParams ) ) )? otherlv_7= RightCurlyBracket
            {
            otherlv_0=(Token)match(input,X,FOLLOW_75); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getXExpressionAccess().getXKeyword_0());
              		
            }
            // InternalSQLParser.g:5640:3: ()
            // InternalSQLParser.g:5641:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getXExpressionAccess().getXExprAction_1(),
              					current);
              			
            }

            }

            // InternalSQLParser.g:5650:3: ( (lv_xf_2_0= ruleXFunction ) )
            // InternalSQLParser.g:5651:4: (lv_xf_2_0= ruleXFunction )
            {
            // InternalSQLParser.g:5651:4: (lv_xf_2_0= ruleXFunction )
            // InternalSQLParser.g:5652:5: lv_xf_2_0= ruleXFunction
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getXExpressionAccess().getXfXFunctionEnumRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_76);
            lv_xf_2_0=ruleXFunction();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getXExpressionRule());
              					}
              					set(
              						current,
              						"xf",
              						lv_xf_2_0,
              						"org.xtext.example.mydsl_sql.SQL.XFunction");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,Comma,FOLLOW_77); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getXExpressionAccess().getCommaKeyword_3());
              		
            }
            // InternalSQLParser.g:5673:3: ( (lv_col_4_0= ruleOperandGroup ) )
            // InternalSQLParser.g:5674:4: (lv_col_4_0= ruleOperandGroup )
            {
            // InternalSQLParser.g:5674:4: (lv_col_4_0= ruleOperandGroup )
            // InternalSQLParser.g:5675:5: lv_col_4_0= ruleOperandGroup
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getXExpressionAccess().getColOperandGroupParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_78);
            lv_col_4_0=ruleOperandGroup();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getXExpressionRule());
              					}
              					set(
              						current,
              						"col",
              						lv_col_4_0,
              						"org.xtext.example.mydsl_sql.SQL.OperandGroup");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:5692:3: (otherlv_5= Comma ( (lv_prm_6_0= ruleXExpressionParams ) ) )?
            int alt104=2;
            int LA104_0 = input.LA(1);

            if ( (LA104_0==Comma) ) {
                alt104=1;
            }
            switch (alt104) {
                case 1 :
                    // InternalSQLParser.g:5693:4: otherlv_5= Comma ( (lv_prm_6_0= ruleXExpressionParams ) )
                    {
                    otherlv_5=(Token)match(input,Comma,FOLLOW_8); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_5, grammarAccess.getXExpressionAccess().getCommaKeyword_5_0());
                      			
                    }
                    // InternalSQLParser.g:5697:4: ( (lv_prm_6_0= ruleXExpressionParams ) )
                    // InternalSQLParser.g:5698:5: (lv_prm_6_0= ruleXExpressionParams )
                    {
                    // InternalSQLParser.g:5698:5: (lv_prm_6_0= ruleXExpressionParams )
                    // InternalSQLParser.g:5699:6: lv_prm_6_0= ruleXExpressionParams
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getXExpressionAccess().getPrmXExpressionParamsParserRuleCall_5_1_0());
                      					
                    }
                    pushFollow(FOLLOW_79);
                    lv_prm_6_0=ruleXExpressionParams();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getXExpressionRule());
                      						}
                      						set(
                      							current,
                      							"prm",
                      							lv_prm_6_0,
                      							"org.xtext.example.mydsl_sql.SQL.XExpressionParams");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            otherlv_7=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_7, grammarAccess.getXExpressionAccess().getRightCurlyBracketKeyword_6());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleXExpression"


    // $ANTLR start "entryRuleXExpression_"
    // InternalSQLParser.g:5725:1: entryRuleXExpression_ returns [EObject current=null] : iv_ruleXExpression_= ruleXExpression_ EOF ;
    public final EObject entryRuleXExpression_() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleXExpression_ = null;


        try {
            // InternalSQLParser.g:5725:53: (iv_ruleXExpression_= ruleXExpression_ EOF )
            // InternalSQLParser.g:5726:2: iv_ruleXExpression_= ruleXExpression_ EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getXExpression_Rule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleXExpression_=ruleXExpression_();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleXExpression_; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleXExpression_"


    // $ANTLR start "ruleXExpression_"
    // InternalSQLParser.g:5732:1: ruleXExpression_ returns [EObject current=null] : (otherlv_0= X () ( (lv_xf_2_0= ruleXFunction ) ) otherlv_3= VerticalLine ( (lv_col_4_0= ruleOperandGroup ) ) (otherlv_5= VerticalLine ( (lv_prm_6_0= ruleXExpressionParams ) ) )? otherlv_7= RightCurlyBracket ) ;
    public final EObject ruleXExpression_() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Token otherlv_7=null;
        Enumerator lv_xf_2_0 = null;

        EObject lv_col_4_0 = null;

        EObject lv_prm_6_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:5738:2: ( (otherlv_0= X () ( (lv_xf_2_0= ruleXFunction ) ) otherlv_3= VerticalLine ( (lv_col_4_0= ruleOperandGroup ) ) (otherlv_5= VerticalLine ( (lv_prm_6_0= ruleXExpressionParams ) ) )? otherlv_7= RightCurlyBracket ) )
            // InternalSQLParser.g:5739:2: (otherlv_0= X () ( (lv_xf_2_0= ruleXFunction ) ) otherlv_3= VerticalLine ( (lv_col_4_0= ruleOperandGroup ) ) (otherlv_5= VerticalLine ( (lv_prm_6_0= ruleXExpressionParams ) ) )? otherlv_7= RightCurlyBracket )
            {
            // InternalSQLParser.g:5739:2: (otherlv_0= X () ( (lv_xf_2_0= ruleXFunction ) ) otherlv_3= VerticalLine ( (lv_col_4_0= ruleOperandGroup ) ) (otherlv_5= VerticalLine ( (lv_prm_6_0= ruleXExpressionParams ) ) )? otherlv_7= RightCurlyBracket )
            // InternalSQLParser.g:5740:3: otherlv_0= X () ( (lv_xf_2_0= ruleXFunction ) ) otherlv_3= VerticalLine ( (lv_col_4_0= ruleOperandGroup ) ) (otherlv_5= VerticalLine ( (lv_prm_6_0= ruleXExpressionParams ) ) )? otherlv_7= RightCurlyBracket
            {
            otherlv_0=(Token)match(input,X,FOLLOW_75); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getXExpression_Access().getXKeyword_0());
              		
            }
            // InternalSQLParser.g:5744:3: ()
            // InternalSQLParser.g:5745:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getXExpression_Access().getXExprAction_1(),
              					current);
              			
            }

            }

            // InternalSQLParser.g:5754:3: ( (lv_xf_2_0= ruleXFunction ) )
            // InternalSQLParser.g:5755:4: (lv_xf_2_0= ruleXFunction )
            {
            // InternalSQLParser.g:5755:4: (lv_xf_2_0= ruleXFunction )
            // InternalSQLParser.g:5756:5: lv_xf_2_0= ruleXFunction
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getXExpression_Access().getXfXFunctionEnumRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_80);
            lv_xf_2_0=ruleXFunction();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getXExpression_Rule());
              					}
              					set(
              						current,
              						"xf",
              						lv_xf_2_0,
              						"org.xtext.example.mydsl_sql.SQL.XFunction");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,VerticalLine,FOLLOW_77); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getXExpression_Access().getVerticalLineKeyword_3());
              		
            }
            // InternalSQLParser.g:5777:3: ( (lv_col_4_0= ruleOperandGroup ) )
            // InternalSQLParser.g:5778:4: (lv_col_4_0= ruleOperandGroup )
            {
            // InternalSQLParser.g:5778:4: (lv_col_4_0= ruleOperandGroup )
            // InternalSQLParser.g:5779:5: lv_col_4_0= ruleOperandGroup
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getXExpression_Access().getColOperandGroupParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_81);
            lv_col_4_0=ruleOperandGroup();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getXExpression_Rule());
              					}
              					set(
              						current,
              						"col",
              						lv_col_4_0,
              						"org.xtext.example.mydsl_sql.SQL.OperandGroup");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:5796:3: (otherlv_5= VerticalLine ( (lv_prm_6_0= ruleXExpressionParams ) ) )?
            int alt105=2;
            int LA105_0 = input.LA(1);

            if ( (LA105_0==VerticalLine) ) {
                alt105=1;
            }
            switch (alt105) {
                case 1 :
                    // InternalSQLParser.g:5797:4: otherlv_5= VerticalLine ( (lv_prm_6_0= ruleXExpressionParams ) )
                    {
                    otherlv_5=(Token)match(input,VerticalLine,FOLLOW_8); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_5, grammarAccess.getXExpression_Access().getVerticalLineKeyword_5_0());
                      			
                    }
                    // InternalSQLParser.g:5801:4: ( (lv_prm_6_0= ruleXExpressionParams ) )
                    // InternalSQLParser.g:5802:5: (lv_prm_6_0= ruleXExpressionParams )
                    {
                    // InternalSQLParser.g:5802:5: (lv_prm_6_0= ruleXExpressionParams )
                    // InternalSQLParser.g:5803:6: lv_prm_6_0= ruleXExpressionParams
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getXExpression_Access().getPrmXExpressionParamsParserRuleCall_5_1_0());
                      					
                    }
                    pushFollow(FOLLOW_79);
                    lv_prm_6_0=ruleXExpressionParams();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getXExpression_Rule());
                      						}
                      						set(
                      							current,
                      							"prm",
                      							lv_prm_6_0,
                      							"org.xtext.example.mydsl_sql.SQL.XExpressionParams");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            otherlv_7=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_7, grammarAccess.getXExpression_Access().getRightCurlyBracketKeyword_6());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleXExpression_"


    // $ANTLR start "entryRuleXExpressionParams"
    // InternalSQLParser.g:5829:1: entryRuleXExpressionParams returns [EObject current=null] : iv_ruleXExpressionParams= ruleXExpressionParams EOF ;
    public final EObject entryRuleXExpressionParams() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleXExpressionParams = null;


        try {
            // InternalSQLParser.g:5829:58: (iv_ruleXExpressionParams= ruleXExpressionParams EOF )
            // InternalSQLParser.g:5830:2: iv_ruleXExpressionParams= ruleXExpressionParams EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getXExpressionParamsRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleXExpressionParams=ruleXExpressionParams();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleXExpressionParams; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleXExpressionParams"


    // $ANTLR start "ruleXExpressionParams"
    // InternalSQLParser.g:5836:1: ruleXExpressionParams returns [EObject current=null] : (this_JRParameter_0= ruleJRParameter ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleJRParameter ) ) )+ )? ) ;
    public final EObject ruleXExpressionParams() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_JRParameter_0 = null;

        EObject lv_entries_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:5842:2: ( (this_JRParameter_0= ruleJRParameter ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleJRParameter ) ) )+ )? ) )
            // InternalSQLParser.g:5843:2: (this_JRParameter_0= ruleJRParameter ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleJRParameter ) ) )+ )? )
            {
            // InternalSQLParser.g:5843:2: (this_JRParameter_0= ruleJRParameter ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleJRParameter ) ) )+ )? )
            // InternalSQLParser.g:5844:3: this_JRParameter_0= ruleJRParameter ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleJRParameter ) ) )+ )?
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getXExpressionParamsAccess().getJRParameterParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_12);
            this_JRParameter_0=ruleJRParameter();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_JRParameter_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:5855:3: ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleJRParameter ) ) )+ )?
            int alt107=2;
            int LA107_0 = input.LA(1);

            if ( (LA107_0==Comma) ) {
                alt107=1;
            }
            switch (alt107) {
                case 1 :
                    // InternalSQLParser.g:5856:4: () (otherlv_2= Comma ( (lv_entries_3_0= ruleJRParameter ) ) )+
                    {
                    // InternalSQLParser.g:5856:4: ()
                    // InternalSQLParser.g:5857:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getXExpressionParamsAccess().getPrmsEntriesAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalSQLParser.g:5866:4: (otherlv_2= Comma ( (lv_entries_3_0= ruleJRParameter ) ) )+
                    int cnt106=0;
                    loop106:
                    do {
                        int alt106=2;
                        int LA106_0 = input.LA(1);

                        if ( (LA106_0==Comma) ) {
                            alt106=1;
                        }


                        switch (alt106) {
                    	case 1 :
                    	    // InternalSQLParser.g:5867:5: otherlv_2= Comma ( (lv_entries_3_0= ruleJRParameter ) )
                    	    {
                    	    otherlv_2=(Token)match(input,Comma,FOLLOW_8); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_2, grammarAccess.getXExpressionParamsAccess().getCommaKeyword_1_1_0());
                    	      				
                    	    }
                    	    // InternalSQLParser.g:5871:5: ( (lv_entries_3_0= ruleJRParameter ) )
                    	    // InternalSQLParser.g:5872:6: (lv_entries_3_0= ruleJRParameter )
                    	    {
                    	    // InternalSQLParser.g:5872:6: (lv_entries_3_0= ruleJRParameter )
                    	    // InternalSQLParser.g:5873:7: lv_entries_3_0= ruleJRParameter
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getXExpressionParamsAccess().getEntriesJRParameterParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_12);
                    	    lv_entries_3_0=ruleJRParameter();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getXExpressionParamsRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"entries",
                    	      								lv_entries_3_0,
                    	      								"org.xtext.example.mydsl_sql.SQL.JRParameter");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt106 >= 1 ) break loop106;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(106, input);
                                throw eee;
                        }
                        cnt106++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleXExpressionParams"


    // $ANTLR start "entryRuleJRParameter"
    // InternalSQLParser.g:5896:1: entryRuleJRParameter returns [EObject current=null] : iv_ruleJRParameter= ruleJRParameter EOF ;
    public final EObject entryRuleJRParameter() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleJRParameter = null;


        try {
            // InternalSQLParser.g:5896:52: (iv_ruleJRParameter= ruleJRParameter EOF )
            // InternalSQLParser.g:5897:2: iv_ruleJRParameter= ruleJRParameter EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getJRParameterRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleJRParameter=ruleJRParameter();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleJRParameter; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleJRParameter"


    // $ANTLR start "ruleJRParameter"
    // InternalSQLParser.g:5903:1: ruleJRParameter returns [EObject current=null] : ( (lv_jrprm_0_0= RULE_ID ) ) ;
    public final EObject ruleJRParameter() throws RecognitionException {
        EObject current = null;

        Token lv_jrprm_0_0=null;


        	enterRule();

        try {
            // InternalSQLParser.g:5909:2: ( ( (lv_jrprm_0_0= RULE_ID ) ) )
            // InternalSQLParser.g:5910:2: ( (lv_jrprm_0_0= RULE_ID ) )
            {
            // InternalSQLParser.g:5910:2: ( (lv_jrprm_0_0= RULE_ID ) )
            // InternalSQLParser.g:5911:3: (lv_jrprm_0_0= RULE_ID )
            {
            // InternalSQLParser.g:5911:3: (lv_jrprm_0_0= RULE_ID )
            // InternalSQLParser.g:5912:4: lv_jrprm_0_0= RULE_ID
            {
            lv_jrprm_0_0=(Token)match(input,RULE_ID,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(lv_jrprm_0_0, grammarAccess.getJRParameterAccess().getJrprmIDTerminalRuleCall_0());
              			
            }
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getJRParameterRule());
              				}
              				setWithLastConsumed(
              					current,
              					"jrprm",
              					lv_jrprm_0_0,
              					"org.xtext.example.mydsl_sql.SQL.ID");
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleJRParameter"


    // $ANTLR start "entryRuleExpression"
    // InternalSQLParser.g:5931:1: entryRuleExpression returns [EObject current=null] : iv_ruleExpression= ruleExpression EOF ;
    public final EObject entryRuleExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExpression = null;


        try {
            // InternalSQLParser.g:5931:51: (iv_ruleExpression= ruleExpression EOF )
            // InternalSQLParser.g:5932:2: iv_ruleExpression= ruleExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExpression=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleExpression"


    // $ANTLR start "ruleExpression"
    // InternalSQLParser.g:5938:1: ruleExpression returns [EObject current=null] : ( ( (lv_op1_0_0= ruleOperand ) ) ( ( (lv_isnull_1_0= ruleIsNullValue ) ) | ( (lv_in_2_0= ruleInOperator ) ) | ( (lv_exists_3_0= ruleExistsOperator ) ) | ( (lv_between_4_0= ruleBetween ) ) | ( (lv_like_5_0= ruleLike ) ) | ( (lv_comp_6_0= ruleComparison ) ) ) ) ;
    public final EObject ruleExpression() throws RecognitionException {
        EObject current = null;

        EObject lv_op1_0_0 = null;

        AntlrDatatypeRuleToken lv_isnull_1_0 = null;

        EObject lv_in_2_0 = null;

        EObject lv_exists_3_0 = null;

        EObject lv_between_4_0 = null;

        EObject lv_like_5_0 = null;

        EObject lv_comp_6_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:5944:2: ( ( ( (lv_op1_0_0= ruleOperand ) ) ( ( (lv_isnull_1_0= ruleIsNullValue ) ) | ( (lv_in_2_0= ruleInOperator ) ) | ( (lv_exists_3_0= ruleExistsOperator ) ) | ( (lv_between_4_0= ruleBetween ) ) | ( (lv_like_5_0= ruleLike ) ) | ( (lv_comp_6_0= ruleComparison ) ) ) ) )
            // InternalSQLParser.g:5945:2: ( ( (lv_op1_0_0= ruleOperand ) ) ( ( (lv_isnull_1_0= ruleIsNullValue ) ) | ( (lv_in_2_0= ruleInOperator ) ) | ( (lv_exists_3_0= ruleExistsOperator ) ) | ( (lv_between_4_0= ruleBetween ) ) | ( (lv_like_5_0= ruleLike ) ) | ( (lv_comp_6_0= ruleComparison ) ) ) )
            {
            // InternalSQLParser.g:5945:2: ( ( (lv_op1_0_0= ruleOperand ) ) ( ( (lv_isnull_1_0= ruleIsNullValue ) ) | ( (lv_in_2_0= ruleInOperator ) ) | ( (lv_exists_3_0= ruleExistsOperator ) ) | ( (lv_between_4_0= ruleBetween ) ) | ( (lv_like_5_0= ruleLike ) ) | ( (lv_comp_6_0= ruleComparison ) ) ) )
            // InternalSQLParser.g:5946:3: ( (lv_op1_0_0= ruleOperand ) ) ( ( (lv_isnull_1_0= ruleIsNullValue ) ) | ( (lv_in_2_0= ruleInOperator ) ) | ( (lv_exists_3_0= ruleExistsOperator ) ) | ( (lv_between_4_0= ruleBetween ) ) | ( (lv_like_5_0= ruleLike ) ) | ( (lv_comp_6_0= ruleComparison ) ) )
            {
            // InternalSQLParser.g:5946:3: ( (lv_op1_0_0= ruleOperand ) )
            // InternalSQLParser.g:5947:4: (lv_op1_0_0= ruleOperand )
            {
            // InternalSQLParser.g:5947:4: (lv_op1_0_0= ruleOperand )
            // InternalSQLParser.g:5948:5: lv_op1_0_0= ruleOperand
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getExpressionAccess().getOp1OperandParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_82);
            lv_op1_0_0=ruleOperand();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getExpressionRule());
              					}
              					set(
              						current,
              						"op1",
              						lv_op1_0_0,
              						"org.xtext.example.mydsl_sql.SQL.Operand");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:5965:3: ( ( (lv_isnull_1_0= ruleIsNullValue ) ) | ( (lv_in_2_0= ruleInOperator ) ) | ( (lv_exists_3_0= ruleExistsOperator ) ) | ( (lv_between_4_0= ruleBetween ) ) | ( (lv_like_5_0= ruleLike ) ) | ( (lv_comp_6_0= ruleComparison ) ) )
            int alt108=6;
            switch ( input.LA(1) ) {
            case IS:
                {
                alt108=1;
                }
                break;
            case NOT:
                {
                switch ( input.LA(2) ) {
                case BETWEEN:
                    {
                    alt108=4;
                    }
                    break;
                case EXISTS:
                    {
                    alt108=3;
                    }
                    break;
                case LIKE:
                    {
                    alt108=5;
                    }
                    break;
                case IN:
                    {
                    alt108=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 108, 2, input);

                    throw nvae;
                }

                }
                break;
            case IN:
                {
                alt108=2;
                }
                break;
            case EXISTS:
                {
                alt108=3;
                }
                break;
            case BETWEEN:
                {
                alt108=4;
                }
                break;
            case LIKE:
                {
                alt108=5;
                }
                break;
            case ExclamationMarkEqualsSign:
            case LessThanSignEqualsSign:
            case LessThanSignGreaterThanSign:
            case GreaterThanSignEqualsSign:
            case CircumflexAccentEqualsSign:
            case LessThanSign:
            case EqualsSign:
            case GreaterThanSign:
                {
                alt108=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 108, 0, input);

                throw nvae;
            }

            switch (alt108) {
                case 1 :
                    // InternalSQLParser.g:5966:4: ( (lv_isnull_1_0= ruleIsNullValue ) )
                    {
                    // InternalSQLParser.g:5966:4: ( (lv_isnull_1_0= ruleIsNullValue ) )
                    // InternalSQLParser.g:5967:5: (lv_isnull_1_0= ruleIsNullValue )
                    {
                    // InternalSQLParser.g:5967:5: (lv_isnull_1_0= ruleIsNullValue )
                    // InternalSQLParser.g:5968:6: lv_isnull_1_0= ruleIsNullValue
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getExpressionAccess().getIsnullIsNullValueParserRuleCall_1_0_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_isnull_1_0=ruleIsNullValue();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExpressionRule());
                      						}
                      						set(
                      							current,
                      							"isnull",
                      							lv_isnull_1_0,
                      							"org.xtext.example.mydsl_sql.SQL.IsNullValue");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:5986:4: ( (lv_in_2_0= ruleInOperator ) )
                    {
                    // InternalSQLParser.g:5986:4: ( (lv_in_2_0= ruleInOperator ) )
                    // InternalSQLParser.g:5987:5: (lv_in_2_0= ruleInOperator )
                    {
                    // InternalSQLParser.g:5987:5: (lv_in_2_0= ruleInOperator )
                    // InternalSQLParser.g:5988:6: lv_in_2_0= ruleInOperator
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getExpressionAccess().getInInOperatorParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_in_2_0=ruleInOperator();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExpressionRule());
                      						}
                      						set(
                      							current,
                      							"in",
                      							lv_in_2_0,
                      							"org.xtext.example.mydsl_sql.SQL.InOperator");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:6006:4: ( (lv_exists_3_0= ruleExistsOperator ) )
                    {
                    // InternalSQLParser.g:6006:4: ( (lv_exists_3_0= ruleExistsOperator ) )
                    // InternalSQLParser.g:6007:5: (lv_exists_3_0= ruleExistsOperator )
                    {
                    // InternalSQLParser.g:6007:5: (lv_exists_3_0= ruleExistsOperator )
                    // InternalSQLParser.g:6008:6: lv_exists_3_0= ruleExistsOperator
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getExpressionAccess().getExistsExistsOperatorParserRuleCall_1_2_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_exists_3_0=ruleExistsOperator();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExpressionRule());
                      						}
                      						set(
                      							current,
                      							"exists",
                      							lv_exists_3_0,
                      							"org.xtext.example.mydsl_sql.SQL.ExistsOperator");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 4 :
                    // InternalSQLParser.g:6026:4: ( (lv_between_4_0= ruleBetween ) )
                    {
                    // InternalSQLParser.g:6026:4: ( (lv_between_4_0= ruleBetween ) )
                    // InternalSQLParser.g:6027:5: (lv_between_4_0= ruleBetween )
                    {
                    // InternalSQLParser.g:6027:5: (lv_between_4_0= ruleBetween )
                    // InternalSQLParser.g:6028:6: lv_between_4_0= ruleBetween
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getExpressionAccess().getBetweenBetweenParserRuleCall_1_3_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_between_4_0=ruleBetween();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExpressionRule());
                      						}
                      						set(
                      							current,
                      							"between",
                      							lv_between_4_0,
                      							"org.xtext.example.mydsl_sql.SQL.Between");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 5 :
                    // InternalSQLParser.g:6046:4: ( (lv_like_5_0= ruleLike ) )
                    {
                    // InternalSQLParser.g:6046:4: ( (lv_like_5_0= ruleLike ) )
                    // InternalSQLParser.g:6047:5: (lv_like_5_0= ruleLike )
                    {
                    // InternalSQLParser.g:6047:5: (lv_like_5_0= ruleLike )
                    // InternalSQLParser.g:6048:6: lv_like_5_0= ruleLike
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getExpressionAccess().getLikeLikeParserRuleCall_1_4_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_like_5_0=ruleLike();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExpressionRule());
                      						}
                      						set(
                      							current,
                      							"like",
                      							lv_like_5_0,
                      							"org.xtext.example.mydsl_sql.SQL.Like");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 6 :
                    // InternalSQLParser.g:6066:4: ( (lv_comp_6_0= ruleComparison ) )
                    {
                    // InternalSQLParser.g:6066:4: ( (lv_comp_6_0= ruleComparison ) )
                    // InternalSQLParser.g:6067:5: (lv_comp_6_0= ruleComparison )
                    {
                    // InternalSQLParser.g:6067:5: (lv_comp_6_0= ruleComparison )
                    // InternalSQLParser.g:6068:6: lv_comp_6_0= ruleComparison
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getExpressionAccess().getCompComparisonParserRuleCall_1_5_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_comp_6_0=ruleComparison();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExpressionRule());
                      						}
                      						set(
                      							current,
                      							"comp",
                      							lv_comp_6_0,
                      							"org.xtext.example.mydsl_sql.SQL.Comparison");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleExpression"


    // $ANTLR start "entryRuleIsNullValue"
    // InternalSQLParser.g:6090:1: entryRuleIsNullValue returns [String current=null] : iv_ruleIsNullValue= ruleIsNullValue EOF ;
    public final String entryRuleIsNullValue() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleIsNullValue = null;


        try {
            // InternalSQLParser.g:6090:51: (iv_ruleIsNullValue= ruleIsNullValue EOF )
            // InternalSQLParser.g:6091:2: iv_ruleIsNullValue= ruleIsNullValue EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIsNullValueRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIsNullValue=ruleIsNullValue();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIsNullValue.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleIsNullValue"


    // $ANTLR start "ruleIsNullValue"
    // InternalSQLParser.g:6097:1: ruleIsNullValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= IS (kw= NOT )? kw= NULL ) ;
    public final AntlrDatatypeRuleToken ruleIsNullValue() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            // InternalSQLParser.g:6103:2: ( (kw= IS (kw= NOT )? kw= NULL ) )
            // InternalSQLParser.g:6104:2: (kw= IS (kw= NOT )? kw= NULL )
            {
            // InternalSQLParser.g:6104:2: (kw= IS (kw= NOT )? kw= NULL )
            // InternalSQLParser.g:6105:3: kw= IS (kw= NOT )? kw= NULL
            {
            kw=(Token)match(input,IS,FOLLOW_83); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(kw);
              			newLeafNode(kw, grammarAccess.getIsNullValueAccess().getISKeyword_0());
              		
            }
            // InternalSQLParser.g:6110:3: (kw= NOT )?
            int alt109=2;
            int LA109_0 = input.LA(1);

            if ( (LA109_0==NOT) ) {
                alt109=1;
            }
            switch (alt109) {
                case 1 :
                    // InternalSQLParser.g:6111:4: kw= NOT
                    {
                    kw=(Token)match(input,NOT,FOLLOW_25); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getIsNullValueAccess().getNOTKeyword_1());
                      			
                    }

                    }
                    break;

            }

            kw=(Token)match(input,NULL,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(kw);
              			newLeafNode(kw, grammarAccess.getIsNullValueAccess().getNULLKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleIsNullValue"


    // $ANTLR start "entryRuleComparison"
    // InternalSQLParser.g:6126:1: entryRuleComparison returns [EObject current=null] : iv_ruleComparison= ruleComparison EOF ;
    public final EObject entryRuleComparison() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleComparison = null;


        try {
            // InternalSQLParser.g:6126:51: (iv_ruleComparison= ruleComparison EOF )
            // InternalSQLParser.g:6127:2: iv_ruleComparison= ruleComparison EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getComparisonRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleComparison=ruleComparison();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleComparison; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleComparison"


    // $ANTLR start "ruleComparison"
    // InternalSQLParser.g:6133:1: ruleComparison returns [EObject current=null] : ( ( ( (lv_operator_0_1= GreaterThanSign | lv_operator_0_2= GreaterThanSignEqualsSign | lv_operator_0_3= LessThanSign | lv_operator_0_4= LessThanSignEqualsSign | lv_operator_0_5= EqualsSign | lv_operator_0_6= LessThanSignGreaterThanSign | lv_operator_0_7= ExclamationMarkEqualsSign | lv_operator_0_8= CircumflexAccentEqualsSign ) ) ) ( ( (lv_subOperator_1_1= ANY | lv_subOperator_1_2= ALL | lv_subOperator_1_3= SOME ) ) )? ( (lv_op2_2_0= ruleOperand ) ) ) ;
    public final EObject ruleComparison() throws RecognitionException {
        EObject current = null;

        Token lv_operator_0_1=null;
        Token lv_operator_0_2=null;
        Token lv_operator_0_3=null;
        Token lv_operator_0_4=null;
        Token lv_operator_0_5=null;
        Token lv_operator_0_6=null;
        Token lv_operator_0_7=null;
        Token lv_operator_0_8=null;
        Token lv_subOperator_1_1=null;
        Token lv_subOperator_1_2=null;
        Token lv_subOperator_1_3=null;
        EObject lv_op2_2_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:6139:2: ( ( ( ( (lv_operator_0_1= GreaterThanSign | lv_operator_0_2= GreaterThanSignEqualsSign | lv_operator_0_3= LessThanSign | lv_operator_0_4= LessThanSignEqualsSign | lv_operator_0_5= EqualsSign | lv_operator_0_6= LessThanSignGreaterThanSign | lv_operator_0_7= ExclamationMarkEqualsSign | lv_operator_0_8= CircumflexAccentEqualsSign ) ) ) ( ( (lv_subOperator_1_1= ANY | lv_subOperator_1_2= ALL | lv_subOperator_1_3= SOME ) ) )? ( (lv_op2_2_0= ruleOperand ) ) ) )
            // InternalSQLParser.g:6140:2: ( ( ( (lv_operator_0_1= GreaterThanSign | lv_operator_0_2= GreaterThanSignEqualsSign | lv_operator_0_3= LessThanSign | lv_operator_0_4= LessThanSignEqualsSign | lv_operator_0_5= EqualsSign | lv_operator_0_6= LessThanSignGreaterThanSign | lv_operator_0_7= ExclamationMarkEqualsSign | lv_operator_0_8= CircumflexAccentEqualsSign ) ) ) ( ( (lv_subOperator_1_1= ANY | lv_subOperator_1_2= ALL | lv_subOperator_1_3= SOME ) ) )? ( (lv_op2_2_0= ruleOperand ) ) )
            {
            // InternalSQLParser.g:6140:2: ( ( ( (lv_operator_0_1= GreaterThanSign | lv_operator_0_2= GreaterThanSignEqualsSign | lv_operator_0_3= LessThanSign | lv_operator_0_4= LessThanSignEqualsSign | lv_operator_0_5= EqualsSign | lv_operator_0_6= LessThanSignGreaterThanSign | lv_operator_0_7= ExclamationMarkEqualsSign | lv_operator_0_8= CircumflexAccentEqualsSign ) ) ) ( ( (lv_subOperator_1_1= ANY | lv_subOperator_1_2= ALL | lv_subOperator_1_3= SOME ) ) )? ( (lv_op2_2_0= ruleOperand ) ) )
            // InternalSQLParser.g:6141:3: ( ( (lv_operator_0_1= GreaterThanSign | lv_operator_0_2= GreaterThanSignEqualsSign | lv_operator_0_3= LessThanSign | lv_operator_0_4= LessThanSignEqualsSign | lv_operator_0_5= EqualsSign | lv_operator_0_6= LessThanSignGreaterThanSign | lv_operator_0_7= ExclamationMarkEqualsSign | lv_operator_0_8= CircumflexAccentEqualsSign ) ) ) ( ( (lv_subOperator_1_1= ANY | lv_subOperator_1_2= ALL | lv_subOperator_1_3= SOME ) ) )? ( (lv_op2_2_0= ruleOperand ) )
            {
            // InternalSQLParser.g:6141:3: ( ( (lv_operator_0_1= GreaterThanSign | lv_operator_0_2= GreaterThanSignEqualsSign | lv_operator_0_3= LessThanSign | lv_operator_0_4= LessThanSignEqualsSign | lv_operator_0_5= EqualsSign | lv_operator_0_6= LessThanSignGreaterThanSign | lv_operator_0_7= ExclamationMarkEqualsSign | lv_operator_0_8= CircumflexAccentEqualsSign ) ) )
            // InternalSQLParser.g:6142:4: ( (lv_operator_0_1= GreaterThanSign | lv_operator_0_2= GreaterThanSignEqualsSign | lv_operator_0_3= LessThanSign | lv_operator_0_4= LessThanSignEqualsSign | lv_operator_0_5= EqualsSign | lv_operator_0_6= LessThanSignGreaterThanSign | lv_operator_0_7= ExclamationMarkEqualsSign | lv_operator_0_8= CircumflexAccentEqualsSign ) )
            {
            // InternalSQLParser.g:6142:4: ( (lv_operator_0_1= GreaterThanSign | lv_operator_0_2= GreaterThanSignEqualsSign | lv_operator_0_3= LessThanSign | lv_operator_0_4= LessThanSignEqualsSign | lv_operator_0_5= EqualsSign | lv_operator_0_6= LessThanSignGreaterThanSign | lv_operator_0_7= ExclamationMarkEqualsSign | lv_operator_0_8= CircumflexAccentEqualsSign ) )
            // InternalSQLParser.g:6143:5: (lv_operator_0_1= GreaterThanSign | lv_operator_0_2= GreaterThanSignEqualsSign | lv_operator_0_3= LessThanSign | lv_operator_0_4= LessThanSignEqualsSign | lv_operator_0_5= EqualsSign | lv_operator_0_6= LessThanSignGreaterThanSign | lv_operator_0_7= ExclamationMarkEqualsSign | lv_operator_0_8= CircumflexAccentEqualsSign )
            {
            // InternalSQLParser.g:6143:5: (lv_operator_0_1= GreaterThanSign | lv_operator_0_2= GreaterThanSignEqualsSign | lv_operator_0_3= LessThanSign | lv_operator_0_4= LessThanSignEqualsSign | lv_operator_0_5= EqualsSign | lv_operator_0_6= LessThanSignGreaterThanSign | lv_operator_0_7= ExclamationMarkEqualsSign | lv_operator_0_8= CircumflexAccentEqualsSign )
            int alt110=8;
            switch ( input.LA(1) ) {
            case GreaterThanSign:
                {
                alt110=1;
                }
                break;
            case GreaterThanSignEqualsSign:
                {
                alt110=2;
                }
                break;
            case LessThanSign:
                {
                alt110=3;
                }
                break;
            case LessThanSignEqualsSign:
                {
                alt110=4;
                }
                break;
            case EqualsSign:
                {
                alt110=5;
                }
                break;
            case LessThanSignGreaterThanSign:
                {
                alt110=6;
                }
                break;
            case ExclamationMarkEqualsSign:
                {
                alt110=7;
                }
                break;
            case CircumflexAccentEqualsSign:
                {
                alt110=8;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 110, 0, input);

                throw nvae;
            }

            switch (alt110) {
                case 1 :
                    // InternalSQLParser.g:6144:6: lv_operator_0_1= GreaterThanSign
                    {
                    lv_operator_0_1=(Token)match(input,GreaterThanSign,FOLLOW_84); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_operator_0_1, grammarAccess.getComparisonAccess().getOperatorGreaterThanSignKeyword_0_0_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getComparisonRule());
                      						}
                      						setWithLastConsumed(current, "operator", lv_operator_0_1, null);
                      					
                    }

                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:6155:6: lv_operator_0_2= GreaterThanSignEqualsSign
                    {
                    lv_operator_0_2=(Token)match(input,GreaterThanSignEqualsSign,FOLLOW_84); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_operator_0_2, grammarAccess.getComparisonAccess().getOperatorGreaterThanSignEqualsSignKeyword_0_0_1());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getComparisonRule());
                      						}
                      						setWithLastConsumed(current, "operator", lv_operator_0_2, null);
                      					
                    }

                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:6166:6: lv_operator_0_3= LessThanSign
                    {
                    lv_operator_0_3=(Token)match(input,LessThanSign,FOLLOW_84); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_operator_0_3, grammarAccess.getComparisonAccess().getOperatorLessThanSignKeyword_0_0_2());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getComparisonRule());
                      						}
                      						setWithLastConsumed(current, "operator", lv_operator_0_3, null);
                      					
                    }

                    }
                    break;
                case 4 :
                    // InternalSQLParser.g:6177:6: lv_operator_0_4= LessThanSignEqualsSign
                    {
                    lv_operator_0_4=(Token)match(input,LessThanSignEqualsSign,FOLLOW_84); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_operator_0_4, grammarAccess.getComparisonAccess().getOperatorLessThanSignEqualsSignKeyword_0_0_3());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getComparisonRule());
                      						}
                      						setWithLastConsumed(current, "operator", lv_operator_0_4, null);
                      					
                    }

                    }
                    break;
                case 5 :
                    // InternalSQLParser.g:6188:6: lv_operator_0_5= EqualsSign
                    {
                    lv_operator_0_5=(Token)match(input,EqualsSign,FOLLOW_84); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_operator_0_5, grammarAccess.getComparisonAccess().getOperatorEqualsSignKeyword_0_0_4());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getComparisonRule());
                      						}
                      						setWithLastConsumed(current, "operator", lv_operator_0_5, null);
                      					
                    }

                    }
                    break;
                case 6 :
                    // InternalSQLParser.g:6199:6: lv_operator_0_6= LessThanSignGreaterThanSign
                    {
                    lv_operator_0_6=(Token)match(input,LessThanSignGreaterThanSign,FOLLOW_84); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_operator_0_6, grammarAccess.getComparisonAccess().getOperatorLessThanSignGreaterThanSignKeyword_0_0_5());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getComparisonRule());
                      						}
                      						setWithLastConsumed(current, "operator", lv_operator_0_6, null);
                      					
                    }

                    }
                    break;
                case 7 :
                    // InternalSQLParser.g:6210:6: lv_operator_0_7= ExclamationMarkEqualsSign
                    {
                    lv_operator_0_7=(Token)match(input,ExclamationMarkEqualsSign,FOLLOW_84); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_operator_0_7, grammarAccess.getComparisonAccess().getOperatorExclamationMarkEqualsSignKeyword_0_0_6());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getComparisonRule());
                      						}
                      						setWithLastConsumed(current, "operator", lv_operator_0_7, null);
                      					
                    }

                    }
                    break;
                case 8 :
                    // InternalSQLParser.g:6221:6: lv_operator_0_8= CircumflexAccentEqualsSign
                    {
                    lv_operator_0_8=(Token)match(input,CircumflexAccentEqualsSign,FOLLOW_84); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_operator_0_8, grammarAccess.getComparisonAccess().getOperatorCircumflexAccentEqualsSignKeyword_0_0_7());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getComparisonRule());
                      						}
                      						setWithLastConsumed(current, "operator", lv_operator_0_8, null);
                      					
                    }

                    }
                    break;

            }


            }


            }

            // InternalSQLParser.g:6234:3: ( ( (lv_subOperator_1_1= ANY | lv_subOperator_1_2= ALL | lv_subOperator_1_3= SOME ) ) )?
            int alt112=2;
            int LA112_0 = input.LA(1);

            if ( (LA112_0==SOME||LA112_0==ALL||LA112_0==ANY) ) {
                alt112=1;
            }
            switch (alt112) {
                case 1 :
                    // InternalSQLParser.g:6235:4: ( (lv_subOperator_1_1= ANY | lv_subOperator_1_2= ALL | lv_subOperator_1_3= SOME ) )
                    {
                    // InternalSQLParser.g:6235:4: ( (lv_subOperator_1_1= ANY | lv_subOperator_1_2= ALL | lv_subOperator_1_3= SOME ) )
                    // InternalSQLParser.g:6236:5: (lv_subOperator_1_1= ANY | lv_subOperator_1_2= ALL | lv_subOperator_1_3= SOME )
                    {
                    // InternalSQLParser.g:6236:5: (lv_subOperator_1_1= ANY | lv_subOperator_1_2= ALL | lv_subOperator_1_3= SOME )
                    int alt111=3;
                    switch ( input.LA(1) ) {
                    case ANY:
                        {
                        alt111=1;
                        }
                        break;
                    case ALL:
                        {
                        alt111=2;
                        }
                        break;
                    case SOME:
                        {
                        alt111=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 111, 0, input);

                        throw nvae;
                    }

                    switch (alt111) {
                        case 1 :
                            // InternalSQLParser.g:6237:6: lv_subOperator_1_1= ANY
                            {
                            lv_subOperator_1_1=(Token)match(input,ANY,FOLLOW_77); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(lv_subOperator_1_1, grammarAccess.getComparisonAccess().getSubOperatorANYKeyword_1_0_0());
                              					
                            }
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getComparisonRule());
                              						}
                              						setWithLastConsumed(current, "subOperator", lv_subOperator_1_1, null);
                              					
                            }

                            }
                            break;
                        case 2 :
                            // InternalSQLParser.g:6248:6: lv_subOperator_1_2= ALL
                            {
                            lv_subOperator_1_2=(Token)match(input,ALL,FOLLOW_77); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(lv_subOperator_1_2, grammarAccess.getComparisonAccess().getSubOperatorALLKeyword_1_0_1());
                              					
                            }
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getComparisonRule());
                              						}
                              						setWithLastConsumed(current, "subOperator", lv_subOperator_1_2, null);
                              					
                            }

                            }
                            break;
                        case 3 :
                            // InternalSQLParser.g:6259:6: lv_subOperator_1_3= SOME
                            {
                            lv_subOperator_1_3=(Token)match(input,SOME,FOLLOW_77); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(lv_subOperator_1_3, grammarAccess.getComparisonAccess().getSubOperatorSOMEKeyword_1_0_2());
                              					
                            }
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getComparisonRule());
                              						}
                              						setWithLastConsumed(current, "subOperator", lv_subOperator_1_3, null);
                              					
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;

            }

            // InternalSQLParser.g:6272:3: ( (lv_op2_2_0= ruleOperand ) )
            // InternalSQLParser.g:6273:4: (lv_op2_2_0= ruleOperand )
            {
            // InternalSQLParser.g:6273:4: (lv_op2_2_0= ruleOperand )
            // InternalSQLParser.g:6274:5: lv_op2_2_0= ruleOperand
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getComparisonAccess().getOp2OperandParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_op2_2_0=ruleOperand();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getComparisonRule());
              					}
              					set(
              						current,
              						"op2",
              						lv_op2_2_0,
              						"org.xtext.example.mydsl_sql.SQL.Operand");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleComparison"


    // $ANTLR start "entryRuleLike"
    // InternalSQLParser.g:6295:1: entryRuleLike returns [EObject current=null] : iv_ruleLike= ruleLike EOF ;
    public final EObject entryRuleLike() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleLike = null;


        try {
            // InternalSQLParser.g:6295:45: (iv_ruleLike= ruleLike EOF )
            // InternalSQLParser.g:6296:2: iv_ruleLike= ruleLike EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLikeRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLike=ruleLike();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLike; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleLike"


    // $ANTLR start "ruleLike"
    // InternalSQLParser.g:6302:1: ruleLike returns [EObject current=null] : ( ( (lv_opLike_0_0= ruleLikeValue ) ) ( (lv_op2_1_0= ruleLikeOperand ) ) ) ;
    public final EObject ruleLike() throws RecognitionException {
        EObject current = null;

        AntlrDatatypeRuleToken lv_opLike_0_0 = null;

        EObject lv_op2_1_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:6308:2: ( ( ( (lv_opLike_0_0= ruleLikeValue ) ) ( (lv_op2_1_0= ruleLikeOperand ) ) ) )
            // InternalSQLParser.g:6309:2: ( ( (lv_opLike_0_0= ruleLikeValue ) ) ( (lv_op2_1_0= ruleLikeOperand ) ) )
            {
            // InternalSQLParser.g:6309:2: ( ( (lv_opLike_0_0= ruleLikeValue ) ) ( (lv_op2_1_0= ruleLikeOperand ) ) )
            // InternalSQLParser.g:6310:3: ( (lv_opLike_0_0= ruleLikeValue ) ) ( (lv_op2_1_0= ruleLikeOperand ) )
            {
            // InternalSQLParser.g:6310:3: ( (lv_opLike_0_0= ruleLikeValue ) )
            // InternalSQLParser.g:6311:4: (lv_opLike_0_0= ruleLikeValue )
            {
            // InternalSQLParser.g:6311:4: (lv_opLike_0_0= ruleLikeValue )
            // InternalSQLParser.g:6312:5: lv_opLike_0_0= ruleLikeValue
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getLikeAccess().getOpLikeLikeValueParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_85);
            lv_opLike_0_0=ruleLikeValue();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getLikeRule());
              					}
              					set(
              						current,
              						"opLike",
              						lv_opLike_0_0,
              						"org.xtext.example.mydsl_sql.SQL.LikeValue");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:6329:3: ( (lv_op2_1_0= ruleLikeOperand ) )
            // InternalSQLParser.g:6330:4: (lv_op2_1_0= ruleLikeOperand )
            {
            // InternalSQLParser.g:6330:4: (lv_op2_1_0= ruleLikeOperand )
            // InternalSQLParser.g:6331:5: lv_op2_1_0= ruleLikeOperand
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getLikeAccess().getOp2LikeOperandParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_op2_1_0=ruleLikeOperand();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getLikeRule());
              					}
              					set(
              						current,
              						"op2",
              						lv_op2_1_0,
              						"org.xtext.example.mydsl_sql.SQL.LikeOperand");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleLike"


    // $ANTLR start "entryRuleLikeValue"
    // InternalSQLParser.g:6352:1: entryRuleLikeValue returns [String current=null] : iv_ruleLikeValue= ruleLikeValue EOF ;
    public final String entryRuleLikeValue() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleLikeValue = null;


        try {
            // InternalSQLParser.g:6352:49: (iv_ruleLikeValue= ruleLikeValue EOF )
            // InternalSQLParser.g:6353:2: iv_ruleLikeValue= ruleLikeValue EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLikeValueRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLikeValue=ruleLikeValue();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLikeValue.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleLikeValue"


    // $ANTLR start "ruleLikeValue"
    // InternalSQLParser.g:6359:1: ruleLikeValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : ( (kw= NOT )? kw= LIKE ) ;
    public final AntlrDatatypeRuleToken ruleLikeValue() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            // InternalSQLParser.g:6365:2: ( ( (kw= NOT )? kw= LIKE ) )
            // InternalSQLParser.g:6366:2: ( (kw= NOT )? kw= LIKE )
            {
            // InternalSQLParser.g:6366:2: ( (kw= NOT )? kw= LIKE )
            // InternalSQLParser.g:6367:3: (kw= NOT )? kw= LIKE
            {
            // InternalSQLParser.g:6367:3: (kw= NOT )?
            int alt113=2;
            int LA113_0 = input.LA(1);

            if ( (LA113_0==NOT) ) {
                alt113=1;
            }
            switch (alt113) {
                case 1 :
                    // InternalSQLParser.g:6368:4: kw= NOT
                    {
                    kw=(Token)match(input,NOT,FOLLOW_86); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getLikeValueAccess().getNOTKeyword_0());
                      			
                    }

                    }
                    break;

            }

            kw=(Token)match(input,LIKE,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(kw);
              			newLeafNode(kw, grammarAccess.getLikeValueAccess().getLIKEKeyword_1());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleLikeValue"


    // $ANTLR start "entryRuleLikeOperand"
    // InternalSQLParser.g:6383:1: entryRuleLikeOperand returns [EObject current=null] : iv_ruleLikeOperand= ruleLikeOperand EOF ;
    public final EObject entryRuleLikeOperand() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleLikeOperand = null;


        try {
            // InternalSQLParser.g:6383:52: (iv_ruleLikeOperand= ruleLikeOperand EOF )
            // InternalSQLParser.g:6384:2: iv_ruleLikeOperand= ruleLikeOperand EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLikeOperandRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLikeOperand=ruleLikeOperand();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLikeOperand; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleLikeOperand"


    // $ANTLR start "ruleLikeOperand"
    // InternalSQLParser.g:6390:1: ruleLikeOperand returns [EObject current=null] : ( ( (lv_op2_0_0= ruleStringOperand ) ) | ( (lv_fop2_1_0= ruleOperandFunction ) ) | ( (lv_fcast_2_0= ruleOpFunctionCast ) ) | ( (lv_fparam_3_0= ruleParameterOperand ) ) ) ;
    public final EObject ruleLikeOperand() throws RecognitionException {
        EObject current = null;

        AntlrDatatypeRuleToken lv_op2_0_0 = null;

        EObject lv_fop2_1_0 = null;

        EObject lv_fcast_2_0 = null;

        EObject lv_fparam_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:6396:2: ( ( ( (lv_op2_0_0= ruleStringOperand ) ) | ( (lv_fop2_1_0= ruleOperandFunction ) ) | ( (lv_fcast_2_0= ruleOpFunctionCast ) ) | ( (lv_fparam_3_0= ruleParameterOperand ) ) ) )
            // InternalSQLParser.g:6397:2: ( ( (lv_op2_0_0= ruleStringOperand ) ) | ( (lv_fop2_1_0= ruleOperandFunction ) ) | ( (lv_fcast_2_0= ruleOpFunctionCast ) ) | ( (lv_fparam_3_0= ruleParameterOperand ) ) )
            {
            // InternalSQLParser.g:6397:2: ( ( (lv_op2_0_0= ruleStringOperand ) ) | ( (lv_fop2_1_0= ruleOperandFunction ) ) | ( (lv_fcast_2_0= ruleOpFunctionCast ) ) | ( (lv_fparam_3_0= ruleParameterOperand ) ) )
            int alt114=4;
            switch ( input.LA(1) ) {
            case RULE_STRING_:
                {
                alt114=1;
                }
                break;
            case RULE_ID:
                {
                alt114=2;
                }
                break;
            case CAST:
                {
                alt114=3;
                }
                break;
            case RULE_JRPARAM:
                {
                alt114=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 114, 0, input);

                throw nvae;
            }

            switch (alt114) {
                case 1 :
                    // InternalSQLParser.g:6398:3: ( (lv_op2_0_0= ruleStringOperand ) )
                    {
                    // InternalSQLParser.g:6398:3: ( (lv_op2_0_0= ruleStringOperand ) )
                    // InternalSQLParser.g:6399:4: (lv_op2_0_0= ruleStringOperand )
                    {
                    // InternalSQLParser.g:6399:4: (lv_op2_0_0= ruleStringOperand )
                    // InternalSQLParser.g:6400:5: lv_op2_0_0= ruleStringOperand
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getLikeOperandAccess().getOp2StringOperandParserRuleCall_0_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_op2_0_0=ruleStringOperand();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getLikeOperandRule());
                      					}
                      					set(
                      						current,
                      						"op2",
                      						lv_op2_0_0,
                      						"org.xtext.example.mydsl_sql.SQL.StringOperand");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:6418:3: ( (lv_fop2_1_0= ruleOperandFunction ) )
                    {
                    // InternalSQLParser.g:6418:3: ( (lv_fop2_1_0= ruleOperandFunction ) )
                    // InternalSQLParser.g:6419:4: (lv_fop2_1_0= ruleOperandFunction )
                    {
                    // InternalSQLParser.g:6419:4: (lv_fop2_1_0= ruleOperandFunction )
                    // InternalSQLParser.g:6420:5: lv_fop2_1_0= ruleOperandFunction
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getLikeOperandAccess().getFop2OperandFunctionParserRuleCall_1_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_fop2_1_0=ruleOperandFunction();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getLikeOperandRule());
                      					}
                      					set(
                      						current,
                      						"fop2",
                      						lv_fop2_1_0,
                      						"org.xtext.example.mydsl_sql.SQL.OperandFunction");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:6438:3: ( (lv_fcast_2_0= ruleOpFunctionCast ) )
                    {
                    // InternalSQLParser.g:6438:3: ( (lv_fcast_2_0= ruleOpFunctionCast ) )
                    // InternalSQLParser.g:6439:4: (lv_fcast_2_0= ruleOpFunctionCast )
                    {
                    // InternalSQLParser.g:6439:4: (lv_fcast_2_0= ruleOpFunctionCast )
                    // InternalSQLParser.g:6440:5: lv_fcast_2_0= ruleOpFunctionCast
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getLikeOperandAccess().getFcastOpFunctionCastParserRuleCall_2_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_fcast_2_0=ruleOpFunctionCast();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getLikeOperandRule());
                      					}
                      					set(
                      						current,
                      						"fcast",
                      						lv_fcast_2_0,
                      						"org.xtext.example.mydsl_sql.SQL.OpFunctionCast");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 4 :
                    // InternalSQLParser.g:6458:3: ( (lv_fparam_3_0= ruleParameterOperand ) )
                    {
                    // InternalSQLParser.g:6458:3: ( (lv_fparam_3_0= ruleParameterOperand ) )
                    // InternalSQLParser.g:6459:4: (lv_fparam_3_0= ruleParameterOperand )
                    {
                    // InternalSQLParser.g:6459:4: (lv_fparam_3_0= ruleParameterOperand )
                    // InternalSQLParser.g:6460:5: lv_fparam_3_0= ruleParameterOperand
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getLikeOperandAccess().getFparamParameterOperandParserRuleCall_3_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_fparam_3_0=ruleParameterOperand();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getLikeOperandRule());
                      					}
                      					set(
                      						current,
                      						"fparam",
                      						lv_fparam_3_0,
                      						"org.xtext.example.mydsl_sql.SQL.ParameterOperand");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleLikeOperand"


    // $ANTLR start "entryRuleBetween"
    // InternalSQLParser.g:6481:1: entryRuleBetween returns [EObject current=null] : iv_ruleBetween= ruleBetween EOF ;
    public final EObject entryRuleBetween() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleBetween = null;


        try {
            // InternalSQLParser.g:6481:48: (iv_ruleBetween= ruleBetween EOF )
            // InternalSQLParser.g:6482:2: iv_ruleBetween= ruleBetween EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBetweenRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBetween=ruleBetween();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBetween; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleBetween"


    // $ANTLR start "ruleBetween"
    // InternalSQLParser.g:6488:1: ruleBetween returns [EObject current=null] : ( ( (lv_opBetween_0_0= ruleBetweenValue ) ) ( (lv_op2_1_0= ruleOperandGroup ) ) otherlv_2= AND ( (lv_op3_3_0= ruleOperandGroup ) ) ) ;
    public final EObject ruleBetween() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        AntlrDatatypeRuleToken lv_opBetween_0_0 = null;

        EObject lv_op2_1_0 = null;

        EObject lv_op3_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:6494:2: ( ( ( (lv_opBetween_0_0= ruleBetweenValue ) ) ( (lv_op2_1_0= ruleOperandGroup ) ) otherlv_2= AND ( (lv_op3_3_0= ruleOperandGroup ) ) ) )
            // InternalSQLParser.g:6495:2: ( ( (lv_opBetween_0_0= ruleBetweenValue ) ) ( (lv_op2_1_0= ruleOperandGroup ) ) otherlv_2= AND ( (lv_op3_3_0= ruleOperandGroup ) ) )
            {
            // InternalSQLParser.g:6495:2: ( ( (lv_opBetween_0_0= ruleBetweenValue ) ) ( (lv_op2_1_0= ruleOperandGroup ) ) otherlv_2= AND ( (lv_op3_3_0= ruleOperandGroup ) ) )
            // InternalSQLParser.g:6496:3: ( (lv_opBetween_0_0= ruleBetweenValue ) ) ( (lv_op2_1_0= ruleOperandGroup ) ) otherlv_2= AND ( (lv_op3_3_0= ruleOperandGroup ) )
            {
            // InternalSQLParser.g:6496:3: ( (lv_opBetween_0_0= ruleBetweenValue ) )
            // InternalSQLParser.g:6497:4: (lv_opBetween_0_0= ruleBetweenValue )
            {
            // InternalSQLParser.g:6497:4: (lv_opBetween_0_0= ruleBetweenValue )
            // InternalSQLParser.g:6498:5: lv_opBetween_0_0= ruleBetweenValue
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getBetweenAccess().getOpBetweenBetweenValueParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_77);
            lv_opBetween_0_0=ruleBetweenValue();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getBetweenRule());
              					}
              					set(
              						current,
              						"opBetween",
              						lv_opBetween_0_0,
              						"org.xtext.example.mydsl_sql.SQL.BetweenValue");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:6515:3: ( (lv_op2_1_0= ruleOperandGroup ) )
            // InternalSQLParser.g:6516:4: (lv_op2_1_0= ruleOperandGroup )
            {
            // InternalSQLParser.g:6516:4: (lv_op2_1_0= ruleOperandGroup )
            // InternalSQLParser.g:6517:5: lv_op2_1_0= ruleOperandGroup
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getBetweenAccess().getOp2OperandGroupParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_87);
            lv_op2_1_0=ruleOperandGroup();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getBetweenRule());
              					}
              					set(
              						current,
              						"op2",
              						lv_op2_1_0,
              						"org.xtext.example.mydsl_sql.SQL.OperandGroup");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_2=(Token)match(input,AND,FOLLOW_77); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getBetweenAccess().getANDKeyword_2());
              		
            }
            // InternalSQLParser.g:6538:3: ( (lv_op3_3_0= ruleOperandGroup ) )
            // InternalSQLParser.g:6539:4: (lv_op3_3_0= ruleOperandGroup )
            {
            // InternalSQLParser.g:6539:4: (lv_op3_3_0= ruleOperandGroup )
            // InternalSQLParser.g:6540:5: lv_op3_3_0= ruleOperandGroup
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getBetweenAccess().getOp3OperandGroupParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_op3_3_0=ruleOperandGroup();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getBetweenRule());
              					}
              					set(
              						current,
              						"op3",
              						lv_op3_3_0,
              						"org.xtext.example.mydsl_sql.SQL.OperandGroup");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleBetween"


    // $ANTLR start "entryRuleBetweenValue"
    // InternalSQLParser.g:6561:1: entryRuleBetweenValue returns [String current=null] : iv_ruleBetweenValue= ruleBetweenValue EOF ;
    public final String entryRuleBetweenValue() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleBetweenValue = null;


        try {
            // InternalSQLParser.g:6561:52: (iv_ruleBetweenValue= ruleBetweenValue EOF )
            // InternalSQLParser.g:6562:2: iv_ruleBetweenValue= ruleBetweenValue EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBetweenValueRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBetweenValue=ruleBetweenValue();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBetweenValue.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleBetweenValue"


    // $ANTLR start "ruleBetweenValue"
    // InternalSQLParser.g:6568:1: ruleBetweenValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : ( (kw= NOT )? kw= BETWEEN ) ;
    public final AntlrDatatypeRuleToken ruleBetweenValue() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            // InternalSQLParser.g:6574:2: ( ( (kw= NOT )? kw= BETWEEN ) )
            // InternalSQLParser.g:6575:2: ( (kw= NOT )? kw= BETWEEN )
            {
            // InternalSQLParser.g:6575:2: ( (kw= NOT )? kw= BETWEEN )
            // InternalSQLParser.g:6576:3: (kw= NOT )? kw= BETWEEN
            {
            // InternalSQLParser.g:6576:3: (kw= NOT )?
            int alt115=2;
            int LA115_0 = input.LA(1);

            if ( (LA115_0==NOT) ) {
                alt115=1;
            }
            switch (alt115) {
                case 1 :
                    // InternalSQLParser.g:6577:4: kw= NOT
                    {
                    kw=(Token)match(input,NOT,FOLLOW_88); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getBetweenValueAccess().getNOTKeyword_0());
                      			
                    }

                    }
                    break;

            }

            kw=(Token)match(input,BETWEEN,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(kw);
              			newLeafNode(kw, grammarAccess.getBetweenValueAccess().getBETWEENKeyword_1());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleBetweenValue"


    // $ANTLR start "entryRuleInOperator"
    // InternalSQLParser.g:6592:1: entryRuleInOperator returns [EObject current=null] : iv_ruleInOperator= ruleInOperator EOF ;
    public final EObject entryRuleInOperator() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleInOperator = null;


        try {
            // InternalSQLParser.g:6592:51: (iv_ruleInOperator= ruleInOperator EOF )
            // InternalSQLParser.g:6593:2: iv_ruleInOperator= ruleInOperator EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getInOperatorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleInOperator=ruleInOperator();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleInOperator; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleInOperator"


    // $ANTLR start "ruleInOperator"
    // InternalSQLParser.g:6599:1: ruleInOperator returns [EObject current=null] : ( () ( (lv_op_1_0= ruleInValue ) ) ( ( (lv_subquery_2_0= ruleSubQueryOperand ) ) | ( (lv_opList_3_0= ruleOperandListGroup ) ) ) ) ;
    public final EObject ruleInOperator() throws RecognitionException {
        EObject current = null;

        AntlrDatatypeRuleToken lv_op_1_0 = null;

        EObject lv_subquery_2_0 = null;

        EObject lv_opList_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:6605:2: ( ( () ( (lv_op_1_0= ruleInValue ) ) ( ( (lv_subquery_2_0= ruleSubQueryOperand ) ) | ( (lv_opList_3_0= ruleOperandListGroup ) ) ) ) )
            // InternalSQLParser.g:6606:2: ( () ( (lv_op_1_0= ruleInValue ) ) ( ( (lv_subquery_2_0= ruleSubQueryOperand ) ) | ( (lv_opList_3_0= ruleOperandListGroup ) ) ) )
            {
            // InternalSQLParser.g:6606:2: ( () ( (lv_op_1_0= ruleInValue ) ) ( ( (lv_subquery_2_0= ruleSubQueryOperand ) ) | ( (lv_opList_3_0= ruleOperandListGroup ) ) ) )
            // InternalSQLParser.g:6607:3: () ( (lv_op_1_0= ruleInValue ) ) ( ( (lv_subquery_2_0= ruleSubQueryOperand ) ) | ( (lv_opList_3_0= ruleOperandListGroup ) ) )
            {
            // InternalSQLParser.g:6607:3: ()
            // InternalSQLParser.g:6608:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getInOperatorAccess().getInOperAction_0(),
              					current);
              			
            }

            }

            // InternalSQLParser.g:6617:3: ( (lv_op_1_0= ruleInValue ) )
            // InternalSQLParser.g:6618:4: (lv_op_1_0= ruleInValue )
            {
            // InternalSQLParser.g:6618:4: (lv_op_1_0= ruleInValue )
            // InternalSQLParser.g:6619:5: lv_op_1_0= ruleInValue
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getInOperatorAccess().getOpInValueParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_11);
            lv_op_1_0=ruleInValue();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getInOperatorRule());
              					}
              					set(
              						current,
              						"op",
              						lv_op_1_0,
              						"org.xtext.example.mydsl_sql.SQL.InValue");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:6636:3: ( ( (lv_subquery_2_0= ruleSubQueryOperand ) ) | ( (lv_opList_3_0= ruleOperandListGroup ) ) )
            int alt116=2;
            int LA116_0 = input.LA(1);

            if ( (LA116_0==LeftParenthesis) ) {
                int LA116_1 = input.LA(2);

                if ( ((LA116_1>=RULE_SIGNED_DOUBLE && LA116_1<=RULE_TIMESTAMP)||LA116_1==RULE_STRING_) ) {
                    alt116=2;
                }
                else if ( (LA116_1==SELECT) ) {
                    alt116=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 116, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 116, 0, input);

                throw nvae;
            }
            switch (alt116) {
                case 1 :
                    // InternalSQLParser.g:6637:4: ( (lv_subquery_2_0= ruleSubQueryOperand ) )
                    {
                    // InternalSQLParser.g:6637:4: ( (lv_subquery_2_0= ruleSubQueryOperand ) )
                    // InternalSQLParser.g:6638:5: (lv_subquery_2_0= ruleSubQueryOperand )
                    {
                    // InternalSQLParser.g:6638:5: (lv_subquery_2_0= ruleSubQueryOperand )
                    // InternalSQLParser.g:6639:6: lv_subquery_2_0= ruleSubQueryOperand
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getInOperatorAccess().getSubquerySubQueryOperandParserRuleCall_2_0_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_subquery_2_0=ruleSubQueryOperand();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getInOperatorRule());
                      						}
                      						set(
                      							current,
                      							"subquery",
                      							lv_subquery_2_0,
                      							"org.xtext.example.mydsl_sql.SQL.SubQueryOperand");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:6657:4: ( (lv_opList_3_0= ruleOperandListGroup ) )
                    {
                    // InternalSQLParser.g:6657:4: ( (lv_opList_3_0= ruleOperandListGroup ) )
                    // InternalSQLParser.g:6658:5: (lv_opList_3_0= ruleOperandListGroup )
                    {
                    // InternalSQLParser.g:6658:5: (lv_opList_3_0= ruleOperandListGroup )
                    // InternalSQLParser.g:6659:6: lv_opList_3_0= ruleOperandListGroup
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getInOperatorAccess().getOpListOperandListGroupParserRuleCall_2_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_opList_3_0=ruleOperandListGroup();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getInOperatorRule());
                      						}
                      						set(
                      							current,
                      							"opList",
                      							lv_opList_3_0,
                      							"org.xtext.example.mydsl_sql.SQL.OperandListGroup");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleInOperator"


    // $ANTLR start "entryRuleInValue"
    // InternalSQLParser.g:6681:1: entryRuleInValue returns [String current=null] : iv_ruleInValue= ruleInValue EOF ;
    public final String entryRuleInValue() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleInValue = null;


        try {
            // InternalSQLParser.g:6681:47: (iv_ruleInValue= ruleInValue EOF )
            // InternalSQLParser.g:6682:2: iv_ruleInValue= ruleInValue EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getInValueRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleInValue=ruleInValue();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleInValue.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleInValue"


    // $ANTLR start "ruleInValue"
    // InternalSQLParser.g:6688:1: ruleInValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : ( (kw= NOT )? kw= IN ) ;
    public final AntlrDatatypeRuleToken ruleInValue() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            // InternalSQLParser.g:6694:2: ( ( (kw= NOT )? kw= IN ) )
            // InternalSQLParser.g:6695:2: ( (kw= NOT )? kw= IN )
            {
            // InternalSQLParser.g:6695:2: ( (kw= NOT )? kw= IN )
            // InternalSQLParser.g:6696:3: (kw= NOT )? kw= IN
            {
            // InternalSQLParser.g:6696:3: (kw= NOT )?
            int alt117=2;
            int LA117_0 = input.LA(1);

            if ( (LA117_0==NOT) ) {
                alt117=1;
            }
            switch (alt117) {
                case 1 :
                    // InternalSQLParser.g:6697:4: kw= NOT
                    {
                    kw=(Token)match(input,NOT,FOLLOW_65); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getInValueAccess().getNOTKeyword_0());
                      			
                    }

                    }
                    break;

            }

            kw=(Token)match(input,IN,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(kw);
              			newLeafNode(kw, grammarAccess.getInValueAccess().getINKeyword_1());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleInValue"


    // $ANTLR start "entryRuleExistsOperator"
    // InternalSQLParser.g:6712:1: entryRuleExistsOperator returns [EObject current=null] : iv_ruleExistsOperator= ruleExistsOperator EOF ;
    public final EObject entryRuleExistsOperator() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExistsOperator = null;


        try {
            // InternalSQLParser.g:6712:55: (iv_ruleExistsOperator= ruleExistsOperator EOF )
            // InternalSQLParser.g:6713:2: iv_ruleExistsOperator= ruleExistsOperator EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExistsOperatorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExistsOperator=ruleExistsOperator();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExistsOperator; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleExistsOperator"


    // $ANTLR start "ruleExistsOperator"
    // InternalSQLParser.g:6719:1: ruleExistsOperator returns [EObject current=null] : ( () ( (lv_op_1_0= ruleExistsValue ) ) ( ( (lv_subquery_2_0= ruleSubQueryOperand ) ) | ( (lv_opList_3_0= ruleOperandListGroup ) ) ) ) ;
    public final EObject ruleExistsOperator() throws RecognitionException {
        EObject current = null;

        AntlrDatatypeRuleToken lv_op_1_0 = null;

        EObject lv_subquery_2_0 = null;

        EObject lv_opList_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:6725:2: ( ( () ( (lv_op_1_0= ruleExistsValue ) ) ( ( (lv_subquery_2_0= ruleSubQueryOperand ) ) | ( (lv_opList_3_0= ruleOperandListGroup ) ) ) ) )
            // InternalSQLParser.g:6726:2: ( () ( (lv_op_1_0= ruleExistsValue ) ) ( ( (lv_subquery_2_0= ruleSubQueryOperand ) ) | ( (lv_opList_3_0= ruleOperandListGroup ) ) ) )
            {
            // InternalSQLParser.g:6726:2: ( () ( (lv_op_1_0= ruleExistsValue ) ) ( ( (lv_subquery_2_0= ruleSubQueryOperand ) ) | ( (lv_opList_3_0= ruleOperandListGroup ) ) ) )
            // InternalSQLParser.g:6727:3: () ( (lv_op_1_0= ruleExistsValue ) ) ( ( (lv_subquery_2_0= ruleSubQueryOperand ) ) | ( (lv_opList_3_0= ruleOperandListGroup ) ) )
            {
            // InternalSQLParser.g:6727:3: ()
            // InternalSQLParser.g:6728:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getExistsOperatorAccess().getExistsOperAction_0(),
              					current);
              			
            }

            }

            // InternalSQLParser.g:6737:3: ( (lv_op_1_0= ruleExistsValue ) )
            // InternalSQLParser.g:6738:4: (lv_op_1_0= ruleExistsValue )
            {
            // InternalSQLParser.g:6738:4: (lv_op_1_0= ruleExistsValue )
            // InternalSQLParser.g:6739:5: lv_op_1_0= ruleExistsValue
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getExistsOperatorAccess().getOpExistsValueParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_11);
            lv_op_1_0=ruleExistsValue();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getExistsOperatorRule());
              					}
              					set(
              						current,
              						"op",
              						lv_op_1_0,
              						"org.xtext.example.mydsl_sql.SQL.ExistsValue");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:6756:3: ( ( (lv_subquery_2_0= ruleSubQueryOperand ) ) | ( (lv_opList_3_0= ruleOperandListGroup ) ) )
            int alt118=2;
            int LA118_0 = input.LA(1);

            if ( (LA118_0==LeftParenthesis) ) {
                int LA118_1 = input.LA(2);

                if ( (LA118_1==SELECT) ) {
                    alt118=1;
                }
                else if ( ((LA118_1>=RULE_SIGNED_DOUBLE && LA118_1<=RULE_TIMESTAMP)||LA118_1==RULE_STRING_) ) {
                    alt118=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 118, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 118, 0, input);

                throw nvae;
            }
            switch (alt118) {
                case 1 :
                    // InternalSQLParser.g:6757:4: ( (lv_subquery_2_0= ruleSubQueryOperand ) )
                    {
                    // InternalSQLParser.g:6757:4: ( (lv_subquery_2_0= ruleSubQueryOperand ) )
                    // InternalSQLParser.g:6758:5: (lv_subquery_2_0= ruleSubQueryOperand )
                    {
                    // InternalSQLParser.g:6758:5: (lv_subquery_2_0= ruleSubQueryOperand )
                    // InternalSQLParser.g:6759:6: lv_subquery_2_0= ruleSubQueryOperand
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getExistsOperatorAccess().getSubquerySubQueryOperandParserRuleCall_2_0_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_subquery_2_0=ruleSubQueryOperand();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExistsOperatorRule());
                      						}
                      						set(
                      							current,
                      							"subquery",
                      							lv_subquery_2_0,
                      							"org.xtext.example.mydsl_sql.SQL.SubQueryOperand");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:6777:4: ( (lv_opList_3_0= ruleOperandListGroup ) )
                    {
                    // InternalSQLParser.g:6777:4: ( (lv_opList_3_0= ruleOperandListGroup ) )
                    // InternalSQLParser.g:6778:5: (lv_opList_3_0= ruleOperandListGroup )
                    {
                    // InternalSQLParser.g:6778:5: (lv_opList_3_0= ruleOperandListGroup )
                    // InternalSQLParser.g:6779:6: lv_opList_3_0= ruleOperandListGroup
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getExistsOperatorAccess().getOpListOperandListGroupParserRuleCall_2_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_opList_3_0=ruleOperandListGroup();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExistsOperatorRule());
                      						}
                      						set(
                      							current,
                      							"opList",
                      							lv_opList_3_0,
                      							"org.xtext.example.mydsl_sql.SQL.OperandListGroup");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleExistsOperator"


    // $ANTLR start "entryRuleExistsValue"
    // InternalSQLParser.g:6801:1: entryRuleExistsValue returns [String current=null] : iv_ruleExistsValue= ruleExistsValue EOF ;
    public final String entryRuleExistsValue() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleExistsValue = null;


        try {
            // InternalSQLParser.g:6801:51: (iv_ruleExistsValue= ruleExistsValue EOF )
            // InternalSQLParser.g:6802:2: iv_ruleExistsValue= ruleExistsValue EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExistsValueRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExistsValue=ruleExistsValue();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExistsValue.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleExistsValue"


    // $ANTLR start "ruleExistsValue"
    // InternalSQLParser.g:6808:1: ruleExistsValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : ( (kw= NOT )? kw= EXISTS ) ;
    public final AntlrDatatypeRuleToken ruleExistsValue() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            // InternalSQLParser.g:6814:2: ( ( (kw= NOT )? kw= EXISTS ) )
            // InternalSQLParser.g:6815:2: ( (kw= NOT )? kw= EXISTS )
            {
            // InternalSQLParser.g:6815:2: ( (kw= NOT )? kw= EXISTS )
            // InternalSQLParser.g:6816:3: (kw= NOT )? kw= EXISTS
            {
            // InternalSQLParser.g:6816:3: (kw= NOT )?
            int alt119=2;
            int LA119_0 = input.LA(1);

            if ( (LA119_0==NOT) ) {
                alt119=1;
            }
            switch (alt119) {
                case 1 :
                    // InternalSQLParser.g:6817:4: kw= NOT
                    {
                    kw=(Token)match(input,NOT,FOLLOW_89); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getExistsValueAccess().getNOTKeyword_0());
                      			
                    }

                    }
                    break;

            }

            kw=(Token)match(input,EXISTS,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(kw);
              			newLeafNode(kw, grammarAccess.getExistsValueAccess().getEXISTSKeyword_1());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleExistsValue"


    // $ANTLR start "entryRuleOperandListGroup"
    // InternalSQLParser.g:6832:1: entryRuleOperandListGroup returns [EObject current=null] : iv_ruleOperandListGroup= ruleOperandListGroup EOF ;
    public final EObject entryRuleOperandListGroup() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOperandListGroup = null;


        try {
            // InternalSQLParser.g:6832:57: (iv_ruleOperandListGroup= ruleOperandListGroup EOF )
            // InternalSQLParser.g:6833:2: iv_ruleOperandListGroup= ruleOperandListGroup EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOperandListGroupRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOperandListGroup=ruleOperandListGroup();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOperandListGroup; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOperandListGroup"


    // $ANTLR start "ruleOperandListGroup"
    // InternalSQLParser.g:6839:1: ruleOperandListGroup returns [EObject current=null] : (otherlv_0= LeftParenthesis ( (lv_opGroup_1_0= ruleOperandList ) ) otherlv_2= RightParenthesis ) ;
    public final EObject ruleOperandListGroup() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_opGroup_1_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:6845:2: ( (otherlv_0= LeftParenthesis ( (lv_opGroup_1_0= ruleOperandList ) ) otherlv_2= RightParenthesis ) )
            // InternalSQLParser.g:6846:2: (otherlv_0= LeftParenthesis ( (lv_opGroup_1_0= ruleOperandList ) ) otherlv_2= RightParenthesis )
            {
            // InternalSQLParser.g:6846:2: (otherlv_0= LeftParenthesis ( (lv_opGroup_1_0= ruleOperandList ) ) otherlv_2= RightParenthesis )
            // InternalSQLParser.g:6847:3: otherlv_0= LeftParenthesis ( (lv_opGroup_1_0= ruleOperandList ) ) otherlv_2= RightParenthesis
            {
            otherlv_0=(Token)match(input,LeftParenthesis,FOLLOW_90); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getOperandListGroupAccess().getLeftParenthesisKeyword_0());
              		
            }
            // InternalSQLParser.g:6851:3: ( (lv_opGroup_1_0= ruleOperandList ) )
            // InternalSQLParser.g:6852:4: (lv_opGroup_1_0= ruleOperandList )
            {
            // InternalSQLParser.g:6852:4: (lv_opGroup_1_0= ruleOperandList )
            // InternalSQLParser.g:6853:5: lv_opGroup_1_0= ruleOperandList
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getOperandListGroupAccess().getOpGroupOperandListParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_9);
            lv_opGroup_1_0=ruleOperandList();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getOperandListGroupRule());
              					}
              					set(
              						current,
              						"opGroup",
              						lv_opGroup_1_0,
              						"org.xtext.example.mydsl_sql.SQL.OperandList");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getOperandListGroupAccess().getRightParenthesisKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOperandListGroup"


    // $ANTLR start "entryRuleOperandList"
    // InternalSQLParser.g:6878:1: entryRuleOperandList returns [EObject current=null] : iv_ruleOperandList= ruleOperandList EOF ;
    public final EObject entryRuleOperandList() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOperandList = null;


        try {
            // InternalSQLParser.g:6878:52: (iv_ruleOperandList= ruleOperandList EOF )
            // InternalSQLParser.g:6879:2: iv_ruleOperandList= ruleOperandList EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOperandListRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOperandList=ruleOperandList();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOperandList; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOperandList"


    // $ANTLR start "ruleOperandList"
    // InternalSQLParser.g:6885:1: ruleOperandList returns [EObject current=null] : (this_ScalarOperand_0= ruleScalarOperand ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleScalarOperand ) ) )+ )? ) ;
    public final EObject ruleOperandList() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_ScalarOperand_0 = null;

        EObject lv_entries_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:6891:2: ( (this_ScalarOperand_0= ruleScalarOperand ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleScalarOperand ) ) )+ )? ) )
            // InternalSQLParser.g:6892:2: (this_ScalarOperand_0= ruleScalarOperand ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleScalarOperand ) ) )+ )? )
            {
            // InternalSQLParser.g:6892:2: (this_ScalarOperand_0= ruleScalarOperand ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleScalarOperand ) ) )+ )? )
            // InternalSQLParser.g:6893:3: this_ScalarOperand_0= ruleScalarOperand ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleScalarOperand ) ) )+ )?
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getOperandListAccess().getScalarOperandParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_12);
            this_ScalarOperand_0=ruleScalarOperand();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ScalarOperand_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:6904:3: ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleScalarOperand ) ) )+ )?
            int alt121=2;
            int LA121_0 = input.LA(1);

            if ( (LA121_0==Comma) ) {
                alt121=1;
            }
            switch (alt121) {
                case 1 :
                    // InternalSQLParser.g:6905:4: () (otherlv_2= Comma ( (lv_entries_3_0= ruleScalarOperand ) ) )+
                    {
                    // InternalSQLParser.g:6905:4: ()
                    // InternalSQLParser.g:6906:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getOperandListAccess().getOpListEntriesAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalSQLParser.g:6915:4: (otherlv_2= Comma ( (lv_entries_3_0= ruleScalarOperand ) ) )+
                    int cnt120=0;
                    loop120:
                    do {
                        int alt120=2;
                        int LA120_0 = input.LA(1);

                        if ( (LA120_0==Comma) ) {
                            alt120=1;
                        }


                        switch (alt120) {
                    	case 1 :
                    	    // InternalSQLParser.g:6916:5: otherlv_2= Comma ( (lv_entries_3_0= ruleScalarOperand ) )
                    	    {
                    	    otherlv_2=(Token)match(input,Comma,FOLLOW_90); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_2, grammarAccess.getOperandListAccess().getCommaKeyword_1_1_0());
                    	      				
                    	    }
                    	    // InternalSQLParser.g:6920:5: ( (lv_entries_3_0= ruleScalarOperand ) )
                    	    // InternalSQLParser.g:6921:6: (lv_entries_3_0= ruleScalarOperand )
                    	    {
                    	    // InternalSQLParser.g:6921:6: (lv_entries_3_0= ruleScalarOperand )
                    	    // InternalSQLParser.g:6922:7: lv_entries_3_0= ruleScalarOperand
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getOperandListAccess().getEntriesScalarOperandParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_12);
                    	    lv_entries_3_0=ruleScalarOperand();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getOperandListRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"entries",
                    	      								lv_entries_3_0,
                    	      								"org.xtext.example.mydsl_sql.SQL.ScalarOperand");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt120 >= 1 ) break loop120;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(120, input);
                                throw eee;
                        }
                        cnt120++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOperandList"


    // $ANTLR start "entryRuleOperandGroup"
    // InternalSQLParser.g:6945:1: entryRuleOperandGroup returns [EObject current=null] : iv_ruleOperandGroup= ruleOperandGroup EOF ;
    public final EObject entryRuleOperandGroup() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOperandGroup = null;


        try {
            // InternalSQLParser.g:6945:53: (iv_ruleOperandGroup= ruleOperandGroup EOF )
            // InternalSQLParser.g:6946:2: iv_ruleOperandGroup= ruleOperandGroup EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOperandGroupRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOperandGroup=ruleOperandGroup();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOperandGroup; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOperandGroup"


    // $ANTLR start "ruleOperandGroup"
    // InternalSQLParser.g:6952:1: ruleOperandGroup returns [EObject current=null] : (this_Operand_0= ruleOperand | (otherlv_1= LeftParenthesis this_Operand_2= ruleOperand otherlv_3= RightParenthesis ) ) ;
    public final EObject ruleOperandGroup() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject this_Operand_0 = null;

        EObject this_Operand_2 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:6958:2: ( (this_Operand_0= ruleOperand | (otherlv_1= LeftParenthesis this_Operand_2= ruleOperand otherlv_3= RightParenthesis ) ) )
            // InternalSQLParser.g:6959:2: (this_Operand_0= ruleOperand | (otherlv_1= LeftParenthesis this_Operand_2= ruleOperand otherlv_3= RightParenthesis ) )
            {
            // InternalSQLParser.g:6959:2: (this_Operand_0= ruleOperand | (otherlv_1= LeftParenthesis this_Operand_2= ruleOperand otherlv_3= RightParenthesis ) )
            int alt122=2;
            int LA122_0 = input.LA(1);

            if ( (LA122_0==EXTRACT||LA122_0==CAST||LA122_0==FALSE||LA122_0==CASE||LA122_0==TRUE||(LA122_0>=RULE_JRPARAM && LA122_0<=RULE_JRNPARAM)||(LA122_0>=RULE_UNSIGNED && LA122_0<=RULE_SIGNED_DOUBLE)||(LA122_0>=RULE_STRING_ && LA122_0<=RULE_ID)) ) {
                alt122=1;
            }
            else if ( (LA122_0==LeftParenthesis) ) {
                int LA122_2 = input.LA(2);

                if ( (LA122_2==EXTRACT||LA122_2==CAST||LA122_2==FALSE||LA122_2==CASE||LA122_2==TRUE||LA122_2==LeftParenthesis||(LA122_2>=RULE_JRPARAM && LA122_2<=RULE_JRNPARAM)||(LA122_2>=RULE_UNSIGNED && LA122_2<=RULE_SIGNED_DOUBLE)||(LA122_2>=RULE_STRING_ && LA122_2<=RULE_ID)) ) {
                    alt122=2;
                }
                else if ( (LA122_2==SELECT) ) {
                    alt122=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 122, 2, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 122, 0, input);

                throw nvae;
            }
            switch (alt122) {
                case 1 :
                    // InternalSQLParser.g:6960:3: this_Operand_0= ruleOperand
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getOperandGroupAccess().getOperandParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Operand_0=ruleOperand();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Operand_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:6972:3: (otherlv_1= LeftParenthesis this_Operand_2= ruleOperand otherlv_3= RightParenthesis )
                    {
                    // InternalSQLParser.g:6972:3: (otherlv_1= LeftParenthesis this_Operand_2= ruleOperand otherlv_3= RightParenthesis )
                    // InternalSQLParser.g:6973:4: otherlv_1= LeftParenthesis this_Operand_2= ruleOperand otherlv_3= RightParenthesis
                    {
                    otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_77); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getOperandGroupAccess().getLeftParenthesisKeyword_1_0());
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				/* */
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getOperandGroupAccess().getOperandParserRuleCall_1_1());
                      			
                    }
                    pushFollow(FOLLOW_9);
                    this_Operand_2=ruleOperand();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_Operand_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }
                    otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_3, grammarAccess.getOperandGroupAccess().getRightParenthesisKeyword_1_2());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOperandGroup"


    // $ANTLR start "entryRuleOperand"
    // InternalSQLParser.g:6997:1: entryRuleOperand returns [EObject current=null] : iv_ruleOperand= ruleOperand EOF ;
    public final EObject entryRuleOperand() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOperand = null;


        try {
            // InternalSQLParser.g:6997:48: (iv_ruleOperand= ruleOperand EOF )
            // InternalSQLParser.g:6998:2: iv_ruleOperand= ruleOperand EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOperandRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOperand=ruleOperand();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOperand; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOperand"


    // $ANTLR start "ruleOperand"
    // InternalSQLParser.g:7004:1: ruleOperand returns [EObject current=null] : ( ( (lv_op1_0_0= ruleOperandFragment ) ) ( ( ( () otherlv_2= PlusSign ) | ( () otherlv_4= HyphenMinus ) | ( () otherlv_6= VerticalLineVerticalLine ) | ( () this_STAR_8= RULE_STAR ) | ( () otherlv_10= Solidus ) ) ( (lv_right_11_0= ruleOperandFragment ) ) )* ) ;
    public final EObject ruleOperand() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        Token this_STAR_8=null;
        Token otherlv_10=null;
        EObject lv_op1_0_0 = null;

        EObject lv_right_11_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:7010:2: ( ( ( (lv_op1_0_0= ruleOperandFragment ) ) ( ( ( () otherlv_2= PlusSign ) | ( () otherlv_4= HyphenMinus ) | ( () otherlv_6= VerticalLineVerticalLine ) | ( () this_STAR_8= RULE_STAR ) | ( () otherlv_10= Solidus ) ) ( (lv_right_11_0= ruleOperandFragment ) ) )* ) )
            // InternalSQLParser.g:7011:2: ( ( (lv_op1_0_0= ruleOperandFragment ) ) ( ( ( () otherlv_2= PlusSign ) | ( () otherlv_4= HyphenMinus ) | ( () otherlv_6= VerticalLineVerticalLine ) | ( () this_STAR_8= RULE_STAR ) | ( () otherlv_10= Solidus ) ) ( (lv_right_11_0= ruleOperandFragment ) ) )* )
            {
            // InternalSQLParser.g:7011:2: ( ( (lv_op1_0_0= ruleOperandFragment ) ) ( ( ( () otherlv_2= PlusSign ) | ( () otherlv_4= HyphenMinus ) | ( () otherlv_6= VerticalLineVerticalLine ) | ( () this_STAR_8= RULE_STAR ) | ( () otherlv_10= Solidus ) ) ( (lv_right_11_0= ruleOperandFragment ) ) )* )
            // InternalSQLParser.g:7012:3: ( (lv_op1_0_0= ruleOperandFragment ) ) ( ( ( () otherlv_2= PlusSign ) | ( () otherlv_4= HyphenMinus ) | ( () otherlv_6= VerticalLineVerticalLine ) | ( () this_STAR_8= RULE_STAR ) | ( () otherlv_10= Solidus ) ) ( (lv_right_11_0= ruleOperandFragment ) ) )*
            {
            // InternalSQLParser.g:7012:3: ( (lv_op1_0_0= ruleOperandFragment ) )
            // InternalSQLParser.g:7013:4: (lv_op1_0_0= ruleOperandFragment )
            {
            // InternalSQLParser.g:7013:4: (lv_op1_0_0= ruleOperandFragment )
            // InternalSQLParser.g:7014:5: lv_op1_0_0= ruleOperandFragment
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getOperandAccess().getOp1OperandFragmentParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_91);
            lv_op1_0_0=ruleOperandFragment();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getOperandRule());
              					}
              					set(
              						current,
              						"op1",
              						lv_op1_0_0,
              						"org.xtext.example.mydsl_sql.SQL.OperandFragment");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:7031:3: ( ( ( () otherlv_2= PlusSign ) | ( () otherlv_4= HyphenMinus ) | ( () otherlv_6= VerticalLineVerticalLine ) | ( () this_STAR_8= RULE_STAR ) | ( () otherlv_10= Solidus ) ) ( (lv_right_11_0= ruleOperandFragment ) ) )*
            loop124:
            do {
                int alt124=2;
                int LA124_0 = input.LA(1);

                if ( (LA124_0==VerticalLineVerticalLine||LA124_0==PlusSign||LA124_0==HyphenMinus||LA124_0==Solidus||LA124_0==RULE_STAR) ) {
                    alt124=1;
                }


                switch (alt124) {
            	case 1 :
            	    // InternalSQLParser.g:7032:4: ( ( () otherlv_2= PlusSign ) | ( () otherlv_4= HyphenMinus ) | ( () otherlv_6= VerticalLineVerticalLine ) | ( () this_STAR_8= RULE_STAR ) | ( () otherlv_10= Solidus ) ) ( (lv_right_11_0= ruleOperandFragment ) )
            	    {
            	    // InternalSQLParser.g:7032:4: ( ( () otherlv_2= PlusSign ) | ( () otherlv_4= HyphenMinus ) | ( () otherlv_6= VerticalLineVerticalLine ) | ( () this_STAR_8= RULE_STAR ) | ( () otherlv_10= Solidus ) )
            	    int alt123=5;
            	    switch ( input.LA(1) ) {
            	    case PlusSign:
            	        {
            	        alt123=1;
            	        }
            	        break;
            	    case HyphenMinus:
            	        {
            	        alt123=2;
            	        }
            	        break;
            	    case VerticalLineVerticalLine:
            	        {
            	        alt123=3;
            	        }
            	        break;
            	    case RULE_STAR:
            	        {
            	        alt123=4;
            	        }
            	        break;
            	    case Solidus:
            	        {
            	        alt123=5;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 123, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt123) {
            	        case 1 :
            	            // InternalSQLParser.g:7033:5: ( () otherlv_2= PlusSign )
            	            {
            	            // InternalSQLParser.g:7033:5: ( () otherlv_2= PlusSign )
            	            // InternalSQLParser.g:7034:6: () otherlv_2= PlusSign
            	            {
            	            // InternalSQLParser.g:7034:6: ()
            	            // InternalSQLParser.g:7035:7: 
            	            {
            	            if ( state.backtracking==0 ) {

            	              							/* */
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							current = forceCreateModelElementAndSet(
            	              								grammarAccess.getOperandAccess().getPlusLeftAction_1_0_0_0(),
            	              								current);
            	              						
            	            }

            	            }

            	            otherlv_2=(Token)match(input,PlusSign,FOLLOW_77); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              						newLeafNode(otherlv_2, grammarAccess.getOperandAccess().getPlusSignKeyword_1_0_0_1());
            	              					
            	            }

            	            }


            	            }
            	            break;
            	        case 2 :
            	            // InternalSQLParser.g:7050:5: ( () otherlv_4= HyphenMinus )
            	            {
            	            // InternalSQLParser.g:7050:5: ( () otherlv_4= HyphenMinus )
            	            // InternalSQLParser.g:7051:6: () otherlv_4= HyphenMinus
            	            {
            	            // InternalSQLParser.g:7051:6: ()
            	            // InternalSQLParser.g:7052:7: 
            	            {
            	            if ( state.backtracking==0 ) {

            	              							/* */
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							current = forceCreateModelElementAndSet(
            	              								grammarAccess.getOperandAccess().getMinusLeftAction_1_0_1_0(),
            	              								current);
            	              						
            	            }

            	            }

            	            otherlv_4=(Token)match(input,HyphenMinus,FOLLOW_77); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              						newLeafNode(otherlv_4, grammarAccess.getOperandAccess().getHyphenMinusKeyword_1_0_1_1());
            	              					
            	            }

            	            }


            	            }
            	            break;
            	        case 3 :
            	            // InternalSQLParser.g:7067:5: ( () otherlv_6= VerticalLineVerticalLine )
            	            {
            	            // InternalSQLParser.g:7067:5: ( () otherlv_6= VerticalLineVerticalLine )
            	            // InternalSQLParser.g:7068:6: () otherlv_6= VerticalLineVerticalLine
            	            {
            	            // InternalSQLParser.g:7068:6: ()
            	            // InternalSQLParser.g:7069:7: 
            	            {
            	            if ( state.backtracking==0 ) {

            	              							/* */
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							current = forceCreateModelElementAndSet(
            	              								grammarAccess.getOperandAccess().getConcatLeftAction_1_0_2_0(),
            	              								current);
            	              						
            	            }

            	            }

            	            otherlv_6=(Token)match(input,VerticalLineVerticalLine,FOLLOW_77); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              						newLeafNode(otherlv_6, grammarAccess.getOperandAccess().getVerticalLineVerticalLineKeyword_1_0_2_1());
            	              					
            	            }

            	            }


            	            }
            	            break;
            	        case 4 :
            	            // InternalSQLParser.g:7084:5: ( () this_STAR_8= RULE_STAR )
            	            {
            	            // InternalSQLParser.g:7084:5: ( () this_STAR_8= RULE_STAR )
            	            // InternalSQLParser.g:7085:6: () this_STAR_8= RULE_STAR
            	            {
            	            // InternalSQLParser.g:7085:6: ()
            	            // InternalSQLParser.g:7086:7: 
            	            {
            	            if ( state.backtracking==0 ) {

            	              							/* */
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							current = forceCreateModelElementAndSet(
            	              								grammarAccess.getOperandAccess().getMultiplyLeftAction_1_0_3_0(),
            	              								current);
            	              						
            	            }

            	            }

            	            this_STAR_8=(Token)match(input,RULE_STAR,FOLLOW_77); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              						newLeafNode(this_STAR_8, grammarAccess.getOperandAccess().getSTARTerminalRuleCall_1_0_3_1());
            	              					
            	            }

            	            }


            	            }
            	            break;
            	        case 5 :
            	            // InternalSQLParser.g:7101:5: ( () otherlv_10= Solidus )
            	            {
            	            // InternalSQLParser.g:7101:5: ( () otherlv_10= Solidus )
            	            // InternalSQLParser.g:7102:6: () otherlv_10= Solidus
            	            {
            	            // InternalSQLParser.g:7102:6: ()
            	            // InternalSQLParser.g:7103:7: 
            	            {
            	            if ( state.backtracking==0 ) {

            	              							/* */
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							current = forceCreateModelElementAndSet(
            	              								grammarAccess.getOperandAccess().getDivisionLeftAction_1_0_4_0(),
            	              								current);
            	              						
            	            }

            	            }

            	            otherlv_10=(Token)match(input,Solidus,FOLLOW_77); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              						newLeafNode(otherlv_10, grammarAccess.getOperandAccess().getSolidusKeyword_1_0_4_1());
            	              					
            	            }

            	            }


            	            }
            	            break;

            	    }

            	    // InternalSQLParser.g:7118:4: ( (lv_right_11_0= ruleOperandFragment ) )
            	    // InternalSQLParser.g:7119:5: (lv_right_11_0= ruleOperandFragment )
            	    {
            	    // InternalSQLParser.g:7119:5: (lv_right_11_0= ruleOperandFragment )
            	    // InternalSQLParser.g:7120:6: lv_right_11_0= ruleOperandFragment
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getOperandAccess().getRightOperandFragmentParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_91);
            	    lv_right_11_0=ruleOperandFragment();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getOperandRule());
            	      						}
            	      						set(
            	      							current,
            	      							"right",
            	      							lv_right_11_0,
            	      							"org.xtext.example.mydsl_sql.SQL.OperandFragment");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop124;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOperand"


    // $ANTLR start "entryRuleOperandFragment"
    // InternalSQLParser.g:7142:1: entryRuleOperandFragment returns [EObject current=null] : iv_ruleOperandFragment= ruleOperandFragment EOF ;
    public final EObject entryRuleOperandFragment() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOperandFragment = null;


        try {
            // InternalSQLParser.g:7142:56: (iv_ruleOperandFragment= ruleOperandFragment EOF )
            // InternalSQLParser.g:7143:2: iv_ruleOperandFragment= ruleOperandFragment EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOperandFragmentRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOperandFragment=ruleOperandFragment();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOperandFragment; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOperandFragment"


    // $ANTLR start "ruleOperandFragment"
    // InternalSQLParser.g:7149:1: ruleOperandFragment returns [EObject current=null] : ( ( (lv_column_0_0= ruleColumnOperand ) ) | ( (lv_xop_1_0= ruleXOperandFragment ) ) | ( (lv_subq_2_0= ruleSubQueryOperand ) ) | ( (lv_fcast_3_0= ruleOpFunctionCast ) ) | ( (lv_fext_4_0= ruleFunctionExtract ) ) | ( (lv_func_5_0= ruleOperandFunction ) ) | ( (lv_sqlcase_6_0= ruleSQLCASE ) ) | ( (lv_boolLiteral_7_0= ruleBoolLiteral ) ) ) ;
    public final EObject ruleOperandFragment() throws RecognitionException {
        EObject current = null;

        EObject lv_column_0_0 = null;

        EObject lv_xop_1_0 = null;

        EObject lv_subq_2_0 = null;

        EObject lv_fcast_3_0 = null;

        EObject lv_fext_4_0 = null;

        EObject lv_func_5_0 = null;

        EObject lv_sqlcase_6_0 = null;

        AntlrDatatypeRuleToken lv_boolLiteral_7_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:7155:2: ( ( ( (lv_column_0_0= ruleColumnOperand ) ) | ( (lv_xop_1_0= ruleXOperandFragment ) ) | ( (lv_subq_2_0= ruleSubQueryOperand ) ) | ( (lv_fcast_3_0= ruleOpFunctionCast ) ) | ( (lv_fext_4_0= ruleFunctionExtract ) ) | ( (lv_func_5_0= ruleOperandFunction ) ) | ( (lv_sqlcase_6_0= ruleSQLCASE ) ) | ( (lv_boolLiteral_7_0= ruleBoolLiteral ) ) ) )
            // InternalSQLParser.g:7156:2: ( ( (lv_column_0_0= ruleColumnOperand ) ) | ( (lv_xop_1_0= ruleXOperandFragment ) ) | ( (lv_subq_2_0= ruleSubQueryOperand ) ) | ( (lv_fcast_3_0= ruleOpFunctionCast ) ) | ( (lv_fext_4_0= ruleFunctionExtract ) ) | ( (lv_func_5_0= ruleOperandFunction ) ) | ( (lv_sqlcase_6_0= ruleSQLCASE ) ) | ( (lv_boolLiteral_7_0= ruleBoolLiteral ) ) )
            {
            // InternalSQLParser.g:7156:2: ( ( (lv_column_0_0= ruleColumnOperand ) ) | ( (lv_xop_1_0= ruleXOperandFragment ) ) | ( (lv_subq_2_0= ruleSubQueryOperand ) ) | ( (lv_fcast_3_0= ruleOpFunctionCast ) ) | ( (lv_fext_4_0= ruleFunctionExtract ) ) | ( (lv_func_5_0= ruleOperandFunction ) ) | ( (lv_sqlcase_6_0= ruleSQLCASE ) ) | ( (lv_boolLiteral_7_0= ruleBoolLiteral ) ) )
            int alt125=8;
            alt125 = dfa125.predict(input);
            switch (alt125) {
                case 1 :
                    // InternalSQLParser.g:7157:3: ( (lv_column_0_0= ruleColumnOperand ) )
                    {
                    // InternalSQLParser.g:7157:3: ( (lv_column_0_0= ruleColumnOperand ) )
                    // InternalSQLParser.g:7158:4: (lv_column_0_0= ruleColumnOperand )
                    {
                    // InternalSQLParser.g:7158:4: (lv_column_0_0= ruleColumnOperand )
                    // InternalSQLParser.g:7159:5: lv_column_0_0= ruleColumnOperand
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getOperandFragmentAccess().getColumnColumnOperandParserRuleCall_0_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_column_0_0=ruleColumnOperand();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getOperandFragmentRule());
                      					}
                      					set(
                      						current,
                      						"column",
                      						lv_column_0_0,
                      						"org.xtext.example.mydsl_sql.SQL.ColumnOperand");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:7177:3: ( (lv_xop_1_0= ruleXOperandFragment ) )
                    {
                    // InternalSQLParser.g:7177:3: ( (lv_xop_1_0= ruleXOperandFragment ) )
                    // InternalSQLParser.g:7178:4: (lv_xop_1_0= ruleXOperandFragment )
                    {
                    // InternalSQLParser.g:7178:4: (lv_xop_1_0= ruleXOperandFragment )
                    // InternalSQLParser.g:7179:5: lv_xop_1_0= ruleXOperandFragment
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getOperandFragmentAccess().getXopXOperandFragmentParserRuleCall_1_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_xop_1_0=ruleXOperandFragment();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getOperandFragmentRule());
                      					}
                      					set(
                      						current,
                      						"xop",
                      						lv_xop_1_0,
                      						"org.xtext.example.mydsl_sql.SQL.XOperandFragment");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:7197:3: ( (lv_subq_2_0= ruleSubQueryOperand ) )
                    {
                    // InternalSQLParser.g:7197:3: ( (lv_subq_2_0= ruleSubQueryOperand ) )
                    // InternalSQLParser.g:7198:4: (lv_subq_2_0= ruleSubQueryOperand )
                    {
                    // InternalSQLParser.g:7198:4: (lv_subq_2_0= ruleSubQueryOperand )
                    // InternalSQLParser.g:7199:5: lv_subq_2_0= ruleSubQueryOperand
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getOperandFragmentAccess().getSubqSubQueryOperandParserRuleCall_2_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_subq_2_0=ruleSubQueryOperand();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getOperandFragmentRule());
                      					}
                      					set(
                      						current,
                      						"subq",
                      						lv_subq_2_0,
                      						"org.xtext.example.mydsl_sql.SQL.SubQueryOperand");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 4 :
                    // InternalSQLParser.g:7217:3: ( (lv_fcast_3_0= ruleOpFunctionCast ) )
                    {
                    // InternalSQLParser.g:7217:3: ( (lv_fcast_3_0= ruleOpFunctionCast ) )
                    // InternalSQLParser.g:7218:4: (lv_fcast_3_0= ruleOpFunctionCast )
                    {
                    // InternalSQLParser.g:7218:4: (lv_fcast_3_0= ruleOpFunctionCast )
                    // InternalSQLParser.g:7219:5: lv_fcast_3_0= ruleOpFunctionCast
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getOperandFragmentAccess().getFcastOpFunctionCastParserRuleCall_3_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_fcast_3_0=ruleOpFunctionCast();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getOperandFragmentRule());
                      					}
                      					set(
                      						current,
                      						"fcast",
                      						lv_fcast_3_0,
                      						"org.xtext.example.mydsl_sql.SQL.OpFunctionCast");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 5 :
                    // InternalSQLParser.g:7237:3: ( (lv_fext_4_0= ruleFunctionExtract ) )
                    {
                    // InternalSQLParser.g:7237:3: ( (lv_fext_4_0= ruleFunctionExtract ) )
                    // InternalSQLParser.g:7238:4: (lv_fext_4_0= ruleFunctionExtract )
                    {
                    // InternalSQLParser.g:7238:4: (lv_fext_4_0= ruleFunctionExtract )
                    // InternalSQLParser.g:7239:5: lv_fext_4_0= ruleFunctionExtract
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getOperandFragmentAccess().getFextFunctionExtractParserRuleCall_4_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_fext_4_0=ruleFunctionExtract();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getOperandFragmentRule());
                      					}
                      					set(
                      						current,
                      						"fext",
                      						lv_fext_4_0,
                      						"org.xtext.example.mydsl_sql.SQL.FunctionExtract");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 6 :
                    // InternalSQLParser.g:7257:3: ( (lv_func_5_0= ruleOperandFunction ) )
                    {
                    // InternalSQLParser.g:7257:3: ( (lv_func_5_0= ruleOperandFunction ) )
                    // InternalSQLParser.g:7258:4: (lv_func_5_0= ruleOperandFunction )
                    {
                    // InternalSQLParser.g:7258:4: (lv_func_5_0= ruleOperandFunction )
                    // InternalSQLParser.g:7259:5: lv_func_5_0= ruleOperandFunction
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getOperandFragmentAccess().getFuncOperandFunctionParserRuleCall_5_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_func_5_0=ruleOperandFunction();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getOperandFragmentRule());
                      					}
                      					set(
                      						current,
                      						"func",
                      						lv_func_5_0,
                      						"org.xtext.example.mydsl_sql.SQL.OperandFunction");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 7 :
                    // InternalSQLParser.g:7277:3: ( (lv_sqlcase_6_0= ruleSQLCASE ) )
                    {
                    // InternalSQLParser.g:7277:3: ( (lv_sqlcase_6_0= ruleSQLCASE ) )
                    // InternalSQLParser.g:7278:4: (lv_sqlcase_6_0= ruleSQLCASE )
                    {
                    // InternalSQLParser.g:7278:4: (lv_sqlcase_6_0= ruleSQLCASE )
                    // InternalSQLParser.g:7279:5: lv_sqlcase_6_0= ruleSQLCASE
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getOperandFragmentAccess().getSqlcaseSQLCASEParserRuleCall_6_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_sqlcase_6_0=ruleSQLCASE();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getOperandFragmentRule());
                      					}
                      					set(
                      						current,
                      						"sqlcase",
                      						lv_sqlcase_6_0,
                      						"org.xtext.example.mydsl_sql.SQL.SQLCASE");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 8 :
                    // InternalSQLParser.g:7297:3: ( (lv_boolLiteral_7_0= ruleBoolLiteral ) )
                    {
                    // InternalSQLParser.g:7297:3: ( (lv_boolLiteral_7_0= ruleBoolLiteral ) )
                    // InternalSQLParser.g:7298:4: (lv_boolLiteral_7_0= ruleBoolLiteral )
                    {
                    // InternalSQLParser.g:7298:4: (lv_boolLiteral_7_0= ruleBoolLiteral )
                    // InternalSQLParser.g:7299:5: lv_boolLiteral_7_0= ruleBoolLiteral
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getOperandFragmentAccess().getBoolLiteralBoolLiteralParserRuleCall_7_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_boolLiteral_7_0=ruleBoolLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getOperandFragmentRule());
                      					}
                      					set(
                      						current,
                      						"boolLiteral",
                      						lv_boolLiteral_7_0,
                      						"org.xtext.example.mydsl_sql.SQL.BoolLiteral");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOperandFragment"


    // $ANTLR start "entryRuleOperandFunction"
    // InternalSQLParser.g:7320:1: entryRuleOperandFunction returns [EObject current=null] : iv_ruleOperandFunction= ruleOperandFunction EOF ;
    public final EObject entryRuleOperandFunction() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOperandFunction = null;


        try {
            // InternalSQLParser.g:7320:56: (iv_ruleOperandFunction= ruleOperandFunction EOF )
            // InternalSQLParser.g:7321:2: iv_ruleOperandFunction= ruleOperandFunction EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOperandFunctionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOperandFunction=ruleOperandFunction();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOperandFunction; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOperandFunction"


    // $ANTLR start "ruleOperandFunction"
    // InternalSQLParser.g:7327:1: ruleOperandFunction returns [EObject current=null] : ( () ( (lv_fname_1_0= ruleFNAME ) ) ( ( (lv_star_2_0= RULE_STAR ) ) | ( (lv_args_3_0= ruleOpFunctionArg ) ) )? otherlv_4= RightParenthesis ( (lv_fan_5_0= ruleFunctionAnalytical ) )? ) ;
    public final EObject ruleOperandFunction() throws RecognitionException {
        EObject current = null;

        Token lv_star_2_0=null;
        Token otherlv_4=null;
        AntlrDatatypeRuleToken lv_fname_1_0 = null;

        EObject lv_args_3_0 = null;

        EObject lv_fan_5_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:7333:2: ( ( () ( (lv_fname_1_0= ruleFNAME ) ) ( ( (lv_star_2_0= RULE_STAR ) ) | ( (lv_args_3_0= ruleOpFunctionArg ) ) )? otherlv_4= RightParenthesis ( (lv_fan_5_0= ruleFunctionAnalytical ) )? ) )
            // InternalSQLParser.g:7334:2: ( () ( (lv_fname_1_0= ruleFNAME ) ) ( ( (lv_star_2_0= RULE_STAR ) ) | ( (lv_args_3_0= ruleOpFunctionArg ) ) )? otherlv_4= RightParenthesis ( (lv_fan_5_0= ruleFunctionAnalytical ) )? )
            {
            // InternalSQLParser.g:7334:2: ( () ( (lv_fname_1_0= ruleFNAME ) ) ( ( (lv_star_2_0= RULE_STAR ) ) | ( (lv_args_3_0= ruleOpFunctionArg ) ) )? otherlv_4= RightParenthesis ( (lv_fan_5_0= ruleFunctionAnalytical ) )? )
            // InternalSQLParser.g:7335:3: () ( (lv_fname_1_0= ruleFNAME ) ) ( ( (lv_star_2_0= RULE_STAR ) ) | ( (lv_args_3_0= ruleOpFunctionArg ) ) )? otherlv_4= RightParenthesis ( (lv_fan_5_0= ruleFunctionAnalytical ) )?
            {
            // InternalSQLParser.g:7335:3: ()
            // InternalSQLParser.g:7336:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getOperandFunctionAccess().getOpFunctionAction_0(),
              					current);
              			
            }

            }

            // InternalSQLParser.g:7345:3: ( (lv_fname_1_0= ruleFNAME ) )
            // InternalSQLParser.g:7346:4: (lv_fname_1_0= ruleFNAME )
            {
            // InternalSQLParser.g:7346:4: (lv_fname_1_0= ruleFNAME )
            // InternalSQLParser.g:7347:5: lv_fname_1_0= ruleFNAME
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getOperandFunctionAccess().getFnameFNAMEParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_92);
            lv_fname_1_0=ruleFNAME();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getOperandFunctionRule());
              					}
              					set(
              						current,
              						"fname",
              						lv_fname_1_0,
              						"org.xtext.example.mydsl_sql.SQL.FNAME");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:7364:3: ( ( (lv_star_2_0= RULE_STAR ) ) | ( (lv_args_3_0= ruleOpFunctionArg ) ) )?
            int alt126=3;
            int LA126_0 = input.LA(1);

            if ( (LA126_0==RULE_STAR) ) {
                alt126=1;
            }
            else if ( (LA126_0==DISTINCT||LA126_0==EXTRACT||LA126_0==CAST||LA126_0==FALSE||LA126_0==CASE||LA126_0==TRUE||LA126_0==ALL||LA126_0==LeftParenthesis||(LA126_0>=RULE_JRPARAM && LA126_0<=RULE_JRNPARAM)||(LA126_0>=RULE_UNSIGNED && LA126_0<=RULE_SIGNED_DOUBLE)||(LA126_0>=RULE_STRING_ && LA126_0<=RULE_ID)) ) {
                alt126=2;
            }
            switch (alt126) {
                case 1 :
                    // InternalSQLParser.g:7365:4: ( (lv_star_2_0= RULE_STAR ) )
                    {
                    // InternalSQLParser.g:7365:4: ( (lv_star_2_0= RULE_STAR ) )
                    // InternalSQLParser.g:7366:5: (lv_star_2_0= RULE_STAR )
                    {
                    // InternalSQLParser.g:7366:5: (lv_star_2_0= RULE_STAR )
                    // InternalSQLParser.g:7367:6: lv_star_2_0= RULE_STAR
                    {
                    lv_star_2_0=(Token)match(input,RULE_STAR,FOLLOW_9); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_star_2_0, grammarAccess.getOperandFunctionAccess().getStarSTARTerminalRuleCall_2_0_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getOperandFunctionRule());
                      						}
                      						setWithLastConsumed(
                      							current,
                      							"star",
                      							lv_star_2_0,
                      							"org.xtext.example.mydsl_sql.SQL.STAR");
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:7384:4: ( (lv_args_3_0= ruleOpFunctionArg ) )
                    {
                    // InternalSQLParser.g:7384:4: ( (lv_args_3_0= ruleOpFunctionArg ) )
                    // InternalSQLParser.g:7385:5: (lv_args_3_0= ruleOpFunctionArg )
                    {
                    // InternalSQLParser.g:7385:5: (lv_args_3_0= ruleOpFunctionArg )
                    // InternalSQLParser.g:7386:6: lv_args_3_0= ruleOpFunctionArg
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getOperandFunctionAccess().getArgsOpFunctionArgParserRuleCall_2_1_0());
                      					
                    }
                    pushFollow(FOLLOW_9);
                    lv_args_3_0=ruleOpFunctionArg();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getOperandFunctionRule());
                      						}
                      						set(
                      							current,
                      							"args",
                      							lv_args_3_0,
                      							"org.xtext.example.mydsl_sql.SQL.OpFunctionArg");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            otherlv_4=(Token)match(input,RightParenthesis,FOLLOW_93); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getOperandFunctionAccess().getRightParenthesisKeyword_3());
              		
            }
            // InternalSQLParser.g:7408:3: ( (lv_fan_5_0= ruleFunctionAnalytical ) )?
            int alt127=2;
            int LA127_0 = input.LA(1);

            if ( (LA127_0==OVER) ) {
                alt127=1;
            }
            switch (alt127) {
                case 1 :
                    // InternalSQLParser.g:7409:4: (lv_fan_5_0= ruleFunctionAnalytical )
                    {
                    // InternalSQLParser.g:7409:4: (lv_fan_5_0= ruleFunctionAnalytical )
                    // InternalSQLParser.g:7410:5: lv_fan_5_0= ruleFunctionAnalytical
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getOperandFunctionAccess().getFanFunctionAnalyticalParserRuleCall_4_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_fan_5_0=ruleFunctionAnalytical();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getOperandFunctionRule());
                      					}
                      					set(
                      						current,
                      						"fan",
                      						lv_fan_5_0,
                      						"org.xtext.example.mydsl_sql.SQL.FunctionAnalytical");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOperandFunction"


    // $ANTLR start "entryRuleFunctionExtract"
    // InternalSQLParser.g:7431:1: entryRuleFunctionExtract returns [EObject current=null] : iv_ruleFunctionExtract= ruleFunctionExtract EOF ;
    public final EObject entryRuleFunctionExtract() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFunctionExtract = null;


        try {
            // InternalSQLParser.g:7431:56: (iv_ruleFunctionExtract= ruleFunctionExtract EOF )
            // InternalSQLParser.g:7432:2: iv_ruleFunctionExtract= ruleFunctionExtract EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFunctionExtractRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFunctionExtract=ruleFunctionExtract();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFunctionExtract; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFunctionExtract"


    // $ANTLR start "ruleFunctionExtract"
    // InternalSQLParser.g:7438:1: ruleFunctionExtract returns [EObject current=null] : (otherlv_0= EXTRACT otherlv_1= LeftParenthesis ( (lv_v_2_0= ruleEXTRACT_VALUES ) ) otherlv_3= FROM ( (lv_operand_4_0= ruleOperandGroup ) ) otherlv_5= RightParenthesis ) ;
    public final EObject ruleFunctionExtract() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Enumerator lv_v_2_0 = null;

        EObject lv_operand_4_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:7444:2: ( (otherlv_0= EXTRACT otherlv_1= LeftParenthesis ( (lv_v_2_0= ruleEXTRACT_VALUES ) ) otherlv_3= FROM ( (lv_operand_4_0= ruleOperandGroup ) ) otherlv_5= RightParenthesis ) )
            // InternalSQLParser.g:7445:2: (otherlv_0= EXTRACT otherlv_1= LeftParenthesis ( (lv_v_2_0= ruleEXTRACT_VALUES ) ) otherlv_3= FROM ( (lv_operand_4_0= ruleOperandGroup ) ) otherlv_5= RightParenthesis )
            {
            // InternalSQLParser.g:7445:2: (otherlv_0= EXTRACT otherlv_1= LeftParenthesis ( (lv_v_2_0= ruleEXTRACT_VALUES ) ) otherlv_3= FROM ( (lv_operand_4_0= ruleOperandGroup ) ) otherlv_5= RightParenthesis )
            // InternalSQLParser.g:7446:3: otherlv_0= EXTRACT otherlv_1= LeftParenthesis ( (lv_v_2_0= ruleEXTRACT_VALUES ) ) otherlv_3= FROM ( (lv_operand_4_0= ruleOperandGroup ) ) otherlv_5= RightParenthesis
            {
            otherlv_0=(Token)match(input,EXTRACT,FOLLOW_11); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getFunctionExtractAccess().getEXTRACTKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_94); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getFunctionExtractAccess().getLeftParenthesisKeyword_1());
              		
            }
            // InternalSQLParser.g:7454:3: ( (lv_v_2_0= ruleEXTRACT_VALUES ) )
            // InternalSQLParser.g:7455:4: (lv_v_2_0= ruleEXTRACT_VALUES )
            {
            // InternalSQLParser.g:7455:4: (lv_v_2_0= ruleEXTRACT_VALUES )
            // InternalSQLParser.g:7456:5: lv_v_2_0= ruleEXTRACT_VALUES
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getFunctionExtractAccess().getVEXTRACT_VALUESEnumRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_40);
            lv_v_2_0=ruleEXTRACT_VALUES();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getFunctionExtractRule());
              					}
              					set(
              						current,
              						"v",
              						lv_v_2_0,
              						"org.xtext.example.mydsl_sql.SQL.EXTRACT_VALUES");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,FROM,FOLLOW_77); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getFunctionExtractAccess().getFROMKeyword_3());
              		
            }
            // InternalSQLParser.g:7477:3: ( (lv_operand_4_0= ruleOperandGroup ) )
            // InternalSQLParser.g:7478:4: (lv_operand_4_0= ruleOperandGroup )
            {
            // InternalSQLParser.g:7478:4: (lv_operand_4_0= ruleOperandGroup )
            // InternalSQLParser.g:7479:5: lv_operand_4_0= ruleOperandGroup
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getFunctionExtractAccess().getOperandOperandGroupParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_9);
            lv_operand_4_0=ruleOperandGroup();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getFunctionExtractRule());
              					}
              					set(
              						current,
              						"operand",
              						lv_operand_4_0,
              						"org.xtext.example.mydsl_sql.SQL.OperandGroup");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getFunctionExtractAccess().getRightParenthesisKeyword_5());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFunctionExtract"


    // $ANTLR start "entryRuleFunctionAnalytical"
    // InternalSQLParser.g:7504:1: entryRuleFunctionAnalytical returns [EObject current=null] : iv_ruleFunctionAnalytical= ruleFunctionAnalytical EOF ;
    public final EObject entryRuleFunctionAnalytical() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFunctionAnalytical = null;


        try {
            // InternalSQLParser.g:7504:59: (iv_ruleFunctionAnalytical= ruleFunctionAnalytical EOF )
            // InternalSQLParser.g:7505:2: iv_ruleFunctionAnalytical= ruleFunctionAnalytical EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFunctionAnalyticalRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFunctionAnalytical=ruleFunctionAnalytical();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFunctionAnalytical; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFunctionAnalytical"


    // $ANTLR start "ruleFunctionAnalytical"
    // InternalSQLParser.g:7511:1: ruleFunctionAnalytical returns [EObject current=null] : (otherlv_0= OVER otherlv_1= LeftParenthesis ( (lv_anClause_2_0= ruleAnalyticClause ) ) otherlv_3= RightParenthesis ) ;
    public final EObject ruleFunctionAnalytical() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_anClause_2_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:7517:2: ( (otherlv_0= OVER otherlv_1= LeftParenthesis ( (lv_anClause_2_0= ruleAnalyticClause ) ) otherlv_3= RightParenthesis ) )
            // InternalSQLParser.g:7518:2: (otherlv_0= OVER otherlv_1= LeftParenthesis ( (lv_anClause_2_0= ruleAnalyticClause ) ) otherlv_3= RightParenthesis )
            {
            // InternalSQLParser.g:7518:2: (otherlv_0= OVER otherlv_1= LeftParenthesis ( (lv_anClause_2_0= ruleAnalyticClause ) ) otherlv_3= RightParenthesis )
            // InternalSQLParser.g:7519:3: otherlv_0= OVER otherlv_1= LeftParenthesis ( (lv_anClause_2_0= ruleAnalyticClause ) ) otherlv_3= RightParenthesis
            {
            otherlv_0=(Token)match(input,OVER,FOLLOW_11); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getFunctionAnalyticalAccess().getOVERKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_95); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getFunctionAnalyticalAccess().getLeftParenthesisKeyword_1());
              		
            }
            // InternalSQLParser.g:7527:3: ( (lv_anClause_2_0= ruleAnalyticClause ) )
            // InternalSQLParser.g:7528:4: (lv_anClause_2_0= ruleAnalyticClause )
            {
            // InternalSQLParser.g:7528:4: (lv_anClause_2_0= ruleAnalyticClause )
            // InternalSQLParser.g:7529:5: lv_anClause_2_0= ruleAnalyticClause
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getFunctionAnalyticalAccess().getAnClauseAnalyticClauseParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_9);
            lv_anClause_2_0=ruleAnalyticClause();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getFunctionAnalyticalRule());
              					}
              					set(
              						current,
              						"anClause",
              						lv_anClause_2_0,
              						"org.xtext.example.mydsl_sql.SQL.AnalyticClause");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getFunctionAnalyticalAccess().getRightParenthesisKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFunctionAnalytical"


    // $ANTLR start "entryRuleAnalyticClause"
    // InternalSQLParser.g:7554:1: entryRuleAnalyticClause returns [EObject current=null] : iv_ruleAnalyticClause= ruleAnalyticClause EOF ;
    public final EObject entryRuleAnalyticClause() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAnalyticClause = null;


        try {
            // InternalSQLParser.g:7554:55: (iv_ruleAnalyticClause= ruleAnalyticClause EOF )
            // InternalSQLParser.g:7555:2: iv_ruleAnalyticClause= ruleAnalyticClause EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnalyticClauseRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnalyticClause=ruleAnalyticClause();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnalyticClause; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleAnalyticClause"


    // $ANTLR start "ruleAnalyticClause"
    // InternalSQLParser.g:7561:1: ruleAnalyticClause returns [EObject current=null] : ( () ( (lv_abc_1_0= ruleQueryPartitionClause ) )? ( ( (lv_obc_2_0= ruleOrderByClause ) ) ( (lv_winc_3_0= ruleWindowingClause ) )? )? ) ;
    public final EObject ruleAnalyticClause() throws RecognitionException {
        EObject current = null;

        EObject lv_abc_1_0 = null;

        EObject lv_obc_2_0 = null;

        EObject lv_winc_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:7567:2: ( ( () ( (lv_abc_1_0= ruleQueryPartitionClause ) )? ( ( (lv_obc_2_0= ruleOrderByClause ) ) ( (lv_winc_3_0= ruleWindowingClause ) )? )? ) )
            // InternalSQLParser.g:7568:2: ( () ( (lv_abc_1_0= ruleQueryPartitionClause ) )? ( ( (lv_obc_2_0= ruleOrderByClause ) ) ( (lv_winc_3_0= ruleWindowingClause ) )? )? )
            {
            // InternalSQLParser.g:7568:2: ( () ( (lv_abc_1_0= ruleQueryPartitionClause ) )? ( ( (lv_obc_2_0= ruleOrderByClause ) ) ( (lv_winc_3_0= ruleWindowingClause ) )? )? )
            // InternalSQLParser.g:7569:3: () ( (lv_abc_1_0= ruleQueryPartitionClause ) )? ( ( (lv_obc_2_0= ruleOrderByClause ) ) ( (lv_winc_3_0= ruleWindowingClause ) )? )?
            {
            // InternalSQLParser.g:7569:3: ()
            // InternalSQLParser.g:7570:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getAnalyticClauseAccess().getAnalyticClauseAction_0(),
              					current);
              			
            }

            }

            // InternalSQLParser.g:7579:3: ( (lv_abc_1_0= ruleQueryPartitionClause ) )?
            int alt128=2;
            int LA128_0 = input.LA(1);

            if ( (LA128_0==PARTITION) ) {
                alt128=1;
            }
            switch (alt128) {
                case 1 :
                    // InternalSQLParser.g:7580:4: (lv_abc_1_0= ruleQueryPartitionClause )
                    {
                    // InternalSQLParser.g:7580:4: (lv_abc_1_0= ruleQueryPartitionClause )
                    // InternalSQLParser.g:7581:5: lv_abc_1_0= ruleQueryPartitionClause
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getAnalyticClauseAccess().getAbcQueryPartitionClauseParserRuleCall_1_0());
                      				
                    }
                    pushFollow(FOLLOW_96);
                    lv_abc_1_0=ruleQueryPartitionClause();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getAnalyticClauseRule());
                      					}
                      					set(
                      						current,
                      						"abc",
                      						lv_abc_1_0,
                      						"org.xtext.example.mydsl_sql.SQL.QueryPartitionClause");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalSQLParser.g:7598:3: ( ( (lv_obc_2_0= ruleOrderByClause ) ) ( (lv_winc_3_0= ruleWindowingClause ) )? )?
            int alt130=2;
            int LA130_0 = input.LA(1);

            if ( (LA130_0==ORDER) ) {
                alt130=1;
            }
            switch (alt130) {
                case 1 :
                    // InternalSQLParser.g:7599:4: ( (lv_obc_2_0= ruleOrderByClause ) ) ( (lv_winc_3_0= ruleWindowingClause ) )?
                    {
                    // InternalSQLParser.g:7599:4: ( (lv_obc_2_0= ruleOrderByClause ) )
                    // InternalSQLParser.g:7600:5: (lv_obc_2_0= ruleOrderByClause )
                    {
                    // InternalSQLParser.g:7600:5: (lv_obc_2_0= ruleOrderByClause )
                    // InternalSQLParser.g:7601:6: lv_obc_2_0= ruleOrderByClause
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getAnalyticClauseAccess().getObcOrderByClauseParserRuleCall_2_0_0());
                      					
                    }
                    pushFollow(FOLLOW_97);
                    lv_obc_2_0=ruleOrderByClause();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getAnalyticClauseRule());
                      						}
                      						set(
                      							current,
                      							"obc",
                      							lv_obc_2_0,
                      							"org.xtext.example.mydsl_sql.SQL.OrderByClause");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalSQLParser.g:7618:4: ( (lv_winc_3_0= ruleWindowingClause ) )?
                    int alt129=2;
                    int LA129_0 = input.LA(1);

                    if ( (LA129_0==RANGE||LA129_0==ROWS) ) {
                        alt129=1;
                    }
                    switch (alt129) {
                        case 1 :
                            // InternalSQLParser.g:7619:5: (lv_winc_3_0= ruleWindowingClause )
                            {
                            // InternalSQLParser.g:7619:5: (lv_winc_3_0= ruleWindowingClause )
                            // InternalSQLParser.g:7620:6: lv_winc_3_0= ruleWindowingClause
                            {
                            if ( state.backtracking==0 ) {

                              						newCompositeNode(grammarAccess.getAnalyticClauseAccess().getWincWindowingClauseParserRuleCall_2_1_0());
                              					
                            }
                            pushFollow(FOLLOW_2);
                            lv_winc_3_0=ruleWindowingClause();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElementForParent(grammarAccess.getAnalyticClauseRule());
                              						}
                              						set(
                              							current,
                              							"winc",
                              							lv_winc_3_0,
                              							"org.xtext.example.mydsl_sql.SQL.WindowingClause");
                              						afterParserOrEnumRuleCall();
                              					
                            }

                            }


                            }
                            break;

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleAnalyticClause"


    // $ANTLR start "entryRuleWindowingClause"
    // InternalSQLParser.g:7642:1: entryRuleWindowingClause returns [EObject current=null] : iv_ruleWindowingClause= ruleWindowingClause EOF ;
    public final EObject entryRuleWindowingClause() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleWindowingClause = null;


        try {
            // InternalSQLParser.g:7642:56: (iv_ruleWindowingClause= ruleWindowingClause EOF )
            // InternalSQLParser.g:7643:2: iv_ruleWindowingClause= ruleWindowingClause EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getWindowingClauseRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleWindowingClause=ruleWindowingClause();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleWindowingClause; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleWindowingClause"


    // $ANTLR start "ruleWindowingClause"
    // InternalSQLParser.g:7649:1: ruleWindowingClause returns [EObject current=null] : ( (otherlv_0= ROWS | otherlv_1= RANGE ) (this_WindowingClauseBetween_2= ruleWindowingClauseBetween | this_WindowingClauseOperandPreceding_3= ruleWindowingClauseOperandPreceding ) ) ;
    public final EObject ruleWindowingClause() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        EObject this_WindowingClauseBetween_2 = null;

        EObject this_WindowingClauseOperandPreceding_3 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:7655:2: ( ( (otherlv_0= ROWS | otherlv_1= RANGE ) (this_WindowingClauseBetween_2= ruleWindowingClauseBetween | this_WindowingClauseOperandPreceding_3= ruleWindowingClauseOperandPreceding ) ) )
            // InternalSQLParser.g:7656:2: ( (otherlv_0= ROWS | otherlv_1= RANGE ) (this_WindowingClauseBetween_2= ruleWindowingClauseBetween | this_WindowingClauseOperandPreceding_3= ruleWindowingClauseOperandPreceding ) )
            {
            // InternalSQLParser.g:7656:2: ( (otherlv_0= ROWS | otherlv_1= RANGE ) (this_WindowingClauseBetween_2= ruleWindowingClauseBetween | this_WindowingClauseOperandPreceding_3= ruleWindowingClauseOperandPreceding ) )
            // InternalSQLParser.g:7657:3: (otherlv_0= ROWS | otherlv_1= RANGE ) (this_WindowingClauseBetween_2= ruleWindowingClauseBetween | this_WindowingClauseOperandPreceding_3= ruleWindowingClauseOperandPreceding )
            {
            // InternalSQLParser.g:7657:3: (otherlv_0= ROWS | otherlv_1= RANGE )
            int alt131=2;
            int LA131_0 = input.LA(1);

            if ( (LA131_0==ROWS) ) {
                alt131=1;
            }
            else if ( (LA131_0==RANGE) ) {
                alt131=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 131, 0, input);

                throw nvae;
            }
            switch (alt131) {
                case 1 :
                    // InternalSQLParser.g:7658:4: otherlv_0= ROWS
                    {
                    otherlv_0=(Token)match(input,ROWS,FOLLOW_98); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_0, grammarAccess.getWindowingClauseAccess().getROWSKeyword_0_0());
                      			
                    }

                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:7663:4: otherlv_1= RANGE
                    {
                    otherlv_1=(Token)match(input,RANGE,FOLLOW_98); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getWindowingClauseAccess().getRANGEKeyword_0_1());
                      			
                    }

                    }
                    break;

            }

            // InternalSQLParser.g:7668:3: (this_WindowingClauseBetween_2= ruleWindowingClauseBetween | this_WindowingClauseOperandPreceding_3= ruleWindowingClauseOperandPreceding )
            int alt132=2;
            int LA132_0 = input.LA(1);

            if ( (LA132_0==BETWEEN) ) {
                alt132=1;
            }
            else if ( (LA132_0==UNBOUNDED||LA132_0==CURRENT||LA132_0==EXTRACT||LA132_0==CAST||LA132_0==FALSE||LA132_0==CASE||LA132_0==TRUE||LA132_0==LeftParenthesis||(LA132_0>=RULE_JRPARAM && LA132_0<=RULE_JRNPARAM)||(LA132_0>=RULE_UNSIGNED && LA132_0<=RULE_SIGNED_DOUBLE)||(LA132_0>=RULE_STRING_ && LA132_0<=RULE_ID)) ) {
                alt132=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 132, 0, input);

                throw nvae;
            }
            switch (alt132) {
                case 1 :
                    // InternalSQLParser.g:7669:4: this_WindowingClauseBetween_2= ruleWindowingClauseBetween
                    {
                    if ( state.backtracking==0 ) {

                      				/* */
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getWindowingClauseAccess().getWindowingClauseBetweenParserRuleCall_1_0());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_WindowingClauseBetween_2=ruleWindowingClauseBetween();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_WindowingClauseBetween_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:7681:4: this_WindowingClauseOperandPreceding_3= ruleWindowingClauseOperandPreceding
                    {
                    if ( state.backtracking==0 ) {

                      				/* */
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getWindowingClauseAccess().getWindowingClauseOperandPrecedingParserRuleCall_1_1());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_WindowingClauseOperandPreceding_3=ruleWindowingClauseOperandPreceding();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_WindowingClauseOperandPreceding_3;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleWindowingClause"


    // $ANTLR start "entryRuleWindowingClauseBetween"
    // InternalSQLParser.g:7697:1: entryRuleWindowingClauseBetween returns [EObject current=null] : iv_ruleWindowingClauseBetween= ruleWindowingClauseBetween EOF ;
    public final EObject entryRuleWindowingClauseBetween() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleWindowingClauseBetween = null;


        try {
            // InternalSQLParser.g:7697:63: (iv_ruleWindowingClauseBetween= ruleWindowingClauseBetween EOF )
            // InternalSQLParser.g:7698:2: iv_ruleWindowingClauseBetween= ruleWindowingClauseBetween EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getWindowingClauseBetweenRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleWindowingClauseBetween=ruleWindowingClauseBetween();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleWindowingClauseBetween; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleWindowingClauseBetween"


    // $ANTLR start "ruleWindowingClauseBetween"
    // InternalSQLParser.g:7704:1: ruleWindowingClauseBetween returns [EObject current=null] : (otherlv_0= BETWEEN ( (lv_wcoP_1_0= ruleWindowingClauseOperandPreceding ) ) otherlv_2= AND ( (lv_wcoF_3_0= ruleWindowingClauseOperandFollowing ) ) ) ;
    public final EObject ruleWindowingClauseBetween() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_wcoP_1_0 = null;

        EObject lv_wcoF_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:7710:2: ( (otherlv_0= BETWEEN ( (lv_wcoP_1_0= ruleWindowingClauseOperandPreceding ) ) otherlv_2= AND ( (lv_wcoF_3_0= ruleWindowingClauseOperandFollowing ) ) ) )
            // InternalSQLParser.g:7711:2: (otherlv_0= BETWEEN ( (lv_wcoP_1_0= ruleWindowingClauseOperandPreceding ) ) otherlv_2= AND ( (lv_wcoF_3_0= ruleWindowingClauseOperandFollowing ) ) )
            {
            // InternalSQLParser.g:7711:2: (otherlv_0= BETWEEN ( (lv_wcoP_1_0= ruleWindowingClauseOperandPreceding ) ) otherlv_2= AND ( (lv_wcoF_3_0= ruleWindowingClauseOperandFollowing ) ) )
            // InternalSQLParser.g:7712:3: otherlv_0= BETWEEN ( (lv_wcoP_1_0= ruleWindowingClauseOperandPreceding ) ) otherlv_2= AND ( (lv_wcoF_3_0= ruleWindowingClauseOperandFollowing ) )
            {
            otherlv_0=(Token)match(input,BETWEEN,FOLLOW_98); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getWindowingClauseBetweenAccess().getBETWEENKeyword_0());
              		
            }
            // InternalSQLParser.g:7716:3: ( (lv_wcoP_1_0= ruleWindowingClauseOperandPreceding ) )
            // InternalSQLParser.g:7717:4: (lv_wcoP_1_0= ruleWindowingClauseOperandPreceding )
            {
            // InternalSQLParser.g:7717:4: (lv_wcoP_1_0= ruleWindowingClauseOperandPreceding )
            // InternalSQLParser.g:7718:5: lv_wcoP_1_0= ruleWindowingClauseOperandPreceding
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getWindowingClauseBetweenAccess().getWcoPWindowingClauseOperandPrecedingParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_87);
            lv_wcoP_1_0=ruleWindowingClauseOperandPreceding();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getWindowingClauseBetweenRule());
              					}
              					set(
              						current,
              						"wcoP",
              						lv_wcoP_1_0,
              						"org.xtext.example.mydsl_sql.SQL.WindowingClauseOperandPreceding");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_2=(Token)match(input,AND,FOLLOW_98); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getWindowingClauseBetweenAccess().getANDKeyword_2());
              		
            }
            // InternalSQLParser.g:7739:3: ( (lv_wcoF_3_0= ruleWindowingClauseOperandFollowing ) )
            // InternalSQLParser.g:7740:4: (lv_wcoF_3_0= ruleWindowingClauseOperandFollowing )
            {
            // InternalSQLParser.g:7740:4: (lv_wcoF_3_0= ruleWindowingClauseOperandFollowing )
            // InternalSQLParser.g:7741:5: lv_wcoF_3_0= ruleWindowingClauseOperandFollowing
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getWindowingClauseBetweenAccess().getWcoFWindowingClauseOperandFollowingParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_wcoF_3_0=ruleWindowingClauseOperandFollowing();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getWindowingClauseBetweenRule());
              					}
              					set(
              						current,
              						"wcoF",
              						lv_wcoF_3_0,
              						"org.xtext.example.mydsl_sql.SQL.WindowingClauseOperandFollowing");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleWindowingClauseBetween"


    // $ANTLR start "entryRuleWindowingClauseOperandFollowing"
    // InternalSQLParser.g:7762:1: entryRuleWindowingClauseOperandFollowing returns [EObject current=null] : iv_ruleWindowingClauseOperandFollowing= ruleWindowingClauseOperandFollowing EOF ;
    public final EObject entryRuleWindowingClauseOperandFollowing() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleWindowingClauseOperandFollowing = null;


        try {
            // InternalSQLParser.g:7762:72: (iv_ruleWindowingClauseOperandFollowing= ruleWindowingClauseOperandFollowing EOF )
            // InternalSQLParser.g:7763:2: iv_ruleWindowingClauseOperandFollowing= ruleWindowingClauseOperandFollowing EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getWindowingClauseOperandFollowingRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleWindowingClauseOperandFollowing=ruleWindowingClauseOperandFollowing();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleWindowingClauseOperandFollowing; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleWindowingClauseOperandFollowing"


    // $ANTLR start "ruleWindowingClauseOperandFollowing"
    // InternalSQLParser.g:7769:1: ruleWindowingClauseOperandFollowing returns [EObject current=null] : ( () ( (otherlv_1= UNBOUNDED otherlv_2= KW_FOLLOWING ) | (otherlv_3= CURRENT otherlv_4= ROW ) | ( ( (lv_exp_5_0= ruleAnalyticExprArg ) ) (otherlv_6= PRECEDING | otherlv_7= KW_FOLLOWING ) ) ) ) ;
    public final EObject ruleWindowingClauseOperandFollowing() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        Token otherlv_7=null;
        EObject lv_exp_5_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:7775:2: ( ( () ( (otherlv_1= UNBOUNDED otherlv_2= KW_FOLLOWING ) | (otherlv_3= CURRENT otherlv_4= ROW ) | ( ( (lv_exp_5_0= ruleAnalyticExprArg ) ) (otherlv_6= PRECEDING | otherlv_7= KW_FOLLOWING ) ) ) ) )
            // InternalSQLParser.g:7776:2: ( () ( (otherlv_1= UNBOUNDED otherlv_2= KW_FOLLOWING ) | (otherlv_3= CURRENT otherlv_4= ROW ) | ( ( (lv_exp_5_0= ruleAnalyticExprArg ) ) (otherlv_6= PRECEDING | otherlv_7= KW_FOLLOWING ) ) ) )
            {
            // InternalSQLParser.g:7776:2: ( () ( (otherlv_1= UNBOUNDED otherlv_2= KW_FOLLOWING ) | (otherlv_3= CURRENT otherlv_4= ROW ) | ( ( (lv_exp_5_0= ruleAnalyticExprArg ) ) (otherlv_6= PRECEDING | otherlv_7= KW_FOLLOWING ) ) ) )
            // InternalSQLParser.g:7777:3: () ( (otherlv_1= UNBOUNDED otherlv_2= KW_FOLLOWING ) | (otherlv_3= CURRENT otherlv_4= ROW ) | ( ( (lv_exp_5_0= ruleAnalyticExprArg ) ) (otherlv_6= PRECEDING | otherlv_7= KW_FOLLOWING ) ) )
            {
            // InternalSQLParser.g:7777:3: ()
            // InternalSQLParser.g:7778:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getWindowingClauseOperandFollowingAccess().getWindowingClauseOperandFollowingAction_0(),
              					current);
              			
            }

            }

            // InternalSQLParser.g:7787:3: ( (otherlv_1= UNBOUNDED otherlv_2= KW_FOLLOWING ) | (otherlv_3= CURRENT otherlv_4= ROW ) | ( ( (lv_exp_5_0= ruleAnalyticExprArg ) ) (otherlv_6= PRECEDING | otherlv_7= KW_FOLLOWING ) ) )
            int alt134=3;
            switch ( input.LA(1) ) {
            case UNBOUNDED:
                {
                alt134=1;
                }
                break;
            case CURRENT:
                {
                alt134=2;
                }
                break;
            case EXTRACT:
            case CAST:
            case FALSE:
            case CASE:
            case TRUE:
            case LeftParenthesis:
            case RULE_JRPARAM:
            case RULE_JRNPARAM:
            case RULE_UNSIGNED:
            case RULE_INT:
            case RULE_SIGNED_DOUBLE:
            case RULE_STRING_:
            case RULE_STRING:
            case RULE_DBNAME:
            case RULE_ID:
                {
                alt134=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 134, 0, input);

                throw nvae;
            }

            switch (alt134) {
                case 1 :
                    // InternalSQLParser.g:7788:4: (otherlv_1= UNBOUNDED otherlv_2= KW_FOLLOWING )
                    {
                    // InternalSQLParser.g:7788:4: (otherlv_1= UNBOUNDED otherlv_2= KW_FOLLOWING )
                    // InternalSQLParser.g:7789:5: otherlv_1= UNBOUNDED otherlv_2= KW_FOLLOWING
                    {
                    otherlv_1=(Token)match(input,UNBOUNDED,FOLLOW_99); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_1, grammarAccess.getWindowingClauseOperandFollowingAccess().getUNBOUNDEDKeyword_1_0_0());
                      				
                    }
                    otherlv_2=(Token)match(input,KW_FOLLOWING,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_2, grammarAccess.getWindowingClauseOperandFollowingAccess().getFOLLOWINGKeyword_1_0_1());
                      				
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:7799:4: (otherlv_3= CURRENT otherlv_4= ROW )
                    {
                    // InternalSQLParser.g:7799:4: (otherlv_3= CURRENT otherlv_4= ROW )
                    // InternalSQLParser.g:7800:5: otherlv_3= CURRENT otherlv_4= ROW
                    {
                    otherlv_3=(Token)match(input,CURRENT,FOLLOW_100); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_3, grammarAccess.getWindowingClauseOperandFollowingAccess().getCURRENTKeyword_1_1_0());
                      				
                    }
                    otherlv_4=(Token)match(input,ROW,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_4, grammarAccess.getWindowingClauseOperandFollowingAccess().getROWKeyword_1_1_1());
                      				
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:7810:4: ( ( (lv_exp_5_0= ruleAnalyticExprArg ) ) (otherlv_6= PRECEDING | otherlv_7= KW_FOLLOWING ) )
                    {
                    // InternalSQLParser.g:7810:4: ( ( (lv_exp_5_0= ruleAnalyticExprArg ) ) (otherlv_6= PRECEDING | otherlv_7= KW_FOLLOWING ) )
                    // InternalSQLParser.g:7811:5: ( (lv_exp_5_0= ruleAnalyticExprArg ) ) (otherlv_6= PRECEDING | otherlv_7= KW_FOLLOWING )
                    {
                    // InternalSQLParser.g:7811:5: ( (lv_exp_5_0= ruleAnalyticExprArg ) )
                    // InternalSQLParser.g:7812:6: (lv_exp_5_0= ruleAnalyticExprArg )
                    {
                    // InternalSQLParser.g:7812:6: (lv_exp_5_0= ruleAnalyticExprArg )
                    // InternalSQLParser.g:7813:7: lv_exp_5_0= ruleAnalyticExprArg
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getWindowingClauseOperandFollowingAccess().getExpAnalyticExprArgParserRuleCall_1_2_0_0());
                      						
                    }
                    pushFollow(FOLLOW_101);
                    lv_exp_5_0=ruleAnalyticExprArg();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getWindowingClauseOperandFollowingRule());
                      							}
                      							set(
                      								current,
                      								"exp",
                      								lv_exp_5_0,
                      								"org.xtext.example.mydsl_sql.SQL.AnalyticExprArg");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }

                    // InternalSQLParser.g:7830:5: (otherlv_6= PRECEDING | otherlv_7= KW_FOLLOWING )
                    int alt133=2;
                    int LA133_0 = input.LA(1);

                    if ( (LA133_0==PRECEDING) ) {
                        alt133=1;
                    }
                    else if ( (LA133_0==KW_FOLLOWING) ) {
                        alt133=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 133, 0, input);

                        throw nvae;
                    }
                    switch (alt133) {
                        case 1 :
                            // InternalSQLParser.g:7831:6: otherlv_6= PRECEDING
                            {
                            otherlv_6=(Token)match(input,PRECEDING,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(otherlv_6, grammarAccess.getWindowingClauseOperandFollowingAccess().getPRECEDINGKeyword_1_2_1_0());
                              					
                            }

                            }
                            break;
                        case 2 :
                            // InternalSQLParser.g:7836:6: otherlv_7= KW_FOLLOWING
                            {
                            otherlv_7=(Token)match(input,KW_FOLLOWING,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(otherlv_7, grammarAccess.getWindowingClauseOperandFollowingAccess().getFOLLOWINGKeyword_1_2_1_1());
                              					
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleWindowingClauseOperandFollowing"


    // $ANTLR start "entryRuleWindowingClauseOperandPreceding"
    // InternalSQLParser.g:7847:1: entryRuleWindowingClauseOperandPreceding returns [EObject current=null] : iv_ruleWindowingClauseOperandPreceding= ruleWindowingClauseOperandPreceding EOF ;
    public final EObject entryRuleWindowingClauseOperandPreceding() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleWindowingClauseOperandPreceding = null;


        try {
            // InternalSQLParser.g:7847:72: (iv_ruleWindowingClauseOperandPreceding= ruleWindowingClauseOperandPreceding EOF )
            // InternalSQLParser.g:7848:2: iv_ruleWindowingClauseOperandPreceding= ruleWindowingClauseOperandPreceding EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getWindowingClauseOperandPrecedingRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleWindowingClauseOperandPreceding=ruleWindowingClauseOperandPreceding();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleWindowingClauseOperandPreceding; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleWindowingClauseOperandPreceding"


    // $ANTLR start "ruleWindowingClauseOperandPreceding"
    // InternalSQLParser.g:7854:1: ruleWindowingClauseOperandPreceding returns [EObject current=null] : ( () ( (otherlv_1= UNBOUNDED otherlv_2= PRECEDING ) | (otherlv_3= CURRENT otherlv_4= ROW ) | ( ( (lv_expr_5_0= ruleAnalyticExprArg ) ) (otherlv_6= PRECEDING | otherlv_7= KW_FOLLOWING ) ) ) ) ;
    public final EObject ruleWindowingClauseOperandPreceding() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        Token otherlv_7=null;
        EObject lv_expr_5_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:7860:2: ( ( () ( (otherlv_1= UNBOUNDED otherlv_2= PRECEDING ) | (otherlv_3= CURRENT otherlv_4= ROW ) | ( ( (lv_expr_5_0= ruleAnalyticExprArg ) ) (otherlv_6= PRECEDING | otherlv_7= KW_FOLLOWING ) ) ) ) )
            // InternalSQLParser.g:7861:2: ( () ( (otherlv_1= UNBOUNDED otherlv_2= PRECEDING ) | (otherlv_3= CURRENT otherlv_4= ROW ) | ( ( (lv_expr_5_0= ruleAnalyticExprArg ) ) (otherlv_6= PRECEDING | otherlv_7= KW_FOLLOWING ) ) ) )
            {
            // InternalSQLParser.g:7861:2: ( () ( (otherlv_1= UNBOUNDED otherlv_2= PRECEDING ) | (otherlv_3= CURRENT otherlv_4= ROW ) | ( ( (lv_expr_5_0= ruleAnalyticExprArg ) ) (otherlv_6= PRECEDING | otherlv_7= KW_FOLLOWING ) ) ) )
            // InternalSQLParser.g:7862:3: () ( (otherlv_1= UNBOUNDED otherlv_2= PRECEDING ) | (otherlv_3= CURRENT otherlv_4= ROW ) | ( ( (lv_expr_5_0= ruleAnalyticExprArg ) ) (otherlv_6= PRECEDING | otherlv_7= KW_FOLLOWING ) ) )
            {
            // InternalSQLParser.g:7862:3: ()
            // InternalSQLParser.g:7863:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getWindowingClauseOperandPrecedingAccess().getWindowingClauseOperandPrecedingAction_0(),
              					current);
              			
            }

            }

            // InternalSQLParser.g:7872:3: ( (otherlv_1= UNBOUNDED otherlv_2= PRECEDING ) | (otherlv_3= CURRENT otherlv_4= ROW ) | ( ( (lv_expr_5_0= ruleAnalyticExprArg ) ) (otherlv_6= PRECEDING | otherlv_7= KW_FOLLOWING ) ) )
            int alt136=3;
            switch ( input.LA(1) ) {
            case UNBOUNDED:
                {
                alt136=1;
                }
                break;
            case CURRENT:
                {
                alt136=2;
                }
                break;
            case EXTRACT:
            case CAST:
            case FALSE:
            case CASE:
            case TRUE:
            case LeftParenthesis:
            case RULE_JRPARAM:
            case RULE_JRNPARAM:
            case RULE_UNSIGNED:
            case RULE_INT:
            case RULE_SIGNED_DOUBLE:
            case RULE_STRING_:
            case RULE_STRING:
            case RULE_DBNAME:
            case RULE_ID:
                {
                alt136=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 136, 0, input);

                throw nvae;
            }

            switch (alt136) {
                case 1 :
                    // InternalSQLParser.g:7873:4: (otherlv_1= UNBOUNDED otherlv_2= PRECEDING )
                    {
                    // InternalSQLParser.g:7873:4: (otherlv_1= UNBOUNDED otherlv_2= PRECEDING )
                    // InternalSQLParser.g:7874:5: otherlv_1= UNBOUNDED otherlv_2= PRECEDING
                    {
                    otherlv_1=(Token)match(input,UNBOUNDED,FOLLOW_102); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_1, grammarAccess.getWindowingClauseOperandPrecedingAccess().getUNBOUNDEDKeyword_1_0_0());
                      				
                    }
                    otherlv_2=(Token)match(input,PRECEDING,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_2, grammarAccess.getWindowingClauseOperandPrecedingAccess().getPRECEDINGKeyword_1_0_1());
                      				
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:7884:4: (otherlv_3= CURRENT otherlv_4= ROW )
                    {
                    // InternalSQLParser.g:7884:4: (otherlv_3= CURRENT otherlv_4= ROW )
                    // InternalSQLParser.g:7885:5: otherlv_3= CURRENT otherlv_4= ROW
                    {
                    otherlv_3=(Token)match(input,CURRENT,FOLLOW_100); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_3, grammarAccess.getWindowingClauseOperandPrecedingAccess().getCURRENTKeyword_1_1_0());
                      				
                    }
                    otherlv_4=(Token)match(input,ROW,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_4, grammarAccess.getWindowingClauseOperandPrecedingAccess().getROWKeyword_1_1_1());
                      				
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:7895:4: ( ( (lv_expr_5_0= ruleAnalyticExprArg ) ) (otherlv_6= PRECEDING | otherlv_7= KW_FOLLOWING ) )
                    {
                    // InternalSQLParser.g:7895:4: ( ( (lv_expr_5_0= ruleAnalyticExprArg ) ) (otherlv_6= PRECEDING | otherlv_7= KW_FOLLOWING ) )
                    // InternalSQLParser.g:7896:5: ( (lv_expr_5_0= ruleAnalyticExprArg ) ) (otherlv_6= PRECEDING | otherlv_7= KW_FOLLOWING )
                    {
                    // InternalSQLParser.g:7896:5: ( (lv_expr_5_0= ruleAnalyticExprArg ) )
                    // InternalSQLParser.g:7897:6: (lv_expr_5_0= ruleAnalyticExprArg )
                    {
                    // InternalSQLParser.g:7897:6: (lv_expr_5_0= ruleAnalyticExprArg )
                    // InternalSQLParser.g:7898:7: lv_expr_5_0= ruleAnalyticExprArg
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getWindowingClauseOperandPrecedingAccess().getExprAnalyticExprArgParserRuleCall_1_2_0_0());
                      						
                    }
                    pushFollow(FOLLOW_101);
                    lv_expr_5_0=ruleAnalyticExprArg();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getWindowingClauseOperandPrecedingRule());
                      							}
                      							set(
                      								current,
                      								"expr",
                      								lv_expr_5_0,
                      								"org.xtext.example.mydsl_sql.SQL.AnalyticExprArg");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }

                    // InternalSQLParser.g:7915:5: (otherlv_6= PRECEDING | otherlv_7= KW_FOLLOWING )
                    int alt135=2;
                    int LA135_0 = input.LA(1);

                    if ( (LA135_0==PRECEDING) ) {
                        alt135=1;
                    }
                    else if ( (LA135_0==KW_FOLLOWING) ) {
                        alt135=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 135, 0, input);

                        throw nvae;
                    }
                    switch (alt135) {
                        case 1 :
                            // InternalSQLParser.g:7916:6: otherlv_6= PRECEDING
                            {
                            otherlv_6=(Token)match(input,PRECEDING,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(otherlv_6, grammarAccess.getWindowingClauseOperandPrecedingAccess().getPRECEDINGKeyword_1_2_1_0());
                              					
                            }

                            }
                            break;
                        case 2 :
                            // InternalSQLParser.g:7921:6: otherlv_7= KW_FOLLOWING
                            {
                            otherlv_7=(Token)match(input,KW_FOLLOWING,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(otherlv_7, grammarAccess.getWindowingClauseOperandPrecedingAccess().getFOLLOWINGKeyword_1_2_1_1());
                              					
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleWindowingClauseOperandPreceding"


    // $ANTLR start "entryRuleOrderByClause"
    // InternalSQLParser.g:7932:1: entryRuleOrderByClause returns [EObject current=null] : iv_ruleOrderByClause= ruleOrderByClause EOF ;
    public final EObject entryRuleOrderByClause() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOrderByClause = null;


        try {
            // InternalSQLParser.g:7932:54: (iv_ruleOrderByClause= ruleOrderByClause EOF )
            // InternalSQLParser.g:7933:2: iv_ruleOrderByClause= ruleOrderByClause EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOrderByClauseRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOrderByClause=ruleOrderByClause();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOrderByClause; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOrderByClause"


    // $ANTLR start "ruleOrderByClause"
    // InternalSQLParser.g:7939:1: ruleOrderByClause returns [EObject current=null] : ( ( (otherlv_0= ORDER otherlv_1= BY ) | (otherlv_2= ORDER otherlv_3= SIBLINGS otherlv_4= BY ) ) ( (lv_args_5_0= ruleOrderByClauseArgs ) ) ) ;
    public final EObject ruleOrderByClause() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        EObject lv_args_5_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:7945:2: ( ( ( (otherlv_0= ORDER otherlv_1= BY ) | (otherlv_2= ORDER otherlv_3= SIBLINGS otherlv_4= BY ) ) ( (lv_args_5_0= ruleOrderByClauseArgs ) ) ) )
            // InternalSQLParser.g:7946:2: ( ( (otherlv_0= ORDER otherlv_1= BY ) | (otherlv_2= ORDER otherlv_3= SIBLINGS otherlv_4= BY ) ) ( (lv_args_5_0= ruleOrderByClauseArgs ) ) )
            {
            // InternalSQLParser.g:7946:2: ( ( (otherlv_0= ORDER otherlv_1= BY ) | (otherlv_2= ORDER otherlv_3= SIBLINGS otherlv_4= BY ) ) ( (lv_args_5_0= ruleOrderByClauseArgs ) ) )
            // InternalSQLParser.g:7947:3: ( (otherlv_0= ORDER otherlv_1= BY ) | (otherlv_2= ORDER otherlv_3= SIBLINGS otherlv_4= BY ) ) ( (lv_args_5_0= ruleOrderByClauseArgs ) )
            {
            // InternalSQLParser.g:7947:3: ( (otherlv_0= ORDER otherlv_1= BY ) | (otherlv_2= ORDER otherlv_3= SIBLINGS otherlv_4= BY ) )
            int alt137=2;
            int LA137_0 = input.LA(1);

            if ( (LA137_0==ORDER) ) {
                int LA137_1 = input.LA(2);

                if ( (LA137_1==BY) ) {
                    alt137=1;
                }
                else if ( (LA137_1==SIBLINGS) ) {
                    alt137=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 137, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 137, 0, input);

                throw nvae;
            }
            switch (alt137) {
                case 1 :
                    // InternalSQLParser.g:7948:4: (otherlv_0= ORDER otherlv_1= BY )
                    {
                    // InternalSQLParser.g:7948:4: (otherlv_0= ORDER otherlv_1= BY )
                    // InternalSQLParser.g:7949:5: otherlv_0= ORDER otherlv_1= BY
                    {
                    otherlv_0=(Token)match(input,ORDER,FOLLOW_44); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_0, grammarAccess.getOrderByClauseAccess().getORDERKeyword_0_0_0());
                      				
                    }
                    otherlv_1=(Token)match(input,BY,FOLLOW_98); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_1, grammarAccess.getOrderByClauseAccess().getBYKeyword_0_0_1());
                      				
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:7959:4: (otherlv_2= ORDER otherlv_3= SIBLINGS otherlv_4= BY )
                    {
                    // InternalSQLParser.g:7959:4: (otherlv_2= ORDER otherlv_3= SIBLINGS otherlv_4= BY )
                    // InternalSQLParser.g:7960:5: otherlv_2= ORDER otherlv_3= SIBLINGS otherlv_4= BY
                    {
                    otherlv_2=(Token)match(input,ORDER,FOLLOW_103); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_2, grammarAccess.getOrderByClauseAccess().getORDERKeyword_0_1_0());
                      				
                    }
                    otherlv_3=(Token)match(input,SIBLINGS,FOLLOW_44); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_3, grammarAccess.getOrderByClauseAccess().getSIBLINGSKeyword_0_1_1());
                      				
                    }
                    otherlv_4=(Token)match(input,BY,FOLLOW_98); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_4, grammarAccess.getOrderByClauseAccess().getBYKeyword_0_1_2());
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalSQLParser.g:7974:3: ( (lv_args_5_0= ruleOrderByClauseArgs ) )
            // InternalSQLParser.g:7975:4: (lv_args_5_0= ruleOrderByClauseArgs )
            {
            // InternalSQLParser.g:7975:4: (lv_args_5_0= ruleOrderByClauseArgs )
            // InternalSQLParser.g:7976:5: lv_args_5_0= ruleOrderByClauseArgs
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getOrderByClauseAccess().getArgsOrderByClauseArgsParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_args_5_0=ruleOrderByClauseArgs();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getOrderByClauseRule());
              					}
              					set(
              						current,
              						"args",
              						lv_args_5_0,
              						"org.xtext.example.mydsl_sql.SQL.OrderByClauseArgs");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOrderByClause"


    // $ANTLR start "entryRuleOrderByClauseArgs"
    // InternalSQLParser.g:7997:1: entryRuleOrderByClauseArgs returns [EObject current=null] : iv_ruleOrderByClauseArgs= ruleOrderByClauseArgs EOF ;
    public final EObject entryRuleOrderByClauseArgs() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOrderByClauseArgs = null;


        try {
            // InternalSQLParser.g:7997:58: (iv_ruleOrderByClauseArgs= ruleOrderByClauseArgs EOF )
            // InternalSQLParser.g:7998:2: iv_ruleOrderByClauseArgs= ruleOrderByClauseArgs EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOrderByClauseArgsRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOrderByClauseArgs=ruleOrderByClauseArgs();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOrderByClauseArgs; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOrderByClauseArgs"


    // $ANTLR start "ruleOrderByClauseArgs"
    // InternalSQLParser.g:8004:1: ruleOrderByClauseArgs returns [EObject current=null] : (this_OrderByClauseArg_0= ruleOrderByClauseArg ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleOrderByClauseArg ) ) )+ )? ) ;
    public final EObject ruleOrderByClauseArgs() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_OrderByClauseArg_0 = null;

        EObject lv_entries_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:8010:2: ( (this_OrderByClauseArg_0= ruleOrderByClauseArg ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleOrderByClauseArg ) ) )+ )? ) )
            // InternalSQLParser.g:8011:2: (this_OrderByClauseArg_0= ruleOrderByClauseArg ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleOrderByClauseArg ) ) )+ )? )
            {
            // InternalSQLParser.g:8011:2: (this_OrderByClauseArg_0= ruleOrderByClauseArg ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleOrderByClauseArg ) ) )+ )? )
            // InternalSQLParser.g:8012:3: this_OrderByClauseArg_0= ruleOrderByClauseArg ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleOrderByClauseArg ) ) )+ )?
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getOrderByClauseArgsAccess().getOrderByClauseArgParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_12);
            this_OrderByClauseArg_0=ruleOrderByClauseArg();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_OrderByClauseArg_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:8023:3: ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleOrderByClauseArg ) ) )+ )?
            int alt139=2;
            int LA139_0 = input.LA(1);

            if ( (LA139_0==Comma) ) {
                alt139=1;
            }
            switch (alt139) {
                case 1 :
                    // InternalSQLParser.g:8024:4: () (otherlv_2= Comma ( (lv_entries_3_0= ruleOrderByClauseArg ) ) )+
                    {
                    // InternalSQLParser.g:8024:4: ()
                    // InternalSQLParser.g:8025:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getOrderByClauseArgsAccess().getOBCArgsEntriesAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalSQLParser.g:8034:4: (otherlv_2= Comma ( (lv_entries_3_0= ruleOrderByClauseArg ) ) )+
                    int cnt138=0;
                    loop138:
                    do {
                        int alt138=2;
                        int LA138_0 = input.LA(1);

                        if ( (LA138_0==Comma) ) {
                            alt138=1;
                        }


                        switch (alt138) {
                    	case 1 :
                    	    // InternalSQLParser.g:8035:5: otherlv_2= Comma ( (lv_entries_3_0= ruleOrderByClauseArg ) )
                    	    {
                    	    otherlv_2=(Token)match(input,Comma,FOLLOW_98); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_2, grammarAccess.getOrderByClauseArgsAccess().getCommaKeyword_1_1_0());
                    	      				
                    	    }
                    	    // InternalSQLParser.g:8039:5: ( (lv_entries_3_0= ruleOrderByClauseArg ) )
                    	    // InternalSQLParser.g:8040:6: (lv_entries_3_0= ruleOrderByClauseArg )
                    	    {
                    	    // InternalSQLParser.g:8040:6: (lv_entries_3_0= ruleOrderByClauseArg )
                    	    // InternalSQLParser.g:8041:7: lv_entries_3_0= ruleOrderByClauseArg
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getOrderByClauseArgsAccess().getEntriesOrderByClauseArgParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_12);
                    	    lv_entries_3_0=ruleOrderByClauseArg();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getOrderByClauseArgsRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"entries",
                    	      								lv_entries_3_0,
                    	      								"org.xtext.example.mydsl_sql.SQL.OrderByClauseArg");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt138 >= 1 ) break loop138;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(138, input);
                                throw eee;
                        }
                        cnt138++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOrderByClauseArgs"


    // $ANTLR start "entryRuleOrderByClauseArg"
    // InternalSQLParser.g:8064:1: entryRuleOrderByClauseArg returns [EObject current=null] : iv_ruleOrderByClauseArg= ruleOrderByClauseArg EOF ;
    public final EObject entryRuleOrderByClauseArg() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOrderByClauseArg = null;


        try {
            // InternalSQLParser.g:8064:57: (iv_ruleOrderByClauseArg= ruleOrderByClauseArg EOF )
            // InternalSQLParser.g:8065:2: iv_ruleOrderByClauseArg= ruleOrderByClauseArg EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOrderByClauseArgRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOrderByClauseArg=ruleOrderByClauseArg();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOrderByClauseArg; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOrderByClauseArg"


    // $ANTLR start "ruleOrderByClauseArg"
    // InternalSQLParser.g:8071:1: ruleOrderByClauseArg returns [EObject current=null] : ( ( (lv_col_0_0= ruleAnalyticExprArg ) ) (otherlv_1= ASC | otherlv_2= DESC )? (otherlv_3= NULLS (otherlv_4= FIRST | otherlv_5= LAST ) )? ) ;
    public final EObject ruleOrderByClauseArg() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        Token otherlv_5=null;
        EObject lv_col_0_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:8077:2: ( ( ( (lv_col_0_0= ruleAnalyticExprArg ) ) (otherlv_1= ASC | otherlv_2= DESC )? (otherlv_3= NULLS (otherlv_4= FIRST | otherlv_5= LAST ) )? ) )
            // InternalSQLParser.g:8078:2: ( ( (lv_col_0_0= ruleAnalyticExprArg ) ) (otherlv_1= ASC | otherlv_2= DESC )? (otherlv_3= NULLS (otherlv_4= FIRST | otherlv_5= LAST ) )? )
            {
            // InternalSQLParser.g:8078:2: ( ( (lv_col_0_0= ruleAnalyticExprArg ) ) (otherlv_1= ASC | otherlv_2= DESC )? (otherlv_3= NULLS (otherlv_4= FIRST | otherlv_5= LAST ) )? )
            // InternalSQLParser.g:8079:3: ( (lv_col_0_0= ruleAnalyticExprArg ) ) (otherlv_1= ASC | otherlv_2= DESC )? (otherlv_3= NULLS (otherlv_4= FIRST | otherlv_5= LAST ) )?
            {
            // InternalSQLParser.g:8079:3: ( (lv_col_0_0= ruleAnalyticExprArg ) )
            // InternalSQLParser.g:8080:4: (lv_col_0_0= ruleAnalyticExprArg )
            {
            // InternalSQLParser.g:8080:4: (lv_col_0_0= ruleAnalyticExprArg )
            // InternalSQLParser.g:8081:5: lv_col_0_0= ruleAnalyticExprArg
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getOrderByClauseArgAccess().getColAnalyticExprArgParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_104);
            lv_col_0_0=ruleAnalyticExprArg();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getOrderByClauseArgRule());
              					}
              					set(
              						current,
              						"col",
              						lv_col_0_0,
              						"org.xtext.example.mydsl_sql.SQL.AnalyticExprArg");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:8098:3: (otherlv_1= ASC | otherlv_2= DESC )?
            int alt140=3;
            int LA140_0 = input.LA(1);

            if ( (LA140_0==ASC) ) {
                alt140=1;
            }
            else if ( (LA140_0==DESC) ) {
                alt140=2;
            }
            switch (alt140) {
                case 1 :
                    // InternalSQLParser.g:8099:4: otherlv_1= ASC
                    {
                    otherlv_1=(Token)match(input,ASC,FOLLOW_105); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getOrderByClauseArgAccess().getASCKeyword_1_0());
                      			
                    }

                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:8104:4: otherlv_2= DESC
                    {
                    otherlv_2=(Token)match(input,DESC,FOLLOW_105); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getOrderByClauseArgAccess().getDESCKeyword_1_1());
                      			
                    }

                    }
                    break;

            }

            // InternalSQLParser.g:8109:3: (otherlv_3= NULLS (otherlv_4= FIRST | otherlv_5= LAST ) )?
            int alt142=2;
            int LA142_0 = input.LA(1);

            if ( (LA142_0==NULLS) ) {
                alt142=1;
            }
            switch (alt142) {
                case 1 :
                    // InternalSQLParser.g:8110:4: otherlv_3= NULLS (otherlv_4= FIRST | otherlv_5= LAST )
                    {
                    otherlv_3=(Token)match(input,NULLS,FOLLOW_106); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_3, grammarAccess.getOrderByClauseArgAccess().getNULLSKeyword_2_0());
                      			
                    }
                    // InternalSQLParser.g:8114:4: (otherlv_4= FIRST | otherlv_5= LAST )
                    int alt141=2;
                    int LA141_0 = input.LA(1);

                    if ( (LA141_0==FIRST) ) {
                        alt141=1;
                    }
                    else if ( (LA141_0==LAST) ) {
                        alt141=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 141, 0, input);

                        throw nvae;
                    }
                    switch (alt141) {
                        case 1 :
                            // InternalSQLParser.g:8115:5: otherlv_4= FIRST
                            {
                            otherlv_4=(Token)match(input,FIRST,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(otherlv_4, grammarAccess.getOrderByClauseArgAccess().getFIRSTKeyword_2_1_0());
                              				
                            }

                            }
                            break;
                        case 2 :
                            // InternalSQLParser.g:8120:5: otherlv_5= LAST
                            {
                            otherlv_5=(Token)match(input,LAST,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(otherlv_5, grammarAccess.getOrderByClauseArgAccess().getLASTKeyword_2_1_1());
                              				
                            }

                            }
                            break;

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOrderByClauseArg"


    // $ANTLR start "entryRuleQueryPartitionClause"
    // InternalSQLParser.g:8130:1: entryRuleQueryPartitionClause returns [EObject current=null] : iv_ruleQueryPartitionClause= ruleQueryPartitionClause EOF ;
    public final EObject entryRuleQueryPartitionClause() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleQueryPartitionClause = null;


        try {
            // InternalSQLParser.g:8130:61: (iv_ruleQueryPartitionClause= ruleQueryPartitionClause EOF )
            // InternalSQLParser.g:8131:2: iv_ruleQueryPartitionClause= ruleQueryPartitionClause EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getQueryPartitionClauseRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleQueryPartitionClause=ruleQueryPartitionClause();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleQueryPartitionClause; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleQueryPartitionClause"


    // $ANTLR start "ruleQueryPartitionClause"
    // InternalSQLParser.g:8137:1: ruleQueryPartitionClause returns [EObject current=null] : (otherlv_0= PARTITION otherlv_1= BY ( ( (lv_args_2_0= ruleAnalyticExprArgs ) ) | (otherlv_3= LeftParenthesis this_AnalyticExprArgs_4= ruleAnalyticExprArgs otherlv_5= RightParenthesis ) ) ) ;
    public final EObject ruleQueryPartitionClause() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_args_2_0 = null;

        EObject this_AnalyticExprArgs_4 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:8143:2: ( (otherlv_0= PARTITION otherlv_1= BY ( ( (lv_args_2_0= ruleAnalyticExprArgs ) ) | (otherlv_3= LeftParenthesis this_AnalyticExprArgs_4= ruleAnalyticExprArgs otherlv_5= RightParenthesis ) ) ) )
            // InternalSQLParser.g:8144:2: (otherlv_0= PARTITION otherlv_1= BY ( ( (lv_args_2_0= ruleAnalyticExprArgs ) ) | (otherlv_3= LeftParenthesis this_AnalyticExprArgs_4= ruleAnalyticExprArgs otherlv_5= RightParenthesis ) ) )
            {
            // InternalSQLParser.g:8144:2: (otherlv_0= PARTITION otherlv_1= BY ( ( (lv_args_2_0= ruleAnalyticExprArgs ) ) | (otherlv_3= LeftParenthesis this_AnalyticExprArgs_4= ruleAnalyticExprArgs otherlv_5= RightParenthesis ) ) )
            // InternalSQLParser.g:8145:3: otherlv_0= PARTITION otherlv_1= BY ( ( (lv_args_2_0= ruleAnalyticExprArgs ) ) | (otherlv_3= LeftParenthesis this_AnalyticExprArgs_4= ruleAnalyticExprArgs otherlv_5= RightParenthesis ) )
            {
            otherlv_0=(Token)match(input,PARTITION,FOLLOW_44); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getQueryPartitionClauseAccess().getPARTITIONKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,BY,FOLLOW_98); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getQueryPartitionClauseAccess().getBYKeyword_1());
              		
            }
            // InternalSQLParser.g:8153:3: ( ( (lv_args_2_0= ruleAnalyticExprArgs ) ) | (otherlv_3= LeftParenthesis this_AnalyticExprArgs_4= ruleAnalyticExprArgs otherlv_5= RightParenthesis ) )
            int alt143=2;
            int LA143_0 = input.LA(1);

            if ( (LA143_0==EXTRACT||LA143_0==CAST||LA143_0==FALSE||LA143_0==CASE||LA143_0==TRUE||(LA143_0>=RULE_JRPARAM && LA143_0<=RULE_JRNPARAM)||(LA143_0>=RULE_UNSIGNED && LA143_0<=RULE_SIGNED_DOUBLE)||(LA143_0>=RULE_STRING_ && LA143_0<=RULE_ID)) ) {
                alt143=1;
            }
            else if ( (LA143_0==LeftParenthesis) ) {
                int LA143_2 = input.LA(2);

                if ( (LA143_2==SELECT) ) {
                    alt143=1;
                }
                else if ( (LA143_2==EXTRACT||LA143_2==CAST||LA143_2==FALSE||LA143_2==CASE||LA143_2==TRUE||LA143_2==LeftParenthesis||(LA143_2>=RULE_JRPARAM && LA143_2<=RULE_JRNPARAM)||(LA143_2>=RULE_UNSIGNED && LA143_2<=RULE_SIGNED_DOUBLE)||(LA143_2>=RULE_STRING_ && LA143_2<=RULE_ID)) ) {
                    alt143=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 143, 2, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 143, 0, input);

                throw nvae;
            }
            switch (alt143) {
                case 1 :
                    // InternalSQLParser.g:8154:4: ( (lv_args_2_0= ruleAnalyticExprArgs ) )
                    {
                    // InternalSQLParser.g:8154:4: ( (lv_args_2_0= ruleAnalyticExprArgs ) )
                    // InternalSQLParser.g:8155:5: (lv_args_2_0= ruleAnalyticExprArgs )
                    {
                    // InternalSQLParser.g:8155:5: (lv_args_2_0= ruleAnalyticExprArgs )
                    // InternalSQLParser.g:8156:6: lv_args_2_0= ruleAnalyticExprArgs
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getQueryPartitionClauseAccess().getArgsAnalyticExprArgsParserRuleCall_2_0_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_args_2_0=ruleAnalyticExprArgs();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getQueryPartitionClauseRule());
                      						}
                      						set(
                      							current,
                      							"args",
                      							lv_args_2_0,
                      							"org.xtext.example.mydsl_sql.SQL.AnalyticExprArgs");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:8174:4: (otherlv_3= LeftParenthesis this_AnalyticExprArgs_4= ruleAnalyticExprArgs otherlv_5= RightParenthesis )
                    {
                    // InternalSQLParser.g:8174:4: (otherlv_3= LeftParenthesis this_AnalyticExprArgs_4= ruleAnalyticExprArgs otherlv_5= RightParenthesis )
                    // InternalSQLParser.g:8175:5: otherlv_3= LeftParenthesis this_AnalyticExprArgs_4= ruleAnalyticExprArgs otherlv_5= RightParenthesis
                    {
                    otherlv_3=(Token)match(input,LeftParenthesis,FOLLOW_98); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_3, grammarAccess.getQueryPartitionClauseAccess().getLeftParenthesisKeyword_2_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getQueryPartitionClauseAccess().getAnalyticExprArgsParserRuleCall_2_1_1());
                      				
                    }
                    pushFollow(FOLLOW_9);
                    this_AnalyticExprArgs_4=ruleAnalyticExprArgs();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_AnalyticExprArgs_4;
                      					afterParserOrEnumRuleCall();
                      				
                    }
                    otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_5, grammarAccess.getQueryPartitionClauseAccess().getRightParenthesisKeyword_2_1_2());
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleQueryPartitionClause"


    // $ANTLR start "entryRuleAnalyticExprArgs"
    // InternalSQLParser.g:8200:1: entryRuleAnalyticExprArgs returns [EObject current=null] : iv_ruleAnalyticExprArgs= ruleAnalyticExprArgs EOF ;
    public final EObject entryRuleAnalyticExprArgs() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAnalyticExprArgs = null;


        try {
            // InternalSQLParser.g:8200:57: (iv_ruleAnalyticExprArgs= ruleAnalyticExprArgs EOF )
            // InternalSQLParser.g:8201:2: iv_ruleAnalyticExprArgs= ruleAnalyticExprArgs EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnalyticExprArgsRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnalyticExprArgs=ruleAnalyticExprArgs();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnalyticExprArgs; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleAnalyticExprArgs"


    // $ANTLR start "ruleAnalyticExprArgs"
    // InternalSQLParser.g:8207:1: ruleAnalyticExprArgs returns [EObject current=null] : (this_AnalyticExprArg_0= ruleAnalyticExprArg ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleAnalyticExprArg ) ) )+ )? ) ;
    public final EObject ruleAnalyticExprArgs() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_AnalyticExprArg_0 = null;

        EObject lv_entries_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:8213:2: ( (this_AnalyticExprArg_0= ruleAnalyticExprArg ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleAnalyticExprArg ) ) )+ )? ) )
            // InternalSQLParser.g:8214:2: (this_AnalyticExprArg_0= ruleAnalyticExprArg ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleAnalyticExprArg ) ) )+ )? )
            {
            // InternalSQLParser.g:8214:2: (this_AnalyticExprArg_0= ruleAnalyticExprArg ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleAnalyticExprArg ) ) )+ )? )
            // InternalSQLParser.g:8215:3: this_AnalyticExprArg_0= ruleAnalyticExprArg ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleAnalyticExprArg ) ) )+ )?
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getAnalyticExprArgsAccess().getAnalyticExprArgParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_12);
            this_AnalyticExprArg_0=ruleAnalyticExprArg();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_AnalyticExprArg_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:8226:3: ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleAnalyticExprArg ) ) )+ )?
            int alt145=2;
            int LA145_0 = input.LA(1);

            if ( (LA145_0==Comma) ) {
                alt145=1;
            }
            switch (alt145) {
                case 1 :
                    // InternalSQLParser.g:8227:4: () (otherlv_2= Comma ( (lv_entries_3_0= ruleAnalyticExprArg ) ) )+
                    {
                    // InternalSQLParser.g:8227:4: ()
                    // InternalSQLParser.g:8228:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getAnalyticExprArgsAccess().getAExpArgsEntriesAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalSQLParser.g:8237:4: (otherlv_2= Comma ( (lv_entries_3_0= ruleAnalyticExprArg ) ) )+
                    int cnt144=0;
                    loop144:
                    do {
                        int alt144=2;
                        int LA144_0 = input.LA(1);

                        if ( (LA144_0==Comma) ) {
                            alt144=1;
                        }


                        switch (alt144) {
                    	case 1 :
                    	    // InternalSQLParser.g:8238:5: otherlv_2= Comma ( (lv_entries_3_0= ruleAnalyticExprArg ) )
                    	    {
                    	    otherlv_2=(Token)match(input,Comma,FOLLOW_98); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_2, grammarAccess.getAnalyticExprArgsAccess().getCommaKeyword_1_1_0());
                    	      				
                    	    }
                    	    // InternalSQLParser.g:8242:5: ( (lv_entries_3_0= ruleAnalyticExprArg ) )
                    	    // InternalSQLParser.g:8243:6: (lv_entries_3_0= ruleAnalyticExprArg )
                    	    {
                    	    // InternalSQLParser.g:8243:6: (lv_entries_3_0= ruleAnalyticExprArg )
                    	    // InternalSQLParser.g:8244:7: lv_entries_3_0= ruleAnalyticExprArg
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getAnalyticExprArgsAccess().getEntriesAnalyticExprArgParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_12);
                    	    lv_entries_3_0=ruleAnalyticExprArg();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getAnalyticExprArgsRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"entries",
                    	      								lv_entries_3_0,
                    	      								"org.xtext.example.mydsl_sql.SQL.AnalyticExprArg");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt144 >= 1 ) break loop144;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(144, input);
                                throw eee;
                        }
                        cnt144++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleAnalyticExprArgs"


    // $ANTLR start "entryRuleAnalyticExprArg"
    // InternalSQLParser.g:8267:1: entryRuleAnalyticExprArg returns [EObject current=null] : iv_ruleAnalyticExprArg= ruleAnalyticExprArg EOF ;
    public final EObject entryRuleAnalyticExprArg() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAnalyticExprArg = null;


        try {
            // InternalSQLParser.g:8267:56: (iv_ruleAnalyticExprArg= ruleAnalyticExprArg EOF )
            // InternalSQLParser.g:8268:2: iv_ruleAnalyticExprArg= ruleAnalyticExprArg EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnalyticExprArgRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnalyticExprArg=ruleAnalyticExprArg();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnalyticExprArg; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleAnalyticExprArg"


    // $ANTLR start "ruleAnalyticExprArg"
    // InternalSQLParser.g:8274:1: ruleAnalyticExprArg returns [EObject current=null] : ( ( (lv_ce_0_0= ruleOperand ) ) ( (lv_colAlias_1_0= ruleDbObjectName ) )? ) ;
    public final EObject ruleAnalyticExprArg() throws RecognitionException {
        EObject current = null;

        EObject lv_ce_0_0 = null;

        EObject lv_colAlias_1_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:8280:2: ( ( ( (lv_ce_0_0= ruleOperand ) ) ( (lv_colAlias_1_0= ruleDbObjectName ) )? ) )
            // InternalSQLParser.g:8281:2: ( ( (lv_ce_0_0= ruleOperand ) ) ( (lv_colAlias_1_0= ruleDbObjectName ) )? )
            {
            // InternalSQLParser.g:8281:2: ( ( (lv_ce_0_0= ruleOperand ) ) ( (lv_colAlias_1_0= ruleDbObjectName ) )? )
            // InternalSQLParser.g:8282:3: ( (lv_ce_0_0= ruleOperand ) ) ( (lv_colAlias_1_0= ruleDbObjectName ) )?
            {
            // InternalSQLParser.g:8282:3: ( (lv_ce_0_0= ruleOperand ) )
            // InternalSQLParser.g:8283:4: (lv_ce_0_0= ruleOperand )
            {
            // InternalSQLParser.g:8283:4: (lv_ce_0_0= ruleOperand )
            // InternalSQLParser.g:8284:5: lv_ce_0_0= ruleOperand
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getAnalyticExprArgAccess().getCeOperandParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_55);
            lv_ce_0_0=ruleOperand();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getAnalyticExprArgRule());
              					}
              					set(
              						current,
              						"ce",
              						lv_ce_0_0,
              						"org.xtext.example.mydsl_sql.SQL.Operand");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:8301:3: ( (lv_colAlias_1_0= ruleDbObjectName ) )?
            int alt146=2;
            int LA146_0 = input.LA(1);

            if ( ((LA146_0>=RULE_STRING && LA146_0<=RULE_ID)) ) {
                alt146=1;
            }
            switch (alt146) {
                case 1 :
                    // InternalSQLParser.g:8302:4: (lv_colAlias_1_0= ruleDbObjectName )
                    {
                    // InternalSQLParser.g:8302:4: (lv_colAlias_1_0= ruleDbObjectName )
                    // InternalSQLParser.g:8303:5: lv_colAlias_1_0= ruleDbObjectName
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getAnalyticExprArgAccess().getColAliasDbObjectNameParserRuleCall_1_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_colAlias_1_0=ruleDbObjectName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getAnalyticExprArgRule());
                      					}
                      					set(
                      						current,
                      						"colAlias",
                      						lv_colAlias_1_0,
                      						"org.xtext.example.mydsl_sql.SQL.DbObjectName");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleAnalyticExprArg"


    // $ANTLR start "entryRuleOpFunctionArg"
    // InternalSQLParser.g:8324:1: entryRuleOpFunctionArg returns [EObject current=null] : iv_ruleOpFunctionArg= ruleOpFunctionArg EOF ;
    public final EObject entryRuleOpFunctionArg() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOpFunctionArg = null;


        try {
            // InternalSQLParser.g:8324:54: (iv_ruleOpFunctionArg= ruleOpFunctionArg EOF )
            // InternalSQLParser.g:8325:2: iv_ruleOpFunctionArg= ruleOpFunctionArg EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOpFunctionArgRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOpFunctionArg=ruleOpFunctionArg();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOpFunctionArg; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOpFunctionArg"


    // $ANTLR start "ruleOpFunctionArg"
    // InternalSQLParser.g:8331:1: ruleOpFunctionArg returns [EObject current=null] : (this_OpFunctionArgOperand_0= ruleOpFunctionArgOperand ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleOpFunctionArgOperand ) ) )+ )? ) ;
    public final EObject ruleOpFunctionArg() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_OpFunctionArgOperand_0 = null;

        EObject lv_entries_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:8337:2: ( (this_OpFunctionArgOperand_0= ruleOpFunctionArgOperand ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleOpFunctionArgOperand ) ) )+ )? ) )
            // InternalSQLParser.g:8338:2: (this_OpFunctionArgOperand_0= ruleOpFunctionArgOperand ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleOpFunctionArgOperand ) ) )+ )? )
            {
            // InternalSQLParser.g:8338:2: (this_OpFunctionArgOperand_0= ruleOpFunctionArgOperand ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleOpFunctionArgOperand ) ) )+ )? )
            // InternalSQLParser.g:8339:3: this_OpFunctionArgOperand_0= ruleOpFunctionArgOperand ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleOpFunctionArgOperand ) ) )+ )?
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getOpFunctionArgAccess().getOpFunctionArgOperandParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_12);
            this_OpFunctionArgOperand_0=ruleOpFunctionArgOperand();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_OpFunctionArgOperand_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:8350:3: ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleOpFunctionArgOperand ) ) )+ )?
            int alt148=2;
            int LA148_0 = input.LA(1);

            if ( (LA148_0==Comma) ) {
                alt148=1;
            }
            switch (alt148) {
                case 1 :
                    // InternalSQLParser.g:8351:4: () (otherlv_2= Comma ( (lv_entries_3_0= ruleOpFunctionArgOperand ) ) )+
                    {
                    // InternalSQLParser.g:8351:4: ()
                    // InternalSQLParser.g:8352:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getOpFunctionArgAccess().getOpFListEntriesAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalSQLParser.g:8361:4: (otherlv_2= Comma ( (lv_entries_3_0= ruleOpFunctionArgOperand ) ) )+
                    int cnt147=0;
                    loop147:
                    do {
                        int alt147=2;
                        int LA147_0 = input.LA(1);

                        if ( (LA147_0==Comma) ) {
                            alt147=1;
                        }


                        switch (alt147) {
                    	case 1 :
                    	    // InternalSQLParser.g:8362:5: otherlv_2= Comma ( (lv_entries_3_0= ruleOpFunctionArgOperand ) )
                    	    {
                    	    otherlv_2=(Token)match(input,Comma,FOLLOW_107); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_2, grammarAccess.getOpFunctionArgAccess().getCommaKeyword_1_1_0());
                    	      				
                    	    }
                    	    // InternalSQLParser.g:8366:5: ( (lv_entries_3_0= ruleOpFunctionArgOperand ) )
                    	    // InternalSQLParser.g:8367:6: (lv_entries_3_0= ruleOpFunctionArgOperand )
                    	    {
                    	    // InternalSQLParser.g:8367:6: (lv_entries_3_0= ruleOpFunctionArgOperand )
                    	    // InternalSQLParser.g:8368:7: lv_entries_3_0= ruleOpFunctionArgOperand
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getOpFunctionArgAccess().getEntriesOpFunctionArgOperandParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_12);
                    	    lv_entries_3_0=ruleOpFunctionArgOperand();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getOpFunctionArgRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"entries",
                    	      								lv_entries_3_0,
                    	      								"org.xtext.example.mydsl_sql.SQL.OpFunctionArgOperand");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt147 >= 1 ) break loop147;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(147, input);
                                throw eee;
                        }
                        cnt147++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOpFunctionArg"


    // $ANTLR start "entryRuleOpFunctionArgOperand"
    // InternalSQLParser.g:8391:1: entryRuleOpFunctionArgOperand returns [EObject current=null] : iv_ruleOpFunctionArgOperand= ruleOpFunctionArgOperand EOF ;
    public final EObject entryRuleOpFunctionArgOperand() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOpFunctionArgOperand = null;


        try {
            // InternalSQLParser.g:8391:61: (iv_ruleOpFunctionArgOperand= ruleOpFunctionArgOperand EOF )
            // InternalSQLParser.g:8392:2: iv_ruleOpFunctionArgOperand= ruleOpFunctionArgOperand EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOpFunctionArgOperandRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOpFunctionArgOperand=ruleOpFunctionArgOperand();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOpFunctionArgOperand; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOpFunctionArgOperand"


    // $ANTLR start "ruleOpFunctionArgOperand"
    // InternalSQLParser.g:8398:1: ruleOpFunctionArgOperand returns [EObject current=null] : ( ( (lv_op_0_1= ruleOpFunctionArgAgregate | lv_op_0_2= ruleOperand ) ) ) ;
    public final EObject ruleOpFunctionArgOperand() throws RecognitionException {
        EObject current = null;

        EObject lv_op_0_1 = null;

        EObject lv_op_0_2 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:8404:2: ( ( ( (lv_op_0_1= ruleOpFunctionArgAgregate | lv_op_0_2= ruleOperand ) ) ) )
            // InternalSQLParser.g:8405:2: ( ( (lv_op_0_1= ruleOpFunctionArgAgregate | lv_op_0_2= ruleOperand ) ) )
            {
            // InternalSQLParser.g:8405:2: ( ( (lv_op_0_1= ruleOpFunctionArgAgregate | lv_op_0_2= ruleOperand ) ) )
            // InternalSQLParser.g:8406:3: ( (lv_op_0_1= ruleOpFunctionArgAgregate | lv_op_0_2= ruleOperand ) )
            {
            // InternalSQLParser.g:8406:3: ( (lv_op_0_1= ruleOpFunctionArgAgregate | lv_op_0_2= ruleOperand ) )
            // InternalSQLParser.g:8407:4: (lv_op_0_1= ruleOpFunctionArgAgregate | lv_op_0_2= ruleOperand )
            {
            // InternalSQLParser.g:8407:4: (lv_op_0_1= ruleOpFunctionArgAgregate | lv_op_0_2= ruleOperand )
            int alt149=2;
            int LA149_0 = input.LA(1);

            if ( (LA149_0==DISTINCT||LA149_0==ALL) ) {
                alt149=1;
            }
            else if ( (LA149_0==EXTRACT||LA149_0==CAST||LA149_0==FALSE||LA149_0==CASE||LA149_0==TRUE||LA149_0==LeftParenthesis||(LA149_0>=RULE_JRPARAM && LA149_0<=RULE_JRNPARAM)||(LA149_0>=RULE_UNSIGNED && LA149_0<=RULE_SIGNED_DOUBLE)||(LA149_0>=RULE_STRING_ && LA149_0<=RULE_ID)) ) {
                alt149=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 149, 0, input);

                throw nvae;
            }
            switch (alt149) {
                case 1 :
                    // InternalSQLParser.g:8408:5: lv_op_0_1= ruleOpFunctionArgAgregate
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getOpFunctionArgOperandAccess().getOpOpFunctionArgAgregateParserRuleCall_0_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_op_0_1=ruleOpFunctionArgAgregate();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getOpFunctionArgOperandRule());
                      					}
                      					set(
                      						current,
                      						"op",
                      						lv_op_0_1,
                      						"org.xtext.example.mydsl_sql.SQL.OpFunctionArgAgregate");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:8424:5: lv_op_0_2= ruleOperand
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getOpFunctionArgOperandAccess().getOpOperandParserRuleCall_0_1());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_op_0_2=ruleOperand();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getOpFunctionArgOperandRule());
                      					}
                      					set(
                      						current,
                      						"op",
                      						lv_op_0_2,
                      						"org.xtext.example.mydsl_sql.SQL.Operand");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }
                    break;

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOpFunctionArgOperand"


    // $ANTLR start "entryRuleOpFunctionCast"
    // InternalSQLParser.g:8445:1: entryRuleOpFunctionCast returns [EObject current=null] : iv_ruleOpFunctionCast= ruleOpFunctionCast EOF ;
    public final EObject entryRuleOpFunctionCast() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOpFunctionCast = null;


        try {
            // InternalSQLParser.g:8445:55: (iv_ruleOpFunctionCast= ruleOpFunctionCast EOF )
            // InternalSQLParser.g:8446:2: iv_ruleOpFunctionCast= ruleOpFunctionCast EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOpFunctionCastRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOpFunctionCast=ruleOpFunctionCast();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOpFunctionCast; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOpFunctionCast"


    // $ANTLR start "ruleOpFunctionCast"
    // InternalSQLParser.g:8452:1: ruleOpFunctionCast returns [EObject current=null] : (otherlv_0= CAST ( (lv_op_1_0= ruleOperandGroup ) ) otherlv_2= AS ( (lv_type_3_0= RULE_ID ) ) (otherlv_4= LeftParenthesis ( (lv_p_5_0= RULE_UNSIGNED ) ) (otherlv_6= Comma ( (lv_p2_7_0= RULE_UNSIGNED ) ) )? otherlv_8= RightParenthesis )? otherlv_9= RightParenthesis ) ;
    public final EObject ruleOpFunctionCast() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        Token lv_type_3_0=null;
        Token otherlv_4=null;
        Token lv_p_5_0=null;
        Token otherlv_6=null;
        Token lv_p2_7_0=null;
        Token otherlv_8=null;
        Token otherlv_9=null;
        EObject lv_op_1_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:8458:2: ( (otherlv_0= CAST ( (lv_op_1_0= ruleOperandGroup ) ) otherlv_2= AS ( (lv_type_3_0= RULE_ID ) ) (otherlv_4= LeftParenthesis ( (lv_p_5_0= RULE_UNSIGNED ) ) (otherlv_6= Comma ( (lv_p2_7_0= RULE_UNSIGNED ) ) )? otherlv_8= RightParenthesis )? otherlv_9= RightParenthesis ) )
            // InternalSQLParser.g:8459:2: (otherlv_0= CAST ( (lv_op_1_0= ruleOperandGroup ) ) otherlv_2= AS ( (lv_type_3_0= RULE_ID ) ) (otherlv_4= LeftParenthesis ( (lv_p_5_0= RULE_UNSIGNED ) ) (otherlv_6= Comma ( (lv_p2_7_0= RULE_UNSIGNED ) ) )? otherlv_8= RightParenthesis )? otherlv_9= RightParenthesis )
            {
            // InternalSQLParser.g:8459:2: (otherlv_0= CAST ( (lv_op_1_0= ruleOperandGroup ) ) otherlv_2= AS ( (lv_type_3_0= RULE_ID ) ) (otherlv_4= LeftParenthesis ( (lv_p_5_0= RULE_UNSIGNED ) ) (otherlv_6= Comma ( (lv_p2_7_0= RULE_UNSIGNED ) ) )? otherlv_8= RightParenthesis )? otherlv_9= RightParenthesis )
            // InternalSQLParser.g:8460:3: otherlv_0= CAST ( (lv_op_1_0= ruleOperandGroup ) ) otherlv_2= AS ( (lv_type_3_0= RULE_ID ) ) (otherlv_4= LeftParenthesis ( (lv_p_5_0= RULE_UNSIGNED ) ) (otherlv_6= Comma ( (lv_p2_7_0= RULE_UNSIGNED ) ) )? otherlv_8= RightParenthesis )? otherlv_9= RightParenthesis
            {
            otherlv_0=(Token)match(input,CAST,FOLLOW_77); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getOpFunctionCastAccess().getCASTKeyword_0());
              		
            }
            // InternalSQLParser.g:8464:3: ( (lv_op_1_0= ruleOperandGroup ) )
            // InternalSQLParser.g:8465:4: (lv_op_1_0= ruleOperandGroup )
            {
            // InternalSQLParser.g:8465:4: (lv_op_1_0= ruleOperandGroup )
            // InternalSQLParser.g:8466:5: lv_op_1_0= ruleOperandGroup
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getOpFunctionCastAccess().getOpOperandGroupParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_30);
            lv_op_1_0=ruleOperandGroup();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getOpFunctionCastRule());
              					}
              					set(
              						current,
              						"op",
              						lv_op_1_0,
              						"org.xtext.example.mydsl_sql.SQL.OperandGroup");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_2=(Token)match(input,AS,FOLLOW_8); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getOpFunctionCastAccess().getASKeyword_2());
              		
            }
            // InternalSQLParser.g:8487:3: ( (lv_type_3_0= RULE_ID ) )
            // InternalSQLParser.g:8488:4: (lv_type_3_0= RULE_ID )
            {
            // InternalSQLParser.g:8488:4: (lv_type_3_0= RULE_ID )
            // InternalSQLParser.g:8489:5: lv_type_3_0= RULE_ID
            {
            lv_type_3_0=(Token)match(input,RULE_ID,FOLLOW_108); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_type_3_0, grammarAccess.getOpFunctionCastAccess().getTypeIDTerminalRuleCall_3_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getOpFunctionCastRule());
              					}
              					setWithLastConsumed(
              						current,
              						"type",
              						lv_type_3_0,
              						"org.xtext.example.mydsl_sql.SQL.ID");
              				
            }

            }


            }

            // InternalSQLParser.g:8505:3: (otherlv_4= LeftParenthesis ( (lv_p_5_0= RULE_UNSIGNED ) ) (otherlv_6= Comma ( (lv_p2_7_0= RULE_UNSIGNED ) ) )? otherlv_8= RightParenthesis )?
            int alt151=2;
            int LA151_0 = input.LA(1);

            if ( (LA151_0==LeftParenthesis) ) {
                alt151=1;
            }
            switch (alt151) {
                case 1 :
                    // InternalSQLParser.g:8506:4: otherlv_4= LeftParenthesis ( (lv_p_5_0= RULE_UNSIGNED ) ) (otherlv_6= Comma ( (lv_p2_7_0= RULE_UNSIGNED ) ) )? otherlv_8= RightParenthesis
                    {
                    otherlv_4=(Token)match(input,LeftParenthesis,FOLLOW_24); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_4, grammarAccess.getOpFunctionCastAccess().getLeftParenthesisKeyword_4_0());
                      			
                    }
                    // InternalSQLParser.g:8510:4: ( (lv_p_5_0= RULE_UNSIGNED ) )
                    // InternalSQLParser.g:8511:5: (lv_p_5_0= RULE_UNSIGNED )
                    {
                    // InternalSQLParser.g:8511:5: (lv_p_5_0= RULE_UNSIGNED )
                    // InternalSQLParser.g:8512:6: lv_p_5_0= RULE_UNSIGNED
                    {
                    lv_p_5_0=(Token)match(input,RULE_UNSIGNED,FOLLOW_109); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_p_5_0, grammarAccess.getOpFunctionCastAccess().getPUNSIGNEDTerminalRuleCall_4_1_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getOpFunctionCastRule());
                      						}
                      						setWithLastConsumed(
                      							current,
                      							"p",
                      							lv_p_5_0,
                      							"org.xtext.example.mydsl_sql.SQL.UNSIGNED");
                      					
                    }

                    }


                    }

                    // InternalSQLParser.g:8528:4: (otherlv_6= Comma ( (lv_p2_7_0= RULE_UNSIGNED ) ) )?
                    int alt150=2;
                    int LA150_0 = input.LA(1);

                    if ( (LA150_0==Comma) ) {
                        alt150=1;
                    }
                    switch (alt150) {
                        case 1 :
                            // InternalSQLParser.g:8529:5: otherlv_6= Comma ( (lv_p2_7_0= RULE_UNSIGNED ) )
                            {
                            otherlv_6=(Token)match(input,Comma,FOLLOW_24); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(otherlv_6, grammarAccess.getOpFunctionCastAccess().getCommaKeyword_4_2_0());
                              				
                            }
                            // InternalSQLParser.g:8533:5: ( (lv_p2_7_0= RULE_UNSIGNED ) )
                            // InternalSQLParser.g:8534:6: (lv_p2_7_0= RULE_UNSIGNED )
                            {
                            // InternalSQLParser.g:8534:6: (lv_p2_7_0= RULE_UNSIGNED )
                            // InternalSQLParser.g:8535:7: lv_p2_7_0= RULE_UNSIGNED
                            {
                            lv_p2_7_0=(Token)match(input,RULE_UNSIGNED,FOLLOW_9); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(lv_p2_7_0, grammarAccess.getOpFunctionCastAccess().getP2UNSIGNEDTerminalRuleCall_4_2_1_0());
                              						
                            }
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getOpFunctionCastRule());
                              							}
                              							setWithLastConsumed(
                              								current,
                              								"p2",
                              								lv_p2_7_0,
                              								"org.xtext.example.mydsl_sql.SQL.UNSIGNED");
                              						
                            }

                            }


                            }


                            }
                            break;

                    }

                    otherlv_8=(Token)match(input,RightParenthesis,FOLLOW_9); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_8, grammarAccess.getOpFunctionCastAccess().getRightParenthesisKeyword_4_3());
                      			
                    }

                    }
                    break;

            }

            otherlv_9=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_9, grammarAccess.getOpFunctionCastAccess().getRightParenthesisKeyword_5());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOpFunctionCast"


    // $ANTLR start "entryRuleOpFunctionArgAgregate"
    // InternalSQLParser.g:8565:1: entryRuleOpFunctionArgAgregate returns [EObject current=null] : iv_ruleOpFunctionArgAgregate= ruleOpFunctionArgAgregate EOF ;
    public final EObject entryRuleOpFunctionArgAgregate() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOpFunctionArgAgregate = null;


        try {
            // InternalSQLParser.g:8565:62: (iv_ruleOpFunctionArgAgregate= ruleOpFunctionArgAgregate EOF )
            // InternalSQLParser.g:8566:2: iv_ruleOpFunctionArgAgregate= ruleOpFunctionArgAgregate EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOpFunctionArgAgregateRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOpFunctionArgAgregate=ruleOpFunctionArgAgregate();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOpFunctionArgAgregate; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOpFunctionArgAgregate"


    // $ANTLR start "ruleOpFunctionArgAgregate"
    // InternalSQLParser.g:8572:1: ruleOpFunctionArgAgregate returns [EObject current=null] : ( (otherlv_0= ALL | otherlv_1= DISTINCT ) this_Operand_2= ruleOperand ) ;
    public final EObject ruleOpFunctionArgAgregate() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        EObject this_Operand_2 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:8578:2: ( ( (otherlv_0= ALL | otherlv_1= DISTINCT ) this_Operand_2= ruleOperand ) )
            // InternalSQLParser.g:8579:2: ( (otherlv_0= ALL | otherlv_1= DISTINCT ) this_Operand_2= ruleOperand )
            {
            // InternalSQLParser.g:8579:2: ( (otherlv_0= ALL | otherlv_1= DISTINCT ) this_Operand_2= ruleOperand )
            // InternalSQLParser.g:8580:3: (otherlv_0= ALL | otherlv_1= DISTINCT ) this_Operand_2= ruleOperand
            {
            // InternalSQLParser.g:8580:3: (otherlv_0= ALL | otherlv_1= DISTINCT )
            int alt152=2;
            int LA152_0 = input.LA(1);

            if ( (LA152_0==ALL) ) {
                alt152=1;
            }
            else if ( (LA152_0==DISTINCT) ) {
                alt152=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 152, 0, input);

                throw nvae;
            }
            switch (alt152) {
                case 1 :
                    // InternalSQLParser.g:8581:4: otherlv_0= ALL
                    {
                    otherlv_0=(Token)match(input,ALL,FOLLOW_77); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_0, grammarAccess.getOpFunctionArgAgregateAccess().getALLKeyword_0_0());
                      			
                    }

                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:8586:4: otherlv_1= DISTINCT
                    {
                    otherlv_1=(Token)match(input,DISTINCT,FOLLOW_77); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getOpFunctionArgAgregateAccess().getDISTINCTKeyword_0_1());
                      			
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getOpFunctionArgAgregateAccess().getOperandParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_2);
            this_Operand_2=ruleOperand();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_Operand_2;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOpFunctionArgAgregate"


    // $ANTLR start "entryRuleXOperandFragment"
    // InternalSQLParser.g:8606:1: entryRuleXOperandFragment returns [EObject current=null] : iv_ruleXOperandFragment= ruleXOperandFragment EOF ;
    public final EObject entryRuleXOperandFragment() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleXOperandFragment = null;


        try {
            // InternalSQLParser.g:8606:57: (iv_ruleXOperandFragment= ruleXOperandFragment EOF )
            // InternalSQLParser.g:8607:2: iv_ruleXOperandFragment= ruleXOperandFragment EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getXOperandFragmentRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleXOperandFragment=ruleXOperandFragment();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleXOperandFragment; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleXOperandFragment"


    // $ANTLR start "ruleXOperandFragment"
    // InternalSQLParser.g:8613:1: ruleXOperandFragment returns [EObject current=null] : ( ( (lv_param_0_0= ruleParameterOperand ) ) | ( (lv_eparam_1_0= ruleExclamationParameterOperand ) ) | ( (lv_scalar_2_0= ruleScalarNumberOperand ) ) ) ;
    public final EObject ruleXOperandFragment() throws RecognitionException {
        EObject current = null;

        EObject lv_param_0_0 = null;

        EObject lv_eparam_1_0 = null;

        EObject lv_scalar_2_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:8619:2: ( ( ( (lv_param_0_0= ruleParameterOperand ) ) | ( (lv_eparam_1_0= ruleExclamationParameterOperand ) ) | ( (lv_scalar_2_0= ruleScalarNumberOperand ) ) ) )
            // InternalSQLParser.g:8620:2: ( ( (lv_param_0_0= ruleParameterOperand ) ) | ( (lv_eparam_1_0= ruleExclamationParameterOperand ) ) | ( (lv_scalar_2_0= ruleScalarNumberOperand ) ) )
            {
            // InternalSQLParser.g:8620:2: ( ( (lv_param_0_0= ruleParameterOperand ) ) | ( (lv_eparam_1_0= ruleExclamationParameterOperand ) ) | ( (lv_scalar_2_0= ruleScalarNumberOperand ) ) )
            int alt153=3;
            switch ( input.LA(1) ) {
            case RULE_JRPARAM:
                {
                alt153=1;
                }
                break;
            case RULE_JRNPARAM:
                {
                alt153=2;
                }
                break;
            case RULE_UNSIGNED:
            case RULE_INT:
            case RULE_SIGNED_DOUBLE:
            case RULE_STRING_:
                {
                alt153=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 153, 0, input);

                throw nvae;
            }

            switch (alt153) {
                case 1 :
                    // InternalSQLParser.g:8621:3: ( (lv_param_0_0= ruleParameterOperand ) )
                    {
                    // InternalSQLParser.g:8621:3: ( (lv_param_0_0= ruleParameterOperand ) )
                    // InternalSQLParser.g:8622:4: (lv_param_0_0= ruleParameterOperand )
                    {
                    // InternalSQLParser.g:8622:4: (lv_param_0_0= ruleParameterOperand )
                    // InternalSQLParser.g:8623:5: lv_param_0_0= ruleParameterOperand
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getXOperandFragmentAccess().getParamParameterOperandParserRuleCall_0_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_param_0_0=ruleParameterOperand();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getXOperandFragmentRule());
                      					}
                      					set(
                      						current,
                      						"param",
                      						lv_param_0_0,
                      						"org.xtext.example.mydsl_sql.SQL.ParameterOperand");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:8641:3: ( (lv_eparam_1_0= ruleExclamationParameterOperand ) )
                    {
                    // InternalSQLParser.g:8641:3: ( (lv_eparam_1_0= ruleExclamationParameterOperand ) )
                    // InternalSQLParser.g:8642:4: (lv_eparam_1_0= ruleExclamationParameterOperand )
                    {
                    // InternalSQLParser.g:8642:4: (lv_eparam_1_0= ruleExclamationParameterOperand )
                    // InternalSQLParser.g:8643:5: lv_eparam_1_0= ruleExclamationParameterOperand
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getXOperandFragmentAccess().getEparamExclamationParameterOperandParserRuleCall_1_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_eparam_1_0=ruleExclamationParameterOperand();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getXOperandFragmentRule());
                      					}
                      					set(
                      						current,
                      						"eparam",
                      						lv_eparam_1_0,
                      						"org.xtext.example.mydsl_sql.SQL.ExclamationParameterOperand");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:8661:3: ( (lv_scalar_2_0= ruleScalarNumberOperand ) )
                    {
                    // InternalSQLParser.g:8661:3: ( (lv_scalar_2_0= ruleScalarNumberOperand ) )
                    // InternalSQLParser.g:8662:4: (lv_scalar_2_0= ruleScalarNumberOperand )
                    {
                    // InternalSQLParser.g:8662:4: (lv_scalar_2_0= ruleScalarNumberOperand )
                    // InternalSQLParser.g:8663:5: lv_scalar_2_0= ruleScalarNumberOperand
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getXOperandFragmentAccess().getScalarScalarNumberOperandParserRuleCall_2_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_scalar_2_0=ruleScalarNumberOperand();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getXOperandFragmentRule());
                      					}
                      					set(
                      						current,
                      						"scalar",
                      						lv_scalar_2_0,
                      						"org.xtext.example.mydsl_sql.SQL.ScalarNumberOperand");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleXOperandFragment"


    // $ANTLR start "entryRuleParameterOperand"
    // InternalSQLParser.g:8684:1: entryRuleParameterOperand returns [EObject current=null] : iv_ruleParameterOperand= ruleParameterOperand EOF ;
    public final EObject entryRuleParameterOperand() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleParameterOperand = null;


        try {
            // InternalSQLParser.g:8684:57: (iv_ruleParameterOperand= ruleParameterOperand EOF )
            // InternalSQLParser.g:8685:2: iv_ruleParameterOperand= ruleParameterOperand EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getParameterOperandRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleParameterOperand=ruleParameterOperand();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleParameterOperand; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleParameterOperand"


    // $ANTLR start "ruleParameterOperand"
    // InternalSQLParser.g:8691:1: ruleParameterOperand returns [EObject current=null] : ( (lv_prm_0_0= RULE_JRPARAM ) ) ;
    public final EObject ruleParameterOperand() throws RecognitionException {
        EObject current = null;

        Token lv_prm_0_0=null;


        	enterRule();

        try {
            // InternalSQLParser.g:8697:2: ( ( (lv_prm_0_0= RULE_JRPARAM ) ) )
            // InternalSQLParser.g:8698:2: ( (lv_prm_0_0= RULE_JRPARAM ) )
            {
            // InternalSQLParser.g:8698:2: ( (lv_prm_0_0= RULE_JRPARAM ) )
            // InternalSQLParser.g:8699:3: (lv_prm_0_0= RULE_JRPARAM )
            {
            // InternalSQLParser.g:8699:3: (lv_prm_0_0= RULE_JRPARAM )
            // InternalSQLParser.g:8700:4: lv_prm_0_0= RULE_JRPARAM
            {
            lv_prm_0_0=(Token)match(input,RULE_JRPARAM,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(lv_prm_0_0, grammarAccess.getParameterOperandAccess().getPrmJRPARAMTerminalRuleCall_0());
              			
            }
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getParameterOperandRule());
              				}
              				setWithLastConsumed(
              					current,
              					"prm",
              					lv_prm_0_0,
              					"org.xtext.example.mydsl_sql.SQL.JRPARAM");
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleParameterOperand"


    // $ANTLR start "entryRuleExclamationParameterOperand"
    // InternalSQLParser.g:8719:1: entryRuleExclamationParameterOperand returns [EObject current=null] : iv_ruleExclamationParameterOperand= ruleExclamationParameterOperand EOF ;
    public final EObject entryRuleExclamationParameterOperand() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExclamationParameterOperand = null;


        try {
            // InternalSQLParser.g:8719:68: (iv_ruleExclamationParameterOperand= ruleExclamationParameterOperand EOF )
            // InternalSQLParser.g:8720:2: iv_ruleExclamationParameterOperand= ruleExclamationParameterOperand EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExclamationParameterOperandRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExclamationParameterOperand=ruleExclamationParameterOperand();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExclamationParameterOperand; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleExclamationParameterOperand"


    // $ANTLR start "ruleExclamationParameterOperand"
    // InternalSQLParser.g:8726:1: ruleExclamationParameterOperand returns [EObject current=null] : ( (lv_prm_0_0= RULE_JRNPARAM ) ) ;
    public final EObject ruleExclamationParameterOperand() throws RecognitionException {
        EObject current = null;

        Token lv_prm_0_0=null;


        	enterRule();

        try {
            // InternalSQLParser.g:8732:2: ( ( (lv_prm_0_0= RULE_JRNPARAM ) ) )
            // InternalSQLParser.g:8733:2: ( (lv_prm_0_0= RULE_JRNPARAM ) )
            {
            // InternalSQLParser.g:8733:2: ( (lv_prm_0_0= RULE_JRNPARAM ) )
            // InternalSQLParser.g:8734:3: (lv_prm_0_0= RULE_JRNPARAM )
            {
            // InternalSQLParser.g:8734:3: (lv_prm_0_0= RULE_JRNPARAM )
            // InternalSQLParser.g:8735:4: lv_prm_0_0= RULE_JRNPARAM
            {
            lv_prm_0_0=(Token)match(input,RULE_JRNPARAM,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(lv_prm_0_0, grammarAccess.getExclamationParameterOperandAccess().getPrmJRNPARAMTerminalRuleCall_0());
              			
            }
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getExclamationParameterOperandRule());
              				}
              				setWithLastConsumed(
              					current,
              					"prm",
              					lv_prm_0_0,
              					"org.xtext.example.mydsl_sql.SQL.JRNPARAM");
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleExclamationParameterOperand"


    // $ANTLR start "entryRuleColumnOperand"
    // InternalSQLParser.g:8754:1: entryRuleColumnOperand returns [EObject current=null] : iv_ruleColumnOperand= ruleColumnOperand EOF ;
    public final EObject entryRuleColumnOperand() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleColumnOperand = null;


        try {
            // InternalSQLParser.g:8754:54: (iv_ruleColumnOperand= ruleColumnOperand EOF )
            // InternalSQLParser.g:8755:2: iv_ruleColumnOperand= ruleColumnOperand EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getColumnOperandRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleColumnOperand=ruleColumnOperand();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleColumnOperand; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleColumnOperand"


    // $ANTLR start "ruleColumnOperand"
    // InternalSQLParser.g:8761:1: ruleColumnOperand returns [EObject current=null] : ( ( (lv_cfull_0_0= ruleColumnFull ) ) ( (lv_ora_1_0= LeftParenthesisPlusSignRightParenthesis ) )? ) ;
    public final EObject ruleColumnOperand() throws RecognitionException {
        EObject current = null;

        Token lv_ora_1_0=null;
        EObject lv_cfull_0_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:8767:2: ( ( ( (lv_cfull_0_0= ruleColumnFull ) ) ( (lv_ora_1_0= LeftParenthesisPlusSignRightParenthesis ) )? ) )
            // InternalSQLParser.g:8768:2: ( ( (lv_cfull_0_0= ruleColumnFull ) ) ( (lv_ora_1_0= LeftParenthesisPlusSignRightParenthesis ) )? )
            {
            // InternalSQLParser.g:8768:2: ( ( (lv_cfull_0_0= ruleColumnFull ) ) ( (lv_ora_1_0= LeftParenthesisPlusSignRightParenthesis ) )? )
            // InternalSQLParser.g:8769:3: ( (lv_cfull_0_0= ruleColumnFull ) ) ( (lv_ora_1_0= LeftParenthesisPlusSignRightParenthesis ) )?
            {
            // InternalSQLParser.g:8769:3: ( (lv_cfull_0_0= ruleColumnFull ) )
            // InternalSQLParser.g:8770:4: (lv_cfull_0_0= ruleColumnFull )
            {
            // InternalSQLParser.g:8770:4: (lv_cfull_0_0= ruleColumnFull )
            // InternalSQLParser.g:8771:5: lv_cfull_0_0= ruleColumnFull
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getColumnOperandAccess().getCfullColumnFullParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_110);
            lv_cfull_0_0=ruleColumnFull();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getColumnOperandRule());
              					}
              					set(
              						current,
              						"cfull",
              						lv_cfull_0_0,
              						"org.xtext.example.mydsl_sql.SQL.ColumnFull");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:8788:3: ( (lv_ora_1_0= LeftParenthesisPlusSignRightParenthesis ) )?
            int alt154=2;
            int LA154_0 = input.LA(1);

            if ( (LA154_0==LeftParenthesisPlusSignRightParenthesis) ) {
                alt154=1;
            }
            switch (alt154) {
                case 1 :
                    // InternalSQLParser.g:8789:4: (lv_ora_1_0= LeftParenthesisPlusSignRightParenthesis )
                    {
                    // InternalSQLParser.g:8789:4: (lv_ora_1_0= LeftParenthesisPlusSignRightParenthesis )
                    // InternalSQLParser.g:8790:5: lv_ora_1_0= LeftParenthesisPlusSignRightParenthesis
                    {
                    lv_ora_1_0=(Token)match(input,LeftParenthesisPlusSignRightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_ora_1_0, grammarAccess.getColumnOperandAccess().getOraLeftParenthesisPlusSignRightParenthesisKeyword_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getColumnOperandRule());
                      					}
                      					setWithLastConsumed(current, "ora", lv_ora_1_0, "(+)");
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleColumnOperand"


    // $ANTLR start "entryRuleSubQueryOperand"
    // InternalSQLParser.g:8806:1: entryRuleSubQueryOperand returns [EObject current=null] : iv_ruleSubQueryOperand= ruleSubQueryOperand EOF ;
    public final EObject entryRuleSubQueryOperand() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSubQueryOperand = null;


        try {
            // InternalSQLParser.g:8806:56: (iv_ruleSubQueryOperand= ruleSubQueryOperand EOF )
            // InternalSQLParser.g:8807:2: iv_ruleSubQueryOperand= ruleSubQueryOperand EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSubQueryOperandRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSubQueryOperand=ruleSubQueryOperand();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSubQueryOperand; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSubQueryOperand"


    // $ANTLR start "ruleSubQueryOperand"
    // InternalSQLParser.g:8813:1: ruleSubQueryOperand returns [EObject current=null] : ( () otherlv_1= LeftParenthesis ( (lv_sel_2_0= ruleSelectQuery ) ) otherlv_3= RightParenthesis ) ;
    public final EObject ruleSubQueryOperand() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_sel_2_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:8819:2: ( ( () otherlv_1= LeftParenthesis ( (lv_sel_2_0= ruleSelectQuery ) ) otherlv_3= RightParenthesis ) )
            // InternalSQLParser.g:8820:2: ( () otherlv_1= LeftParenthesis ( (lv_sel_2_0= ruleSelectQuery ) ) otherlv_3= RightParenthesis )
            {
            // InternalSQLParser.g:8820:2: ( () otherlv_1= LeftParenthesis ( (lv_sel_2_0= ruleSelectQuery ) ) otherlv_3= RightParenthesis )
            // InternalSQLParser.g:8821:3: () otherlv_1= LeftParenthesis ( (lv_sel_2_0= ruleSelectQuery ) ) otherlv_3= RightParenthesis
            {
            // InternalSQLParser.g:8821:3: ()
            // InternalSQLParser.g:8822:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getSubQueryOperandAccess().getSubQueryOperandAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_3); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getSubQueryOperandAccess().getLeftParenthesisKeyword_1());
              		
            }
            // InternalSQLParser.g:8835:3: ( (lv_sel_2_0= ruleSelectQuery ) )
            // InternalSQLParser.g:8836:4: (lv_sel_2_0= ruleSelectQuery )
            {
            // InternalSQLParser.g:8836:4: (lv_sel_2_0= ruleSelectQuery )
            // InternalSQLParser.g:8837:5: lv_sel_2_0= ruleSelectQuery
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getSubQueryOperandAccess().getSelSelectQueryParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_9);
            lv_sel_2_0=ruleSelectQuery();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getSubQueryOperandRule());
              					}
              					set(
              						current,
              						"sel",
              						lv_sel_2_0,
              						"org.xtext.example.mydsl_sql.SQL.SelectQuery");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getSubQueryOperandAccess().getRightParenthesisKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSubQueryOperand"


    // $ANTLR start "entryRuleScalarOperand"
    // InternalSQLParser.g:8862:1: entryRuleScalarOperand returns [EObject current=null] : iv_ruleScalarOperand= ruleScalarOperand EOF ;
    public final EObject entryRuleScalarOperand() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleScalarOperand = null;


        try {
            // InternalSQLParser.g:8862:54: (iv_ruleScalarOperand= ruleScalarOperand EOF )
            // InternalSQLParser.g:8863:2: iv_ruleScalarOperand= ruleScalarOperand EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getScalarOperandRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleScalarOperand=ruleScalarOperand();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleScalarOperand; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleScalarOperand"


    // $ANTLR start "ruleScalarOperand"
    // InternalSQLParser.g:8869:1: ruleScalarOperand returns [EObject current=null] : ( ( (lv_sostr_0_0= ruleStringOperand ) ) | ( (lv_sodbl_1_0= RULE_SIGNED_DOUBLE ) ) | ( (lv_sodate_2_0= RULE_DATE ) ) | ( (lv_sotime_3_0= RULE_TIME ) ) | ( (lv_sodt_4_0= RULE_TIMESTAMP ) ) ) ;
    public final EObject ruleScalarOperand() throws RecognitionException {
        EObject current = null;

        Token lv_sodbl_1_0=null;
        Token lv_sodate_2_0=null;
        Token lv_sotime_3_0=null;
        Token lv_sodt_4_0=null;
        AntlrDatatypeRuleToken lv_sostr_0_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:8875:2: ( ( ( (lv_sostr_0_0= ruleStringOperand ) ) | ( (lv_sodbl_1_0= RULE_SIGNED_DOUBLE ) ) | ( (lv_sodate_2_0= RULE_DATE ) ) | ( (lv_sotime_3_0= RULE_TIME ) ) | ( (lv_sodt_4_0= RULE_TIMESTAMP ) ) ) )
            // InternalSQLParser.g:8876:2: ( ( (lv_sostr_0_0= ruleStringOperand ) ) | ( (lv_sodbl_1_0= RULE_SIGNED_DOUBLE ) ) | ( (lv_sodate_2_0= RULE_DATE ) ) | ( (lv_sotime_3_0= RULE_TIME ) ) | ( (lv_sodt_4_0= RULE_TIMESTAMP ) ) )
            {
            // InternalSQLParser.g:8876:2: ( ( (lv_sostr_0_0= ruleStringOperand ) ) | ( (lv_sodbl_1_0= RULE_SIGNED_DOUBLE ) ) | ( (lv_sodate_2_0= RULE_DATE ) ) | ( (lv_sotime_3_0= RULE_TIME ) ) | ( (lv_sodt_4_0= RULE_TIMESTAMP ) ) )
            int alt155=5;
            switch ( input.LA(1) ) {
            case RULE_STRING_:
                {
                alt155=1;
                }
                break;
            case RULE_SIGNED_DOUBLE:
                {
                alt155=2;
                }
                break;
            case RULE_DATE:
                {
                alt155=3;
                }
                break;
            case RULE_TIME:
                {
                alt155=4;
                }
                break;
            case RULE_TIMESTAMP:
                {
                alt155=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 155, 0, input);

                throw nvae;
            }

            switch (alt155) {
                case 1 :
                    // InternalSQLParser.g:8877:3: ( (lv_sostr_0_0= ruleStringOperand ) )
                    {
                    // InternalSQLParser.g:8877:3: ( (lv_sostr_0_0= ruleStringOperand ) )
                    // InternalSQLParser.g:8878:4: (lv_sostr_0_0= ruleStringOperand )
                    {
                    // InternalSQLParser.g:8878:4: (lv_sostr_0_0= ruleStringOperand )
                    // InternalSQLParser.g:8879:5: lv_sostr_0_0= ruleStringOperand
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getScalarOperandAccess().getSostrStringOperandParserRuleCall_0_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_sostr_0_0=ruleStringOperand();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getScalarOperandRule());
                      					}
                      					set(
                      						current,
                      						"sostr",
                      						lv_sostr_0_0,
                      						"org.xtext.example.mydsl_sql.SQL.StringOperand");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:8897:3: ( (lv_sodbl_1_0= RULE_SIGNED_DOUBLE ) )
                    {
                    // InternalSQLParser.g:8897:3: ( (lv_sodbl_1_0= RULE_SIGNED_DOUBLE ) )
                    // InternalSQLParser.g:8898:4: (lv_sodbl_1_0= RULE_SIGNED_DOUBLE )
                    {
                    // InternalSQLParser.g:8898:4: (lv_sodbl_1_0= RULE_SIGNED_DOUBLE )
                    // InternalSQLParser.g:8899:5: lv_sodbl_1_0= RULE_SIGNED_DOUBLE
                    {
                    lv_sodbl_1_0=(Token)match(input,RULE_SIGNED_DOUBLE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_sodbl_1_0, grammarAccess.getScalarOperandAccess().getSodblSIGNED_DOUBLETerminalRuleCall_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getScalarOperandRule());
                      					}
                      					setWithLastConsumed(
                      						current,
                      						"sodbl",
                      						lv_sodbl_1_0,
                      						"org.xtext.example.mydsl_sql.SQL.SIGNED_DOUBLE");
                      				
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:8916:3: ( (lv_sodate_2_0= RULE_DATE ) )
                    {
                    // InternalSQLParser.g:8916:3: ( (lv_sodate_2_0= RULE_DATE ) )
                    // InternalSQLParser.g:8917:4: (lv_sodate_2_0= RULE_DATE )
                    {
                    // InternalSQLParser.g:8917:4: (lv_sodate_2_0= RULE_DATE )
                    // InternalSQLParser.g:8918:5: lv_sodate_2_0= RULE_DATE
                    {
                    lv_sodate_2_0=(Token)match(input,RULE_DATE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_sodate_2_0, grammarAccess.getScalarOperandAccess().getSodateDATETerminalRuleCall_2_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getScalarOperandRule());
                      					}
                      					setWithLastConsumed(
                      						current,
                      						"sodate",
                      						lv_sodate_2_0,
                      						"org.xtext.example.mydsl_sql.SQL.DATE");
                      				
                    }

                    }


                    }


                    }
                    break;
                case 4 :
                    // InternalSQLParser.g:8935:3: ( (lv_sotime_3_0= RULE_TIME ) )
                    {
                    // InternalSQLParser.g:8935:3: ( (lv_sotime_3_0= RULE_TIME ) )
                    // InternalSQLParser.g:8936:4: (lv_sotime_3_0= RULE_TIME )
                    {
                    // InternalSQLParser.g:8936:4: (lv_sotime_3_0= RULE_TIME )
                    // InternalSQLParser.g:8937:5: lv_sotime_3_0= RULE_TIME
                    {
                    lv_sotime_3_0=(Token)match(input,RULE_TIME,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_sotime_3_0, grammarAccess.getScalarOperandAccess().getSotimeTIMETerminalRuleCall_3_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getScalarOperandRule());
                      					}
                      					setWithLastConsumed(
                      						current,
                      						"sotime",
                      						lv_sotime_3_0,
                      						"org.xtext.example.mydsl_sql.SQL.TIME");
                      				
                    }

                    }


                    }


                    }
                    break;
                case 5 :
                    // InternalSQLParser.g:8954:3: ( (lv_sodt_4_0= RULE_TIMESTAMP ) )
                    {
                    // InternalSQLParser.g:8954:3: ( (lv_sodt_4_0= RULE_TIMESTAMP ) )
                    // InternalSQLParser.g:8955:4: (lv_sodt_4_0= RULE_TIMESTAMP )
                    {
                    // InternalSQLParser.g:8955:4: (lv_sodt_4_0= RULE_TIMESTAMP )
                    // InternalSQLParser.g:8956:5: lv_sodt_4_0= RULE_TIMESTAMP
                    {
                    lv_sodt_4_0=(Token)match(input,RULE_TIMESTAMP,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_sodt_4_0, grammarAccess.getScalarOperandAccess().getSodtTIMESTAMPTerminalRuleCall_4_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getScalarOperandRule());
                      					}
                      					setWithLastConsumed(
                      						current,
                      						"sodt",
                      						lv_sodt_4_0,
                      						"org.xtext.example.mydsl_sql.SQL.TIMESTAMP");
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleScalarOperand"


    // $ANTLR start "entryRuleScalarNumberOperand"
    // InternalSQLParser.g:8976:1: entryRuleScalarNumberOperand returns [EObject current=null] : iv_ruleScalarNumberOperand= ruleScalarNumberOperand EOF ;
    public final EObject entryRuleScalarNumberOperand() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleScalarNumberOperand = null;


        try {
            // InternalSQLParser.g:8976:60: (iv_ruleScalarNumberOperand= ruleScalarNumberOperand EOF )
            // InternalSQLParser.g:8977:2: iv_ruleScalarNumberOperand= ruleScalarNumberOperand EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getScalarNumberOperandRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleScalarNumberOperand=ruleScalarNumberOperand();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleScalarNumberOperand; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleScalarNumberOperand"


    // $ANTLR start "ruleScalarNumberOperand"
    // InternalSQLParser.g:8983:1: ruleScalarNumberOperand returns [EObject current=null] : ( ( (lv_soUInt_0_0= RULE_UNSIGNED ) ) | ( (lv_soint_1_0= RULE_INT ) ) | ( (lv_sodbl_2_0= RULE_SIGNED_DOUBLE ) ) | ( (lv_sostr_3_0= ruleStringOperand ) ) ) ;
    public final EObject ruleScalarNumberOperand() throws RecognitionException {
        EObject current = null;

        Token lv_soUInt_0_0=null;
        Token lv_soint_1_0=null;
        Token lv_sodbl_2_0=null;
        AntlrDatatypeRuleToken lv_sostr_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:8989:2: ( ( ( (lv_soUInt_0_0= RULE_UNSIGNED ) ) | ( (lv_soint_1_0= RULE_INT ) ) | ( (lv_sodbl_2_0= RULE_SIGNED_DOUBLE ) ) | ( (lv_sostr_3_0= ruleStringOperand ) ) ) )
            // InternalSQLParser.g:8990:2: ( ( (lv_soUInt_0_0= RULE_UNSIGNED ) ) | ( (lv_soint_1_0= RULE_INT ) ) | ( (lv_sodbl_2_0= RULE_SIGNED_DOUBLE ) ) | ( (lv_sostr_3_0= ruleStringOperand ) ) )
            {
            // InternalSQLParser.g:8990:2: ( ( (lv_soUInt_0_0= RULE_UNSIGNED ) ) | ( (lv_soint_1_0= RULE_INT ) ) | ( (lv_sodbl_2_0= RULE_SIGNED_DOUBLE ) ) | ( (lv_sostr_3_0= ruleStringOperand ) ) )
            int alt156=4;
            switch ( input.LA(1) ) {
            case RULE_UNSIGNED:
                {
                alt156=1;
                }
                break;
            case RULE_INT:
                {
                alt156=2;
                }
                break;
            case RULE_SIGNED_DOUBLE:
                {
                alt156=3;
                }
                break;
            case RULE_STRING_:
                {
                alt156=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 156, 0, input);

                throw nvae;
            }

            switch (alt156) {
                case 1 :
                    // InternalSQLParser.g:8991:3: ( (lv_soUInt_0_0= RULE_UNSIGNED ) )
                    {
                    // InternalSQLParser.g:8991:3: ( (lv_soUInt_0_0= RULE_UNSIGNED ) )
                    // InternalSQLParser.g:8992:4: (lv_soUInt_0_0= RULE_UNSIGNED )
                    {
                    // InternalSQLParser.g:8992:4: (lv_soUInt_0_0= RULE_UNSIGNED )
                    // InternalSQLParser.g:8993:5: lv_soUInt_0_0= RULE_UNSIGNED
                    {
                    lv_soUInt_0_0=(Token)match(input,RULE_UNSIGNED,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_soUInt_0_0, grammarAccess.getScalarNumberOperandAccess().getSoUIntUNSIGNEDTerminalRuleCall_0_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getScalarNumberOperandRule());
                      					}
                      					setWithLastConsumed(
                      						current,
                      						"soUInt",
                      						lv_soUInt_0_0,
                      						"org.xtext.example.mydsl_sql.SQL.UNSIGNED");
                      				
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:9010:3: ( (lv_soint_1_0= RULE_INT ) )
                    {
                    // InternalSQLParser.g:9010:3: ( (lv_soint_1_0= RULE_INT ) )
                    // InternalSQLParser.g:9011:4: (lv_soint_1_0= RULE_INT )
                    {
                    // InternalSQLParser.g:9011:4: (lv_soint_1_0= RULE_INT )
                    // InternalSQLParser.g:9012:5: lv_soint_1_0= RULE_INT
                    {
                    lv_soint_1_0=(Token)match(input,RULE_INT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_soint_1_0, grammarAccess.getScalarNumberOperandAccess().getSointINTTerminalRuleCall_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getScalarNumberOperandRule());
                      					}
                      					setWithLastConsumed(
                      						current,
                      						"soint",
                      						lv_soint_1_0,
                      						"org.xtext.example.mydsl_sql.SQL.INT");
                      				
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:9029:3: ( (lv_sodbl_2_0= RULE_SIGNED_DOUBLE ) )
                    {
                    // InternalSQLParser.g:9029:3: ( (lv_sodbl_2_0= RULE_SIGNED_DOUBLE ) )
                    // InternalSQLParser.g:9030:4: (lv_sodbl_2_0= RULE_SIGNED_DOUBLE )
                    {
                    // InternalSQLParser.g:9030:4: (lv_sodbl_2_0= RULE_SIGNED_DOUBLE )
                    // InternalSQLParser.g:9031:5: lv_sodbl_2_0= RULE_SIGNED_DOUBLE
                    {
                    lv_sodbl_2_0=(Token)match(input,RULE_SIGNED_DOUBLE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_sodbl_2_0, grammarAccess.getScalarNumberOperandAccess().getSodblSIGNED_DOUBLETerminalRuleCall_2_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getScalarNumberOperandRule());
                      					}
                      					setWithLastConsumed(
                      						current,
                      						"sodbl",
                      						lv_sodbl_2_0,
                      						"org.xtext.example.mydsl_sql.SQL.SIGNED_DOUBLE");
                      				
                    }

                    }


                    }


                    }
                    break;
                case 4 :
                    // InternalSQLParser.g:9048:3: ( (lv_sostr_3_0= ruleStringOperand ) )
                    {
                    // InternalSQLParser.g:9048:3: ( (lv_sostr_3_0= ruleStringOperand ) )
                    // InternalSQLParser.g:9049:4: (lv_sostr_3_0= ruleStringOperand )
                    {
                    // InternalSQLParser.g:9049:4: (lv_sostr_3_0= ruleStringOperand )
                    // InternalSQLParser.g:9050:5: lv_sostr_3_0= ruleStringOperand
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getScalarNumberOperandAccess().getSostrStringOperandParserRuleCall_3_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_sostr_3_0=ruleStringOperand();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getScalarNumberOperandRule());
                      					}
                      					set(
                      						current,
                      						"sostr",
                      						lv_sostr_3_0,
                      						"org.xtext.example.mydsl_sql.SQL.StringOperand");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleScalarNumberOperand"


    // $ANTLR start "entryRuleSQLCASE"
    // InternalSQLParser.g:9071:1: entryRuleSQLCASE returns [EObject current=null] : iv_ruleSQLCASE= ruleSQLCASE EOF ;
    public final EObject entryRuleSQLCASE() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSQLCASE = null;


        try {
            // InternalSQLParser.g:9071:48: (iv_ruleSQLCASE= ruleSQLCASE EOF )
            // InternalSQLParser.g:9072:2: iv_ruleSQLCASE= ruleSQLCASE EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSQLCASERule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSQLCASE=ruleSQLCASE();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSQLCASE; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSQLCASE"


    // $ANTLR start "ruleSQLCASE"
    // InternalSQLParser.g:9078:1: ruleSQLCASE returns [EObject current=null] : (otherlv_0= CASE ( ( (lv_wop_1_0= ruleOperandGroup ) ) | ( (lv_expr_2_0= ruleFullExpression ) ) )? ( (lv_when_3_0= ruleSQLCaseWhens ) ) otherlv_4= END ) ;
    public final EObject ruleSQLCASE() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_4=null;
        EObject lv_wop_1_0 = null;

        EObject lv_expr_2_0 = null;

        EObject lv_when_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:9084:2: ( (otherlv_0= CASE ( ( (lv_wop_1_0= ruleOperandGroup ) ) | ( (lv_expr_2_0= ruleFullExpression ) ) )? ( (lv_when_3_0= ruleSQLCaseWhens ) ) otherlv_4= END ) )
            // InternalSQLParser.g:9085:2: (otherlv_0= CASE ( ( (lv_wop_1_0= ruleOperandGroup ) ) | ( (lv_expr_2_0= ruleFullExpression ) ) )? ( (lv_when_3_0= ruleSQLCaseWhens ) ) otherlv_4= END )
            {
            // InternalSQLParser.g:9085:2: (otherlv_0= CASE ( ( (lv_wop_1_0= ruleOperandGroup ) ) | ( (lv_expr_2_0= ruleFullExpression ) ) )? ( (lv_when_3_0= ruleSQLCaseWhens ) ) otherlv_4= END )
            // InternalSQLParser.g:9086:3: otherlv_0= CASE ( ( (lv_wop_1_0= ruleOperandGroup ) ) | ( (lv_expr_2_0= ruleFullExpression ) ) )? ( (lv_when_3_0= ruleSQLCaseWhens ) ) otherlv_4= END
            {
            otherlv_0=(Token)match(input,CASE,FOLLOW_111); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getSQLCASEAccess().getCASEKeyword_0());
              		
            }
            // InternalSQLParser.g:9090:3: ( ( (lv_wop_1_0= ruleOperandGroup ) ) | ( (lv_expr_2_0= ruleFullExpression ) ) )?
            int alt157=3;
            alt157 = dfa157.predict(input);
            switch (alt157) {
                case 1 :
                    // InternalSQLParser.g:9091:4: ( (lv_wop_1_0= ruleOperandGroup ) )
                    {
                    // InternalSQLParser.g:9091:4: ( (lv_wop_1_0= ruleOperandGroup ) )
                    // InternalSQLParser.g:9092:5: (lv_wop_1_0= ruleOperandGroup )
                    {
                    // InternalSQLParser.g:9092:5: (lv_wop_1_0= ruleOperandGroup )
                    // InternalSQLParser.g:9093:6: lv_wop_1_0= ruleOperandGroup
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getSQLCASEAccess().getWopOperandGroupParserRuleCall_1_0_0());
                      					
                    }
                    pushFollow(FOLLOW_111);
                    lv_wop_1_0=ruleOperandGroup();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSQLCASERule());
                      						}
                      						set(
                      							current,
                      							"wop",
                      							lv_wop_1_0,
                      							"org.xtext.example.mydsl_sql.SQL.OperandGroup");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:9111:4: ( (lv_expr_2_0= ruleFullExpression ) )
                    {
                    // InternalSQLParser.g:9111:4: ( (lv_expr_2_0= ruleFullExpression ) )
                    // InternalSQLParser.g:9112:5: (lv_expr_2_0= ruleFullExpression )
                    {
                    // InternalSQLParser.g:9112:5: (lv_expr_2_0= ruleFullExpression )
                    // InternalSQLParser.g:9113:6: lv_expr_2_0= ruleFullExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getSQLCASEAccess().getExprFullExpressionParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_111);
                    lv_expr_2_0=ruleFullExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSQLCASERule());
                      						}
                      						set(
                      							current,
                      							"expr",
                      							lv_expr_2_0,
                      							"org.xtext.example.mydsl_sql.SQL.FullExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            // InternalSQLParser.g:9131:3: ( (lv_when_3_0= ruleSQLCaseWhens ) )
            // InternalSQLParser.g:9132:4: (lv_when_3_0= ruleSQLCaseWhens )
            {
            // InternalSQLParser.g:9132:4: (lv_when_3_0= ruleSQLCaseWhens )
            // InternalSQLParser.g:9133:5: lv_when_3_0= ruleSQLCaseWhens
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getSQLCASEAccess().getWhenSQLCaseWhensParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_112);
            lv_when_3_0=ruleSQLCaseWhens();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getSQLCASERule());
              					}
              					set(
              						current,
              						"when",
              						lv_when_3_0,
              						"org.xtext.example.mydsl_sql.SQL.SQLCaseWhens");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_4=(Token)match(input,END,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getSQLCASEAccess().getENDKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSQLCASE"


    // $ANTLR start "entryRuleSQLCaseWhens"
    // InternalSQLParser.g:9158:1: entryRuleSQLCaseWhens returns [EObject current=null] : iv_ruleSQLCaseWhens= ruleSQLCaseWhens EOF ;
    public final EObject entryRuleSQLCaseWhens() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSQLCaseWhens = null;


        try {
            // InternalSQLParser.g:9158:53: (iv_ruleSQLCaseWhens= ruleSQLCaseWhens EOF )
            // InternalSQLParser.g:9159:2: iv_ruleSQLCaseWhens= ruleSQLCaseWhens EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSQLCaseWhensRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSQLCaseWhens=ruleSQLCaseWhens();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSQLCaseWhens; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSQLCaseWhens"


    // $ANTLR start "ruleSQLCaseWhens"
    // InternalSQLParser.g:9165:1: ruleSQLCaseWhens returns [EObject current=null] : (this_SqlCaseWhen_0= ruleSqlCaseWhen ( () ( (lv_entries_2_0= ruleSqlCaseWhen ) )+ )? ) ;
    public final EObject ruleSQLCaseWhens() throws RecognitionException {
        EObject current = null;

        EObject this_SqlCaseWhen_0 = null;

        EObject lv_entries_2_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:9171:2: ( (this_SqlCaseWhen_0= ruleSqlCaseWhen ( () ( (lv_entries_2_0= ruleSqlCaseWhen ) )+ )? ) )
            // InternalSQLParser.g:9172:2: (this_SqlCaseWhen_0= ruleSqlCaseWhen ( () ( (lv_entries_2_0= ruleSqlCaseWhen ) )+ )? )
            {
            // InternalSQLParser.g:9172:2: (this_SqlCaseWhen_0= ruleSqlCaseWhen ( () ( (lv_entries_2_0= ruleSqlCaseWhen ) )+ )? )
            // InternalSQLParser.g:9173:3: this_SqlCaseWhen_0= ruleSqlCaseWhen ( () ( (lv_entries_2_0= ruleSqlCaseWhen ) )+ )?
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getSQLCaseWhensAccess().getSqlCaseWhenParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_113);
            this_SqlCaseWhen_0=ruleSqlCaseWhen();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_SqlCaseWhen_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:9184:3: ( () ( (lv_entries_2_0= ruleSqlCaseWhen ) )+ )?
            int alt159=2;
            int LA159_0 = input.LA(1);

            if ( (LA159_0==WHEN) ) {
                alt159=1;
            }
            switch (alt159) {
                case 1 :
                    // InternalSQLParser.g:9185:4: () ( (lv_entries_2_0= ruleSqlCaseWhen ) )+
                    {
                    // InternalSQLParser.g:9185:4: ()
                    // InternalSQLParser.g:9186:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getSQLCaseWhensAccess().getWhenListEntriesAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalSQLParser.g:9195:4: ( (lv_entries_2_0= ruleSqlCaseWhen ) )+
                    int cnt158=0;
                    loop158:
                    do {
                        int alt158=2;
                        int LA158_0 = input.LA(1);

                        if ( (LA158_0==WHEN) ) {
                            alt158=1;
                        }


                        switch (alt158) {
                    	case 1 :
                    	    // InternalSQLParser.g:9196:5: (lv_entries_2_0= ruleSqlCaseWhen )
                    	    {
                    	    // InternalSQLParser.g:9196:5: (lv_entries_2_0= ruleSqlCaseWhen )
                    	    // InternalSQLParser.g:9197:6: lv_entries_2_0= ruleSqlCaseWhen
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      						newCompositeNode(grammarAccess.getSQLCaseWhensAccess().getEntriesSqlCaseWhenParserRuleCall_1_1_0());
                    	      					
                    	    }
                    	    pushFollow(FOLLOW_113);
                    	    lv_entries_2_0=ruleSqlCaseWhen();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						if (current==null) {
                    	      							current = createModelElementForParent(grammarAccess.getSQLCaseWhensRule());
                    	      						}
                    	      						add(
                    	      							current,
                    	      							"entries",
                    	      							lv_entries_2_0,
                    	      							"org.xtext.example.mydsl_sql.SQL.SqlCaseWhen");
                    	      						afterParserOrEnumRuleCall();
                    	      					
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt158 >= 1 ) break loop158;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(158, input);
                                throw eee;
                        }
                        cnt158++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSQLCaseWhens"


    // $ANTLR start "entryRuleSqlCaseWhen"
    // InternalSQLParser.g:9219:1: entryRuleSqlCaseWhen returns [EObject current=null] : iv_ruleSqlCaseWhen= ruleSqlCaseWhen EOF ;
    public final EObject entryRuleSqlCaseWhen() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSqlCaseWhen = null;


        try {
            // InternalSQLParser.g:9219:52: (iv_ruleSqlCaseWhen= ruleSqlCaseWhen EOF )
            // InternalSQLParser.g:9220:2: iv_ruleSqlCaseWhen= ruleSqlCaseWhen EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSqlCaseWhenRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSqlCaseWhen=ruleSqlCaseWhen();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSqlCaseWhen; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSqlCaseWhen"


    // $ANTLR start "ruleSqlCaseWhen"
    // InternalSQLParser.g:9226:1: ruleSqlCaseWhen returns [EObject current=null] : (otherlv_0= WHEN ( ( (lv_wop_1_0= ruleOperandGroup ) ) | ( (lv_expr_2_0= ruleFullExpression ) ) ) otherlv_3= THEN ( (lv_texp_4_0= ruleOperandGroup ) ) (otherlv_5= ELSE ( (lv_eexp_6_0= ruleOperandGroup ) ) )? ) ;
    public final EObject ruleSqlCaseWhen() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_wop_1_0 = null;

        EObject lv_expr_2_0 = null;

        EObject lv_texp_4_0 = null;

        EObject lv_eexp_6_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:9232:2: ( (otherlv_0= WHEN ( ( (lv_wop_1_0= ruleOperandGroup ) ) | ( (lv_expr_2_0= ruleFullExpression ) ) ) otherlv_3= THEN ( (lv_texp_4_0= ruleOperandGroup ) ) (otherlv_5= ELSE ( (lv_eexp_6_0= ruleOperandGroup ) ) )? ) )
            // InternalSQLParser.g:9233:2: (otherlv_0= WHEN ( ( (lv_wop_1_0= ruleOperandGroup ) ) | ( (lv_expr_2_0= ruleFullExpression ) ) ) otherlv_3= THEN ( (lv_texp_4_0= ruleOperandGroup ) ) (otherlv_5= ELSE ( (lv_eexp_6_0= ruleOperandGroup ) ) )? )
            {
            // InternalSQLParser.g:9233:2: (otherlv_0= WHEN ( ( (lv_wop_1_0= ruleOperandGroup ) ) | ( (lv_expr_2_0= ruleFullExpression ) ) ) otherlv_3= THEN ( (lv_texp_4_0= ruleOperandGroup ) ) (otherlv_5= ELSE ( (lv_eexp_6_0= ruleOperandGroup ) ) )? )
            // InternalSQLParser.g:9234:3: otherlv_0= WHEN ( ( (lv_wop_1_0= ruleOperandGroup ) ) | ( (lv_expr_2_0= ruleFullExpression ) ) ) otherlv_3= THEN ( (lv_texp_4_0= ruleOperandGroup ) ) (otherlv_5= ELSE ( (lv_eexp_6_0= ruleOperandGroup ) ) )?
            {
            otherlv_0=(Token)match(input,WHEN,FOLLOW_42); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getSqlCaseWhenAccess().getWHENKeyword_0());
              		
            }
            // InternalSQLParser.g:9238:3: ( ( (lv_wop_1_0= ruleOperandGroup ) ) | ( (lv_expr_2_0= ruleFullExpression ) ) )
            int alt160=2;
            alt160 = dfa160.predict(input);
            switch (alt160) {
                case 1 :
                    // InternalSQLParser.g:9239:4: ( (lv_wop_1_0= ruleOperandGroup ) )
                    {
                    // InternalSQLParser.g:9239:4: ( (lv_wop_1_0= ruleOperandGroup ) )
                    // InternalSQLParser.g:9240:5: (lv_wop_1_0= ruleOperandGroup )
                    {
                    // InternalSQLParser.g:9240:5: (lv_wop_1_0= ruleOperandGroup )
                    // InternalSQLParser.g:9241:6: lv_wop_1_0= ruleOperandGroup
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getSqlCaseWhenAccess().getWopOperandGroupParserRuleCall_1_0_0());
                      					
                    }
                    pushFollow(FOLLOW_114);
                    lv_wop_1_0=ruleOperandGroup();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSqlCaseWhenRule());
                      						}
                      						set(
                      							current,
                      							"wop",
                      							lv_wop_1_0,
                      							"org.xtext.example.mydsl_sql.SQL.OperandGroup");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:9259:4: ( (lv_expr_2_0= ruleFullExpression ) )
                    {
                    // InternalSQLParser.g:9259:4: ( (lv_expr_2_0= ruleFullExpression ) )
                    // InternalSQLParser.g:9260:5: (lv_expr_2_0= ruleFullExpression )
                    {
                    // InternalSQLParser.g:9260:5: (lv_expr_2_0= ruleFullExpression )
                    // InternalSQLParser.g:9261:6: lv_expr_2_0= ruleFullExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getSqlCaseWhenAccess().getExprFullExpressionParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_114);
                    lv_expr_2_0=ruleFullExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSqlCaseWhenRule());
                      						}
                      						set(
                      							current,
                      							"expr",
                      							lv_expr_2_0,
                      							"org.xtext.example.mydsl_sql.SQL.FullExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            otherlv_3=(Token)match(input,THEN,FOLLOW_77); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getSqlCaseWhenAccess().getTHENKeyword_2());
              		
            }
            // InternalSQLParser.g:9283:3: ( (lv_texp_4_0= ruleOperandGroup ) )
            // InternalSQLParser.g:9284:4: (lv_texp_4_0= ruleOperandGroup )
            {
            // InternalSQLParser.g:9284:4: (lv_texp_4_0= ruleOperandGroup )
            // InternalSQLParser.g:9285:5: lv_texp_4_0= ruleOperandGroup
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getSqlCaseWhenAccess().getTexpOperandGroupParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_115);
            lv_texp_4_0=ruleOperandGroup();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getSqlCaseWhenRule());
              					}
              					set(
              						current,
              						"texp",
              						lv_texp_4_0,
              						"org.xtext.example.mydsl_sql.SQL.OperandGroup");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:9302:3: (otherlv_5= ELSE ( (lv_eexp_6_0= ruleOperandGroup ) ) )?
            int alt161=2;
            int LA161_0 = input.LA(1);

            if ( (LA161_0==ELSE) ) {
                alt161=1;
            }
            switch (alt161) {
                case 1 :
                    // InternalSQLParser.g:9303:4: otherlv_5= ELSE ( (lv_eexp_6_0= ruleOperandGroup ) )
                    {
                    otherlv_5=(Token)match(input,ELSE,FOLLOW_77); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_5, grammarAccess.getSqlCaseWhenAccess().getELSEKeyword_4_0());
                      			
                    }
                    // InternalSQLParser.g:9307:4: ( (lv_eexp_6_0= ruleOperandGroup ) )
                    // InternalSQLParser.g:9308:5: (lv_eexp_6_0= ruleOperandGroup )
                    {
                    // InternalSQLParser.g:9308:5: (lv_eexp_6_0= ruleOperandGroup )
                    // InternalSQLParser.g:9309:6: lv_eexp_6_0= ruleOperandGroup
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getSqlCaseWhenAccess().getEexpOperandGroupParserRuleCall_4_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_eexp_6_0=ruleOperandGroup();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSqlCaseWhenRule());
                      						}
                      						set(
                      							current,
                      							"eexp",
                      							lv_eexp_6_0,
                      							"org.xtext.example.mydsl_sql.SQL.OperandGroup");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSqlCaseWhen"


    // $ANTLR start "entryRuleJoinType"
    // InternalSQLParser.g:9331:1: entryRuleJoinType returns [String current=null] : iv_ruleJoinType= ruleJoinType EOF ;
    public final String entryRuleJoinType() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleJoinType = null;


        try {
            // InternalSQLParser.g:9331:48: (iv_ruleJoinType= ruleJoinType EOF )
            // InternalSQLParser.g:9332:2: iv_ruleJoinType= ruleJoinType EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getJoinTypeRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleJoinType=ruleJoinType();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleJoinType.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleJoinType"


    // $ANTLR start "ruleJoinType"
    // InternalSQLParser.g:9338:1: ruleJoinType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : ( (kw= NATURAL )? (kw= INNER | ( (kw= LEFT | kw= RIGHT | kw= FULL ) (kw= OUTER )? ) | kw= CROSS | kw= STRAIGHT_JOIN )? kw= JOIN ) ;
    public final AntlrDatatypeRuleToken ruleJoinType() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            // InternalSQLParser.g:9344:2: ( ( (kw= NATURAL )? (kw= INNER | ( (kw= LEFT | kw= RIGHT | kw= FULL ) (kw= OUTER )? ) | kw= CROSS | kw= STRAIGHT_JOIN )? kw= JOIN ) )
            // InternalSQLParser.g:9345:2: ( (kw= NATURAL )? (kw= INNER | ( (kw= LEFT | kw= RIGHT | kw= FULL ) (kw= OUTER )? ) | kw= CROSS | kw= STRAIGHT_JOIN )? kw= JOIN )
            {
            // InternalSQLParser.g:9345:2: ( (kw= NATURAL )? (kw= INNER | ( (kw= LEFT | kw= RIGHT | kw= FULL ) (kw= OUTER )? ) | kw= CROSS | kw= STRAIGHT_JOIN )? kw= JOIN )
            // InternalSQLParser.g:9346:3: (kw= NATURAL )? (kw= INNER | ( (kw= LEFT | kw= RIGHT | kw= FULL ) (kw= OUTER )? ) | kw= CROSS | kw= STRAIGHT_JOIN )? kw= JOIN
            {
            // InternalSQLParser.g:9346:3: (kw= NATURAL )?
            int alt162=2;
            int LA162_0 = input.LA(1);

            if ( (LA162_0==NATURAL) ) {
                alt162=1;
            }
            switch (alt162) {
                case 1 :
                    // InternalSQLParser.g:9347:4: kw= NATURAL
                    {
                    kw=(Token)match(input,NATURAL,FOLLOW_116); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getJoinTypeAccess().getNATURALKeyword_0());
                      			
                    }

                    }
                    break;

            }

            // InternalSQLParser.g:9353:3: (kw= INNER | ( (kw= LEFT | kw= RIGHT | kw= FULL ) (kw= OUTER )? ) | kw= CROSS | kw= STRAIGHT_JOIN )?
            int alt165=5;
            switch ( input.LA(1) ) {
                case INNER:
                    {
                    alt165=1;
                    }
                    break;
                case RIGHT:
                case FULL:
                case LEFT:
                    {
                    alt165=2;
                    }
                    break;
                case CROSS:
                    {
                    alt165=3;
                    }
                    break;
                case STRAIGHT_JOIN:
                    {
                    alt165=4;
                    }
                    break;
            }

            switch (alt165) {
                case 1 :
                    // InternalSQLParser.g:9354:4: kw= INNER
                    {
                    kw=(Token)match(input,INNER,FOLLOW_117); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getJoinTypeAccess().getINNERKeyword_1_0());
                      			
                    }

                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:9360:4: ( (kw= LEFT | kw= RIGHT | kw= FULL ) (kw= OUTER )? )
                    {
                    // InternalSQLParser.g:9360:4: ( (kw= LEFT | kw= RIGHT | kw= FULL ) (kw= OUTER )? )
                    // InternalSQLParser.g:9361:5: (kw= LEFT | kw= RIGHT | kw= FULL ) (kw= OUTER )?
                    {
                    // InternalSQLParser.g:9361:5: (kw= LEFT | kw= RIGHT | kw= FULL )
                    int alt163=3;
                    switch ( input.LA(1) ) {
                    case LEFT:
                        {
                        alt163=1;
                        }
                        break;
                    case RIGHT:
                        {
                        alt163=2;
                        }
                        break;
                    case FULL:
                        {
                        alt163=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 163, 0, input);

                        throw nvae;
                    }

                    switch (alt163) {
                        case 1 :
                            // InternalSQLParser.g:9362:6: kw= LEFT
                            {
                            kw=(Token)match(input,LEFT,FOLLOW_118); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						current.merge(kw);
                              						newLeafNode(kw, grammarAccess.getJoinTypeAccess().getLEFTKeyword_1_1_0_0());
                              					
                            }

                            }
                            break;
                        case 2 :
                            // InternalSQLParser.g:9368:6: kw= RIGHT
                            {
                            kw=(Token)match(input,RIGHT,FOLLOW_118); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						current.merge(kw);
                              						newLeafNode(kw, grammarAccess.getJoinTypeAccess().getRIGHTKeyword_1_1_0_1());
                              					
                            }

                            }
                            break;
                        case 3 :
                            // InternalSQLParser.g:9374:6: kw= FULL
                            {
                            kw=(Token)match(input,FULL,FOLLOW_118); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						current.merge(kw);
                              						newLeafNode(kw, grammarAccess.getJoinTypeAccess().getFULLKeyword_1_1_0_2());
                              					
                            }

                            }
                            break;

                    }

                    // InternalSQLParser.g:9380:5: (kw= OUTER )?
                    int alt164=2;
                    int LA164_0 = input.LA(1);

                    if ( (LA164_0==OUTER) ) {
                        alt164=1;
                    }
                    switch (alt164) {
                        case 1 :
                            // InternalSQLParser.g:9381:6: kw= OUTER
                            {
                            kw=(Token)match(input,OUTER,FOLLOW_117); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						current.merge(kw);
                              						newLeafNode(kw, grammarAccess.getJoinTypeAccess().getOUTERKeyword_1_1_1());
                              					
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:9389:4: kw= CROSS
                    {
                    kw=(Token)match(input,CROSS,FOLLOW_117); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getJoinTypeAccess().getCROSSKeyword_1_2());
                      			
                    }

                    }
                    break;
                case 4 :
                    // InternalSQLParser.g:9395:4: kw= STRAIGHT_JOIN
                    {
                    kw=(Token)match(input,STRAIGHT_JOIN,FOLLOW_117); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getJoinTypeAccess().getSTRAIGHT_JOINKeyword_1_3());
                      			
                    }

                    }
                    break;

            }

            kw=(Token)match(input,JOIN,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(kw);
              			newLeafNode(kw, grammarAccess.getJoinTypeAccess().getJOINKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleJoinType"


    // $ANTLR start "entryRuleDBID"
    // InternalSQLParser.g:9410:1: entryRuleDBID returns [String current=null] : iv_ruleDBID= ruleDBID EOF ;
    public final String entryRuleDBID() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleDBID = null;


        try {
            // InternalSQLParser.g:9410:44: (iv_ruleDBID= ruleDBID EOF )
            // InternalSQLParser.g:9411:2: iv_ruleDBID= ruleDBID EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDBIDRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDBID=ruleDBID();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDBID.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleDBID"


    // $ANTLR start "ruleDBID"
    // InternalSQLParser.g:9417:1: ruleDBID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_ID_0= RULE_ID | this_DBNAME_1= RULE_DBNAME | this_STRING_2= RULE_STRING ) ;
    public final AntlrDatatypeRuleToken ruleDBID() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_ID_0=null;
        Token this_DBNAME_1=null;
        Token this_STRING_2=null;


        	enterRule();

        try {
            // InternalSQLParser.g:9423:2: ( (this_ID_0= RULE_ID | this_DBNAME_1= RULE_DBNAME | this_STRING_2= RULE_STRING ) )
            // InternalSQLParser.g:9424:2: (this_ID_0= RULE_ID | this_DBNAME_1= RULE_DBNAME | this_STRING_2= RULE_STRING )
            {
            // InternalSQLParser.g:9424:2: (this_ID_0= RULE_ID | this_DBNAME_1= RULE_DBNAME | this_STRING_2= RULE_STRING )
            int alt166=3;
            switch ( input.LA(1) ) {
            case RULE_ID:
                {
                alt166=1;
                }
                break;
            case RULE_DBNAME:
                {
                alt166=2;
                }
                break;
            case RULE_STRING:
                {
                alt166=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 166, 0, input);

                throw nvae;
            }

            switch (alt166) {
                case 1 :
                    // InternalSQLParser.g:9425:3: this_ID_0= RULE_ID
                    {
                    this_ID_0=(Token)match(input,RULE_ID,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_ID_0);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_ID_0, grammarAccess.getDBIDAccess().getIDTerminalRuleCall_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:9433:3: this_DBNAME_1= RULE_DBNAME
                    {
                    this_DBNAME_1=(Token)match(input,RULE_DBNAME,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_DBNAME_1);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_DBNAME_1, grammarAccess.getDBIDAccess().getDBNAMETerminalRuleCall_1());
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:9441:3: this_STRING_2= RULE_STRING
                    {
                    this_STRING_2=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_STRING_2);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_STRING_2, grammarAccess.getDBIDAccess().getSTRINGTerminalRuleCall_2());
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleDBID"


    // $ANTLR start "entryRuleSignedLiteral"
    // InternalSQLParser.g:9452:1: entryRuleSignedLiteral returns [String current=null] : iv_ruleSignedLiteral= ruleSignedLiteral EOF ;
    public final String entryRuleSignedLiteral() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleSignedLiteral = null;


        try {
            // InternalSQLParser.g:9452:53: (iv_ruleSignedLiteral= ruleSignedLiteral EOF )
            // InternalSQLParser.g:9453:2: iv_ruleSignedLiteral= ruleSignedLiteral EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSignedLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSignedLiteral=ruleSignedLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSignedLiteral.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSignedLiteral"


    // $ANTLR start "ruleSignedLiteral"
    // InternalSQLParser.g:9459:1: ruleSignedLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_Literal_0= ruleLiteral | (kw= PlusSign this_NumLiteral_2= ruleNumLiteral ) | (kw= HyphenMinus this_NumLiteral_4= ruleNumLiteral ) ) ;
    public final AntlrDatatypeRuleToken ruleSignedLiteral() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;
        AntlrDatatypeRuleToken this_Literal_0 = null;

        AntlrDatatypeRuleToken this_NumLiteral_2 = null;

        AntlrDatatypeRuleToken this_NumLiteral_4 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:9465:2: ( (this_Literal_0= ruleLiteral | (kw= PlusSign this_NumLiteral_2= ruleNumLiteral ) | (kw= HyphenMinus this_NumLiteral_4= ruleNumLiteral ) ) )
            // InternalSQLParser.g:9466:2: (this_Literal_0= ruleLiteral | (kw= PlusSign this_NumLiteral_2= ruleNumLiteral ) | (kw= HyphenMinus this_NumLiteral_4= ruleNumLiteral ) )
            {
            // InternalSQLParser.g:9466:2: (this_Literal_0= ruleLiteral | (kw= PlusSign this_NumLiteral_2= ruleNumLiteral ) | (kw= HyphenMinus this_NumLiteral_4= ruleNumLiteral ) )
            int alt167=3;
            switch ( input.LA(1) ) {
            case TIMESTAMP:
            case FALSE:
            case DATE:
            case NULL:
            case TIME:
            case TRUE:
            case RULE_UNSIGNED:
            case RULE_INT:
            case RULE_STRING_:
                {
                alt167=1;
                }
                break;
            case PlusSign:
                {
                alt167=2;
                }
                break;
            case HyphenMinus:
                {
                alt167=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 167, 0, input);

                throw nvae;
            }

            switch (alt167) {
                case 1 :
                    // InternalSQLParser.g:9467:3: this_Literal_0= ruleLiteral
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getSignedLiteralAccess().getLiteralParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Literal_0=ruleLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_Literal_0);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:9478:3: (kw= PlusSign this_NumLiteral_2= ruleNumLiteral )
                    {
                    // InternalSQLParser.g:9478:3: (kw= PlusSign this_NumLiteral_2= ruleNumLiteral )
                    // InternalSQLParser.g:9479:4: kw= PlusSign this_NumLiteral_2= ruleNumLiteral
                    {
                    kw=(Token)match(input,PlusSign,FOLLOW_119); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getSignedLiteralAccess().getPlusSignKeyword_1_0());
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getSignedLiteralAccess().getNumLiteralParserRuleCall_1_1());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_NumLiteral_2=ruleNumLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(this_NumLiteral_2);
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:9496:3: (kw= HyphenMinus this_NumLiteral_4= ruleNumLiteral )
                    {
                    // InternalSQLParser.g:9496:3: (kw= HyphenMinus this_NumLiteral_4= ruleNumLiteral )
                    // InternalSQLParser.g:9497:4: kw= HyphenMinus this_NumLiteral_4= ruleNumLiteral
                    {
                    kw=(Token)match(input,HyphenMinus,FOLLOW_119); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getSignedLiteralAccess().getHyphenMinusKeyword_2_0());
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getSignedLiteralAccess().getNumLiteralParserRuleCall_2_1());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_NumLiteral_4=ruleNumLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(this_NumLiteral_4);
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSignedLiteral"


    // $ANTLR start "entryRuleLiteral"
    // InternalSQLParser.g:9517:1: entryRuleLiteral returns [String current=null] : iv_ruleLiteral= ruleLiteral EOF ;
    public final String entryRuleLiteral() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleLiteral = null;


        try {
            // InternalSQLParser.g:9517:47: (iv_ruleLiteral= ruleLiteral EOF )
            // InternalSQLParser.g:9518:2: iv_ruleLiteral= ruleLiteral EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLiteral=ruleLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLiteral.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleLiteral"


    // $ANTLR start "ruleLiteral"
    // InternalSQLParser.g:9524:1: ruleLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_TextLiteral_0= ruleTextLiteral | this_NumLiteral_1= ruleNumLiteral | this_TemporalLiteral_2= ruleTemporalLiteral | kw= NULL | this_BoolLiteral_4= ruleBoolLiteral ) ;
    public final AntlrDatatypeRuleToken ruleLiteral() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;
        AntlrDatatypeRuleToken this_TextLiteral_0 = null;

        AntlrDatatypeRuleToken this_NumLiteral_1 = null;

        AntlrDatatypeRuleToken this_TemporalLiteral_2 = null;

        AntlrDatatypeRuleToken this_BoolLiteral_4 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:9530:2: ( (this_TextLiteral_0= ruleTextLiteral | this_NumLiteral_1= ruleNumLiteral | this_TemporalLiteral_2= ruleTemporalLiteral | kw= NULL | this_BoolLiteral_4= ruleBoolLiteral ) )
            // InternalSQLParser.g:9531:2: (this_TextLiteral_0= ruleTextLiteral | this_NumLiteral_1= ruleNumLiteral | this_TemporalLiteral_2= ruleTemporalLiteral | kw= NULL | this_BoolLiteral_4= ruleBoolLiteral )
            {
            // InternalSQLParser.g:9531:2: (this_TextLiteral_0= ruleTextLiteral | this_NumLiteral_1= ruleNumLiteral | this_TemporalLiteral_2= ruleTemporalLiteral | kw= NULL | this_BoolLiteral_4= ruleBoolLiteral )
            int alt168=5;
            switch ( input.LA(1) ) {
            case RULE_STRING_:
                {
                alt168=1;
                }
                break;
            case RULE_UNSIGNED:
            case RULE_INT:
                {
                alt168=2;
                }
                break;
            case TIMESTAMP:
            case DATE:
            case TIME:
                {
                alt168=3;
                }
                break;
            case NULL:
                {
                alt168=4;
                }
                break;
            case FALSE:
            case TRUE:
                {
                alt168=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 168, 0, input);

                throw nvae;
            }

            switch (alt168) {
                case 1 :
                    // InternalSQLParser.g:9532:3: this_TextLiteral_0= ruleTextLiteral
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getLiteralAccess().getTextLiteralParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_TextLiteral_0=ruleTextLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_TextLiteral_0);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:9543:3: this_NumLiteral_1= ruleNumLiteral
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getLiteralAccess().getNumLiteralParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_NumLiteral_1=ruleNumLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_NumLiteral_1);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:9554:3: this_TemporalLiteral_2= ruleTemporalLiteral
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getLiteralAccess().getTemporalLiteralParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_TemporalLiteral_2=ruleTemporalLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_TemporalLiteral_2);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 4 :
                    // InternalSQLParser.g:9565:3: kw= NULL
                    {
                    kw=(Token)match(input,NULL,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getLiteralAccess().getNULLKeyword_3());
                      		
                    }

                    }
                    break;
                case 5 :
                    // InternalSQLParser.g:9571:3: this_BoolLiteral_4= ruleBoolLiteral
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getLiteralAccess().getBoolLiteralParserRuleCall_4());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_BoolLiteral_4=ruleBoolLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_BoolLiteral_4);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleLiteral"


    // $ANTLR start "entryRuleTextLiteral"
    // InternalSQLParser.g:9585:1: entryRuleTextLiteral returns [String current=null] : iv_ruleTextLiteral= ruleTextLiteral EOF ;
    public final String entryRuleTextLiteral() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleTextLiteral = null;


        try {
            // InternalSQLParser.g:9585:51: (iv_ruleTextLiteral= ruleTextLiteral EOF )
            // InternalSQLParser.g:9586:2: iv_ruleTextLiteral= ruleTextLiteral EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTextLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTextLiteral=ruleTextLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTextLiteral.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTextLiteral"


    // $ANTLR start "ruleTextLiteral"
    // InternalSQLParser.g:9592:1: ruleTextLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : this_STRING__0= RULE_STRING_ ;
    public final AntlrDatatypeRuleToken ruleTextLiteral() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_STRING__0=null;


        	enterRule();

        try {
            // InternalSQLParser.g:9598:2: (this_STRING__0= RULE_STRING_ )
            // InternalSQLParser.g:9599:2: this_STRING__0= RULE_STRING_
            {
            this_STRING__0=(Token)match(input,RULE_STRING_,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current.merge(this_STRING__0);
              	
            }
            if ( state.backtracking==0 ) {

              		newLeafNode(this_STRING__0, grammarAccess.getTextLiteralAccess().getSTRING_TerminalRuleCall());
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTextLiteral"


    // $ANTLR start "entryRuleNumLiteral"
    // InternalSQLParser.g:9609:1: entryRuleNumLiteral returns [String current=null] : iv_ruleNumLiteral= ruleNumLiteral EOF ;
    public final String entryRuleNumLiteral() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleNumLiteral = null;


        try {
            // InternalSQLParser.g:9609:50: (iv_ruleNumLiteral= ruleNumLiteral EOF )
            // InternalSQLParser.g:9610:2: iv_ruleNumLiteral= ruleNumLiteral EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNumLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNumLiteral=ruleNumLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNumLiteral.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleNumLiteral"


    // $ANTLR start "ruleNumLiteral"
    // InternalSQLParser.g:9616:1: ruleNumLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_UNSIGNED_0= RULE_UNSIGNED | this_INT_1= RULE_INT ) ;
    public final AntlrDatatypeRuleToken ruleNumLiteral() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_UNSIGNED_0=null;
        Token this_INT_1=null;


        	enterRule();

        try {
            // InternalSQLParser.g:9622:2: ( (this_UNSIGNED_0= RULE_UNSIGNED | this_INT_1= RULE_INT ) )
            // InternalSQLParser.g:9623:2: (this_UNSIGNED_0= RULE_UNSIGNED | this_INT_1= RULE_INT )
            {
            // InternalSQLParser.g:9623:2: (this_UNSIGNED_0= RULE_UNSIGNED | this_INT_1= RULE_INT )
            int alt169=2;
            int LA169_0 = input.LA(1);

            if ( (LA169_0==RULE_UNSIGNED) ) {
                alt169=1;
            }
            else if ( (LA169_0==RULE_INT) ) {
                alt169=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 169, 0, input);

                throw nvae;
            }
            switch (alt169) {
                case 1 :
                    // InternalSQLParser.g:9624:3: this_UNSIGNED_0= RULE_UNSIGNED
                    {
                    this_UNSIGNED_0=(Token)match(input,RULE_UNSIGNED,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_UNSIGNED_0);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_UNSIGNED_0, grammarAccess.getNumLiteralAccess().getUNSIGNEDTerminalRuleCall_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:9632:3: this_INT_1= RULE_INT
                    {
                    this_INT_1=(Token)match(input,RULE_INT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_INT_1);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_INT_1, grammarAccess.getNumLiteralAccess().getINTTerminalRuleCall_1());
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleNumLiteral"


    // $ANTLR start "entryRuleTemporalLiteral"
    // InternalSQLParser.g:9643:1: entryRuleTemporalLiteral returns [String current=null] : iv_ruleTemporalLiteral= ruleTemporalLiteral EOF ;
    public final String entryRuleTemporalLiteral() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleTemporalLiteral = null;


        try {
            // InternalSQLParser.g:9643:55: (iv_ruleTemporalLiteral= ruleTemporalLiteral EOF )
            // InternalSQLParser.g:9644:2: iv_ruleTemporalLiteral= ruleTemporalLiteral EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTemporalLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTemporalLiteral=ruleTemporalLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTemporalLiteral.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTemporalLiteral"


    // $ANTLR start "ruleTemporalLiteral"
    // InternalSQLParser.g:9650:1: ruleTemporalLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : ( (kw= DATE this_STRING__1= RULE_STRING_ ) | (kw= TIME this_STRING__3= RULE_STRING_ ) | (kw= TIMESTAMP this_STRING__5= RULE_STRING_ ) ) ;
    public final AntlrDatatypeRuleToken ruleTemporalLiteral() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;
        Token this_STRING__1=null;
        Token this_STRING__3=null;
        Token this_STRING__5=null;


        	enterRule();

        try {
            // InternalSQLParser.g:9656:2: ( ( (kw= DATE this_STRING__1= RULE_STRING_ ) | (kw= TIME this_STRING__3= RULE_STRING_ ) | (kw= TIMESTAMP this_STRING__5= RULE_STRING_ ) ) )
            // InternalSQLParser.g:9657:2: ( (kw= DATE this_STRING__1= RULE_STRING_ ) | (kw= TIME this_STRING__3= RULE_STRING_ ) | (kw= TIMESTAMP this_STRING__5= RULE_STRING_ ) )
            {
            // InternalSQLParser.g:9657:2: ( (kw= DATE this_STRING__1= RULE_STRING_ ) | (kw= TIME this_STRING__3= RULE_STRING_ ) | (kw= TIMESTAMP this_STRING__5= RULE_STRING_ ) )
            int alt170=3;
            switch ( input.LA(1) ) {
            case DATE:
                {
                alt170=1;
                }
                break;
            case TIME:
                {
                alt170=2;
                }
                break;
            case TIMESTAMP:
                {
                alt170=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 170, 0, input);

                throw nvae;
            }

            switch (alt170) {
                case 1 :
                    // InternalSQLParser.g:9658:3: (kw= DATE this_STRING__1= RULE_STRING_ )
                    {
                    // InternalSQLParser.g:9658:3: (kw= DATE this_STRING__1= RULE_STRING_ )
                    // InternalSQLParser.g:9659:4: kw= DATE this_STRING__1= RULE_STRING_
                    {
                    kw=(Token)match(input,DATE,FOLLOW_27); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getTemporalLiteralAccess().getDATEKeyword_0_0());
                      			
                    }
                    this_STRING__1=(Token)match(input,RULE_STRING_,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(this_STRING__1);
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_STRING__1, grammarAccess.getTemporalLiteralAccess().getSTRING_TerminalRuleCall_0_1());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:9673:3: (kw= TIME this_STRING__3= RULE_STRING_ )
                    {
                    // InternalSQLParser.g:9673:3: (kw= TIME this_STRING__3= RULE_STRING_ )
                    // InternalSQLParser.g:9674:4: kw= TIME this_STRING__3= RULE_STRING_
                    {
                    kw=(Token)match(input,TIME,FOLLOW_27); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getTemporalLiteralAccess().getTIMEKeyword_1_0());
                      			
                    }
                    this_STRING__3=(Token)match(input,RULE_STRING_,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(this_STRING__3);
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_STRING__3, grammarAccess.getTemporalLiteralAccess().getSTRING_TerminalRuleCall_1_1());
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:9688:3: (kw= TIMESTAMP this_STRING__5= RULE_STRING_ )
                    {
                    // InternalSQLParser.g:9688:3: (kw= TIMESTAMP this_STRING__5= RULE_STRING_ )
                    // InternalSQLParser.g:9689:4: kw= TIMESTAMP this_STRING__5= RULE_STRING_
                    {
                    kw=(Token)match(input,TIMESTAMP,FOLLOW_27); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getTemporalLiteralAccess().getTIMESTAMPKeyword_2_0());
                      			
                    }
                    this_STRING__5=(Token)match(input,RULE_STRING_,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(this_STRING__5);
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_STRING__5, grammarAccess.getTemporalLiteralAccess().getSTRING_TerminalRuleCall_2_1());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTemporalLiteral"


    // $ANTLR start "entryRuleBoolLiteral"
    // InternalSQLParser.g:9706:1: entryRuleBoolLiteral returns [String current=null] : iv_ruleBoolLiteral= ruleBoolLiteral EOF ;
    public final String entryRuleBoolLiteral() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleBoolLiteral = null;


        try {
            // InternalSQLParser.g:9706:51: (iv_ruleBoolLiteral= ruleBoolLiteral EOF )
            // InternalSQLParser.g:9707:2: iv_ruleBoolLiteral= ruleBoolLiteral EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBoolLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBoolLiteral=ruleBoolLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBoolLiteral.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleBoolLiteral"


    // $ANTLR start "ruleBoolLiteral"
    // InternalSQLParser.g:9713:1: ruleBoolLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= TRUE | kw= FALSE ) ;
    public final AntlrDatatypeRuleToken ruleBoolLiteral() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            // InternalSQLParser.g:9719:2: ( (kw= TRUE | kw= FALSE ) )
            // InternalSQLParser.g:9720:2: (kw= TRUE | kw= FALSE )
            {
            // InternalSQLParser.g:9720:2: (kw= TRUE | kw= FALSE )
            int alt171=2;
            int LA171_0 = input.LA(1);

            if ( (LA171_0==TRUE) ) {
                alt171=1;
            }
            else if ( (LA171_0==FALSE) ) {
                alt171=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 171, 0, input);

                throw nvae;
            }
            switch (alt171) {
                case 1 :
                    // InternalSQLParser.g:9721:3: kw= TRUE
                    {
                    kw=(Token)match(input,TRUE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getBoolLiteralAccess().getTRUEKeyword_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:9727:3: kw= FALSE
                    {
                    kw=(Token)match(input,FALSE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getBoolLiteralAccess().getFALSEKeyword_1());
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleBoolLiteral"


    // $ANTLR start "entryRuleStringOperand"
    // InternalSQLParser.g:9736:1: entryRuleStringOperand returns [String current=null] : iv_ruleStringOperand= ruleStringOperand EOF ;
    public final String entryRuleStringOperand() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleStringOperand = null;


        try {
            // InternalSQLParser.g:9736:53: (iv_ruleStringOperand= ruleStringOperand EOF )
            // InternalSQLParser.g:9737:2: iv_ruleStringOperand= ruleStringOperand EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getStringOperandRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleStringOperand=ruleStringOperand();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleStringOperand.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleStringOperand"


    // $ANTLR start "ruleStringOperand"
    // InternalSQLParser.g:9743:1: ruleStringOperand returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : this_STRING__0= RULE_STRING_ ;
    public final AntlrDatatypeRuleToken ruleStringOperand() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_STRING__0=null;


        	enterRule();

        try {
            // InternalSQLParser.g:9749:2: (this_STRING__0= RULE_STRING_ )
            // InternalSQLParser.g:9750:2: this_STRING__0= RULE_STRING_
            {
            this_STRING__0=(Token)match(input,RULE_STRING_,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current.merge(this_STRING__0);
              	
            }
            if ( state.backtracking==0 ) {

              		newLeafNode(this_STRING__0, grammarAccess.getStringOperandAccess().getSTRING_TerminalRuleCall());
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleStringOperand"


    // $ANTLR start "entryRuleFNAME"
    // InternalSQLParser.g:9760:1: entryRuleFNAME returns [String current=null] : iv_ruleFNAME= ruleFNAME EOF ;
    public final String entryRuleFNAME() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleFNAME = null;


        try {
            // InternalSQLParser.g:9760:45: (iv_ruleFNAME= ruleFNAME EOF )
            // InternalSQLParser.g:9761:2: iv_ruleFNAME= ruleFNAME EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFNAMERule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFNAME=ruleFNAME();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFNAME.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFNAME"


    // $ANTLR start "ruleFNAME"
    // InternalSQLParser.g:9767:1: ruleFNAME returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_ID_0= RULE_ID kw= LeftParenthesis ) ;
    public final AntlrDatatypeRuleToken ruleFNAME() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_ID_0=null;
        Token kw=null;


        	enterRule();

        try {
            // InternalSQLParser.g:9773:2: ( (this_ID_0= RULE_ID kw= LeftParenthesis ) )
            // InternalSQLParser.g:9774:2: (this_ID_0= RULE_ID kw= LeftParenthesis )
            {
            // InternalSQLParser.g:9774:2: (this_ID_0= RULE_ID kw= LeftParenthesis )
            // InternalSQLParser.g:9775:3: this_ID_0= RULE_ID kw= LeftParenthesis
            {
            this_ID_0=(Token)match(input,RULE_ID,FOLLOW_11); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(this_ID_0);
              		
            }
            if ( state.backtracking==0 ) {

              			newLeafNode(this_ID_0, grammarAccess.getFNAMEAccess().getIDTerminalRuleCall_0());
              		
            }
            kw=(Token)match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(kw);
              			newLeafNode(kw, grammarAccess.getFNAMEAccess().getLeftParenthesisKeyword_1());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFNAME"


    // $ANTLR start "entryRuleUnsignedValue"
    // InternalSQLParser.g:9791:1: entryRuleUnsignedValue returns [EObject current=null] : iv_ruleUnsignedValue= ruleUnsignedValue EOF ;
    public final EObject entryRuleUnsignedValue() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleUnsignedValue = null;


        try {
            // InternalSQLParser.g:9791:54: (iv_ruleUnsignedValue= ruleUnsignedValue EOF )
            // InternalSQLParser.g:9792:2: iv_ruleUnsignedValue= ruleUnsignedValue EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getUnsignedValueRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleUnsignedValue=ruleUnsignedValue();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleUnsignedValue; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleUnsignedValue"


    // $ANTLR start "ruleUnsignedValue"
    // InternalSQLParser.g:9798:1: ruleUnsignedValue returns [EObject current=null] : ( (lv_integer_0_0= RULE_UNSIGNED ) ) ;
    public final EObject ruleUnsignedValue() throws RecognitionException {
        EObject current = null;

        Token lv_integer_0_0=null;


        	enterRule();

        try {
            // InternalSQLParser.g:9804:2: ( ( (lv_integer_0_0= RULE_UNSIGNED ) ) )
            // InternalSQLParser.g:9805:2: ( (lv_integer_0_0= RULE_UNSIGNED ) )
            {
            // InternalSQLParser.g:9805:2: ( (lv_integer_0_0= RULE_UNSIGNED ) )
            // InternalSQLParser.g:9806:3: (lv_integer_0_0= RULE_UNSIGNED )
            {
            // InternalSQLParser.g:9806:3: (lv_integer_0_0= RULE_UNSIGNED )
            // InternalSQLParser.g:9807:4: lv_integer_0_0= RULE_UNSIGNED
            {
            lv_integer_0_0=(Token)match(input,RULE_UNSIGNED,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(lv_integer_0_0, grammarAccess.getUnsignedValueAccess().getIntegerUNSIGNEDTerminalRuleCall_0());
              			
            }
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getUnsignedValueRule());
              				}
              				setWithLastConsumed(
              					current,
              					"integer",
              					lv_integer_0_0,
              					"org.xtext.example.mydsl_sql.SQL.UNSIGNED");
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleUnsignedValue"


    // $ANTLR start "ruleXFunction"
    // InternalSQLParser.g:9826:1: ruleXFunction returns [Enumerator current=null] : ( (enumLiteral_0= IN_1 ) | (enumLiteral_1= NOTIN ) | (enumLiteral_2= EQUAL ) | (enumLiteral_3= NOTEQUAL ) | (enumLiteral_4= LESS ) | (enumLiteral_5= LESS_1 ) | (enumLiteral_6= GREATER_1 ) | (enumLiteral_7= GREATER ) | (enumLiteral_8= BETWEEN_1 ) | (enumLiteral_9= BETWEEN_4 ) | (enumLiteral_10= BETWEEN_3 ) | (enumLiteral_11= BETWEEN_2 ) ) ;
    public final Enumerator ruleXFunction() throws RecognitionException {
        Enumerator current = null;

        Token enumLiteral_0=null;
        Token enumLiteral_1=null;
        Token enumLiteral_2=null;
        Token enumLiteral_3=null;
        Token enumLiteral_4=null;
        Token enumLiteral_5=null;
        Token enumLiteral_6=null;
        Token enumLiteral_7=null;
        Token enumLiteral_8=null;
        Token enumLiteral_9=null;
        Token enumLiteral_10=null;
        Token enumLiteral_11=null;


        	enterRule();

        try {
            // InternalSQLParser.g:9832:2: ( ( (enumLiteral_0= IN_1 ) | (enumLiteral_1= NOTIN ) | (enumLiteral_2= EQUAL ) | (enumLiteral_3= NOTEQUAL ) | (enumLiteral_4= LESS ) | (enumLiteral_5= LESS_1 ) | (enumLiteral_6= GREATER_1 ) | (enumLiteral_7= GREATER ) | (enumLiteral_8= BETWEEN_1 ) | (enumLiteral_9= BETWEEN_4 ) | (enumLiteral_10= BETWEEN_3 ) | (enumLiteral_11= BETWEEN_2 ) ) )
            // InternalSQLParser.g:9833:2: ( (enumLiteral_0= IN_1 ) | (enumLiteral_1= NOTIN ) | (enumLiteral_2= EQUAL ) | (enumLiteral_3= NOTEQUAL ) | (enumLiteral_4= LESS ) | (enumLiteral_5= LESS_1 ) | (enumLiteral_6= GREATER_1 ) | (enumLiteral_7= GREATER ) | (enumLiteral_8= BETWEEN_1 ) | (enumLiteral_9= BETWEEN_4 ) | (enumLiteral_10= BETWEEN_3 ) | (enumLiteral_11= BETWEEN_2 ) )
            {
            // InternalSQLParser.g:9833:2: ( (enumLiteral_0= IN_1 ) | (enumLiteral_1= NOTIN ) | (enumLiteral_2= EQUAL ) | (enumLiteral_3= NOTEQUAL ) | (enumLiteral_4= LESS ) | (enumLiteral_5= LESS_1 ) | (enumLiteral_6= GREATER_1 ) | (enumLiteral_7= GREATER ) | (enumLiteral_8= BETWEEN_1 ) | (enumLiteral_9= BETWEEN_4 ) | (enumLiteral_10= BETWEEN_3 ) | (enumLiteral_11= BETWEEN_2 ) )
            int alt172=12;
            switch ( input.LA(1) ) {
            case IN_1:
                {
                alt172=1;
                }
                break;
            case NOTIN:
                {
                alt172=2;
                }
                break;
            case EQUAL:
                {
                alt172=3;
                }
                break;
            case NOTEQUAL:
                {
                alt172=4;
                }
                break;
            case LESS:
                {
                alt172=5;
                }
                break;
            case LESS_1:
                {
                alt172=6;
                }
                break;
            case GREATER_1:
                {
                alt172=7;
                }
                break;
            case GREATER:
                {
                alt172=8;
                }
                break;
            case BETWEEN_1:
                {
                alt172=9;
                }
                break;
            case BETWEEN_4:
                {
                alt172=10;
                }
                break;
            case BETWEEN_3:
                {
                alt172=11;
                }
                break;
            case BETWEEN_2:
                {
                alt172=12;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 172, 0, input);

                throw nvae;
            }

            switch (alt172) {
                case 1 :
                    // InternalSQLParser.g:9834:3: (enumLiteral_0= IN_1 )
                    {
                    // InternalSQLParser.g:9834:3: (enumLiteral_0= IN_1 )
                    // InternalSQLParser.g:9835:4: enumLiteral_0= IN_1
                    {
                    enumLiteral_0=(Token)match(input,IN_1,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getXFunctionAccess().getXinEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getXFunctionAccess().getXinEnumLiteralDeclaration_0());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:9842:3: (enumLiteral_1= NOTIN )
                    {
                    // InternalSQLParser.g:9842:3: (enumLiteral_1= NOTIN )
                    // InternalSQLParser.g:9843:4: enumLiteral_1= NOTIN
                    {
                    enumLiteral_1=(Token)match(input,NOTIN,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getXFunctionAccess().getXnotinEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getXFunctionAccess().getXnotinEnumLiteralDeclaration_1());
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:9850:3: (enumLiteral_2= EQUAL )
                    {
                    // InternalSQLParser.g:9850:3: (enumLiteral_2= EQUAL )
                    // InternalSQLParser.g:9851:4: enumLiteral_2= EQUAL
                    {
                    enumLiteral_2=(Token)match(input,EQUAL,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getXFunctionAccess().getXeqEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_2, grammarAccess.getXFunctionAccess().getXeqEnumLiteralDeclaration_2());
                      			
                    }

                    }


                    }
                    break;
                case 4 :
                    // InternalSQLParser.g:9858:3: (enumLiteral_3= NOTEQUAL )
                    {
                    // InternalSQLParser.g:9858:3: (enumLiteral_3= NOTEQUAL )
                    // InternalSQLParser.g:9859:4: enumLiteral_3= NOTEQUAL
                    {
                    enumLiteral_3=(Token)match(input,NOTEQUAL,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getXFunctionAccess().getXnoteqEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_3, grammarAccess.getXFunctionAccess().getXnoteqEnumLiteralDeclaration_3());
                      			
                    }

                    }


                    }
                    break;
                case 5 :
                    // InternalSQLParser.g:9866:3: (enumLiteral_4= LESS )
                    {
                    // InternalSQLParser.g:9866:3: (enumLiteral_4= LESS )
                    // InternalSQLParser.g:9867:4: enumLiteral_4= LESS
                    {
                    enumLiteral_4=(Token)match(input,LESS,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getXFunctionAccess().getXlsEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_4, grammarAccess.getXFunctionAccess().getXlsEnumLiteralDeclaration_4());
                      			
                    }

                    }


                    }
                    break;
                case 6 :
                    // InternalSQLParser.g:9874:3: (enumLiteral_5= LESS_1 )
                    {
                    // InternalSQLParser.g:9874:3: (enumLiteral_5= LESS_1 )
                    // InternalSQLParser.g:9875:4: enumLiteral_5= LESS_1
                    {
                    enumLiteral_5=(Token)match(input,LESS_1,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getXFunctionAccess().getXlsrEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_5, grammarAccess.getXFunctionAccess().getXlsrEnumLiteralDeclaration_5());
                      			
                    }

                    }


                    }
                    break;
                case 7 :
                    // InternalSQLParser.g:9882:3: (enumLiteral_6= GREATER_1 )
                    {
                    // InternalSQLParser.g:9882:3: (enumLiteral_6= GREATER_1 )
                    // InternalSQLParser.g:9883:4: enumLiteral_6= GREATER_1
                    {
                    enumLiteral_6=(Token)match(input,GREATER_1,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getXFunctionAccess().getXgtlEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_6, grammarAccess.getXFunctionAccess().getXgtlEnumLiteralDeclaration_6());
                      			
                    }

                    }


                    }
                    break;
                case 8 :
                    // InternalSQLParser.g:9890:3: (enumLiteral_7= GREATER )
                    {
                    // InternalSQLParser.g:9890:3: (enumLiteral_7= GREATER )
                    // InternalSQLParser.g:9891:4: enumLiteral_7= GREATER
                    {
                    enumLiteral_7=(Token)match(input,GREATER,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getXFunctionAccess().getXgtEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_7, grammarAccess.getXFunctionAccess().getXgtEnumLiteralDeclaration_7());
                      			
                    }

                    }


                    }
                    break;
                case 9 :
                    // InternalSQLParser.g:9898:3: (enumLiteral_8= BETWEEN_1 )
                    {
                    // InternalSQLParser.g:9898:3: (enumLiteral_8= BETWEEN_1 )
                    // InternalSQLParser.g:9899:4: enumLiteral_8= BETWEEN_1
                    {
                    enumLiteral_8=(Token)match(input,BETWEEN_1,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getXFunctionAccess().getXbwnEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_8, grammarAccess.getXFunctionAccess().getXbwnEnumLiteralDeclaration_8());
                      			
                    }

                    }


                    }
                    break;
                case 10 :
                    // InternalSQLParser.g:9906:3: (enumLiteral_9= BETWEEN_4 )
                    {
                    // InternalSQLParser.g:9906:3: (enumLiteral_9= BETWEEN_4 )
                    // InternalSQLParser.g:9907:4: enumLiteral_9= BETWEEN_4
                    {
                    enumLiteral_9=(Token)match(input,BETWEEN_4,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getXFunctionAccess().getXbwncEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_9, grammarAccess.getXFunctionAccess().getXbwncEnumLiteralDeclaration_9());
                      			
                    }

                    }


                    }
                    break;
                case 11 :
                    // InternalSQLParser.g:9914:3: (enumLiteral_10= BETWEEN_3 )
                    {
                    // InternalSQLParser.g:9914:3: (enumLiteral_10= BETWEEN_3 )
                    // InternalSQLParser.g:9915:4: enumLiteral_10= BETWEEN_3
                    {
                    enumLiteral_10=(Token)match(input,BETWEEN_3,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getXFunctionAccess().getXbwnlEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_10, grammarAccess.getXFunctionAccess().getXbwnlEnumLiteralDeclaration_10());
                      			
                    }

                    }


                    }
                    break;
                case 12 :
                    // InternalSQLParser.g:9922:3: (enumLiteral_11= BETWEEN_2 )
                    {
                    // InternalSQLParser.g:9922:3: (enumLiteral_11= BETWEEN_2 )
                    // InternalSQLParser.g:9923:4: enumLiteral_11= BETWEEN_2
                    {
                    enumLiteral_11=(Token)match(input,BETWEEN_2,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getXFunctionAccess().getXbwnrEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_11, grammarAccess.getXFunctionAccess().getXbwnrEnumLiteralDeclaration_11());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleXFunction"


    // $ANTLR start "ruleEXTRACT_VALUES"
    // InternalSQLParser.g:9933:1: ruleEXTRACT_VALUES returns [Enumerator current=null] : ( (enumLiteral_0= MICROSECOND ) | (enumLiteral_1= SECOND ) | (enumLiteral_2= MINUTE ) | (enumLiteral_3= HOUR ) | (enumLiteral_4= DAY ) | (enumLiteral_5= WEEK ) | (enumLiteral_6= MONTH ) | (enumLiteral_7= QUARTER ) | (enumLiteral_8= YEAR ) | (enumLiteral_9= SECOND_MICROSECOND ) | (enumLiteral_10= MINUTE_MICROSECOND ) | (enumLiteral_11= MINUTE_SECOND ) | (enumLiteral_12= HOUR_MICROSECOND ) | (enumLiteral_13= HOUR_SECOND ) | (enumLiteral_14= HOUR_MINUTE ) | (enumLiteral_15= DAY_MICROSECOND ) | (enumLiteral_16= DAY_SECOND ) | (enumLiteral_17= DAY_MINUTE ) | (enumLiteral_18= DAY_HOUR ) | (enumLiteral_19= YEAR_MONTH ) ) ;
    public final Enumerator ruleEXTRACT_VALUES() throws RecognitionException {
        Enumerator current = null;

        Token enumLiteral_0=null;
        Token enumLiteral_1=null;
        Token enumLiteral_2=null;
        Token enumLiteral_3=null;
        Token enumLiteral_4=null;
        Token enumLiteral_5=null;
        Token enumLiteral_6=null;
        Token enumLiteral_7=null;
        Token enumLiteral_8=null;
        Token enumLiteral_9=null;
        Token enumLiteral_10=null;
        Token enumLiteral_11=null;
        Token enumLiteral_12=null;
        Token enumLiteral_13=null;
        Token enumLiteral_14=null;
        Token enumLiteral_15=null;
        Token enumLiteral_16=null;
        Token enumLiteral_17=null;
        Token enumLiteral_18=null;
        Token enumLiteral_19=null;


        	enterRule();

        try {
            // InternalSQLParser.g:9939:2: ( ( (enumLiteral_0= MICROSECOND ) | (enumLiteral_1= SECOND ) | (enumLiteral_2= MINUTE ) | (enumLiteral_3= HOUR ) | (enumLiteral_4= DAY ) | (enumLiteral_5= WEEK ) | (enumLiteral_6= MONTH ) | (enumLiteral_7= QUARTER ) | (enumLiteral_8= YEAR ) | (enumLiteral_9= SECOND_MICROSECOND ) | (enumLiteral_10= MINUTE_MICROSECOND ) | (enumLiteral_11= MINUTE_SECOND ) | (enumLiteral_12= HOUR_MICROSECOND ) | (enumLiteral_13= HOUR_SECOND ) | (enumLiteral_14= HOUR_MINUTE ) | (enumLiteral_15= DAY_MICROSECOND ) | (enumLiteral_16= DAY_SECOND ) | (enumLiteral_17= DAY_MINUTE ) | (enumLiteral_18= DAY_HOUR ) | (enumLiteral_19= YEAR_MONTH ) ) )
            // InternalSQLParser.g:9940:2: ( (enumLiteral_0= MICROSECOND ) | (enumLiteral_1= SECOND ) | (enumLiteral_2= MINUTE ) | (enumLiteral_3= HOUR ) | (enumLiteral_4= DAY ) | (enumLiteral_5= WEEK ) | (enumLiteral_6= MONTH ) | (enumLiteral_7= QUARTER ) | (enumLiteral_8= YEAR ) | (enumLiteral_9= SECOND_MICROSECOND ) | (enumLiteral_10= MINUTE_MICROSECOND ) | (enumLiteral_11= MINUTE_SECOND ) | (enumLiteral_12= HOUR_MICROSECOND ) | (enumLiteral_13= HOUR_SECOND ) | (enumLiteral_14= HOUR_MINUTE ) | (enumLiteral_15= DAY_MICROSECOND ) | (enumLiteral_16= DAY_SECOND ) | (enumLiteral_17= DAY_MINUTE ) | (enumLiteral_18= DAY_HOUR ) | (enumLiteral_19= YEAR_MONTH ) )
            {
            // InternalSQLParser.g:9940:2: ( (enumLiteral_0= MICROSECOND ) | (enumLiteral_1= SECOND ) | (enumLiteral_2= MINUTE ) | (enumLiteral_3= HOUR ) | (enumLiteral_4= DAY ) | (enumLiteral_5= WEEK ) | (enumLiteral_6= MONTH ) | (enumLiteral_7= QUARTER ) | (enumLiteral_8= YEAR ) | (enumLiteral_9= SECOND_MICROSECOND ) | (enumLiteral_10= MINUTE_MICROSECOND ) | (enumLiteral_11= MINUTE_SECOND ) | (enumLiteral_12= HOUR_MICROSECOND ) | (enumLiteral_13= HOUR_SECOND ) | (enumLiteral_14= HOUR_MINUTE ) | (enumLiteral_15= DAY_MICROSECOND ) | (enumLiteral_16= DAY_SECOND ) | (enumLiteral_17= DAY_MINUTE ) | (enumLiteral_18= DAY_HOUR ) | (enumLiteral_19= YEAR_MONTH ) )
            int alt173=20;
            switch ( input.LA(1) ) {
            case MICROSECOND:
                {
                alt173=1;
                }
                break;
            case SECOND:
                {
                alt173=2;
                }
                break;
            case MINUTE:
                {
                alt173=3;
                }
                break;
            case HOUR:
                {
                alt173=4;
                }
                break;
            case DAY:
                {
                alt173=5;
                }
                break;
            case WEEK:
                {
                alt173=6;
                }
                break;
            case MONTH:
                {
                alt173=7;
                }
                break;
            case QUARTER:
                {
                alt173=8;
                }
                break;
            case YEAR:
                {
                alt173=9;
                }
                break;
            case SECOND_MICROSECOND:
                {
                alt173=10;
                }
                break;
            case MINUTE_MICROSECOND:
                {
                alt173=11;
                }
                break;
            case MINUTE_SECOND:
                {
                alt173=12;
                }
                break;
            case HOUR_MICROSECOND:
                {
                alt173=13;
                }
                break;
            case HOUR_SECOND:
                {
                alt173=14;
                }
                break;
            case HOUR_MINUTE:
                {
                alt173=15;
                }
                break;
            case DAY_MICROSECOND:
                {
                alt173=16;
                }
                break;
            case DAY_SECOND:
                {
                alt173=17;
                }
                break;
            case DAY_MINUTE:
                {
                alt173=18;
                }
                break;
            case DAY_HOUR:
                {
                alt173=19;
                }
                break;
            case YEAR_MONTH:
                {
                alt173=20;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 173, 0, input);

                throw nvae;
            }

            switch (alt173) {
                case 1 :
                    // InternalSQLParser.g:9941:3: (enumLiteral_0= MICROSECOND )
                    {
                    // InternalSQLParser.g:9941:3: (enumLiteral_0= MICROSECOND )
                    // InternalSQLParser.g:9942:4: enumLiteral_0= MICROSECOND
                    {
                    enumLiteral_0=(Token)match(input,MICROSECOND,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEXTRACT_VALUESAccess().getMsEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getEXTRACT_VALUESAccess().getMsEnumLiteralDeclaration_0());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:9949:3: (enumLiteral_1= SECOND )
                    {
                    // InternalSQLParser.g:9949:3: (enumLiteral_1= SECOND )
                    // InternalSQLParser.g:9950:4: enumLiteral_1= SECOND
                    {
                    enumLiteral_1=(Token)match(input,SECOND,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEXTRACT_VALUESAccess().getSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getEXTRACT_VALUESAccess().getSEnumLiteralDeclaration_1());
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:9957:3: (enumLiteral_2= MINUTE )
                    {
                    // InternalSQLParser.g:9957:3: (enumLiteral_2= MINUTE )
                    // InternalSQLParser.g:9958:4: enumLiteral_2= MINUTE
                    {
                    enumLiteral_2=(Token)match(input,MINUTE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEXTRACT_VALUESAccess().getMEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_2, grammarAccess.getEXTRACT_VALUESAccess().getMEnumLiteralDeclaration_2());
                      			
                    }

                    }


                    }
                    break;
                case 4 :
                    // InternalSQLParser.g:9965:3: (enumLiteral_3= HOUR )
                    {
                    // InternalSQLParser.g:9965:3: (enumLiteral_3= HOUR )
                    // InternalSQLParser.g:9966:4: enumLiteral_3= HOUR
                    {
                    enumLiteral_3=(Token)match(input,HOUR,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEXTRACT_VALUESAccess().getHEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_3, grammarAccess.getEXTRACT_VALUESAccess().getHEnumLiteralDeclaration_3());
                      			
                    }

                    }


                    }
                    break;
                case 5 :
                    // InternalSQLParser.g:9973:3: (enumLiteral_4= DAY )
                    {
                    // InternalSQLParser.g:9973:3: (enumLiteral_4= DAY )
                    // InternalSQLParser.g:9974:4: enumLiteral_4= DAY
                    {
                    enumLiteral_4=(Token)match(input,DAY,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEXTRACT_VALUESAccess().getDayEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_4, grammarAccess.getEXTRACT_VALUESAccess().getDayEnumLiteralDeclaration_4());
                      			
                    }

                    }


                    }
                    break;
                case 6 :
                    // InternalSQLParser.g:9981:3: (enumLiteral_5= WEEK )
                    {
                    // InternalSQLParser.g:9981:3: (enumLiteral_5= WEEK )
                    // InternalSQLParser.g:9982:4: enumLiteral_5= WEEK
                    {
                    enumLiteral_5=(Token)match(input,WEEK,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEXTRACT_VALUESAccess().getWeekEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_5, grammarAccess.getEXTRACT_VALUESAccess().getWeekEnumLiteralDeclaration_5());
                      			
                    }

                    }


                    }
                    break;
                case 7 :
                    // InternalSQLParser.g:9989:3: (enumLiteral_6= MONTH )
                    {
                    // InternalSQLParser.g:9989:3: (enumLiteral_6= MONTH )
                    // InternalSQLParser.g:9990:4: enumLiteral_6= MONTH
                    {
                    enumLiteral_6=(Token)match(input,MONTH,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEXTRACT_VALUESAccess().getMonthEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_6, grammarAccess.getEXTRACT_VALUESAccess().getMonthEnumLiteralDeclaration_6());
                      			
                    }

                    }


                    }
                    break;
                case 8 :
                    // InternalSQLParser.g:9997:3: (enumLiteral_7= QUARTER )
                    {
                    // InternalSQLParser.g:9997:3: (enumLiteral_7= QUARTER )
                    // InternalSQLParser.g:9998:4: enumLiteral_7= QUARTER
                    {
                    enumLiteral_7=(Token)match(input,QUARTER,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEXTRACT_VALUESAccess().getQuartEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_7, grammarAccess.getEXTRACT_VALUESAccess().getQuartEnumLiteralDeclaration_7());
                      			
                    }

                    }


                    }
                    break;
                case 9 :
                    // InternalSQLParser.g:10005:3: (enumLiteral_8= YEAR )
                    {
                    // InternalSQLParser.g:10005:3: (enumLiteral_8= YEAR )
                    // InternalSQLParser.g:10006:4: enumLiteral_8= YEAR
                    {
                    enumLiteral_8=(Token)match(input,YEAR,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEXTRACT_VALUESAccess().getYearEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_8, grammarAccess.getEXTRACT_VALUESAccess().getYearEnumLiteralDeclaration_8());
                      			
                    }

                    }


                    }
                    break;
                case 10 :
                    // InternalSQLParser.g:10013:3: (enumLiteral_9= SECOND_MICROSECOND )
                    {
                    // InternalSQLParser.g:10013:3: (enumLiteral_9= SECOND_MICROSECOND )
                    // InternalSQLParser.g:10014:4: enumLiteral_9= SECOND_MICROSECOND
                    {
                    enumLiteral_9=(Token)match(input,SECOND_MICROSECOND,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEXTRACT_VALUESAccess().getMicrosEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_9, grammarAccess.getEXTRACT_VALUESAccess().getMicrosEnumLiteralDeclaration_9());
                      			
                    }

                    }


                    }
                    break;
                case 11 :
                    // InternalSQLParser.g:10021:3: (enumLiteral_10= MINUTE_MICROSECOND )
                    {
                    // InternalSQLParser.g:10021:3: (enumLiteral_10= MINUTE_MICROSECOND )
                    // InternalSQLParser.g:10022:4: enumLiteral_10= MINUTE_MICROSECOND
                    {
                    enumLiteral_10=(Token)match(input,MINUTE_MICROSECOND,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEXTRACT_VALUESAccess().getMinMicroEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_10, grammarAccess.getEXTRACT_VALUESAccess().getMinMicroEnumLiteralDeclaration_10());
                      			
                    }

                    }


                    }
                    break;
                case 12 :
                    // InternalSQLParser.g:10029:3: (enumLiteral_11= MINUTE_SECOND )
                    {
                    // InternalSQLParser.g:10029:3: (enumLiteral_11= MINUTE_SECOND )
                    // InternalSQLParser.g:10030:4: enumLiteral_11= MINUTE_SECOND
                    {
                    enumLiteral_11=(Token)match(input,MINUTE_SECOND,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEXTRACT_VALUESAccess().getMinSecEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_11, grammarAccess.getEXTRACT_VALUESAccess().getMinSecEnumLiteralDeclaration_11());
                      			
                    }

                    }


                    }
                    break;
                case 13 :
                    // InternalSQLParser.g:10037:3: (enumLiteral_12= HOUR_MICROSECOND )
                    {
                    // InternalSQLParser.g:10037:3: (enumLiteral_12= HOUR_MICROSECOND )
                    // InternalSQLParser.g:10038:4: enumLiteral_12= HOUR_MICROSECOND
                    {
                    enumLiteral_12=(Token)match(input,HOUR_MICROSECOND,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEXTRACT_VALUESAccess().getHmsEnumLiteralDeclaration_12().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_12, grammarAccess.getEXTRACT_VALUESAccess().getHmsEnumLiteralDeclaration_12());
                      			
                    }

                    }


                    }
                    break;
                case 14 :
                    // InternalSQLParser.g:10045:3: (enumLiteral_13= HOUR_SECOND )
                    {
                    // InternalSQLParser.g:10045:3: (enumLiteral_13= HOUR_SECOND )
                    // InternalSQLParser.g:10046:4: enumLiteral_13= HOUR_SECOND
                    {
                    enumLiteral_13=(Token)match(input,HOUR_SECOND,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEXTRACT_VALUESAccess().getHsEnumLiteralDeclaration_13().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_13, grammarAccess.getEXTRACT_VALUESAccess().getHsEnumLiteralDeclaration_13());
                      			
                    }

                    }


                    }
                    break;
                case 15 :
                    // InternalSQLParser.g:10053:3: (enumLiteral_14= HOUR_MINUTE )
                    {
                    // InternalSQLParser.g:10053:3: (enumLiteral_14= HOUR_MINUTE )
                    // InternalSQLParser.g:10054:4: enumLiteral_14= HOUR_MINUTE
                    {
                    enumLiteral_14=(Token)match(input,HOUR_MINUTE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEXTRACT_VALUESAccess().getHminEnumLiteralDeclaration_14().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_14, grammarAccess.getEXTRACT_VALUESAccess().getHminEnumLiteralDeclaration_14());
                      			
                    }

                    }


                    }
                    break;
                case 16 :
                    // InternalSQLParser.g:10061:3: (enumLiteral_15= DAY_MICROSECOND )
                    {
                    // InternalSQLParser.g:10061:3: (enumLiteral_15= DAY_MICROSECOND )
                    // InternalSQLParser.g:10062:4: enumLiteral_15= DAY_MICROSECOND
                    {
                    enumLiteral_15=(Token)match(input,DAY_MICROSECOND,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEXTRACT_VALUESAccess().getDmsEnumLiteralDeclaration_15().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_15, grammarAccess.getEXTRACT_VALUESAccess().getDmsEnumLiteralDeclaration_15());
                      			
                    }

                    }


                    }
                    break;
                case 17 :
                    // InternalSQLParser.g:10069:3: (enumLiteral_16= DAY_SECOND )
                    {
                    // InternalSQLParser.g:10069:3: (enumLiteral_16= DAY_SECOND )
                    // InternalSQLParser.g:10070:4: enumLiteral_16= DAY_SECOND
                    {
                    enumLiteral_16=(Token)match(input,DAY_SECOND,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEXTRACT_VALUESAccess().getDsEnumLiteralDeclaration_16().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_16, grammarAccess.getEXTRACT_VALUESAccess().getDsEnumLiteralDeclaration_16());
                      			
                    }

                    }


                    }
                    break;
                case 18 :
                    // InternalSQLParser.g:10077:3: (enumLiteral_17= DAY_MINUTE )
                    {
                    // InternalSQLParser.g:10077:3: (enumLiteral_17= DAY_MINUTE )
                    // InternalSQLParser.g:10078:4: enumLiteral_17= DAY_MINUTE
                    {
                    enumLiteral_17=(Token)match(input,DAY_MINUTE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEXTRACT_VALUESAccess().getDayminEnumLiteralDeclaration_17().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_17, grammarAccess.getEXTRACT_VALUESAccess().getDayminEnumLiteralDeclaration_17());
                      			
                    }

                    }


                    }
                    break;
                case 19 :
                    // InternalSQLParser.g:10085:3: (enumLiteral_18= DAY_HOUR )
                    {
                    // InternalSQLParser.g:10085:3: (enumLiteral_18= DAY_HOUR )
                    // InternalSQLParser.g:10086:4: enumLiteral_18= DAY_HOUR
                    {
                    enumLiteral_18=(Token)match(input,DAY_HOUR,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEXTRACT_VALUESAccess().getDayhEnumLiteralDeclaration_18().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_18, grammarAccess.getEXTRACT_VALUESAccess().getDayhEnumLiteralDeclaration_18());
                      			
                    }

                    }


                    }
                    break;
                case 20 :
                    // InternalSQLParser.g:10093:3: (enumLiteral_19= YEAR_MONTH )
                    {
                    // InternalSQLParser.g:10093:3: (enumLiteral_19= YEAR_MONTH )
                    // InternalSQLParser.g:10094:4: enumLiteral_19= YEAR_MONTH
                    {
                    enumLiteral_19=(Token)match(input,YEAR_MONTH,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEXTRACT_VALUESAccess().getYearMonthEnumLiteralDeclaration_19().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_19, grammarAccess.getEXTRACT_VALUESAccess().getYearMonthEnumLiteralDeclaration_19());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleEXTRACT_VALUES"

    // $ANTLR start synpred228_InternalSQLParser
    public final void synpred228_InternalSQLParser_fragment() throws RecognitionException {   
        EObject lv_wop_1_0 = null;


        // InternalSQLParser.g:9091:4: ( ( (lv_wop_1_0= ruleOperandGroup ) ) )
        // InternalSQLParser.g:9091:4: ( (lv_wop_1_0= ruleOperandGroup ) )
        {
        // InternalSQLParser.g:9091:4: ( (lv_wop_1_0= ruleOperandGroup ) )
        // InternalSQLParser.g:9092:5: (lv_wop_1_0= ruleOperandGroup )
        {
        // InternalSQLParser.g:9092:5: (lv_wop_1_0= ruleOperandGroup )
        // InternalSQLParser.g:9093:6: lv_wop_1_0= ruleOperandGroup
        {
        if ( state.backtracking==0 ) {

          						newCompositeNode(grammarAccess.getSQLCASEAccess().getWopOperandGroupParserRuleCall_1_0_0());
          					
        }
        pushFollow(FOLLOW_2);
        lv_wop_1_0=ruleOperandGroup();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    // $ANTLR end synpred228_InternalSQLParser

    // $ANTLR start synpred229_InternalSQLParser
    public final void synpred229_InternalSQLParser_fragment() throws RecognitionException {   
        EObject lv_expr_2_0 = null;


        // InternalSQLParser.g:9111:4: ( ( (lv_expr_2_0= ruleFullExpression ) ) )
        // InternalSQLParser.g:9111:4: ( (lv_expr_2_0= ruleFullExpression ) )
        {
        // InternalSQLParser.g:9111:4: ( (lv_expr_2_0= ruleFullExpression ) )
        // InternalSQLParser.g:9112:5: (lv_expr_2_0= ruleFullExpression )
        {
        // InternalSQLParser.g:9112:5: (lv_expr_2_0= ruleFullExpression )
        // InternalSQLParser.g:9113:6: lv_expr_2_0= ruleFullExpression
        {
        if ( state.backtracking==0 ) {

          						newCompositeNode(grammarAccess.getSQLCASEAccess().getExprFullExpressionParserRuleCall_1_1_0());
          					
        }
        pushFollow(FOLLOW_2);
        lv_expr_2_0=ruleFullExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    // $ANTLR end synpred229_InternalSQLParser

    // $ANTLR start synpred232_InternalSQLParser
    public final void synpred232_InternalSQLParser_fragment() throws RecognitionException {   
        EObject lv_wop_1_0 = null;


        // InternalSQLParser.g:9239:4: ( ( (lv_wop_1_0= ruleOperandGroup ) ) )
        // InternalSQLParser.g:9239:4: ( (lv_wop_1_0= ruleOperandGroup ) )
        {
        // InternalSQLParser.g:9239:4: ( (lv_wop_1_0= ruleOperandGroup ) )
        // InternalSQLParser.g:9240:5: (lv_wop_1_0= ruleOperandGroup )
        {
        // InternalSQLParser.g:9240:5: (lv_wop_1_0= ruleOperandGroup )
        // InternalSQLParser.g:9241:6: lv_wop_1_0= ruleOperandGroup
        {
        if ( state.backtracking==0 ) {

          						newCompositeNode(grammarAccess.getSqlCaseWhenAccess().getWopOperandGroupParserRuleCall_1_0_0());
          					
        }
        pushFollow(FOLLOW_2);
        lv_wop_1_0=ruleOperandGroup();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    // $ANTLR end synpred232_InternalSQLParser

    // Delegated rules

    public final boolean synpred228_InternalSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred228_InternalSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred229_InternalSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred229_InternalSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred232_InternalSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred232_InternalSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA101 dfa101 = new DFA101(this);
    protected DFA100 dfa100 = new DFA100(this);
    protected DFA125 dfa125 = new DFA125(this);
    protected DFA157 dfa157 = new DFA157(this);
    protected DFA160 dfa160 = new DFA160(this);
    static final String dfa_1s = "\12\uffff";
    static final String dfa_2s = "\5\uffff\1\11\4\uffff";
    static final String dfa_3s = "\1\57\1\77\1\uffff\1\57\1\uffff\1\12\4\uffff";
    static final String dfa_4s = "\1\u00ba\1\u00a0\1\uffff\1\u00ba\1\uffff\1\u00af\4\uffff";
    static final String dfa_5s = "\2\uffff\1\1\1\uffff\1\2\1\uffff\1\3\1\5\1\6\1\4";
    static final String dfa_6s = "\12\uffff}>";
    static final String[] dfa_7s = {
            "\1\4\17\uffff\1\10\14\uffff\1\4\1\uffff\1\4\26\uffff\1\4\14\uffff\1\2\12\uffff\1\4\17\uffff\1\1\5\uffff\1\6\6\uffff\1\7\5\uffff\1\3\14\uffff\1\4\1\5\1\uffff\3\4\4\uffff\4\4",
            "\1\10\132\uffff\1\7\5\uffff\1\2",
            "",
            "\1\2\17\uffff\1\2\5\uffff\1\4\6\uffff\1\2\1\uffff\1\2\26\uffff\1\2\14\uffff\1\2\12\uffff\1\2\17\uffff\1\2\5\uffff\1\2\6\uffff\1\2\5\uffff\1\2\14\uffff\2\2\1\uffff\3\2\4\uffff\4\2",
            "",
            "\1\11\11\uffff\1\11\23\uffff\1\4\11\uffff\1\11\13\uffff\1\11\1\4\1\11\2\uffff\1\11\11\uffff\1\11\1\uffff\1\11\2\uffff\4\11\3\uffff\1\11\3\uffff\1\11\1\uffff\1\11\1\uffff\1\11\11\uffff\1\11\2\uffff\1\11\1\uffff\1\11\1\4\10\uffff\1\11\4\uffff\1\11\4\uffff\1\11\10\uffff\1\4\4\uffff\1\4\2\uffff\3\4\2\uffff\2\4\1\uffff\1\11\2\4\1\uffff\1\11\1\4\1\11\1\4\1\uffff\1\4\1\11\3\4\3\uffff\1\11\1\4",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_1 = DFA.unpackEncodedString(dfa_1s);
    static final short[] dfa_2 = DFA.unpackEncodedString(dfa_2s);
    static final char[] dfa_3 = DFA.unpackEncodedStringToUnsignedChars(dfa_3s);
    static final char[] dfa_4 = DFA.unpackEncodedStringToUnsignedChars(dfa_4s);
    static final short[] dfa_5 = DFA.unpackEncodedString(dfa_5s);
    static final short[] dfa_6 = DFA.unpackEncodedString(dfa_6s);
    static final short[][] dfa_7 = unpackEncodedStringArray(dfa_7s);

    class DFA101 extends DFA {

        public DFA101(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 101;
            this.eot = dfa_1;
            this.eof = dfa_2;
            this.min = dfa_3;
            this.max = dfa_4;
            this.accept = dfa_5;
            this.special = dfa_6;
            this.transition = dfa_7;
        }
        public String getDescription() {
            return "5397:2: ( ( (lv_expgroup_0_0= ruleExpressionGroup ) ) | ( (lv_exp_1_0= ruleExpression ) ) | ( ( (lv_xexp_2_1= ruleXExpression | lv_xexp_2_2= ruleXExpression_ ) ) ) | ( (lv_notPrm_3_0= RULE_JRNPARAM ) ) | ( (lv_in_4_0= ruleInOperator ) ) | ( (lv_exists_5_0= ruleExistsOperator ) ) )";
        }
    }
    static final String dfa_8s = "\20\uffff";
    static final String dfa_9s = "\1\u0093\1\22\14\u00a3\2\uffff";
    static final String dfa_10s = "\1\u0093\1\u0091\14\u00ab\2\uffff";
    static final String dfa_11s = "\16\uffff\1\1\1\2";
    static final String dfa_12s = "\20\uffff}>";
    static final String[] dfa_13s = {
            "\1\1",
            "\1\13\10\uffff\1\15\1\5\1\14\1\10\7\uffff\1\12\1\11\41\uffff\1\4\1\7\1\3\26\uffff\1\6\56\uffff\1\2",
            "\1\16\7\uffff\1\17",
            "\1\16\7\uffff\1\17",
            "\1\16\7\uffff\1\17",
            "\1\16\7\uffff\1\17",
            "\1\16\7\uffff\1\17",
            "\1\16\7\uffff\1\17",
            "\1\16\7\uffff\1\17",
            "\1\16\7\uffff\1\17",
            "\1\16\7\uffff\1\17",
            "\1\16\7\uffff\1\17",
            "\1\16\7\uffff\1\17",
            "\1\16\7\uffff\1\17",
            "",
            ""
    };

    static final short[] dfa_8 = DFA.unpackEncodedString(dfa_8s);
    static final char[] dfa_9 = DFA.unpackEncodedStringToUnsignedChars(dfa_9s);
    static final char[] dfa_10 = DFA.unpackEncodedStringToUnsignedChars(dfa_10s);
    static final short[] dfa_11 = DFA.unpackEncodedString(dfa_11s);
    static final short[] dfa_12 = DFA.unpackEncodedString(dfa_12s);
    static final short[][] dfa_13 = unpackEncodedStringArray(dfa_13s);

    class DFA100 extends DFA {

        public DFA100(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 100;
            this.eot = dfa_8;
            this.eof = dfa_8;
            this.min = dfa_9;
            this.max = dfa_10;
            this.accept = dfa_11;
            this.special = dfa_12;
            this.transition = dfa_13;
        }
        public String getDescription() {
            return "5440:5: (lv_xexp_2_1= ruleXExpression | lv_xexp_2_2= ruleXExpression_ )";
        }
    }
    static final String dfa_14s = "\1\uffff\1\2\10\uffff";
    static final String dfa_15s = "\1\57\1\12\10\uffff";
    static final String dfa_16s = "\2\u00ba\10\uffff";
    static final String dfa_17s = "\2\uffff\1\1\1\2\1\3\1\4\1\5\1\7\1\10\1\6";
    static final String[] dfa_18s = {
            "\1\6\34\uffff\1\5\1\uffff\1\10\26\uffff\1\7\27\uffff\1\10\42\uffff\1\4\14\uffff\2\3\1\uffff\3\3\4\uffff\1\3\2\2\1\1",
            "\1\2\10\uffff\2\2\2\uffff\1\2\20\uffff\1\2\11\uffff\1\2\13\uffff\3\2\2\uffff\1\2\11\uffff\1\2\1\uffff\1\2\2\uffff\4\2\2\uffff\2\2\2\uffff\2\2\1\uffff\1\2\1\uffff\1\2\6\uffff\4\2\2\uffff\1\2\1\uffff\2\2\5\uffff\1\2\2\uffff\1\2\4\uffff\1\2\2\uffff\1\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\3\uffff\1\2\4\uffff\1\2\2\uffff\4\2\1\uffff\2\2\1\uffff\3\2\1\11\14\2\1\uffff\2\2\10\uffff\3\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_14 = DFA.unpackEncodedString(dfa_14s);
    static final char[] dfa_15 = DFA.unpackEncodedStringToUnsignedChars(dfa_15s);
    static final char[] dfa_16 = DFA.unpackEncodedStringToUnsignedChars(dfa_16s);
    static final short[] dfa_17 = DFA.unpackEncodedString(dfa_17s);
    static final short[][] dfa_18 = unpackEncodedStringArray(dfa_18s);

    class DFA125 extends DFA {

        public DFA125(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 125;
            this.eot = dfa_1;
            this.eof = dfa_14;
            this.min = dfa_15;
            this.max = dfa_16;
            this.accept = dfa_17;
            this.special = dfa_6;
            this.transition = dfa_18;
        }
        public String getDescription() {
            return "7156:2: ( ( (lv_column_0_0= ruleColumnOperand ) ) | ( (lv_xop_1_0= ruleXOperandFragment ) ) | ( (lv_subq_2_0= ruleSubQueryOperand ) ) | ( (lv_fcast_3_0= ruleOpFunctionCast ) ) | ( (lv_fext_4_0= ruleFunctionExtract ) ) | ( (lv_func_5_0= ruleOperandFunction ) ) | ( (lv_sqlcase_6_0= ruleSQLCASE ) ) | ( (lv_boolLiteral_7_0= ruleBoolLiteral ) ) )";
        }
    }
    static final String dfa_19s = "\27\uffff";
    static final String dfa_20s = "\1\57\17\0\7\uffff";
    static final String dfa_21s = "\1\u00ba\17\0\7\uffff";
    static final String dfa_22s = "\20\uffff\1\2\4\uffff\1\3\1\1";
    static final String dfa_23s = "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\7\uffff}>";
    static final String[] dfa_24s = {
            "\1\14\17\uffff\1\20\14\uffff\1\13\1\uffff\1\17\26\uffff\1\15\14\uffff\1\20\12\uffff\1\16\1\uffff\1\25\15\uffff\1\20\5\uffff\1\20\6\uffff\1\20\5\uffff\1\12\14\uffff\1\4\1\5\1\uffff\1\6\1\7\1\10\4\uffff\1\11\1\3\1\2\1\1",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_19 = DFA.unpackEncodedString(dfa_19s);
    static final char[] dfa_20 = DFA.unpackEncodedStringToUnsignedChars(dfa_20s);
    static final char[] dfa_21 = DFA.unpackEncodedStringToUnsignedChars(dfa_21s);
    static final short[] dfa_22 = DFA.unpackEncodedString(dfa_22s);
    static final short[] dfa_23 = DFA.unpackEncodedString(dfa_23s);
    static final short[][] dfa_24 = unpackEncodedStringArray(dfa_24s);

    class DFA157 extends DFA {

        public DFA157(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 157;
            this.eot = dfa_19;
            this.eof = dfa_19;
            this.min = dfa_20;
            this.max = dfa_21;
            this.accept = dfa_22;
            this.special = dfa_23;
            this.transition = dfa_24;
        }
        public String getDescription() {
            return "9090:3: ( ( (lv_wop_1_0= ruleOperandGroup ) ) | ( (lv_expr_2_0= ruleFullExpression ) ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA157_1 = input.LA(1);

                         
                        int index157_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalSQLParser()) ) {s = 22;}

                        else if ( (synpred229_InternalSQLParser()) ) {s = 16;}

                         
                        input.seek(index157_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA157_2 = input.LA(1);

                         
                        int index157_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalSQLParser()) ) {s = 22;}

                        else if ( (synpred229_InternalSQLParser()) ) {s = 16;}

                         
                        input.seek(index157_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA157_3 = input.LA(1);

                         
                        int index157_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalSQLParser()) ) {s = 22;}

                        else if ( (synpred229_InternalSQLParser()) ) {s = 16;}

                         
                        input.seek(index157_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA157_4 = input.LA(1);

                         
                        int index157_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalSQLParser()) ) {s = 22;}

                        else if ( (synpred229_InternalSQLParser()) ) {s = 16;}

                         
                        input.seek(index157_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA157_5 = input.LA(1);

                         
                        int index157_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalSQLParser()) ) {s = 22;}

                        else if ( (synpred229_InternalSQLParser()) ) {s = 16;}

                         
                        input.seek(index157_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA157_6 = input.LA(1);

                         
                        int index157_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalSQLParser()) ) {s = 22;}

                        else if ( (synpred229_InternalSQLParser()) ) {s = 16;}

                         
                        input.seek(index157_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA157_7 = input.LA(1);

                         
                        int index157_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalSQLParser()) ) {s = 22;}

                        else if ( (synpred229_InternalSQLParser()) ) {s = 16;}

                         
                        input.seek(index157_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA157_8 = input.LA(1);

                         
                        int index157_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalSQLParser()) ) {s = 22;}

                        else if ( (synpred229_InternalSQLParser()) ) {s = 16;}

                         
                        input.seek(index157_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA157_9 = input.LA(1);

                         
                        int index157_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalSQLParser()) ) {s = 22;}

                        else if ( (synpred229_InternalSQLParser()) ) {s = 16;}

                         
                        input.seek(index157_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA157_10 = input.LA(1);

                         
                        int index157_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalSQLParser()) ) {s = 22;}

                        else if ( (synpred229_InternalSQLParser()) ) {s = 16;}

                         
                        input.seek(index157_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA157_11 = input.LA(1);

                         
                        int index157_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalSQLParser()) ) {s = 22;}

                        else if ( (synpred229_InternalSQLParser()) ) {s = 16;}

                         
                        input.seek(index157_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA157_12 = input.LA(1);

                         
                        int index157_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalSQLParser()) ) {s = 22;}

                        else if ( (synpred229_InternalSQLParser()) ) {s = 16;}

                         
                        input.seek(index157_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA157_13 = input.LA(1);

                         
                        int index157_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalSQLParser()) ) {s = 22;}

                        else if ( (synpred229_InternalSQLParser()) ) {s = 16;}

                         
                        input.seek(index157_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA157_14 = input.LA(1);

                         
                        int index157_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalSQLParser()) ) {s = 22;}

                        else if ( (synpred229_InternalSQLParser()) ) {s = 16;}

                         
                        input.seek(index157_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA157_15 = input.LA(1);

                         
                        int index157_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalSQLParser()) ) {s = 22;}

                        else if ( (synpred229_InternalSQLParser()) ) {s = 16;}

                         
                        input.seek(index157_15);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 157, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_25s = "\26\uffff";
    static final String dfa_26s = "\1\57\17\0\6\uffff";
    static final String dfa_27s = "\1\u00ba\17\0\6\uffff";
    static final String dfa_28s = "\20\uffff\1\2\4\uffff\1\1";
    static final String dfa_29s = "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\6\uffff}>";
    static final String[] dfa_30s = {
            "\1\14\17\uffff\1\20\14\uffff\1\13\1\uffff\1\17\26\uffff\1\15\14\uffff\1\20\12\uffff\1\16\17\uffff\1\20\5\uffff\1\20\6\uffff\1\20\5\uffff\1\12\14\uffff\1\4\1\5\1\uffff\1\6\1\7\1\10\4\uffff\1\11\1\3\1\2\1\1",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_25 = DFA.unpackEncodedString(dfa_25s);
    static final char[] dfa_26 = DFA.unpackEncodedStringToUnsignedChars(dfa_26s);
    static final char[] dfa_27 = DFA.unpackEncodedStringToUnsignedChars(dfa_27s);
    static final short[] dfa_28 = DFA.unpackEncodedString(dfa_28s);
    static final short[] dfa_29 = DFA.unpackEncodedString(dfa_29s);
    static final short[][] dfa_30 = unpackEncodedStringArray(dfa_30s);

    class DFA160 extends DFA {

        public DFA160(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 160;
            this.eot = dfa_25;
            this.eof = dfa_25;
            this.min = dfa_26;
            this.max = dfa_27;
            this.accept = dfa_28;
            this.special = dfa_29;
            this.transition = dfa_30;
        }
        public String getDescription() {
            return "9238:3: ( ( (lv_wop_1_0= ruleOperandGroup ) ) | ( (lv_expr_2_0= ruleFullExpression ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA160_1 = input.LA(1);

                         
                        int index160_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalSQLParser()) ) {s = 21;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index160_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA160_2 = input.LA(1);

                         
                        int index160_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalSQLParser()) ) {s = 21;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index160_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA160_3 = input.LA(1);

                         
                        int index160_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalSQLParser()) ) {s = 21;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index160_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA160_4 = input.LA(1);

                         
                        int index160_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalSQLParser()) ) {s = 21;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index160_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA160_5 = input.LA(1);

                         
                        int index160_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalSQLParser()) ) {s = 21;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index160_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA160_6 = input.LA(1);

                         
                        int index160_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalSQLParser()) ) {s = 21;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index160_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA160_7 = input.LA(1);

                         
                        int index160_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalSQLParser()) ) {s = 21;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index160_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA160_8 = input.LA(1);

                         
                        int index160_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalSQLParser()) ) {s = 21;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index160_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA160_9 = input.LA(1);

                         
                        int index160_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalSQLParser()) ) {s = 21;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index160_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA160_10 = input.LA(1);

                         
                        int index160_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalSQLParser()) ) {s = 21;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index160_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA160_11 = input.LA(1);

                         
                        int index160_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalSQLParser()) ) {s = 21;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index160_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA160_12 = input.LA(1);

                         
                        int index160_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalSQLParser()) ) {s = 21;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index160_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA160_13 = input.LA(1);

                         
                        int index160_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalSQLParser()) ) {s = 21;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index160_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA160_14 = input.LA(1);

                         
                        int index160_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalSQLParser()) ) {s = 21;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index160_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA160_15 = input.LA(1);

                         
                        int index160_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalSQLParser()) ) {s = 21;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index160_15);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 160, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_1 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_2 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_3 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L,0x0000000000000001L});
    public static final BitSet FOLLOW_4 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_5 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0700000100000000L});
    public static final BitSet FOLLOW_6 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L,0x0000000100000001L});
    public static final BitSet FOLLOW_7 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_8 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_9 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_10 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_11 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_12 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_13 = new BitSet(new long[]{0x0000000001000000L,0x3008008000004000L,0x0083000100002000L});
    public static final BitSet FOLLOW_14 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000000A0000000L});
    public static final BitSet FOLLOW_15 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000100010L});
    public static final BitSet FOLLOW_16 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_17 = new BitSet(new long[]{0x0021000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_18 = new BitSet(new long[]{0x2E88120885200000L,0x124000D800020000L,0x0000000000000880L});
    public static final BitSet FOLLOW_19 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_20 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_21 = new BitSet(new long[]{0x0020240000000102L,0x0008000000000080L,0x0000000000002000L});
    public static final BitSet FOLLOW_22 = new BitSet(new long[]{0x0000003000000002L,0x0000000000000040L,0x0000000100000000L});
    public static final BitSet FOLLOW_23 = new BitSet(new long[]{0x0000003000000002L,0x0000000000000040L});
    public static final BitSet FOLLOW_24 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_25 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_26 = new BitSet(new long[]{0x0000000001000000L,0x3008008000804000L,0x0083001400000000L});
    public static final BitSet FOLLOW_27 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_28 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0700000000000000L});
    public static final BitSet FOLLOW_29 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000101000000L});
    public static final BitSet FOLLOW_30 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_31 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_32 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_33 = new BitSet(new long[]{0x4000000000100002L,0x0000000080200000L});
    public static final BitSet FOLLOW_34 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L,0x0000000000000009L});
    public static final BitSet FOLLOW_35 = new BitSet(new long[]{0x0000800201000000L,0x300800A000005000L,0x0787E00100008000L});
    public static final BitSet FOLLOW_36 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0006000000000000L});
    public static final BitSet FOLLOW_37 = new BitSet(new long[]{0x0010800201000000L,0x300800A000005000L,0x0787E00100008001L});
    public static final BitSet FOLLOW_38 = new BitSet(new long[]{0x0000800201000000L,0x300800A000005000L,0x0787E00100008001L});
    public static final BitSet FOLLOW_39 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_40 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_41 = new BitSet(new long[]{0x0000000000000002L,0x0000000202148009L});
    public static final BitSet FOLLOW_42 = new BitSet(new long[]{0x8000800001000000L,0x300C00A000005000L,0x0787600104082000L});
    public static final BitSet FOLLOW_43 = new BitSet(new long[]{0x0000000000000002L,0x0000000002148009L});
    public static final BitSet FOLLOW_44 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_45 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0701000000000000L});
    public static final BitSet FOLLOW_46 = new BitSet(new long[]{0x0000000000000002L,0x0000000002108009L});
    public static final BitSet FOLLOW_47 = new BitSet(new long[]{0x0000000000000002L,0x0000000002108008L});
    public static final BitSet FOLLOW_48 = new BitSet(new long[]{0x0000000000000002L,0x0000000000108008L});
    public static final BitSet FOLLOW_49 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000008L});
    public static final BitSet FOLLOW_50 = new BitSet(new long[]{0x0000000000000002L,0x0000000000008008L});
    public static final BitSet FOLLOW_51 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_52 = new BitSet(new long[]{0x0000000000000002L,0x0000000000008000L});
    public static final BitSet FOLLOW_53 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_54 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0700000001000000L});
    public static final BitSet FOLLOW_55 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0700000000000000L});
    public static final BitSet FOLLOW_56 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_57 = new BitSet(new long[]{0x0004000000000402L,0x0001480020082000L});
    public static final BitSet FOLLOW_58 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_59 = new BitSet(new long[]{0x0100000000000002L,0x0000000008000000L,0x0700000001000000L});
    public static final BitSet FOLLOW_60 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_61 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_62 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L,0x0087600000000000L});
    public static final BitSet FOLLOW_63 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100010000L});
    public static final BitSet FOLLOW_64 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_65 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_66 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0700000100000020L});
    public static final BitSet FOLLOW_67 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_68 = new BitSet(new long[]{0x0002400000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_69 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_70 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_71 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_72 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_73 = new BitSet(new long[]{0x0000000000000002L,0x0000010000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_74 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000400020000010L});
    public static final BitSet FOLLOW_75 = new BitSet(new long[]{0x000000C078040000L,0x0000000400000E00L,0x0000000000020000L});
    public static final BitSet FOLLOW_76 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_77 = new BitSet(new long[]{0x0000800001000000L,0x300800A000005000L,0x0787600100000000L});
    public static final BitSet FOLLOW_78 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100800000000L});
    public static final BitSet FOLLOW_79 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_80 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_81 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000180000000000L});
    public static final BitSet FOLLOW_82 = new BitSet(new long[]{0x8000810001000000L,0x300E00A000005000L,0x078767014CEC2000L});
    public static final BitSet FOLLOW_83 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_84 = new BitSet(new long[]{0x0000800001000000L,0x310800A000005000L,0x0787600100000028L});
    public static final BitSet FOLLOW_85 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0487600000000000L});
    public static final BitSet FOLLOW_86 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_87 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_88 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_89 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_90 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00BF600000000000L});
    public static final BitSet FOLLOW_91 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000805480000000L});
    public static final BitSet FOLLOW_92 = new BitSet(new long[]{0x0000800201000000L,0x300800A000005000L,0x0787E00300000008L});
    public static final BitSet FOLLOW_93 = new BitSet(new long[]{0x0000000000000002L,0x0020000000000000L});
    public static final BitSet FOLLOW_94 = new BitSet(new long[]{0x004000010002FAF0L,0x4000100000400014L,0x0000000000000102L});
    public static final BitSet FOLLOW_95 = new BitSet(new long[]{0x0000000000400000L,0x0000000002000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_96 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
    public static final BitSet FOLLOW_97 = new BitSet(new long[]{0x0000000000000002L,0x0080000010000000L});
    public static final BitSet FOLLOW_98 = new BitSet(new long[]{0x0000890003000000L,0x300800A000005000L,0x0787600100000000L});
    public static final BitSet FOLLOW_99 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_100 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_101 = new BitSet(new long[]{0x0000000000880000L});
    public static final BitSet FOLLOW_102 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_103 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_104 = new BitSet(new long[]{0x0000000000000002L,0x0000010001000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_105 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_106 = new BitSet(new long[]{0x0000000000000000L,0x0000800000010000L});
    public static final BitSet FOLLOW_107 = new BitSet(new long[]{0x0000800201000000L,0x300800A000005000L,0x0787600100000008L});
    public static final BitSet FOLLOW_108 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000300000000L});
    public static final BitSet FOLLOW_109 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000A00000000L});
    public static final BitSet FOLLOW_110 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_111 = new BitSet(new long[]{0x8000800001000000L,0xB00C00A000005000L,0x0787600104082000L});
    public static final BitSet FOLLOW_112 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_113 = new BitSet(new long[]{0x8000800001000002L,0xB00C00A000005000L,0x0787600104082000L});
    public static final BitSet FOLLOW_114 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_115 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L});
    public static final BitSet FOLLOW_116 = new BitSet(new long[]{0x0000000000000400L,0x0001480020082000L});
    public static final BitSet FOLLOW_117 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_118 = new BitSet(new long[]{0x0000000000000000L,0x0000400004000000L});
    public static final BitSet FOLLOW_119 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0003000000000000L});

}