package org.xtext.example.mydsl_sql.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl_sql.services.SQLGrammarAccess;



import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
@SuppressWarnings("all")
public class InternalSQLParser extends AbstractInternalAntlrParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "MINUTE_MICROSECOND", "SECOND_MICROSECOND", "HOUR_MICROSECOND", "DAY_MICROSECOND", "AUTO_INCREMENT", "MINUTE_SECOND", "STRAIGHT_JOIN", "HOUR_MINUTE", "HOUR_SECOND", "MICROSECOND", "DAY_MINUTE", "DAY_SECOND", "REFERENCES", "YEAR_MONTH", "BETWEEN_4", "KW_FOLLOWING", "INTERSECT", "MEDIUMINT", "PARTITION", "PRECEDING", "TIMESTAMP", "UNBOUNDED", "VARBINARY", "BETWEEN_2", "NOTEQUAL", "BETWEEN_3", "GREATER_1", "DATETIME", "DAY_HOUR", "DISTINCT", "SIBLINGS", "SMALLINT", "UNSIGNED", "ZEROFILL", "BETWEEN_1", "GREATER", "BETWEEN", "COMMENT", "CURRENT", "DECIMAL", "DEFAULT", "EXCLUDE", "EXTRACT", "FOREIGN", "INCLUDE", "NATURAL", "NUMERIC", "PERCENT", "PRIMARY", "QUARTER", "TINYINT", "UNPIVOT", "VARCHAR", "BIGINT", "BINARY", "CREATE", "DOUBLE", "EXCEPT", "EXISTS", "HAVING", "INSERT", "MINUTE", "OFFSET", "SECOND", "SELECT", "SIGNED", "UNIQUE", "VALUES", "EQUAL", "LESS_1", "NOTIN", "CAST", "CROSS", "FALSE", "FETCH", "FIRST", "FLOAT", "GROUP", "INNER", "LIMIT", "MINUS", "MONTH", "NOW", "NULLS", "ORDER", "OUTER", "PIVOT", "RANGE", "RIGHT", "TABLE", "UNION", "USING", "WHERE", "LESS", "BLOB", "BOOL", "CASE", "CHAR", "DATE", "DESC", "ELSE", "FROM", "FULL", "HOUR", "INTO", "JOIN", "LAST", "LEFT", "LIKE", "NOT_1", "NULL", "ONLY", "OVER", "REAL", "ROWS", "SOME", "TEXT", "THEN", "TIES", "TIME", "TRUE", "WEEK", "WHEN", "WITH", "YEAR", "LeftParenthesisPlusSignRightParenthesis", "ALL", "AND", "ANY", "ASC", "BIT", "DAY", "END", "FOR", "INT", "KEY", "NOT", "ROW", "TOP", "XML", "IN_1", "ExclamationMarkEqualsSign", "X", "LessThanSignEqualsSign", "LessThanSignGreaterThanSign", "GreaterThanSignEqualsSign", "AS", "BY", "IN", "IS", "ON", "OR", "CircumflexAccentEqualsSign", "VerticalLineVerticalLine", "LeftParenthesis", "RightParenthesis", "PlusSign", "Comma", "HyphenMinus", "FullStop", "Solidus", "LessThanSign", "EqualsSign", "GreaterThanSign", "VerticalLine", "RightCurlyBracket", "RULE_JRPARAM", "RULE_JRNPARAM", "RULE_STAR", "RULE_UNSIGNED", "RULE_INT", "RULE_SIGNED_DOUBLE", "RULE_DATE", "RULE_TIME", "RULE_TIMESTAMP", "RULE_STRING_CORE", "RULE_STRING_", "RULE_STRING", "RULE_DBNAME", "RULE_ID", "RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS", "RULE_ANY_OTHER"
    };
    public static final int MONTH=85;
    public static final int CREATE=59;
    public static final int BETWEEN=40;
    public static final int LessThanSign=165;
    public static final int MINUS=84;
    public static final int YEAR=128;
    public static final int HOUR_MINUTE=11;
    public static final int PARTITION=22;
    public static final int INCLUDE=48;
    public static final int INNER=82;
    public static final int GreaterThanSign=167;
    public static final int LEFT=111;
    public static final int RULE_ID=183;
    public static final int BIGINT=57;
    public static final int WHERE=96;
    public static final int GreaterThanSignEqualsSign=149;
    public static final int AS=150;
    public static final int RULE_DATE=176;
    public static final int RULE_INT=174;
    public static final int VARCHAR=56;
    public static final int THEN=121;
    public static final int KEY=139;
    public static final int INTO=108;
    public static final int MICROSECOND=13;
    public static final int RULE_DBNAME=182;
    public static final int GROUP=81;
    public static final int ASC=133;
    public static final int STRAIGHT_JOIN=10;
    public static final int BY=151;
    public static final int X=146;
    public static final int OFFSET=66;
    public static final int Solidus=164;
    public static final int RightCurlyBracket=169;
    public static final int TINYINT=54;
    public static final int RULE_SIGNED_DOUBLE=175;
    public static final int FullStop=163;
    public static final int RULE_UNSIGNED=173;
    public static final int GREATER=39;
    public static final int SECOND_MICROSECOND=5;
    public static final int RULE_STRING_=180;
    public static final int PERCENT=51;
    public static final int VARBINARY=26;
    public static final int UNION=94;
    public static final int DESC=103;
    public static final int KW_FOLLOWING=19;
    public static final int RULE_STAR=172;
    public static final int EXTRACT=46;
    public static final int UNIQUE=70;
    public static final int LESS_1=73;
    public static final int FOR=137;
    public static final int RightParenthesis=159;
    public static final int PIVOT=90;
    public static final int CURRENT=42;
    public static final int FULL=106;
    public static final int NOTEQUAL=28;
    public static final int USING=95;
    public static final int NOT=140;
    public static final int LAST=110;
    public static final int NOW=86;
    public static final int CircumflexAccentEqualsSign=156;
    public static final int MINUTE_SECOND=9;
    public static final int END=136;
    public static final int HAVING=63;
    public static final int BINARY=58;
    public static final int RULE_SL_COMMENT=185;
    public static final int SOME=119;
    public static final int FOREIGN=47;
    public static final int SIGNED=69;
    public static final int BETWEEN_2=27;
    public static final int BETWEEN_1=38;
    public static final int OUTER=89;
    public static final int EOF=-1;
    public static final int BETWEEN_4=18;
    public static final int BETWEEN_3=29;
    public static final int EXISTS=62;
    public static final int EQUAL=72;
    public static final int TIME=123;
    public static final int MEDIUMINT=21;
    public static final int INTERSECT=20;
    public static final int BIT=134;
    public static final int WITH=127;
    public static final int OVER=116;
    public static final int DATETIME=31;
    public static final int BOOL=99;
    public static final int FALSE=77;
    public static final int RULE_STRING_CORE=179;
    public static final int RULE_TIMESTAMP=178;
    public static final int DEFAULT=44;
    public static final int LessThanSignGreaterThanSign=148;
    public static final int JOIN=109;
    public static final int TEXT=120;
    public static final int LeftParenthesisPlusSignRightParenthesis=129;
    public static final int TABLE=93;
    public static final int WHEN=126;
    public static final int QUARTER=53;
    public static final int LeftParenthesis=158;
    public static final int ELSE=104;
    public static final int RULE_TIME=177;
    public static final int DAY_MINUTE=14;
    public static final int CAST=75;
    public static final int IN=152;
    public static final int DISTINCT=33;
    public static final int IS=153;
    public static final int CASE=100;
    public static final int TOP=142;
    public static final int VerticalLine=168;
    public static final int PlusSign=160;
    public static final int RULE_ML_COMMENT=184;
    public static final int UNPIVOT=55;
    public static final int RULE_JRPARAM=170;
    public static final int VerticalLineVerticalLine=157;
    public static final int DAY_HOUR=32;
    public static final int UNSIGNED=36;
    public static final int CHAR=101;
    public static final int COMMENT=41;
    public static final int ORDER=88;
    public static final int Comma=161;
    public static final int HyphenMinus=162;
    public static final int RIGHT=92;
    public static final int VALUES=71;
    public static final int DOUBLE=60;
    public static final int LessThanSignEqualsSign=147;
    public static final int FETCH=78;
    public static final int NUMERIC=50;
    public static final int SIBLINGS=34;
    public static final int NOTIN=74;
    public static final int FIRST=79;
    public static final int SELECT=68;
    public static final int PRECEDING=23;
    public static final int RULE_JRNPARAM=171;
    public static final int ExclamationMarkEqualsSign=145;
    public static final int DAY=135;
    public static final int ALL=130;
    public static final int BLOB=98;
    public static final int DECIMAL=43;
    public static final int ONLY=115;
    public static final int FROM=105;
    public static final int AUTO_INCREMENT=8;
    public static final int MINUTE_MICROSECOND=4;
    public static final int UNBOUNDED=25;
    public static final int TIMESTAMP=24;
    public static final int MINUTE=65;
    public static final int HOUR_MICROSECOND=6;
    public static final int NULL=114;
    public static final int DAY_MICROSECOND=7;
    public static final int TRUE=124;
    public static final int EXCEPT=61;
    public static final int DATE=102;
    public static final int ZEROFILL=37;
    public static final int LIKE=112;
    public static final int IN_1=144;
    public static final int EXCLUDE=45;
    public static final int AND=131;
    public static final int REAL=117;
    public static final int YEAR_MONTH=17;
    public static final int INSERT=64;
    public static final int LESS=97;
    public static final int ROW=141;
    public static final int DAY_SECOND=15;
    public static final int RANGE=91;
    public static final int FLOAT=80;
    public static final int TIES=122;
    public static final int HOUR=107;
    public static final int LIMIT=83;
    public static final int RULE_STRING=181;
    public static final int ANY=132;
    public static final int INT=138;
    public static final int NATURAL=49;
    public static final int EqualsSign=166;
    public static final int NOT_1=113;
    public static final int GREATER_1=30;
    public static final int WEEK=125;
    public static final int NULLS=87;
    public static final int ON=154;
    public static final int OR=155;
    public static final int RULE_WS=186;
    public static final int PRIMARY=52;
    public static final int RULE_ANY_OTHER=187;
    public static final int CROSS=76;
    public static final int XML=143;
    public static final int SMALLINT=35;
    public static final int SECOND=67;
    public static final int HOUR_SECOND=12;
    public static final int REFERENCES=16;
    public static final int ROWS=118;

    // delegates
    // delegators


        public InternalSQLParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public InternalSQLParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        

    public String[] getTokenNames() { return InternalSQLParser.tokenNames; }
    public String getGrammarFileName() { return "InternalSQLParser.g"; }



    /*
      This grammar contains a lot of empty actions to work around a bug in ANTLR.
      Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
    */

     	private SQLGrammarAccess grammarAccess;

        public InternalSQLParser(TokenStream input, SQLGrammarAccess grammarAccess) {
            this(input);
            this.grammarAccess = grammarAccess;
            registerRules(grammarAccess.getGrammar());
        }

        @Override
        protected String getFirstRuleName() {
        	return "Model";
       	}

       	@Override
       	protected SQLGrammarAccess getGrammarAccess() {
       		return grammarAccess;
       	}




    // $ANTLR start "entryRuleModel"
    // InternalSQLParser.g:64:1: entryRuleModel returns [EObject current=null] : iv_ruleModel= ruleModel EOF ;
    public final EObject entryRuleModel() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleModel = null;


        try {
            // InternalSQLParser.g:64:46: (iv_ruleModel= ruleModel EOF )
            // InternalSQLParser.g:65:2: iv_ruleModel= ruleModel EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getModelRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleModel=ruleModel();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleModel; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleModel"


    // $ANTLR start "ruleModel"
    // InternalSQLParser.g:71:1: ruleModel returns [EObject current=null] : ( (lv_simpleStatement_0_0= ruleSimpleStatement ) ) ;
    public final EObject ruleModel() throws RecognitionException {
        EObject current = null;

        EObject lv_simpleStatement_0_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:77:2: ( ( (lv_simpleStatement_0_0= ruleSimpleStatement ) ) )
            // InternalSQLParser.g:78:2: ( (lv_simpleStatement_0_0= ruleSimpleStatement ) )
            {
            // InternalSQLParser.g:78:2: ( (lv_simpleStatement_0_0= ruleSimpleStatement ) )
            // InternalSQLParser.g:79:3: (lv_simpleStatement_0_0= ruleSimpleStatement )
            {
            // InternalSQLParser.g:79:3: (lv_simpleStatement_0_0= ruleSimpleStatement )
            // InternalSQLParser.g:80:4: lv_simpleStatement_0_0= ruleSimpleStatement
            {
            if ( state.backtracking==0 ) {

              				newCompositeNode(grammarAccess.getModelAccess().getSimpleStatementSimpleStatementParserRuleCall_0());
              			
            }
            pushFollow(FOLLOW_2);
            lv_simpleStatement_0_0=ruleSimpleStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getModelRule());
              				}
              				set(
              					current,
              					"simpleStatement",
              					lv_simpleStatement_0_0,
              					"org.xtext.example.mydsl_sql.SQL.SimpleStatement");
              				afterParserOrEnumRuleCall();
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleModel"


    // $ANTLR start "entryRuleSimpleStatement"
    // InternalSQLParser.g:100:1: entryRuleSimpleStatement returns [EObject current=null] : iv_ruleSimpleStatement= ruleSimpleStatement EOF ;
    public final EObject entryRuleSimpleStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSimpleStatement = null;


        try {
            // InternalSQLParser.g:100:56: (iv_ruleSimpleStatement= ruleSimpleStatement EOF )
            // InternalSQLParser.g:101:2: iv_ruleSimpleStatement= ruleSimpleStatement EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSimpleStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSimpleStatement=ruleSimpleStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSimpleStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSimpleStatement"


    // $ANTLR start "ruleSimpleStatement"
    // InternalSQLParser.g:107:1: ruleSimpleStatement returns [EObject current=null] : ( ( (lv_select_0_0= ruleSelectStatement ) ) | ( (lv_insert_1_0= ruleInsertStatement ) ) | ( (lv_create_2_0= ruleCreateStatement ) ) ) ;
    public final EObject ruleSimpleStatement() throws RecognitionException {
        EObject current = null;

        EObject lv_select_0_0 = null;

        EObject lv_insert_1_0 = null;

        EObject lv_create_2_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:113:2: ( ( ( (lv_select_0_0= ruleSelectStatement ) ) | ( (lv_insert_1_0= ruleInsertStatement ) ) | ( (lv_create_2_0= ruleCreateStatement ) ) ) )
            // InternalSQLParser.g:114:2: ( ( (lv_select_0_0= ruleSelectStatement ) ) | ( (lv_insert_1_0= ruleInsertStatement ) ) | ( (lv_create_2_0= ruleCreateStatement ) ) )
            {
            // InternalSQLParser.g:114:2: ( ( (lv_select_0_0= ruleSelectStatement ) ) | ( (lv_insert_1_0= ruleInsertStatement ) ) | ( (lv_create_2_0= ruleCreateStatement ) ) )
            int alt1=3;
            switch ( input.LA(1) ) {
            case SELECT:
            case WITH:
            case RULE_JRNPARAM:
                {
                alt1=1;
                }
                break;
            case INSERT:
                {
                alt1=2;
                }
                break;
            case CREATE:
                {
                alt1=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 1, 0, input);

                throw nvae;
            }

            switch (alt1) {
                case 1 :
                    // InternalSQLParser.g:115:3: ( (lv_select_0_0= ruleSelectStatement ) )
                    {
                    // InternalSQLParser.g:115:3: ( (lv_select_0_0= ruleSelectStatement ) )
                    // InternalSQLParser.g:116:4: (lv_select_0_0= ruleSelectStatement )
                    {
                    // InternalSQLParser.g:116:4: (lv_select_0_0= ruleSelectStatement )
                    // InternalSQLParser.g:117:5: lv_select_0_0= ruleSelectStatement
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getSimpleStatementAccess().getSelectSelectStatementParserRuleCall_0_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_select_0_0=ruleSelectStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getSimpleStatementRule());
                      					}
                      					set(
                      						current,
                      						"select",
                      						lv_select_0_0,
                      						"org.xtext.example.mydsl_sql.SQL.SelectStatement");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:135:3: ( (lv_insert_1_0= ruleInsertStatement ) )
                    {
                    // InternalSQLParser.g:135:3: ( (lv_insert_1_0= ruleInsertStatement ) )
                    // InternalSQLParser.g:136:4: (lv_insert_1_0= ruleInsertStatement )
                    {
                    // InternalSQLParser.g:136:4: (lv_insert_1_0= ruleInsertStatement )
                    // InternalSQLParser.g:137:5: lv_insert_1_0= ruleInsertStatement
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getSimpleStatementAccess().getInsertInsertStatementParserRuleCall_1_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_insert_1_0=ruleInsertStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getSimpleStatementRule());
                      					}
                      					set(
                      						current,
                      						"insert",
                      						lv_insert_1_0,
                      						"org.xtext.example.mydsl_sql.SQL.InsertStatement");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:155:3: ( (lv_create_2_0= ruleCreateStatement ) )
                    {
                    // InternalSQLParser.g:155:3: ( (lv_create_2_0= ruleCreateStatement ) )
                    // InternalSQLParser.g:156:4: (lv_create_2_0= ruleCreateStatement )
                    {
                    // InternalSQLParser.g:156:4: (lv_create_2_0= ruleCreateStatement )
                    // InternalSQLParser.g:157:5: lv_create_2_0= ruleCreateStatement
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getSimpleStatementAccess().getCreateCreateStatementParserRuleCall_2_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_create_2_0=ruleCreateStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getSimpleStatementRule());
                      					}
                      					set(
                      						current,
                      						"create",
                      						lv_create_2_0,
                      						"org.xtext.example.mydsl_sql.SQL.CreateStatement");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSimpleStatement"


    // $ANTLR start "entryRuleSelectStatement"
    // InternalSQLParser.g:178:1: entryRuleSelectStatement returns [EObject current=null] : iv_ruleSelectStatement= ruleSelectStatement EOF ;
    public final EObject entryRuleSelectStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSelectStatement = null;


        try {
            // InternalSQLParser.g:178:56: (iv_ruleSelectStatement= ruleSelectStatement EOF )
            // InternalSQLParser.g:179:2: iv_ruleSelectStatement= ruleSelectStatement EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSelectStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSelectStatement=ruleSelectStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSelectStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSelectStatement"


    // $ANTLR start "ruleSelectStatement"
    // InternalSQLParser.g:185:1: ruleSelectStatement returns [EObject current=null] : ( (this_JRNPARAM_0= RULE_JRNPARAM )? ( (lv_wq_1_0= ruleWithQuery ) )? ( (lv_query_2_0= ruleSelectQuery ) ) ) ;
    public final EObject ruleSelectStatement() throws RecognitionException {
        EObject current = null;

        Token this_JRNPARAM_0=null;
        EObject lv_wq_1_0 = null;

        EObject lv_query_2_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:191:2: ( ( (this_JRNPARAM_0= RULE_JRNPARAM )? ( (lv_wq_1_0= ruleWithQuery ) )? ( (lv_query_2_0= ruleSelectQuery ) ) ) )
            // InternalSQLParser.g:192:2: ( (this_JRNPARAM_0= RULE_JRNPARAM )? ( (lv_wq_1_0= ruleWithQuery ) )? ( (lv_query_2_0= ruleSelectQuery ) ) )
            {
            // InternalSQLParser.g:192:2: ( (this_JRNPARAM_0= RULE_JRNPARAM )? ( (lv_wq_1_0= ruleWithQuery ) )? ( (lv_query_2_0= ruleSelectQuery ) ) )
            // InternalSQLParser.g:193:3: (this_JRNPARAM_0= RULE_JRNPARAM )? ( (lv_wq_1_0= ruleWithQuery ) )? ( (lv_query_2_0= ruleSelectQuery ) )
            {
            // InternalSQLParser.g:193:3: (this_JRNPARAM_0= RULE_JRNPARAM )?
            int alt2=2;
            int LA2_0 = input.LA(1);

            if ( (LA2_0==RULE_JRNPARAM) ) {
                alt2=1;
            }
            switch (alt2) {
                case 1 :
                    // InternalSQLParser.g:194:4: this_JRNPARAM_0= RULE_JRNPARAM
                    {
                    this_JRNPARAM_0=(Token)match(input,RULE_JRNPARAM,FOLLOW_3); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_JRNPARAM_0, grammarAccess.getSelectStatementAccess().getJRNPARAMTerminalRuleCall_0());
                      			
                    }

                    }
                    break;

            }

            // InternalSQLParser.g:199:3: ( (lv_wq_1_0= ruleWithQuery ) )?
            int alt3=2;
            int LA3_0 = input.LA(1);

            if ( (LA3_0==WITH) ) {
                alt3=1;
            }
            switch (alt3) {
                case 1 :
                    // InternalSQLParser.g:200:4: (lv_wq_1_0= ruleWithQuery )
                    {
                    // InternalSQLParser.g:200:4: (lv_wq_1_0= ruleWithQuery )
                    // InternalSQLParser.g:201:5: lv_wq_1_0= ruleWithQuery
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getSelectStatementAccess().getWqWithQueryParserRuleCall_1_0());
                      				
                    }
                    pushFollow(FOLLOW_3);
                    lv_wq_1_0=ruleWithQuery();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getSelectStatementRule());
                      					}
                      					set(
                      						current,
                      						"wq",
                      						lv_wq_1_0,
                      						"org.xtext.example.mydsl_sql.SQL.WithQuery");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalSQLParser.g:218:3: ( (lv_query_2_0= ruleSelectQuery ) )
            // InternalSQLParser.g:219:4: (lv_query_2_0= ruleSelectQuery )
            {
            // InternalSQLParser.g:219:4: (lv_query_2_0= ruleSelectQuery )
            // InternalSQLParser.g:220:5: lv_query_2_0= ruleSelectQuery
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getSelectStatementAccess().getQuerySelectQueryParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_query_2_0=ruleSelectQuery();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getSelectStatementRule());
              					}
              					set(
              						current,
              						"query",
              						lv_query_2_0,
              						"org.xtext.example.mydsl_sql.SQL.SelectQuery");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSelectStatement"


    // $ANTLR start "entryRuleInsertStatement"
    // InternalSQLParser.g:241:1: entryRuleInsertStatement returns [EObject current=null] : iv_ruleInsertStatement= ruleInsertStatement EOF ;
    public final EObject entryRuleInsertStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleInsertStatement = null;


        try {
            // InternalSQLParser.g:241:56: (iv_ruleInsertStatement= ruleInsertStatement EOF )
            // InternalSQLParser.g:242:2: iv_ruleInsertStatement= ruleInsertStatement EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getInsertStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleInsertStatement=ruleInsertStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleInsertStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleInsertStatement"


    // $ANTLR start "ruleInsertStatement"
    // InternalSQLParser.g:248:1: ruleInsertStatement returns [EObject current=null] : (otherlv_0= INSERT otherlv_1= INTO ( (lv_tbl_2_0= ruleTables ) ) ( (lv_cols_3_0= ruleColumns ) ) ( (lv_vals_4_0= ruleValues ) ) ) ;
    public final EObject ruleInsertStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        EObject lv_tbl_2_0 = null;

        EObject lv_cols_3_0 = null;

        EObject lv_vals_4_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:254:2: ( (otherlv_0= INSERT otherlv_1= INTO ( (lv_tbl_2_0= ruleTables ) ) ( (lv_cols_3_0= ruleColumns ) ) ( (lv_vals_4_0= ruleValues ) ) ) )
            // InternalSQLParser.g:255:2: (otherlv_0= INSERT otherlv_1= INTO ( (lv_tbl_2_0= ruleTables ) ) ( (lv_cols_3_0= ruleColumns ) ) ( (lv_vals_4_0= ruleValues ) ) )
            {
            // InternalSQLParser.g:255:2: (otherlv_0= INSERT otherlv_1= INTO ( (lv_tbl_2_0= ruleTables ) ) ( (lv_cols_3_0= ruleColumns ) ) ( (lv_vals_4_0= ruleValues ) ) )
            // InternalSQLParser.g:256:3: otherlv_0= INSERT otherlv_1= INTO ( (lv_tbl_2_0= ruleTables ) ) ( (lv_cols_3_0= ruleColumns ) ) ( (lv_vals_4_0= ruleValues ) )
            {
            otherlv_0=(Token)match(input,INSERT,FOLLOW_4); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getInsertStatementAccess().getINSERTKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,INTO,FOLLOW_5); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getInsertStatementAccess().getINTOKeyword_1());
              		
            }
            // InternalSQLParser.g:264:3: ( (lv_tbl_2_0= ruleTables ) )
            // InternalSQLParser.g:265:4: (lv_tbl_2_0= ruleTables )
            {
            // InternalSQLParser.g:265:4: (lv_tbl_2_0= ruleTables )
            // InternalSQLParser.g:266:5: lv_tbl_2_0= ruleTables
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getInsertStatementAccess().getTblTablesParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_6);
            lv_tbl_2_0=ruleTables();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getInsertStatementRule());
              					}
              					set(
              						current,
              						"tbl",
              						lv_tbl_2_0,
              						"org.xtext.example.mydsl_sql.SQL.Tables");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:283:3: ( (lv_cols_3_0= ruleColumns ) )
            // InternalSQLParser.g:284:4: (lv_cols_3_0= ruleColumns )
            {
            // InternalSQLParser.g:284:4: (lv_cols_3_0= ruleColumns )
            // InternalSQLParser.g:285:5: lv_cols_3_0= ruleColumns
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getInsertStatementAccess().getColsColumnsParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_5);
            lv_cols_3_0=ruleColumns();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getInsertStatementRule());
              					}
              					set(
              						current,
              						"cols",
              						lv_cols_3_0,
              						"org.xtext.example.mydsl_sql.SQL.Columns");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:302:3: ( (lv_vals_4_0= ruleValues ) )
            // InternalSQLParser.g:303:4: (lv_vals_4_0= ruleValues )
            {
            // InternalSQLParser.g:303:4: (lv_vals_4_0= ruleValues )
            // InternalSQLParser.g:304:5: lv_vals_4_0= ruleValues
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getInsertStatementAccess().getValsValuesParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_vals_4_0=ruleValues();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getInsertStatementRule());
              					}
              					set(
              						current,
              						"vals",
              						lv_vals_4_0,
              						"org.xtext.example.mydsl_sql.SQL.Values");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleInsertStatement"


    // $ANTLR start "entryRuleCreateStatement"
    // InternalSQLParser.g:325:1: entryRuleCreateStatement returns [EObject current=null] : iv_ruleCreateStatement= ruleCreateStatement EOF ;
    public final EObject entryRuleCreateStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleCreateStatement = null;


        try {
            // InternalSQLParser.g:325:56: (iv_ruleCreateStatement= ruleCreateStatement EOF )
            // InternalSQLParser.g:326:2: iv_ruleCreateStatement= ruleCreateStatement EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCreateStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCreateStatement=ruleCreateStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCreateStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleCreateStatement"


    // $ANTLR start "ruleCreateStatement"
    // InternalSQLParser.g:332:1: ruleCreateStatement returns [EObject current=null] : (otherlv_0= CREATE ( (lv_create_tbl_1_0= ruleCreateTable ) ) ) ;
    public final EObject ruleCreateStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject lv_create_tbl_1_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:338:2: ( (otherlv_0= CREATE ( (lv_create_tbl_1_0= ruleCreateTable ) ) ) )
            // InternalSQLParser.g:339:2: (otherlv_0= CREATE ( (lv_create_tbl_1_0= ruleCreateTable ) ) )
            {
            // InternalSQLParser.g:339:2: (otherlv_0= CREATE ( (lv_create_tbl_1_0= ruleCreateTable ) ) )
            // InternalSQLParser.g:340:3: otherlv_0= CREATE ( (lv_create_tbl_1_0= ruleCreateTable ) )
            {
            otherlv_0=(Token)match(input,CREATE,FOLLOW_7); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getCreateStatementAccess().getCREATEKeyword_0());
              		
            }
            // InternalSQLParser.g:344:3: ( (lv_create_tbl_1_0= ruleCreateTable ) )
            // InternalSQLParser.g:345:4: (lv_create_tbl_1_0= ruleCreateTable )
            {
            // InternalSQLParser.g:345:4: (lv_create_tbl_1_0= ruleCreateTable )
            // InternalSQLParser.g:346:5: lv_create_tbl_1_0= ruleCreateTable
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getCreateStatementAccess().getCreate_tblCreateTableParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_create_tbl_1_0=ruleCreateTable();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getCreateStatementRule());
              					}
              					set(
              						current,
              						"create_tbl",
              						lv_create_tbl_1_0,
              						"org.xtext.example.mydsl_sql.SQL.CreateTable");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleCreateStatement"


    // $ANTLR start "entryRuleCreateTable"
    // InternalSQLParser.g:367:1: entryRuleCreateTable returns [EObject current=null] : iv_ruleCreateTable= ruleCreateTable EOF ;
    public final EObject entryRuleCreateTable() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleCreateTable = null;


        try {
            // InternalSQLParser.g:367:52: (iv_ruleCreateTable= ruleCreateTable EOF )
            // InternalSQLParser.g:368:2: iv_ruleCreateTable= ruleCreateTable EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCreateTableRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCreateTable=ruleCreateTable();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCreateTable; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleCreateTable"


    // $ANTLR start "ruleCreateTable"
    // InternalSQLParser.g:374:1: ruleCreateTable returns [EObject current=null] : (otherlv_0= TABLE ( (lv_tableName_1_0= ruleTableOrAlias ) ) otherlv_2= LeftParenthesis ( (lv_tableElementList_3_0= ruleTableElementList ) ) otherlv_4= RightParenthesis ) ;
    public final EObject ruleCreateTable() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject lv_tableName_1_0 = null;

        EObject lv_tableElementList_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:380:2: ( (otherlv_0= TABLE ( (lv_tableName_1_0= ruleTableOrAlias ) ) otherlv_2= LeftParenthesis ( (lv_tableElementList_3_0= ruleTableElementList ) ) otherlv_4= RightParenthesis ) )
            // InternalSQLParser.g:381:2: (otherlv_0= TABLE ( (lv_tableName_1_0= ruleTableOrAlias ) ) otherlv_2= LeftParenthesis ( (lv_tableElementList_3_0= ruleTableElementList ) ) otherlv_4= RightParenthesis )
            {
            // InternalSQLParser.g:381:2: (otherlv_0= TABLE ( (lv_tableName_1_0= ruleTableOrAlias ) ) otherlv_2= LeftParenthesis ( (lv_tableElementList_3_0= ruleTableElementList ) ) otherlv_4= RightParenthesis )
            // InternalSQLParser.g:382:3: otherlv_0= TABLE ( (lv_tableName_1_0= ruleTableOrAlias ) ) otherlv_2= LeftParenthesis ( (lv_tableElementList_3_0= ruleTableElementList ) ) otherlv_4= RightParenthesis
            {
            otherlv_0=(Token)match(input,TABLE,FOLLOW_5); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getCreateTableAccess().getTABLEKeyword_0());
              		
            }
            // InternalSQLParser.g:386:3: ( (lv_tableName_1_0= ruleTableOrAlias ) )
            // InternalSQLParser.g:387:4: (lv_tableName_1_0= ruleTableOrAlias )
            {
            // InternalSQLParser.g:387:4: (lv_tableName_1_0= ruleTableOrAlias )
            // InternalSQLParser.g:388:5: lv_tableName_1_0= ruleTableOrAlias
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getCreateTableAccess().getTableNameTableOrAliasParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_8);
            lv_tableName_1_0=ruleTableOrAlias();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getCreateTableRule());
              					}
              					set(
              						current,
              						"tableName",
              						lv_tableName_1_0,
              						"org.xtext.example.mydsl_sql.SQL.TableOrAlias");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_2=(Token)match(input,LeftParenthesis,FOLLOW_9); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getCreateTableAccess().getLeftParenthesisKeyword_2());
              		
            }
            // InternalSQLParser.g:409:3: ( (lv_tableElementList_3_0= ruleTableElementList ) )
            // InternalSQLParser.g:410:4: (lv_tableElementList_3_0= ruleTableElementList )
            {
            // InternalSQLParser.g:410:4: (lv_tableElementList_3_0= ruleTableElementList )
            // InternalSQLParser.g:411:5: lv_tableElementList_3_0= ruleTableElementList
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getCreateTableAccess().getTableElementListTableElementListParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_10);
            lv_tableElementList_3_0=ruleTableElementList();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getCreateTableRule());
              					}
              					set(
              						current,
              						"tableElementList",
              						lv_tableElementList_3_0,
              						"org.xtext.example.mydsl_sql.SQL.TableElementList");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_4=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getCreateTableAccess().getRightParenthesisKeyword_4());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleCreateTable"


    // $ANTLR start "entryRuleTableElementList"
    // InternalSQLParser.g:436:1: entryRuleTableElementList returns [EObject current=null] : iv_ruleTableElementList= ruleTableElementList EOF ;
    public final EObject entryRuleTableElementList() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTableElementList = null;


        try {
            // InternalSQLParser.g:436:57: (iv_ruleTableElementList= ruleTableElementList EOF )
            // InternalSQLParser.g:437:2: iv_ruleTableElementList= ruleTableElementList EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTableElementListRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTableElementList=ruleTableElementList();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTableElementList; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTableElementList"


    // $ANTLR start "ruleTableElementList"
    // InternalSQLParser.g:443:1: ruleTableElementList returns [EObject current=null] : ( ( (lv_tableElement_0_0= ruleTableElement ) ) (otherlv_1= Comma ( (lv_tableElement_2_0= ruleTableElement ) ) )* ) ;
    public final EObject ruleTableElementList() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_tableElement_0_0 = null;

        EObject lv_tableElement_2_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:449:2: ( ( ( (lv_tableElement_0_0= ruleTableElement ) ) (otherlv_1= Comma ( (lv_tableElement_2_0= ruleTableElement ) ) )* ) )
            // InternalSQLParser.g:450:2: ( ( (lv_tableElement_0_0= ruleTableElement ) ) (otherlv_1= Comma ( (lv_tableElement_2_0= ruleTableElement ) ) )* )
            {
            // InternalSQLParser.g:450:2: ( ( (lv_tableElement_0_0= ruleTableElement ) ) (otherlv_1= Comma ( (lv_tableElement_2_0= ruleTableElement ) ) )* )
            // InternalSQLParser.g:451:3: ( (lv_tableElement_0_0= ruleTableElement ) ) (otherlv_1= Comma ( (lv_tableElement_2_0= ruleTableElement ) ) )*
            {
            // InternalSQLParser.g:451:3: ( (lv_tableElement_0_0= ruleTableElement ) )
            // InternalSQLParser.g:452:4: (lv_tableElement_0_0= ruleTableElement )
            {
            // InternalSQLParser.g:452:4: (lv_tableElement_0_0= ruleTableElement )
            // InternalSQLParser.g:453:5: lv_tableElement_0_0= ruleTableElement
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getTableElementListAccess().getTableElementTableElementParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_11);
            lv_tableElement_0_0=ruleTableElement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTableElementListRule());
              					}
              					add(
              						current,
              						"tableElement",
              						lv_tableElement_0_0,
              						"org.xtext.example.mydsl_sql.SQL.TableElement");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:470:3: (otherlv_1= Comma ( (lv_tableElement_2_0= ruleTableElement ) ) )*
            loop4:
            do {
                int alt4=2;
                int LA4_0 = input.LA(1);

                if ( (LA4_0==Comma) ) {
                    alt4=1;
                }


                switch (alt4) {
            	case 1 :
            	    // InternalSQLParser.g:471:4: otherlv_1= Comma ( (lv_tableElement_2_0= ruleTableElement ) )
            	    {
            	    otherlv_1=(Token)match(input,Comma,FOLLOW_9); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_1, grammarAccess.getTableElementListAccess().getCommaKeyword_1_0());
            	      			
            	    }
            	    // InternalSQLParser.g:475:4: ( (lv_tableElement_2_0= ruleTableElement ) )
            	    // InternalSQLParser.g:476:5: (lv_tableElement_2_0= ruleTableElement )
            	    {
            	    // InternalSQLParser.g:476:5: (lv_tableElement_2_0= ruleTableElement )
            	    // InternalSQLParser.g:477:6: lv_tableElement_2_0= ruleTableElement
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getTableElementListAccess().getTableElementTableElementParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_11);
            	    lv_tableElement_2_0=ruleTableElement();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getTableElementListRule());
            	      						}
            	      						add(
            	      							current,
            	      							"tableElement",
            	      							lv_tableElement_2_0,
            	      							"org.xtext.example.mydsl_sql.SQL.TableElement");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop4;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTableElementList"


    // $ANTLR start "entryRuleTableElement"
    // InternalSQLParser.g:499:1: entryRuleTableElement returns [EObject current=null] : iv_ruleTableElement= ruleTableElement EOF ;
    public final EObject entryRuleTableElement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTableElement = null;


        try {
            // InternalSQLParser.g:499:53: (iv_ruleTableElement= ruleTableElement EOF )
            // InternalSQLParser.g:500:2: iv_ruleTableElement= ruleTableElement EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTableElementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTableElement=ruleTableElement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTableElement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTableElement"


    // $ANTLR start "ruleTableElement"
    // InternalSQLParser.g:506:1: ruleTableElement returns [EObject current=null] : ( ( (lv_columnDefinition_0_0= ruleColumnDefinition ) ) | ( (lv_tableConstraintDef_1_0= ruleTableConstraintDef ) ) ) ;
    public final EObject ruleTableElement() throws RecognitionException {
        EObject current = null;

        EObject lv_columnDefinition_0_0 = null;

        EObject lv_tableConstraintDef_1_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:512:2: ( ( ( (lv_columnDefinition_0_0= ruleColumnDefinition ) ) | ( (lv_tableConstraintDef_1_0= ruleTableConstraintDef ) ) ) )
            // InternalSQLParser.g:513:2: ( ( (lv_columnDefinition_0_0= ruleColumnDefinition ) ) | ( (lv_tableConstraintDef_1_0= ruleTableConstraintDef ) ) )
            {
            // InternalSQLParser.g:513:2: ( ( (lv_columnDefinition_0_0= ruleColumnDefinition ) ) | ( (lv_tableConstraintDef_1_0= ruleTableConstraintDef ) ) )
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==RULE_STRING) ) {
                alt5=1;
            }
            else if ( (LA5_0==FOREIGN||LA5_0==PRIMARY) ) {
                alt5=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 5, 0, input);

                throw nvae;
            }
            switch (alt5) {
                case 1 :
                    // InternalSQLParser.g:514:3: ( (lv_columnDefinition_0_0= ruleColumnDefinition ) )
                    {
                    // InternalSQLParser.g:514:3: ( (lv_columnDefinition_0_0= ruleColumnDefinition ) )
                    // InternalSQLParser.g:515:4: (lv_columnDefinition_0_0= ruleColumnDefinition )
                    {
                    // InternalSQLParser.g:515:4: (lv_columnDefinition_0_0= ruleColumnDefinition )
                    // InternalSQLParser.g:516:5: lv_columnDefinition_0_0= ruleColumnDefinition
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getTableElementAccess().getColumnDefinitionColumnDefinitionParserRuleCall_0_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_columnDefinition_0_0=ruleColumnDefinition();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getTableElementRule());
                      					}
                      					set(
                      						current,
                      						"columnDefinition",
                      						lv_columnDefinition_0_0,
                      						"org.xtext.example.mydsl_sql.SQL.ColumnDefinition");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:534:3: ( (lv_tableConstraintDef_1_0= ruleTableConstraintDef ) )
                    {
                    // InternalSQLParser.g:534:3: ( (lv_tableConstraintDef_1_0= ruleTableConstraintDef ) )
                    // InternalSQLParser.g:535:4: (lv_tableConstraintDef_1_0= ruleTableConstraintDef )
                    {
                    // InternalSQLParser.g:535:4: (lv_tableConstraintDef_1_0= ruleTableConstraintDef )
                    // InternalSQLParser.g:536:5: lv_tableConstraintDef_1_0= ruleTableConstraintDef
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getTableElementAccess().getTableConstraintDefTableConstraintDefParserRuleCall_1_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_tableConstraintDef_1_0=ruleTableConstraintDef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getTableElementRule());
                      					}
                      					set(
                      						current,
                      						"tableConstraintDef",
                      						lv_tableConstraintDef_1_0,
                      						"org.xtext.example.mydsl_sql.SQL.TableConstraintDef");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTableElement"


    // $ANTLR start "entryRuleColumnDefinition"
    // InternalSQLParser.g:557:1: entryRuleColumnDefinition returns [EObject current=null] : iv_ruleColumnDefinition= ruleColumnDefinition EOF ;
    public final EObject entryRuleColumnDefinition() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleColumnDefinition = null;


        try {
            // InternalSQLParser.g:557:57: (iv_ruleColumnDefinition= ruleColumnDefinition EOF )
            // InternalSQLParser.g:558:2: iv_ruleColumnDefinition= ruleColumnDefinition EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getColumnDefinitionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleColumnDefinition=ruleColumnDefinition();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleColumnDefinition; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleColumnDefinition"


    // $ANTLR start "ruleColumnDefinition"
    // InternalSQLParser.g:564:1: ruleColumnDefinition returns [EObject current=null] : ( ( (lv_columnName_0_0= ruleColumnName ) ) ( (lv_fieldDefinition_1_0= ruleFieldDefinition ) ) ) ;
    public final EObject ruleColumnDefinition() throws RecognitionException {
        EObject current = null;

        EObject lv_columnName_0_0 = null;

        AntlrDatatypeRuleToken lv_fieldDefinition_1_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:570:2: ( ( ( (lv_columnName_0_0= ruleColumnName ) ) ( (lv_fieldDefinition_1_0= ruleFieldDefinition ) ) ) )
            // InternalSQLParser.g:571:2: ( ( (lv_columnName_0_0= ruleColumnName ) ) ( (lv_fieldDefinition_1_0= ruleFieldDefinition ) ) )
            {
            // InternalSQLParser.g:571:2: ( ( (lv_columnName_0_0= ruleColumnName ) ) ( (lv_fieldDefinition_1_0= ruleFieldDefinition ) ) )
            // InternalSQLParser.g:572:3: ( (lv_columnName_0_0= ruleColumnName ) ) ( (lv_fieldDefinition_1_0= ruleFieldDefinition ) )
            {
            // InternalSQLParser.g:572:3: ( (lv_columnName_0_0= ruleColumnName ) )
            // InternalSQLParser.g:573:4: (lv_columnName_0_0= ruleColumnName )
            {
            // InternalSQLParser.g:573:4: (lv_columnName_0_0= ruleColumnName )
            // InternalSQLParser.g:574:5: lv_columnName_0_0= ruleColumnName
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getColumnDefinitionAccess().getColumnNameColumnNameParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_12);
            lv_columnName_0_0=ruleColumnName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getColumnDefinitionRule());
              					}
              					set(
              						current,
              						"columnName",
              						lv_columnName_0_0,
              						"org.xtext.example.mydsl_sql.SQL.ColumnName");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:591:3: ( (lv_fieldDefinition_1_0= ruleFieldDefinition ) )
            // InternalSQLParser.g:592:4: (lv_fieldDefinition_1_0= ruleFieldDefinition )
            {
            // InternalSQLParser.g:592:4: (lv_fieldDefinition_1_0= ruleFieldDefinition )
            // InternalSQLParser.g:593:5: lv_fieldDefinition_1_0= ruleFieldDefinition
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getColumnDefinitionAccess().getFieldDefinitionFieldDefinitionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_fieldDefinition_1_0=ruleFieldDefinition();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getColumnDefinitionRule());
              					}
              					set(
              						current,
              						"fieldDefinition",
              						lv_fieldDefinition_1_0,
              						"org.xtext.example.mydsl_sql.SQL.FieldDefinition");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleColumnDefinition"


    // $ANTLR start "entryRuleTableConstraintDef"
    // InternalSQLParser.g:614:1: entryRuleTableConstraintDef returns [EObject current=null] : iv_ruleTableConstraintDef= ruleTableConstraintDef EOF ;
    public final EObject entryRuleTableConstraintDef() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTableConstraintDef = null;


        try {
            // InternalSQLParser.g:614:59: (iv_ruleTableConstraintDef= ruleTableConstraintDef EOF )
            // InternalSQLParser.g:615:2: iv_ruleTableConstraintDef= ruleTableConstraintDef EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTableConstraintDefRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTableConstraintDef=ruleTableConstraintDef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTableConstraintDef; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTableConstraintDef"


    // $ANTLR start "ruleTableConstraintDef"
    // InternalSQLParser.g:621:1: ruleTableConstraintDef returns [EObject current=null] : ( (otherlv_0= PRIMARY otherlv_1= KEY otherlv_2= LeftParenthesis ( (lv_columnNameList_3_0= ruleColumnNameList ) ) otherlv_4= RightParenthesis ) | (otherlv_5= FOREIGN otherlv_6= KEY otherlv_7= LeftParenthesis ( (lv_columnNameList_8_0= ruleColumnNameList ) ) otherlv_9= RightParenthesis otherlv_10= REFERENCES ( (lv_tableName_11_0= ruleTableName ) ) otherlv_12= LeftParenthesis ( (lv_refColumnNameList_13_0= ruleColumnNameList ) ) otherlv_14= RightParenthesis ) ) ;
    public final EObject ruleTableConstraintDef() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        Token otherlv_7=null;
        Token otherlv_9=null;
        Token otherlv_10=null;
        Token otherlv_12=null;
        Token otherlv_14=null;
        EObject lv_columnNameList_3_0 = null;

        EObject lv_columnNameList_8_0 = null;

        AntlrDatatypeRuleToken lv_tableName_11_0 = null;

        EObject lv_refColumnNameList_13_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:627:2: ( ( (otherlv_0= PRIMARY otherlv_1= KEY otherlv_2= LeftParenthesis ( (lv_columnNameList_3_0= ruleColumnNameList ) ) otherlv_4= RightParenthesis ) | (otherlv_5= FOREIGN otherlv_6= KEY otherlv_7= LeftParenthesis ( (lv_columnNameList_8_0= ruleColumnNameList ) ) otherlv_9= RightParenthesis otherlv_10= REFERENCES ( (lv_tableName_11_0= ruleTableName ) ) otherlv_12= LeftParenthesis ( (lv_refColumnNameList_13_0= ruleColumnNameList ) ) otherlv_14= RightParenthesis ) ) )
            // InternalSQLParser.g:628:2: ( (otherlv_0= PRIMARY otherlv_1= KEY otherlv_2= LeftParenthesis ( (lv_columnNameList_3_0= ruleColumnNameList ) ) otherlv_4= RightParenthesis ) | (otherlv_5= FOREIGN otherlv_6= KEY otherlv_7= LeftParenthesis ( (lv_columnNameList_8_0= ruleColumnNameList ) ) otherlv_9= RightParenthesis otherlv_10= REFERENCES ( (lv_tableName_11_0= ruleTableName ) ) otherlv_12= LeftParenthesis ( (lv_refColumnNameList_13_0= ruleColumnNameList ) ) otherlv_14= RightParenthesis ) )
            {
            // InternalSQLParser.g:628:2: ( (otherlv_0= PRIMARY otherlv_1= KEY otherlv_2= LeftParenthesis ( (lv_columnNameList_3_0= ruleColumnNameList ) ) otherlv_4= RightParenthesis ) | (otherlv_5= FOREIGN otherlv_6= KEY otherlv_7= LeftParenthesis ( (lv_columnNameList_8_0= ruleColumnNameList ) ) otherlv_9= RightParenthesis otherlv_10= REFERENCES ( (lv_tableName_11_0= ruleTableName ) ) otherlv_12= LeftParenthesis ( (lv_refColumnNameList_13_0= ruleColumnNameList ) ) otherlv_14= RightParenthesis ) )
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==PRIMARY) ) {
                alt6=1;
            }
            else if ( (LA6_0==FOREIGN) ) {
                alt6=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 6, 0, input);

                throw nvae;
            }
            switch (alt6) {
                case 1 :
                    // InternalSQLParser.g:629:3: (otherlv_0= PRIMARY otherlv_1= KEY otherlv_2= LeftParenthesis ( (lv_columnNameList_3_0= ruleColumnNameList ) ) otherlv_4= RightParenthesis )
                    {
                    // InternalSQLParser.g:629:3: (otherlv_0= PRIMARY otherlv_1= KEY otherlv_2= LeftParenthesis ( (lv_columnNameList_3_0= ruleColumnNameList ) ) otherlv_4= RightParenthesis )
                    // InternalSQLParser.g:630:4: otherlv_0= PRIMARY otherlv_1= KEY otherlv_2= LeftParenthesis ( (lv_columnNameList_3_0= ruleColumnNameList ) ) otherlv_4= RightParenthesis
                    {
                    otherlv_0=(Token)match(input,PRIMARY,FOLLOW_13); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_0, grammarAccess.getTableConstraintDefAccess().getPRIMARYKeyword_0_0());
                      			
                    }
                    otherlv_1=(Token)match(input,KEY,FOLLOW_8); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getTableConstraintDefAccess().getKEYKeyword_0_1());
                      			
                    }
                    otherlv_2=(Token)match(input,LeftParenthesis,FOLLOW_14); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getTableConstraintDefAccess().getLeftParenthesisKeyword_0_2());
                      			
                    }
                    // InternalSQLParser.g:642:4: ( (lv_columnNameList_3_0= ruleColumnNameList ) )
                    // InternalSQLParser.g:643:5: (lv_columnNameList_3_0= ruleColumnNameList )
                    {
                    // InternalSQLParser.g:643:5: (lv_columnNameList_3_0= ruleColumnNameList )
                    // InternalSQLParser.g:644:6: lv_columnNameList_3_0= ruleColumnNameList
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTableConstraintDefAccess().getColumnNameListColumnNameListParserRuleCall_0_3_0());
                      					
                    }
                    pushFollow(FOLLOW_10);
                    lv_columnNameList_3_0=ruleColumnNameList();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTableConstraintDefRule());
                      						}
                      						set(
                      							current,
                      							"columnNameList",
                      							lv_columnNameList_3_0,
                      							"org.xtext.example.mydsl_sql.SQL.ColumnNameList");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_4=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_4, grammarAccess.getTableConstraintDefAccess().getRightParenthesisKeyword_0_4());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:667:3: (otherlv_5= FOREIGN otherlv_6= KEY otherlv_7= LeftParenthesis ( (lv_columnNameList_8_0= ruleColumnNameList ) ) otherlv_9= RightParenthesis otherlv_10= REFERENCES ( (lv_tableName_11_0= ruleTableName ) ) otherlv_12= LeftParenthesis ( (lv_refColumnNameList_13_0= ruleColumnNameList ) ) otherlv_14= RightParenthesis )
                    {
                    // InternalSQLParser.g:667:3: (otherlv_5= FOREIGN otherlv_6= KEY otherlv_7= LeftParenthesis ( (lv_columnNameList_8_0= ruleColumnNameList ) ) otherlv_9= RightParenthesis otherlv_10= REFERENCES ( (lv_tableName_11_0= ruleTableName ) ) otherlv_12= LeftParenthesis ( (lv_refColumnNameList_13_0= ruleColumnNameList ) ) otherlv_14= RightParenthesis )
                    // InternalSQLParser.g:668:4: otherlv_5= FOREIGN otherlv_6= KEY otherlv_7= LeftParenthesis ( (lv_columnNameList_8_0= ruleColumnNameList ) ) otherlv_9= RightParenthesis otherlv_10= REFERENCES ( (lv_tableName_11_0= ruleTableName ) ) otherlv_12= LeftParenthesis ( (lv_refColumnNameList_13_0= ruleColumnNameList ) ) otherlv_14= RightParenthesis
                    {
                    otherlv_5=(Token)match(input,FOREIGN,FOLLOW_13); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_5, grammarAccess.getTableConstraintDefAccess().getFOREIGNKeyword_1_0());
                      			
                    }
                    otherlv_6=(Token)match(input,KEY,FOLLOW_8); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_6, grammarAccess.getTableConstraintDefAccess().getKEYKeyword_1_1());
                      			
                    }
                    otherlv_7=(Token)match(input,LeftParenthesis,FOLLOW_14); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_7, grammarAccess.getTableConstraintDefAccess().getLeftParenthesisKeyword_1_2());
                      			
                    }
                    // InternalSQLParser.g:680:4: ( (lv_columnNameList_8_0= ruleColumnNameList ) )
                    // InternalSQLParser.g:681:5: (lv_columnNameList_8_0= ruleColumnNameList )
                    {
                    // InternalSQLParser.g:681:5: (lv_columnNameList_8_0= ruleColumnNameList )
                    // InternalSQLParser.g:682:6: lv_columnNameList_8_0= ruleColumnNameList
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTableConstraintDefAccess().getColumnNameListColumnNameListParserRuleCall_1_3_0());
                      					
                    }
                    pushFollow(FOLLOW_10);
                    lv_columnNameList_8_0=ruleColumnNameList();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTableConstraintDefRule());
                      						}
                      						set(
                      							current,
                      							"columnNameList",
                      							lv_columnNameList_8_0,
                      							"org.xtext.example.mydsl_sql.SQL.ColumnNameList");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_9=(Token)match(input,RightParenthesis,FOLLOW_15); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_9, grammarAccess.getTableConstraintDefAccess().getRightParenthesisKeyword_1_4());
                      			
                    }
                    otherlv_10=(Token)match(input,REFERENCES,FOLLOW_14); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_10, grammarAccess.getTableConstraintDefAccess().getREFERENCESKeyword_1_5());
                      			
                    }
                    // InternalSQLParser.g:707:4: ( (lv_tableName_11_0= ruleTableName ) )
                    // InternalSQLParser.g:708:5: (lv_tableName_11_0= ruleTableName )
                    {
                    // InternalSQLParser.g:708:5: (lv_tableName_11_0= ruleTableName )
                    // InternalSQLParser.g:709:6: lv_tableName_11_0= ruleTableName
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTableConstraintDefAccess().getTableNameTableNameParserRuleCall_1_6_0());
                      					
                    }
                    pushFollow(FOLLOW_8);
                    lv_tableName_11_0=ruleTableName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTableConstraintDefRule());
                      						}
                      						set(
                      							current,
                      							"tableName",
                      							lv_tableName_11_0,
                      							"org.xtext.example.mydsl_sql.SQL.TableName");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_12=(Token)match(input,LeftParenthesis,FOLLOW_14); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_12, grammarAccess.getTableConstraintDefAccess().getLeftParenthesisKeyword_1_7());
                      			
                    }
                    // InternalSQLParser.g:730:4: ( (lv_refColumnNameList_13_0= ruleColumnNameList ) )
                    // InternalSQLParser.g:731:5: (lv_refColumnNameList_13_0= ruleColumnNameList )
                    {
                    // InternalSQLParser.g:731:5: (lv_refColumnNameList_13_0= ruleColumnNameList )
                    // InternalSQLParser.g:732:6: lv_refColumnNameList_13_0= ruleColumnNameList
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTableConstraintDefAccess().getRefColumnNameListColumnNameListParserRuleCall_1_8_0());
                      					
                    }
                    pushFollow(FOLLOW_10);
                    lv_refColumnNameList_13_0=ruleColumnNameList();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTableConstraintDefRule());
                      						}
                      						set(
                      							current,
                      							"refColumnNameList",
                      							lv_refColumnNameList_13_0,
                      							"org.xtext.example.mydsl_sql.SQL.ColumnNameList");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_14=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_14, grammarAccess.getTableConstraintDefAccess().getRightParenthesisKeyword_1_9());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTableConstraintDef"


    // $ANTLR start "entryRuleColumnNameList"
    // InternalSQLParser.g:758:1: entryRuleColumnNameList returns [EObject current=null] : iv_ruleColumnNameList= ruleColumnNameList EOF ;
    public final EObject entryRuleColumnNameList() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleColumnNameList = null;


        try {
            // InternalSQLParser.g:758:55: (iv_ruleColumnNameList= ruleColumnNameList EOF )
            // InternalSQLParser.g:759:2: iv_ruleColumnNameList= ruleColumnNameList EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getColumnNameListRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleColumnNameList=ruleColumnNameList();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleColumnNameList; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleColumnNameList"


    // $ANTLR start "ruleColumnNameList"
    // InternalSQLParser.g:765:1: ruleColumnNameList returns [EObject current=null] : ( ( (lv_columnName_0_0= RULE_ID ) ) (otherlv_1= Comma ( (lv_columnName_2_0= RULE_ID ) ) )* ) ;
    public final EObject ruleColumnNameList() throws RecognitionException {
        EObject current = null;

        Token lv_columnName_0_0=null;
        Token otherlv_1=null;
        Token lv_columnName_2_0=null;


        	enterRule();

        try {
            // InternalSQLParser.g:771:2: ( ( ( (lv_columnName_0_0= RULE_ID ) ) (otherlv_1= Comma ( (lv_columnName_2_0= RULE_ID ) ) )* ) )
            // InternalSQLParser.g:772:2: ( ( (lv_columnName_0_0= RULE_ID ) ) (otherlv_1= Comma ( (lv_columnName_2_0= RULE_ID ) ) )* )
            {
            // InternalSQLParser.g:772:2: ( ( (lv_columnName_0_0= RULE_ID ) ) (otherlv_1= Comma ( (lv_columnName_2_0= RULE_ID ) ) )* )
            // InternalSQLParser.g:773:3: ( (lv_columnName_0_0= RULE_ID ) ) (otherlv_1= Comma ( (lv_columnName_2_0= RULE_ID ) ) )*
            {
            // InternalSQLParser.g:773:3: ( (lv_columnName_0_0= RULE_ID ) )
            // InternalSQLParser.g:774:4: (lv_columnName_0_0= RULE_ID )
            {
            // InternalSQLParser.g:774:4: (lv_columnName_0_0= RULE_ID )
            // InternalSQLParser.g:775:5: lv_columnName_0_0= RULE_ID
            {
            lv_columnName_0_0=(Token)match(input,RULE_ID,FOLLOW_11); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_columnName_0_0, grammarAccess.getColumnNameListAccess().getColumnNameIDTerminalRuleCall_0_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getColumnNameListRule());
              					}
              					addWithLastConsumed(
              						current,
              						"columnName",
              						lv_columnName_0_0,
              						"org.xtext.example.mydsl_sql.SQL.ID");
              				
            }

            }


            }

            // InternalSQLParser.g:791:3: (otherlv_1= Comma ( (lv_columnName_2_0= RULE_ID ) ) )*
            loop7:
            do {
                int alt7=2;
                int LA7_0 = input.LA(1);

                if ( (LA7_0==Comma) ) {
                    alt7=1;
                }


                switch (alt7) {
            	case 1 :
            	    // InternalSQLParser.g:792:4: otherlv_1= Comma ( (lv_columnName_2_0= RULE_ID ) )
            	    {
            	    otherlv_1=(Token)match(input,Comma,FOLLOW_14); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_1, grammarAccess.getColumnNameListAccess().getCommaKeyword_1_0());
            	      			
            	    }
            	    // InternalSQLParser.g:796:4: ( (lv_columnName_2_0= RULE_ID ) )
            	    // InternalSQLParser.g:797:5: (lv_columnName_2_0= RULE_ID )
            	    {
            	    // InternalSQLParser.g:797:5: (lv_columnName_2_0= RULE_ID )
            	    // InternalSQLParser.g:798:6: lv_columnName_2_0= RULE_ID
            	    {
            	    lv_columnName_2_0=(Token)match(input,RULE_ID,FOLLOW_11); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						newLeafNode(lv_columnName_2_0, grammarAccess.getColumnNameListAccess().getColumnNameIDTerminalRuleCall_1_1_0());
            	      					
            	    }
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElement(grammarAccess.getColumnNameListRule());
            	      						}
            	      						addWithLastConsumed(
            	      							current,
            	      							"columnName",
            	      							lv_columnName_2_0,
            	      							"org.xtext.example.mydsl_sql.SQL.ID");
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop7;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleColumnNameList"


    // $ANTLR start "entryRuleFieldDefinition"
    // InternalSQLParser.g:819:1: entryRuleFieldDefinition returns [String current=null] : iv_ruleFieldDefinition= ruleFieldDefinition EOF ;
    public final String entryRuleFieldDefinition() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleFieldDefinition = null;


        try {
            // InternalSQLParser.g:819:55: (iv_ruleFieldDefinition= ruleFieldDefinition EOF )
            // InternalSQLParser.g:820:2: iv_ruleFieldDefinition= ruleFieldDefinition EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFieldDefinitionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFieldDefinition=ruleFieldDefinition();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFieldDefinition.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFieldDefinition"


    // $ANTLR start "ruleFieldDefinition"
    // InternalSQLParser.g:826:1: ruleFieldDefinition returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_DataType_0= ruleDataType (this_ColumnAttribute_1= ruleColumnAttribute )* ) ;
    public final AntlrDatatypeRuleToken ruleFieldDefinition() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        AntlrDatatypeRuleToken this_DataType_0 = null;

        AntlrDatatypeRuleToken this_ColumnAttribute_1 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:832:2: ( (this_DataType_0= ruleDataType (this_ColumnAttribute_1= ruleColumnAttribute )* ) )
            // InternalSQLParser.g:833:2: (this_DataType_0= ruleDataType (this_ColumnAttribute_1= ruleColumnAttribute )* )
            {
            // InternalSQLParser.g:833:2: (this_DataType_0= ruleDataType (this_ColumnAttribute_1= ruleColumnAttribute )* )
            // InternalSQLParser.g:834:3: this_DataType_0= ruleDataType (this_ColumnAttribute_1= ruleColumnAttribute )*
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getFieldDefinitionAccess().getDataTypeParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_16);
            this_DataType_0=ruleDataType();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(this_DataType_0);
              		
            }
            if ( state.backtracking==0 ) {

              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:844:3: (this_ColumnAttribute_1= ruleColumnAttribute )*
            loop8:
            do {
                int alt8=2;
                int LA8_0 = input.LA(1);

                if ( (LA8_0==AUTO_INCREMENT||LA8_0==COMMENT||LA8_0==DEFAULT||LA8_0==PRIMARY||LA8_0==UNIQUE||LA8_0==NULL||LA8_0==NOT) ) {
                    alt8=1;
                }


                switch (alt8) {
            	case 1 :
            	    // InternalSQLParser.g:845:4: this_ColumnAttribute_1= ruleColumnAttribute
            	    {
            	    if ( state.backtracking==0 ) {

            	      				newCompositeNode(grammarAccess.getFieldDefinitionAccess().getColumnAttributeParserRuleCall_1());
            	      			
            	    }
            	    pushFollow(FOLLOW_16);
            	    this_ColumnAttribute_1=ruleColumnAttribute();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				current.merge(this_ColumnAttribute_1);
            	      			
            	    }
            	    if ( state.backtracking==0 ) {

            	      				afterParserOrEnumRuleCall();
            	      			
            	    }

            	    }
            	    break;

            	default :
            	    break loop8;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFieldDefinition"


    // $ANTLR start "entryRuleDataType"
    // InternalSQLParser.g:860:1: entryRuleDataType returns [String current=null] : iv_ruleDataType= ruleDataType EOF ;
    public final String entryRuleDataType() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleDataType = null;


        try {
            // InternalSQLParser.g:860:48: (iv_ruleDataType= ruleDataType EOF )
            // InternalSQLParser.g:861:2: iv_ruleDataType= ruleDataType EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDataTypeRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDataType=ruleDataType();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDataType.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleDataType"


    // $ANTLR start "ruleDataType"
    // InternalSQLParser.g:867:1: ruleDataType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_SimpleType_0= ruleSimpleType (this_FieldLength_1= ruleFieldLength )? (this_FieldOptions_2= ruleFieldOptions )? ) ;
    public final AntlrDatatypeRuleToken ruleDataType() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        AntlrDatatypeRuleToken this_SimpleType_0 = null;

        AntlrDatatypeRuleToken this_FieldLength_1 = null;

        AntlrDatatypeRuleToken this_FieldOptions_2 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:873:2: ( (this_SimpleType_0= ruleSimpleType (this_FieldLength_1= ruleFieldLength )? (this_FieldOptions_2= ruleFieldOptions )? ) )
            // InternalSQLParser.g:874:2: (this_SimpleType_0= ruleSimpleType (this_FieldLength_1= ruleFieldLength )? (this_FieldOptions_2= ruleFieldOptions )? )
            {
            // InternalSQLParser.g:874:2: (this_SimpleType_0= ruleSimpleType (this_FieldLength_1= ruleFieldLength )? (this_FieldOptions_2= ruleFieldOptions )? )
            // InternalSQLParser.g:875:3: this_SimpleType_0= ruleSimpleType (this_FieldLength_1= ruleFieldLength )? (this_FieldOptions_2= ruleFieldOptions )?
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getDataTypeAccess().getSimpleTypeParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_17);
            this_SimpleType_0=ruleSimpleType();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(this_SimpleType_0);
              		
            }
            if ( state.backtracking==0 ) {

              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:885:3: (this_FieldLength_1= ruleFieldLength )?
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==LeftParenthesis) ) {
                alt9=1;
            }
            switch (alt9) {
                case 1 :
                    // InternalSQLParser.g:886:4: this_FieldLength_1= ruleFieldLength
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getDataTypeAccess().getFieldLengthParserRuleCall_1());
                      			
                    }
                    pushFollow(FOLLOW_18);
                    this_FieldLength_1=ruleFieldLength();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(this_FieldLength_1);
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }

            // InternalSQLParser.g:897:3: (this_FieldOptions_2= ruleFieldOptions )?
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( ((LA10_0>=UNSIGNED && LA10_0<=ZEROFILL)||LA10_0==SIGNED) ) {
                alt10=1;
            }
            switch (alt10) {
                case 1 :
                    // InternalSQLParser.g:898:4: this_FieldOptions_2= ruleFieldOptions
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getDataTypeAccess().getFieldOptionsParserRuleCall_2());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_FieldOptions_2=ruleFieldOptions();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(this_FieldOptions_2);
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleDataType"


    // $ANTLR start "entryRuleSimpleType"
    // InternalSQLParser.g:913:1: entryRuleSimpleType returns [String current=null] : iv_ruleSimpleType= ruleSimpleType EOF ;
    public final String entryRuleSimpleType() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleSimpleType = null;


        try {
            // InternalSQLParser.g:913:50: (iv_ruleSimpleType= ruleSimpleType EOF )
            // InternalSQLParser.g:914:2: iv_ruleSimpleType= ruleSimpleType EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSimpleTypeRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSimpleType=ruleSimpleType();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSimpleType.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSimpleType"


    // $ANTLR start "ruleSimpleType"
    // InternalSQLParser.g:920:1: ruleSimpleType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= INT | kw= TINYINT | kw= SMALLINT | kw= MEDIUMINT | kw= BIGINT | kw= REAL | kw= DOUBLE | kw= FLOAT | kw= DECIMAL | kw= NUMERIC | kw= BIT | kw= BOOL | kw= CHAR | kw= VARCHAR | kw= BINARY | kw= VARBINARY | kw= DATE | kw= TIME | kw= TIMESTAMP | kw= DATETIME | kw= BLOB | kw= TEXT ) ;
    public final AntlrDatatypeRuleToken ruleSimpleType() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            // InternalSQLParser.g:926:2: ( (kw= INT | kw= TINYINT | kw= SMALLINT | kw= MEDIUMINT | kw= BIGINT | kw= REAL | kw= DOUBLE | kw= FLOAT | kw= DECIMAL | kw= NUMERIC | kw= BIT | kw= BOOL | kw= CHAR | kw= VARCHAR | kw= BINARY | kw= VARBINARY | kw= DATE | kw= TIME | kw= TIMESTAMP | kw= DATETIME | kw= BLOB | kw= TEXT ) )
            // InternalSQLParser.g:927:2: (kw= INT | kw= TINYINT | kw= SMALLINT | kw= MEDIUMINT | kw= BIGINT | kw= REAL | kw= DOUBLE | kw= FLOAT | kw= DECIMAL | kw= NUMERIC | kw= BIT | kw= BOOL | kw= CHAR | kw= VARCHAR | kw= BINARY | kw= VARBINARY | kw= DATE | kw= TIME | kw= TIMESTAMP | kw= DATETIME | kw= BLOB | kw= TEXT )
            {
            // InternalSQLParser.g:927:2: (kw= INT | kw= TINYINT | kw= SMALLINT | kw= MEDIUMINT | kw= BIGINT | kw= REAL | kw= DOUBLE | kw= FLOAT | kw= DECIMAL | kw= NUMERIC | kw= BIT | kw= BOOL | kw= CHAR | kw= VARCHAR | kw= BINARY | kw= VARBINARY | kw= DATE | kw= TIME | kw= TIMESTAMP | kw= DATETIME | kw= BLOB | kw= TEXT )
            int alt11=22;
            switch ( input.LA(1) ) {
            case INT:
                {
                alt11=1;
                }
                break;
            case TINYINT:
                {
                alt11=2;
                }
                break;
            case SMALLINT:
                {
                alt11=3;
                }
                break;
            case MEDIUMINT:
                {
                alt11=4;
                }
                break;
            case BIGINT:
                {
                alt11=5;
                }
                break;
            case REAL:
                {
                alt11=6;
                }
                break;
            case DOUBLE:
                {
                alt11=7;
                }
                break;
            case FLOAT:
                {
                alt11=8;
                }
                break;
            case DECIMAL:
                {
                alt11=9;
                }
                break;
            case NUMERIC:
                {
                alt11=10;
                }
                break;
            case BIT:
                {
                alt11=11;
                }
                break;
            case BOOL:
                {
                alt11=12;
                }
                break;
            case CHAR:
                {
                alt11=13;
                }
                break;
            case VARCHAR:
                {
                alt11=14;
                }
                break;
            case BINARY:
                {
                alt11=15;
                }
                break;
            case VARBINARY:
                {
                alt11=16;
                }
                break;
            case DATE:
                {
                alt11=17;
                }
                break;
            case TIME:
                {
                alt11=18;
                }
                break;
            case TIMESTAMP:
                {
                alt11=19;
                }
                break;
            case DATETIME:
                {
                alt11=20;
                }
                break;
            case BLOB:
                {
                alt11=21;
                }
                break;
            case TEXT:
                {
                alt11=22;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 11, 0, input);

                throw nvae;
            }

            switch (alt11) {
                case 1 :
                    // InternalSQLParser.g:928:3: kw= INT
                    {
                    kw=(Token)match(input,INT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSimpleTypeAccess().getINTKeyword_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:934:3: kw= TINYINT
                    {
                    kw=(Token)match(input,TINYINT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSimpleTypeAccess().getTINYINTKeyword_1());
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:940:3: kw= SMALLINT
                    {
                    kw=(Token)match(input,SMALLINT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSimpleTypeAccess().getSMALLINTKeyword_2());
                      		
                    }

                    }
                    break;
                case 4 :
                    // InternalSQLParser.g:946:3: kw= MEDIUMINT
                    {
                    kw=(Token)match(input,MEDIUMINT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSimpleTypeAccess().getMEDIUMINTKeyword_3());
                      		
                    }

                    }
                    break;
                case 5 :
                    // InternalSQLParser.g:952:3: kw= BIGINT
                    {
                    kw=(Token)match(input,BIGINT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSimpleTypeAccess().getBIGINTKeyword_4());
                      		
                    }

                    }
                    break;
                case 6 :
                    // InternalSQLParser.g:958:3: kw= REAL
                    {
                    kw=(Token)match(input,REAL,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSimpleTypeAccess().getREALKeyword_5());
                      		
                    }

                    }
                    break;
                case 7 :
                    // InternalSQLParser.g:964:3: kw= DOUBLE
                    {
                    kw=(Token)match(input,DOUBLE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSimpleTypeAccess().getDOUBLEKeyword_6());
                      		
                    }

                    }
                    break;
                case 8 :
                    // InternalSQLParser.g:970:3: kw= FLOAT
                    {
                    kw=(Token)match(input,FLOAT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSimpleTypeAccess().getFLOATKeyword_7());
                      		
                    }

                    }
                    break;
                case 9 :
                    // InternalSQLParser.g:976:3: kw= DECIMAL
                    {
                    kw=(Token)match(input,DECIMAL,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSimpleTypeAccess().getDECIMALKeyword_8());
                      		
                    }

                    }
                    break;
                case 10 :
                    // InternalSQLParser.g:982:3: kw= NUMERIC
                    {
                    kw=(Token)match(input,NUMERIC,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSimpleTypeAccess().getNUMERICKeyword_9());
                      		
                    }

                    }
                    break;
                case 11 :
                    // InternalSQLParser.g:988:3: kw= BIT
                    {
                    kw=(Token)match(input,BIT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSimpleTypeAccess().getBITKeyword_10());
                      		
                    }

                    }
                    break;
                case 12 :
                    // InternalSQLParser.g:994:3: kw= BOOL
                    {
                    kw=(Token)match(input,BOOL,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSimpleTypeAccess().getBOOLKeyword_11());
                      		
                    }

                    }
                    break;
                case 13 :
                    // InternalSQLParser.g:1000:3: kw= CHAR
                    {
                    kw=(Token)match(input,CHAR,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSimpleTypeAccess().getCHARKeyword_12());
                      		
                    }

                    }
                    break;
                case 14 :
                    // InternalSQLParser.g:1006:3: kw= VARCHAR
                    {
                    kw=(Token)match(input,VARCHAR,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSimpleTypeAccess().getVARCHARKeyword_13());
                      		
                    }

                    }
                    break;
                case 15 :
                    // InternalSQLParser.g:1012:3: kw= BINARY
                    {
                    kw=(Token)match(input,BINARY,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSimpleTypeAccess().getBINARYKeyword_14());
                      		
                    }

                    }
                    break;
                case 16 :
                    // InternalSQLParser.g:1018:3: kw= VARBINARY
                    {
                    kw=(Token)match(input,VARBINARY,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSimpleTypeAccess().getVARBINARYKeyword_15());
                      		
                    }

                    }
                    break;
                case 17 :
                    // InternalSQLParser.g:1024:3: kw= DATE
                    {
                    kw=(Token)match(input,DATE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSimpleTypeAccess().getDATEKeyword_16());
                      		
                    }

                    }
                    break;
                case 18 :
                    // InternalSQLParser.g:1030:3: kw= TIME
                    {
                    kw=(Token)match(input,TIME,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSimpleTypeAccess().getTIMEKeyword_17());
                      		
                    }

                    }
                    break;
                case 19 :
                    // InternalSQLParser.g:1036:3: kw= TIMESTAMP
                    {
                    kw=(Token)match(input,TIMESTAMP,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSimpleTypeAccess().getTIMESTAMPKeyword_18());
                      		
                    }

                    }
                    break;
                case 20 :
                    // InternalSQLParser.g:1042:3: kw= DATETIME
                    {
                    kw=(Token)match(input,DATETIME,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSimpleTypeAccess().getDATETIMEKeyword_19());
                      		
                    }

                    }
                    break;
                case 21 :
                    // InternalSQLParser.g:1048:3: kw= BLOB
                    {
                    kw=(Token)match(input,BLOB,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSimpleTypeAccess().getBLOBKeyword_20());
                      		
                    }

                    }
                    break;
                case 22 :
                    // InternalSQLParser.g:1054:3: kw= TEXT
                    {
                    kw=(Token)match(input,TEXT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getSimpleTypeAccess().getTEXTKeyword_21());
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSimpleType"


    // $ANTLR start "entryRuleFieldLength"
    // InternalSQLParser.g:1063:1: entryRuleFieldLength returns [String current=null] : iv_ruleFieldLength= ruleFieldLength EOF ;
    public final String entryRuleFieldLength() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleFieldLength = null;


        try {
            // InternalSQLParser.g:1063:51: (iv_ruleFieldLength= ruleFieldLength EOF )
            // InternalSQLParser.g:1064:2: iv_ruleFieldLength= ruleFieldLength EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFieldLengthRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFieldLength=ruleFieldLength();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFieldLength.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFieldLength"


    // $ANTLR start "ruleFieldLength"
    // InternalSQLParser.g:1070:1: ruleFieldLength returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= LeftParenthesis this_INT_1= RULE_INT kw= RightParenthesis ) ;
    public final AntlrDatatypeRuleToken ruleFieldLength() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;
        Token this_INT_1=null;


        	enterRule();

        try {
            // InternalSQLParser.g:1076:2: ( (kw= LeftParenthesis this_INT_1= RULE_INT kw= RightParenthesis ) )
            // InternalSQLParser.g:1077:2: (kw= LeftParenthesis this_INT_1= RULE_INT kw= RightParenthesis )
            {
            // InternalSQLParser.g:1077:2: (kw= LeftParenthesis this_INT_1= RULE_INT kw= RightParenthesis )
            // InternalSQLParser.g:1078:3: kw= LeftParenthesis this_INT_1= RULE_INT kw= RightParenthesis
            {
            kw=(Token)match(input,LeftParenthesis,FOLLOW_19); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(kw);
              			newLeafNode(kw, grammarAccess.getFieldLengthAccess().getLeftParenthesisKeyword_0());
              		
            }
            this_INT_1=(Token)match(input,RULE_INT,FOLLOW_10); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(this_INT_1);
              		
            }
            if ( state.backtracking==0 ) {

              			newLeafNode(this_INT_1, grammarAccess.getFieldLengthAccess().getINTTerminalRuleCall_1());
              		
            }
            kw=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(kw);
              			newLeafNode(kw, grammarAccess.getFieldLengthAccess().getRightParenthesisKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFieldLength"


    // $ANTLR start "entryRuleFieldOptions"
    // InternalSQLParser.g:1099:1: entryRuleFieldOptions returns [String current=null] : iv_ruleFieldOptions= ruleFieldOptions EOF ;
    public final String entryRuleFieldOptions() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleFieldOptions = null;


        try {
            // InternalSQLParser.g:1099:52: (iv_ruleFieldOptions= ruleFieldOptions EOF )
            // InternalSQLParser.g:1100:2: iv_ruleFieldOptions= ruleFieldOptions EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFieldOptionsRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFieldOptions=ruleFieldOptions();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFieldOptions.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFieldOptions"


    // $ANTLR start "ruleFieldOptions"
    // InternalSQLParser.g:1106:1: ruleFieldOptions returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= SIGNED | kw= UNSIGNED | kw= ZEROFILL )+ ;
    public final AntlrDatatypeRuleToken ruleFieldOptions() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            // InternalSQLParser.g:1112:2: ( (kw= SIGNED | kw= UNSIGNED | kw= ZEROFILL )+ )
            // InternalSQLParser.g:1113:2: (kw= SIGNED | kw= UNSIGNED | kw= ZEROFILL )+
            {
            // InternalSQLParser.g:1113:2: (kw= SIGNED | kw= UNSIGNED | kw= ZEROFILL )+
            int cnt12=0;
            loop12:
            do {
                int alt12=4;
                switch ( input.LA(1) ) {
                case SIGNED:
                    {
                    alt12=1;
                    }
                    break;
                case UNSIGNED:
                    {
                    alt12=2;
                    }
                    break;
                case ZEROFILL:
                    {
                    alt12=3;
                    }
                    break;

                }

                switch (alt12) {
            	case 1 :
            	    // InternalSQLParser.g:1114:3: kw= SIGNED
            	    {
            	    kw=(Token)match(input,SIGNED,FOLLOW_18); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      			current.merge(kw);
            	      			newLeafNode(kw, grammarAccess.getFieldOptionsAccess().getSIGNEDKeyword_0());
            	      		
            	    }

            	    }
            	    break;
            	case 2 :
            	    // InternalSQLParser.g:1120:3: kw= UNSIGNED
            	    {
            	    kw=(Token)match(input,UNSIGNED,FOLLOW_18); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      			current.merge(kw);
            	      			newLeafNode(kw, grammarAccess.getFieldOptionsAccess().getUNSIGNEDKeyword_1());
            	      		
            	    }

            	    }
            	    break;
            	case 3 :
            	    // InternalSQLParser.g:1126:3: kw= ZEROFILL
            	    {
            	    kw=(Token)match(input,ZEROFILL,FOLLOW_18); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      			current.merge(kw);
            	      			newLeafNode(kw, grammarAccess.getFieldOptionsAccess().getZEROFILLKeyword_2());
            	      		
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt12 >= 1 ) break loop12;
            	    if (state.backtracking>0) {state.failed=true; return current;}
                        EarlyExitException eee =
                            new EarlyExitException(12, input);
                        throw eee;
                }
                cnt12++;
            } while (true);


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFieldOptions"


    // $ANTLR start "entryRuleColumnAttribute"
    // InternalSQLParser.g:1135:1: entryRuleColumnAttribute returns [String current=null] : iv_ruleColumnAttribute= ruleColumnAttribute EOF ;
    public final String entryRuleColumnAttribute() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleColumnAttribute = null;


        try {
            // InternalSQLParser.g:1135:55: (iv_ruleColumnAttribute= ruleColumnAttribute EOF )
            // InternalSQLParser.g:1136:2: iv_ruleColumnAttribute= ruleColumnAttribute EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getColumnAttributeRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleColumnAttribute=ruleColumnAttribute();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleColumnAttribute.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleColumnAttribute"


    // $ANTLR start "ruleColumnAttribute"
    // InternalSQLParser.g:1142:1: ruleColumnAttribute returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_NullAttribute_0= ruleNullAttribute | this_DefaultValue_1= ruleDefaultValue | this_AutoIncrement_2= ruleAutoIncrement | this_PrimaryKey_3= rulePrimaryKey | this_UniqueKey_4= ruleUniqueKey | this_Comment_5= ruleComment ) ;
    public final AntlrDatatypeRuleToken ruleColumnAttribute() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        AntlrDatatypeRuleToken this_NullAttribute_0 = null;

        AntlrDatatypeRuleToken this_DefaultValue_1 = null;

        AntlrDatatypeRuleToken this_AutoIncrement_2 = null;

        AntlrDatatypeRuleToken this_PrimaryKey_3 = null;

        AntlrDatatypeRuleToken this_UniqueKey_4 = null;

        AntlrDatatypeRuleToken this_Comment_5 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:1148:2: ( (this_NullAttribute_0= ruleNullAttribute | this_DefaultValue_1= ruleDefaultValue | this_AutoIncrement_2= ruleAutoIncrement | this_PrimaryKey_3= rulePrimaryKey | this_UniqueKey_4= ruleUniqueKey | this_Comment_5= ruleComment ) )
            // InternalSQLParser.g:1149:2: (this_NullAttribute_0= ruleNullAttribute | this_DefaultValue_1= ruleDefaultValue | this_AutoIncrement_2= ruleAutoIncrement | this_PrimaryKey_3= rulePrimaryKey | this_UniqueKey_4= ruleUniqueKey | this_Comment_5= ruleComment )
            {
            // InternalSQLParser.g:1149:2: (this_NullAttribute_0= ruleNullAttribute | this_DefaultValue_1= ruleDefaultValue | this_AutoIncrement_2= ruleAutoIncrement | this_PrimaryKey_3= rulePrimaryKey | this_UniqueKey_4= ruleUniqueKey | this_Comment_5= ruleComment )
            int alt13=6;
            switch ( input.LA(1) ) {
            case NULL:
            case NOT:
                {
                alt13=1;
                }
                break;
            case DEFAULT:
                {
                alt13=2;
                }
                break;
            case AUTO_INCREMENT:
                {
                alt13=3;
                }
                break;
            case PRIMARY:
                {
                alt13=4;
                }
                break;
            case UNIQUE:
                {
                alt13=5;
                }
                break;
            case COMMENT:
                {
                alt13=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 13, 0, input);

                throw nvae;
            }

            switch (alt13) {
                case 1 :
                    // InternalSQLParser.g:1150:3: this_NullAttribute_0= ruleNullAttribute
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getColumnAttributeAccess().getNullAttributeParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_NullAttribute_0=ruleNullAttribute();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_NullAttribute_0);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:1161:3: this_DefaultValue_1= ruleDefaultValue
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getColumnAttributeAccess().getDefaultValueParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_DefaultValue_1=ruleDefaultValue();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_DefaultValue_1);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:1172:3: this_AutoIncrement_2= ruleAutoIncrement
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getColumnAttributeAccess().getAutoIncrementParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_AutoIncrement_2=ruleAutoIncrement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_AutoIncrement_2);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 4 :
                    // InternalSQLParser.g:1183:3: this_PrimaryKey_3= rulePrimaryKey
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getColumnAttributeAccess().getPrimaryKeyParserRuleCall_3());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_PrimaryKey_3=rulePrimaryKey();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_PrimaryKey_3);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 5 :
                    // InternalSQLParser.g:1194:3: this_UniqueKey_4= ruleUniqueKey
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getColumnAttributeAccess().getUniqueKeyParserRuleCall_4());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_UniqueKey_4=ruleUniqueKey();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_UniqueKey_4);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 6 :
                    // InternalSQLParser.g:1205:3: this_Comment_5= ruleComment
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getColumnAttributeAccess().getCommentParserRuleCall_5());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Comment_5=ruleComment();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_Comment_5);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleColumnAttribute"


    // $ANTLR start "entryRuleNullAttribute"
    // InternalSQLParser.g:1219:1: entryRuleNullAttribute returns [String current=null] : iv_ruleNullAttribute= ruleNullAttribute EOF ;
    public final String entryRuleNullAttribute() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleNullAttribute = null;


        try {
            // InternalSQLParser.g:1219:53: (iv_ruleNullAttribute= ruleNullAttribute EOF )
            // InternalSQLParser.g:1220:2: iv_ruleNullAttribute= ruleNullAttribute EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNullAttributeRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNullAttribute=ruleNullAttribute();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNullAttribute.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleNullAttribute"


    // $ANTLR start "ruleNullAttribute"
    // InternalSQLParser.g:1226:1: ruleNullAttribute returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : ( (kw= NOT )? kw= NULL ) ;
    public final AntlrDatatypeRuleToken ruleNullAttribute() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            // InternalSQLParser.g:1232:2: ( ( (kw= NOT )? kw= NULL ) )
            // InternalSQLParser.g:1233:2: ( (kw= NOT )? kw= NULL )
            {
            // InternalSQLParser.g:1233:2: ( (kw= NOT )? kw= NULL )
            // InternalSQLParser.g:1234:3: (kw= NOT )? kw= NULL
            {
            // InternalSQLParser.g:1234:3: (kw= NOT )?
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==NOT) ) {
                alt14=1;
            }
            switch (alt14) {
                case 1 :
                    // InternalSQLParser.g:1235:4: kw= NOT
                    {
                    kw=(Token)match(input,NOT,FOLLOW_20); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getNullAttributeAccess().getNOTKeyword_0());
                      			
                    }

                    }
                    break;

            }

            kw=(Token)match(input,NULL,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(kw);
              			newLeafNode(kw, grammarAccess.getNullAttributeAccess().getNULLKeyword_1());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleNullAttribute"


    // $ANTLR start "entryRuleDefaultValue"
    // InternalSQLParser.g:1250:1: entryRuleDefaultValue returns [String current=null] : iv_ruleDefaultValue= ruleDefaultValue EOF ;
    public final String entryRuleDefaultValue() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleDefaultValue = null;


        try {
            // InternalSQLParser.g:1250:52: (iv_ruleDefaultValue= ruleDefaultValue EOF )
            // InternalSQLParser.g:1251:2: iv_ruleDefaultValue= ruleDefaultValue EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDefaultValueRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDefaultValue=ruleDefaultValue();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDefaultValue.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleDefaultValue"


    // $ANTLR start "ruleDefaultValue"
    // InternalSQLParser.g:1257:1: ruleDefaultValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= DEFAULT (this_SignedLiteral_1= ruleSignedLiteral | kw= NOW ) ) ;
    public final AntlrDatatypeRuleToken ruleDefaultValue() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;
        AntlrDatatypeRuleToken this_SignedLiteral_1 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:1263:2: ( (kw= DEFAULT (this_SignedLiteral_1= ruleSignedLiteral | kw= NOW ) ) )
            // InternalSQLParser.g:1264:2: (kw= DEFAULT (this_SignedLiteral_1= ruleSignedLiteral | kw= NOW ) )
            {
            // InternalSQLParser.g:1264:2: (kw= DEFAULT (this_SignedLiteral_1= ruleSignedLiteral | kw= NOW ) )
            // InternalSQLParser.g:1265:3: kw= DEFAULT (this_SignedLiteral_1= ruleSignedLiteral | kw= NOW )
            {
            kw=(Token)match(input,DEFAULT,FOLLOW_21); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(kw);
              			newLeafNode(kw, grammarAccess.getDefaultValueAccess().getDEFAULTKeyword_0());
              		
            }
            // InternalSQLParser.g:1270:3: (this_SignedLiteral_1= ruleSignedLiteral | kw= NOW )
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==TIMESTAMP||LA15_0==FALSE||LA15_0==DATE||LA15_0==NULL||(LA15_0>=TIME && LA15_0<=TRUE)||LA15_0==PlusSign||LA15_0==HyphenMinus||LA15_0==RULE_INT||LA15_0==RULE_STRING_) ) {
                alt15=1;
            }
            else if ( (LA15_0==NOW) ) {
                alt15=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 15, 0, input);

                throw nvae;
            }
            switch (alt15) {
                case 1 :
                    // InternalSQLParser.g:1271:4: this_SignedLiteral_1= ruleSignedLiteral
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getDefaultValueAccess().getSignedLiteralParserRuleCall_1_0());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_SignedLiteral_1=ruleSignedLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(this_SignedLiteral_1);
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:1282:4: kw= NOW
                    {
                    kw=(Token)match(input,NOW,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getDefaultValueAccess().getNOWKeyword_1_1());
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleDefaultValue"


    // $ANTLR start "entryRuleAutoIncrement"
    // InternalSQLParser.g:1292:1: entryRuleAutoIncrement returns [String current=null] : iv_ruleAutoIncrement= ruleAutoIncrement EOF ;
    public final String entryRuleAutoIncrement() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleAutoIncrement = null;


        try {
            // InternalSQLParser.g:1292:53: (iv_ruleAutoIncrement= ruleAutoIncrement EOF )
            // InternalSQLParser.g:1293:2: iv_ruleAutoIncrement= ruleAutoIncrement EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAutoIncrementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAutoIncrement=ruleAutoIncrement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAutoIncrement.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleAutoIncrement"


    // $ANTLR start "ruleAutoIncrement"
    // InternalSQLParser.g:1299:1: ruleAutoIncrement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : kw= AUTO_INCREMENT ;
    public final AntlrDatatypeRuleToken ruleAutoIncrement() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            // InternalSQLParser.g:1305:2: (kw= AUTO_INCREMENT )
            // InternalSQLParser.g:1306:2: kw= AUTO_INCREMENT
            {
            kw=(Token)match(input,AUTO_INCREMENT,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current.merge(kw);
              		newLeafNode(kw, grammarAccess.getAutoIncrementAccess().getAUTO_INCREMENTKeyword());
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleAutoIncrement"


    // $ANTLR start "entryRulePrimaryKey"
    // InternalSQLParser.g:1314:1: entryRulePrimaryKey returns [String current=null] : iv_rulePrimaryKey= rulePrimaryKey EOF ;
    public final String entryRulePrimaryKey() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_rulePrimaryKey = null;


        try {
            // InternalSQLParser.g:1314:50: (iv_rulePrimaryKey= rulePrimaryKey EOF )
            // InternalSQLParser.g:1315:2: iv_rulePrimaryKey= rulePrimaryKey EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPrimaryKeyRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePrimaryKey=rulePrimaryKey();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePrimaryKey.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePrimaryKey"


    // $ANTLR start "rulePrimaryKey"
    // InternalSQLParser.g:1321:1: rulePrimaryKey returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= PRIMARY kw= KEY ) ;
    public final AntlrDatatypeRuleToken rulePrimaryKey() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            // InternalSQLParser.g:1327:2: ( (kw= PRIMARY kw= KEY ) )
            // InternalSQLParser.g:1328:2: (kw= PRIMARY kw= KEY )
            {
            // InternalSQLParser.g:1328:2: (kw= PRIMARY kw= KEY )
            // InternalSQLParser.g:1329:3: kw= PRIMARY kw= KEY
            {
            kw=(Token)match(input,PRIMARY,FOLLOW_13); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(kw);
              			newLeafNode(kw, grammarAccess.getPrimaryKeyAccess().getPRIMARYKeyword_0());
              		
            }
            kw=(Token)match(input,KEY,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(kw);
              			newLeafNode(kw, grammarAccess.getPrimaryKeyAccess().getKEYKeyword_1());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePrimaryKey"


    // $ANTLR start "entryRuleUniqueKey"
    // InternalSQLParser.g:1343:1: entryRuleUniqueKey returns [String current=null] : iv_ruleUniqueKey= ruleUniqueKey EOF ;
    public final String entryRuleUniqueKey() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleUniqueKey = null;


        try {
            // InternalSQLParser.g:1343:49: (iv_ruleUniqueKey= ruleUniqueKey EOF )
            // InternalSQLParser.g:1344:2: iv_ruleUniqueKey= ruleUniqueKey EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getUniqueKeyRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleUniqueKey=ruleUniqueKey();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleUniqueKey.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleUniqueKey"


    // $ANTLR start "ruleUniqueKey"
    // InternalSQLParser.g:1350:1: ruleUniqueKey returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : kw= UNIQUE ;
    public final AntlrDatatypeRuleToken ruleUniqueKey() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            // InternalSQLParser.g:1356:2: (kw= UNIQUE )
            // InternalSQLParser.g:1357:2: kw= UNIQUE
            {
            kw=(Token)match(input,UNIQUE,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current.merge(kw);
              		newLeafNode(kw, grammarAccess.getUniqueKeyAccess().getUNIQUEKeyword());
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleUniqueKey"


    // $ANTLR start "entryRuleComment"
    // InternalSQLParser.g:1365:1: entryRuleComment returns [String current=null] : iv_ruleComment= ruleComment EOF ;
    public final String entryRuleComment() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleComment = null;


        try {
            // InternalSQLParser.g:1365:47: (iv_ruleComment= ruleComment EOF )
            // InternalSQLParser.g:1366:2: iv_ruleComment= ruleComment EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCommentRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleComment=ruleComment();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleComment.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleComment"


    // $ANTLR start "ruleComment"
    // InternalSQLParser.g:1372:1: ruleComment returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= COMMENT this_TextLiteral_1= ruleTextLiteral ) ;
    public final AntlrDatatypeRuleToken ruleComment() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;
        AntlrDatatypeRuleToken this_TextLiteral_1 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:1378:2: ( (kw= COMMENT this_TextLiteral_1= ruleTextLiteral ) )
            // InternalSQLParser.g:1379:2: (kw= COMMENT this_TextLiteral_1= ruleTextLiteral )
            {
            // InternalSQLParser.g:1379:2: (kw= COMMENT this_TextLiteral_1= ruleTextLiteral )
            // InternalSQLParser.g:1380:3: kw= COMMENT this_TextLiteral_1= ruleTextLiteral
            {
            kw=(Token)match(input,COMMENT,FOLLOW_22); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(kw);
              			newLeafNode(kw, grammarAccess.getCommentAccess().getCOMMENTKeyword_0());
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getCommentAccess().getTextLiteralParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_2);
            this_TextLiteral_1=ruleTextLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(this_TextLiteral_1);
              		
            }
            if ( state.backtracking==0 ) {

              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleComment"


    // $ANTLR start "entryRuleTableName"
    // InternalSQLParser.g:1399:1: entryRuleTableName returns [String current=null] : iv_ruleTableName= ruleTableName EOF ;
    public final String entryRuleTableName() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleTableName = null;


        try {
            // InternalSQLParser.g:1399:49: (iv_ruleTableName= ruleTableName EOF )
            // InternalSQLParser.g:1400:2: iv_ruleTableName= ruleTableName EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTableNameRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTableName=ruleTableName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTableName.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTableName"


    // $ANTLR start "ruleTableName"
    // InternalSQLParser.g:1406:1: ruleTableName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : this_ID_0= RULE_ID ;
    public final AntlrDatatypeRuleToken ruleTableName() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_ID_0=null;


        	enterRule();

        try {
            // InternalSQLParser.g:1412:2: (this_ID_0= RULE_ID )
            // InternalSQLParser.g:1413:2: this_ID_0= RULE_ID
            {
            this_ID_0=(Token)match(input,RULE_ID,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current.merge(this_ID_0);
              	
            }
            if ( state.backtracking==0 ) {

              		newLeafNode(this_ID_0, grammarAccess.getTableNameAccess().getIDTerminalRuleCall());
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTableName"


    // $ANTLR start "entryRuleWithQuery"
    // InternalSQLParser.g:1423:1: entryRuleWithQuery returns [EObject current=null] : iv_ruleWithQuery= ruleWithQuery EOF ;
    public final EObject entryRuleWithQuery() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleWithQuery = null;


        try {
            // InternalSQLParser.g:1423:50: (iv_ruleWithQuery= ruleWithQuery EOF )
            // InternalSQLParser.g:1424:2: iv_ruleWithQuery= ruleWithQuery EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getWithQueryRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleWithQuery=ruleWithQuery();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleWithQuery; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleWithQuery"


    // $ANTLR start "ruleWithQuery"
    // InternalSQLParser.g:1430:1: ruleWithQuery returns [EObject current=null] : ( ( (lv_w_0_0= WITH ) ) ( (lv_wname_1_0= ruleDbObjectName ) ) ( (lv_withCols_2_0= ruleWithColumns ) )? otherlv_3= AS otherlv_4= LeftParenthesis ( (lv_query_5_0= ruleSelectQuery ) ) otherlv_6= RightParenthesis (otherlv_7= Comma ( (lv_additionalWname_8_0= ruleDbObjectName ) ) ( (lv_additionalWithCols_9_0= ruleWithColumns ) )? otherlv_10= AS otherlv_11= LeftParenthesis ( (lv_additionalQueries_12_0= ruleSelectQuery ) ) otherlv_13= RightParenthesis )* ) ;
    public final EObject ruleWithQuery() throws RecognitionException {
        EObject current = null;

        Token lv_w_0_0=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        Token otherlv_7=null;
        Token otherlv_10=null;
        Token otherlv_11=null;
        Token otherlv_13=null;
        EObject lv_wname_1_0 = null;

        EObject lv_withCols_2_0 = null;

        EObject lv_query_5_0 = null;

        EObject lv_additionalWname_8_0 = null;

        EObject lv_additionalWithCols_9_0 = null;

        EObject lv_additionalQueries_12_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:1436:2: ( ( ( (lv_w_0_0= WITH ) ) ( (lv_wname_1_0= ruleDbObjectName ) ) ( (lv_withCols_2_0= ruleWithColumns ) )? otherlv_3= AS otherlv_4= LeftParenthesis ( (lv_query_5_0= ruleSelectQuery ) ) otherlv_6= RightParenthesis (otherlv_7= Comma ( (lv_additionalWname_8_0= ruleDbObjectName ) ) ( (lv_additionalWithCols_9_0= ruleWithColumns ) )? otherlv_10= AS otherlv_11= LeftParenthesis ( (lv_additionalQueries_12_0= ruleSelectQuery ) ) otherlv_13= RightParenthesis )* ) )
            // InternalSQLParser.g:1437:2: ( ( (lv_w_0_0= WITH ) ) ( (lv_wname_1_0= ruleDbObjectName ) ) ( (lv_withCols_2_0= ruleWithColumns ) )? otherlv_3= AS otherlv_4= LeftParenthesis ( (lv_query_5_0= ruleSelectQuery ) ) otherlv_6= RightParenthesis (otherlv_7= Comma ( (lv_additionalWname_8_0= ruleDbObjectName ) ) ( (lv_additionalWithCols_9_0= ruleWithColumns ) )? otherlv_10= AS otherlv_11= LeftParenthesis ( (lv_additionalQueries_12_0= ruleSelectQuery ) ) otherlv_13= RightParenthesis )* )
            {
            // InternalSQLParser.g:1437:2: ( ( (lv_w_0_0= WITH ) ) ( (lv_wname_1_0= ruleDbObjectName ) ) ( (lv_withCols_2_0= ruleWithColumns ) )? otherlv_3= AS otherlv_4= LeftParenthesis ( (lv_query_5_0= ruleSelectQuery ) ) otherlv_6= RightParenthesis (otherlv_7= Comma ( (lv_additionalWname_8_0= ruleDbObjectName ) ) ( (lv_additionalWithCols_9_0= ruleWithColumns ) )? otherlv_10= AS otherlv_11= LeftParenthesis ( (lv_additionalQueries_12_0= ruleSelectQuery ) ) otherlv_13= RightParenthesis )* )
            // InternalSQLParser.g:1438:3: ( (lv_w_0_0= WITH ) ) ( (lv_wname_1_0= ruleDbObjectName ) ) ( (lv_withCols_2_0= ruleWithColumns ) )? otherlv_3= AS otherlv_4= LeftParenthesis ( (lv_query_5_0= ruleSelectQuery ) ) otherlv_6= RightParenthesis (otherlv_7= Comma ( (lv_additionalWname_8_0= ruleDbObjectName ) ) ( (lv_additionalWithCols_9_0= ruleWithColumns ) )? otherlv_10= AS otherlv_11= LeftParenthesis ( (lv_additionalQueries_12_0= ruleSelectQuery ) ) otherlv_13= RightParenthesis )*
            {
            // InternalSQLParser.g:1438:3: ( (lv_w_0_0= WITH ) )
            // InternalSQLParser.g:1439:4: (lv_w_0_0= WITH )
            {
            // InternalSQLParser.g:1439:4: (lv_w_0_0= WITH )
            // InternalSQLParser.g:1440:5: lv_w_0_0= WITH
            {
            lv_w_0_0=(Token)match(input,WITH,FOLLOW_23); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_w_0_0, grammarAccess.getWithQueryAccess().getWWITHKeyword_0_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getWithQueryRule());
              					}
              					setWithLastConsumed(current, "w", lv_w_0_0, "WITH");
              				
            }

            }


            }

            // InternalSQLParser.g:1452:3: ( (lv_wname_1_0= ruleDbObjectName ) )
            // InternalSQLParser.g:1453:4: (lv_wname_1_0= ruleDbObjectName )
            {
            // InternalSQLParser.g:1453:4: (lv_wname_1_0= ruleDbObjectName )
            // InternalSQLParser.g:1454:5: lv_wname_1_0= ruleDbObjectName
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getWithQueryAccess().getWnameDbObjectNameParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_24);
            lv_wname_1_0=ruleDbObjectName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getWithQueryRule());
              					}
              					set(
              						current,
              						"wname",
              						lv_wname_1_0,
              						"org.xtext.example.mydsl_sql.SQL.DbObjectName");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:1471:3: ( (lv_withCols_2_0= ruleWithColumns ) )?
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==LeftParenthesis) ) {
                alt16=1;
            }
            switch (alt16) {
                case 1 :
                    // InternalSQLParser.g:1472:4: (lv_withCols_2_0= ruleWithColumns )
                    {
                    // InternalSQLParser.g:1472:4: (lv_withCols_2_0= ruleWithColumns )
                    // InternalSQLParser.g:1473:5: lv_withCols_2_0= ruleWithColumns
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getWithQueryAccess().getWithColsWithColumnsParserRuleCall_2_0());
                      				
                    }
                    pushFollow(FOLLOW_25);
                    lv_withCols_2_0=ruleWithColumns();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getWithQueryRule());
                      					}
                      					set(
                      						current,
                      						"withCols",
                      						lv_withCols_2_0,
                      						"org.xtext.example.mydsl_sql.SQL.WithColumns");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_3=(Token)match(input,AS,FOLLOW_8); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getWithQueryAccess().getASKeyword_3());
              		
            }
            otherlv_4=(Token)match(input,LeftParenthesis,FOLLOW_3); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getWithQueryAccess().getLeftParenthesisKeyword_4());
              		
            }
            // InternalSQLParser.g:1498:3: ( (lv_query_5_0= ruleSelectQuery ) )
            // InternalSQLParser.g:1499:4: (lv_query_5_0= ruleSelectQuery )
            {
            // InternalSQLParser.g:1499:4: (lv_query_5_0= ruleSelectQuery )
            // InternalSQLParser.g:1500:5: lv_query_5_0= ruleSelectQuery
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getWithQueryAccess().getQuerySelectQueryParserRuleCall_5_0());
              				
            }
            pushFollow(FOLLOW_10);
            lv_query_5_0=ruleSelectQuery();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getWithQueryRule());
              					}
              					set(
              						current,
              						"query",
              						lv_query_5_0,
              						"org.xtext.example.mydsl_sql.SQL.SelectQuery");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_6=(Token)match(input,RightParenthesis,FOLLOW_11); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_6, grammarAccess.getWithQueryAccess().getRightParenthesisKeyword_6());
              		
            }
            // InternalSQLParser.g:1521:3: (otherlv_7= Comma ( (lv_additionalWname_8_0= ruleDbObjectName ) ) ( (lv_additionalWithCols_9_0= ruleWithColumns ) )? otherlv_10= AS otherlv_11= LeftParenthesis ( (lv_additionalQueries_12_0= ruleSelectQuery ) ) otherlv_13= RightParenthesis )*
            loop18:
            do {
                int alt18=2;
                int LA18_0 = input.LA(1);

                if ( (LA18_0==Comma) ) {
                    alt18=1;
                }


                switch (alt18) {
            	case 1 :
            	    // InternalSQLParser.g:1522:4: otherlv_7= Comma ( (lv_additionalWname_8_0= ruleDbObjectName ) ) ( (lv_additionalWithCols_9_0= ruleWithColumns ) )? otherlv_10= AS otherlv_11= LeftParenthesis ( (lv_additionalQueries_12_0= ruleSelectQuery ) ) otherlv_13= RightParenthesis
            	    {
            	    otherlv_7=(Token)match(input,Comma,FOLLOW_23); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_7, grammarAccess.getWithQueryAccess().getCommaKeyword_7_0());
            	      			
            	    }
            	    // InternalSQLParser.g:1526:4: ( (lv_additionalWname_8_0= ruleDbObjectName ) )
            	    // InternalSQLParser.g:1527:5: (lv_additionalWname_8_0= ruleDbObjectName )
            	    {
            	    // InternalSQLParser.g:1527:5: (lv_additionalWname_8_0= ruleDbObjectName )
            	    // InternalSQLParser.g:1528:6: lv_additionalWname_8_0= ruleDbObjectName
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getWithQueryAccess().getAdditionalWnameDbObjectNameParserRuleCall_7_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_24);
            	    lv_additionalWname_8_0=ruleDbObjectName();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getWithQueryRule());
            	      						}
            	      						add(
            	      							current,
            	      							"additionalWname",
            	      							lv_additionalWname_8_0,
            	      							"org.xtext.example.mydsl_sql.SQL.DbObjectName");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }

            	    // InternalSQLParser.g:1545:4: ( (lv_additionalWithCols_9_0= ruleWithColumns ) )?
            	    int alt17=2;
            	    int LA17_0 = input.LA(1);

            	    if ( (LA17_0==LeftParenthesis) ) {
            	        alt17=1;
            	    }
            	    switch (alt17) {
            	        case 1 :
            	            // InternalSQLParser.g:1546:5: (lv_additionalWithCols_9_0= ruleWithColumns )
            	            {
            	            // InternalSQLParser.g:1546:5: (lv_additionalWithCols_9_0= ruleWithColumns )
            	            // InternalSQLParser.g:1547:6: lv_additionalWithCols_9_0= ruleWithColumns
            	            {
            	            if ( state.backtracking==0 ) {

            	              						newCompositeNode(grammarAccess.getWithQueryAccess().getAdditionalWithColsWithColumnsParserRuleCall_7_2_0());
            	              					
            	            }
            	            pushFollow(FOLLOW_25);
            	            lv_additionalWithCols_9_0=ruleWithColumns();

            	            state._fsp--;
            	            if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              						if (current==null) {
            	              							current = createModelElementForParent(grammarAccess.getWithQueryRule());
            	              						}
            	              						add(
            	              							current,
            	              							"additionalWithCols",
            	              							lv_additionalWithCols_9_0,
            	              							"org.xtext.example.mydsl_sql.SQL.WithColumns");
            	              						afterParserOrEnumRuleCall();
            	              					
            	            }

            	            }


            	            }
            	            break;

            	    }

            	    otherlv_10=(Token)match(input,AS,FOLLOW_8); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_10, grammarAccess.getWithQueryAccess().getASKeyword_7_3());
            	      			
            	    }
            	    otherlv_11=(Token)match(input,LeftParenthesis,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_11, grammarAccess.getWithQueryAccess().getLeftParenthesisKeyword_7_4());
            	      			
            	    }
            	    // InternalSQLParser.g:1572:4: ( (lv_additionalQueries_12_0= ruleSelectQuery ) )
            	    // InternalSQLParser.g:1573:5: (lv_additionalQueries_12_0= ruleSelectQuery )
            	    {
            	    // InternalSQLParser.g:1573:5: (lv_additionalQueries_12_0= ruleSelectQuery )
            	    // InternalSQLParser.g:1574:6: lv_additionalQueries_12_0= ruleSelectQuery
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getWithQueryAccess().getAdditionalQueriesSelectQueryParserRuleCall_7_5_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_10);
            	    lv_additionalQueries_12_0=ruleSelectQuery();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getWithQueryRule());
            	      						}
            	      						add(
            	      							current,
            	      							"additionalQueries",
            	      							lv_additionalQueries_12_0,
            	      							"org.xtext.example.mydsl_sql.SQL.SelectQuery");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }

            	    otherlv_13=(Token)match(input,RightParenthesis,FOLLOW_11); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_13, grammarAccess.getWithQueryAccess().getRightParenthesisKeyword_7_6());
            	      			
            	    }

            	    }
            	    break;

            	default :
            	    break loop18;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleWithQuery"


    // $ANTLR start "entryRuleWithColumns"
    // InternalSQLParser.g:1600:1: entryRuleWithColumns returns [EObject current=null] : iv_ruleWithColumns= ruleWithColumns EOF ;
    public final EObject entryRuleWithColumns() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleWithColumns = null;


        try {
            // InternalSQLParser.g:1600:52: (iv_ruleWithColumns= ruleWithColumns EOF )
            // InternalSQLParser.g:1601:2: iv_ruleWithColumns= ruleWithColumns EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getWithColumnsRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleWithColumns=ruleWithColumns();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleWithColumns; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleWithColumns"


    // $ANTLR start "ruleWithColumns"
    // InternalSQLParser.g:1607:1: ruleWithColumns returns [EObject current=null] : (otherlv_0= LeftParenthesis this_UsingCols_1= ruleUsingCols otherlv_2= RightParenthesis ) ;
    public final EObject ruleWithColumns() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject this_UsingCols_1 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:1613:2: ( (otherlv_0= LeftParenthesis this_UsingCols_1= ruleUsingCols otherlv_2= RightParenthesis ) )
            // InternalSQLParser.g:1614:2: (otherlv_0= LeftParenthesis this_UsingCols_1= ruleUsingCols otherlv_2= RightParenthesis )
            {
            // InternalSQLParser.g:1614:2: (otherlv_0= LeftParenthesis this_UsingCols_1= ruleUsingCols otherlv_2= RightParenthesis )
            // InternalSQLParser.g:1615:3: otherlv_0= LeftParenthesis this_UsingCols_1= ruleUsingCols otherlv_2= RightParenthesis
            {
            otherlv_0=(Token)match(input,LeftParenthesis,FOLLOW_23); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getWithColumnsAccess().getLeftParenthesisKeyword_0());
              		
            }
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getWithColumnsAccess().getUsingColsParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_10);
            this_UsingCols_1=ruleUsingCols();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_UsingCols_1;
              			afterParserOrEnumRuleCall();
              		
            }
            otherlv_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getWithColumnsAccess().getRightParenthesisKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleWithColumns"


    // $ANTLR start "entryRuleFetchFirst"
    // InternalSQLParser.g:1638:1: entryRuleFetchFirst returns [EObject current=null] : iv_ruleFetchFirst= ruleFetchFirst EOF ;
    public final EObject entryRuleFetchFirst() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFetchFirst = null;


        try {
            // InternalSQLParser.g:1638:51: (iv_ruleFetchFirst= ruleFetchFirst EOF )
            // InternalSQLParser.g:1639:2: iv_ruleFetchFirst= ruleFetchFirst EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFetchFirstRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFetchFirst=ruleFetchFirst();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFetchFirst; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFetchFirst"


    // $ANTLR start "ruleFetchFirst"
    // InternalSQLParser.g:1645:1: ruleFetchFirst returns [EObject current=null] : ( ( (lv_fetchFirst_0_0= ruleUnsignedValue ) ) ( ( (lv_row_1_1= ROW | lv_row_1_2= ROWS ) ) ) otherlv_2= ONLY ) ;
    public final EObject ruleFetchFirst() throws RecognitionException {
        EObject current = null;

        Token lv_row_1_1=null;
        Token lv_row_1_2=null;
        Token otherlv_2=null;
        EObject lv_fetchFirst_0_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:1651:2: ( ( ( (lv_fetchFirst_0_0= ruleUnsignedValue ) ) ( ( (lv_row_1_1= ROW | lv_row_1_2= ROWS ) ) ) otherlv_2= ONLY ) )
            // InternalSQLParser.g:1652:2: ( ( (lv_fetchFirst_0_0= ruleUnsignedValue ) ) ( ( (lv_row_1_1= ROW | lv_row_1_2= ROWS ) ) ) otherlv_2= ONLY )
            {
            // InternalSQLParser.g:1652:2: ( ( (lv_fetchFirst_0_0= ruleUnsignedValue ) ) ( ( (lv_row_1_1= ROW | lv_row_1_2= ROWS ) ) ) otherlv_2= ONLY )
            // InternalSQLParser.g:1653:3: ( (lv_fetchFirst_0_0= ruleUnsignedValue ) ) ( ( (lv_row_1_1= ROW | lv_row_1_2= ROWS ) ) ) otherlv_2= ONLY
            {
            // InternalSQLParser.g:1653:3: ( (lv_fetchFirst_0_0= ruleUnsignedValue ) )
            // InternalSQLParser.g:1654:4: (lv_fetchFirst_0_0= ruleUnsignedValue )
            {
            // InternalSQLParser.g:1654:4: (lv_fetchFirst_0_0= ruleUnsignedValue )
            // InternalSQLParser.g:1655:5: lv_fetchFirst_0_0= ruleUnsignedValue
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getFetchFirstAccess().getFetchFirstUnsignedValueParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_26);
            lv_fetchFirst_0_0=ruleUnsignedValue();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getFetchFirstRule());
              					}
              					set(
              						current,
              						"fetchFirst",
              						lv_fetchFirst_0_0,
              						"org.xtext.example.mydsl_sql.SQL.UnsignedValue");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:1672:3: ( ( (lv_row_1_1= ROW | lv_row_1_2= ROWS ) ) )
            // InternalSQLParser.g:1673:4: ( (lv_row_1_1= ROW | lv_row_1_2= ROWS ) )
            {
            // InternalSQLParser.g:1673:4: ( (lv_row_1_1= ROW | lv_row_1_2= ROWS ) )
            // InternalSQLParser.g:1674:5: (lv_row_1_1= ROW | lv_row_1_2= ROWS )
            {
            // InternalSQLParser.g:1674:5: (lv_row_1_1= ROW | lv_row_1_2= ROWS )
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==ROW) ) {
                alt19=1;
            }
            else if ( (LA19_0==ROWS) ) {
                alt19=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 19, 0, input);

                throw nvae;
            }
            switch (alt19) {
                case 1 :
                    // InternalSQLParser.g:1675:6: lv_row_1_1= ROW
                    {
                    lv_row_1_1=(Token)match(input,ROW,FOLLOW_27); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_row_1_1, grammarAccess.getFetchFirstAccess().getRowROWKeyword_1_0_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getFetchFirstRule());
                      						}
                      						setWithLastConsumed(current, "row", lv_row_1_1, null);
                      					
                    }

                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:1686:6: lv_row_1_2= ROWS
                    {
                    lv_row_1_2=(Token)match(input,ROWS,FOLLOW_27); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_row_1_2, grammarAccess.getFetchFirstAccess().getRowROWSKeyword_1_0_1());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getFetchFirstRule());
                      						}
                      						setWithLastConsumed(current, "row", lv_row_1_2, null);
                      					
                    }

                    }
                    break;

            }


            }


            }

            otherlv_2=(Token)match(input,ONLY,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getFetchFirstAccess().getONLYKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFetchFirst"


    // $ANTLR start "entryRuleOffset"
    // InternalSQLParser.g:1707:1: entryRuleOffset returns [EObject current=null] : iv_ruleOffset= ruleOffset EOF ;
    public final EObject entryRuleOffset() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOffset = null;


        try {
            // InternalSQLParser.g:1707:47: (iv_ruleOffset= ruleOffset EOF )
            // InternalSQLParser.g:1708:2: iv_ruleOffset= ruleOffset EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOffsetRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOffset=ruleOffset();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOffset; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOffset"


    // $ANTLR start "ruleOffset"
    // InternalSQLParser.g:1714:1: ruleOffset returns [EObject current=null] : ( (lv_offset_0_0= RULE_INT ) ) ;
    public final EObject ruleOffset() throws RecognitionException {
        EObject current = null;

        Token lv_offset_0_0=null;


        	enterRule();

        try {
            // InternalSQLParser.g:1720:2: ( ( (lv_offset_0_0= RULE_INT ) ) )
            // InternalSQLParser.g:1721:2: ( (lv_offset_0_0= RULE_INT ) )
            {
            // InternalSQLParser.g:1721:2: ( (lv_offset_0_0= RULE_INT ) )
            // InternalSQLParser.g:1722:3: (lv_offset_0_0= RULE_INT )
            {
            // InternalSQLParser.g:1722:3: (lv_offset_0_0= RULE_INT )
            // InternalSQLParser.g:1723:4: lv_offset_0_0= RULE_INT
            {
            lv_offset_0_0=(Token)match(input,RULE_INT,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(lv_offset_0_0, grammarAccess.getOffsetAccess().getOffsetINTTerminalRuleCall_0());
              			
            }
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getOffsetRule());
              				}
              				setWithLastConsumed(
              					current,
              					"offset",
              					lv_offset_0_0,
              					"org.xtext.example.mydsl_sql.SQL.INT");
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOffset"


    // $ANTLR start "entryRuleLimit"
    // InternalSQLParser.g:1742:1: entryRuleLimit returns [EObject current=null] : iv_ruleLimit= ruleLimit EOF ;
    public final EObject entryRuleLimit() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleLimit = null;


        try {
            // InternalSQLParser.g:1742:46: (iv_ruleLimit= ruleLimit EOF )
            // InternalSQLParser.g:1743:2: iv_ruleLimit= ruleLimit EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLimitRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLimit=ruleLimit();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLimit; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleLimit"


    // $ANTLR start "ruleLimit"
    // InternalSQLParser.g:1749:1: ruleLimit returns [EObject current=null] : ( ( () otherlv_1= ALL ) | ( ( (lv_l1_2_0= RULE_UNSIGNED ) ) (otherlv_3= Comma ( (lv_l2_4_0= RULE_UNSIGNED ) ) )? ) ) ;
    public final EObject ruleLimit() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token lv_l1_2_0=null;
        Token otherlv_3=null;
        Token lv_l2_4_0=null;


        	enterRule();

        try {
            // InternalSQLParser.g:1755:2: ( ( ( () otherlv_1= ALL ) | ( ( (lv_l1_2_0= RULE_UNSIGNED ) ) (otherlv_3= Comma ( (lv_l2_4_0= RULE_UNSIGNED ) ) )? ) ) )
            // InternalSQLParser.g:1756:2: ( ( () otherlv_1= ALL ) | ( ( (lv_l1_2_0= RULE_UNSIGNED ) ) (otherlv_3= Comma ( (lv_l2_4_0= RULE_UNSIGNED ) ) )? ) )
            {
            // InternalSQLParser.g:1756:2: ( ( () otherlv_1= ALL ) | ( ( (lv_l1_2_0= RULE_UNSIGNED ) ) (otherlv_3= Comma ( (lv_l2_4_0= RULE_UNSIGNED ) ) )? ) )
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==ALL) ) {
                alt21=1;
            }
            else if ( (LA21_0==RULE_UNSIGNED) ) {
                alt21=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 21, 0, input);

                throw nvae;
            }
            switch (alt21) {
                case 1 :
                    // InternalSQLParser.g:1757:3: ( () otherlv_1= ALL )
                    {
                    // InternalSQLParser.g:1757:3: ( () otherlv_1= ALL )
                    // InternalSQLParser.g:1758:4: () otherlv_1= ALL
                    {
                    // InternalSQLParser.g:1758:4: ()
                    // InternalSQLParser.g:1759:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getLimitAccess().getLimitAction_0_0(),
                      						current);
                      				
                    }

                    }

                    otherlv_1=(Token)match(input,ALL,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getLimitAccess().getALLKeyword_0_1());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:1774:3: ( ( (lv_l1_2_0= RULE_UNSIGNED ) ) (otherlv_3= Comma ( (lv_l2_4_0= RULE_UNSIGNED ) ) )? )
                    {
                    // InternalSQLParser.g:1774:3: ( ( (lv_l1_2_0= RULE_UNSIGNED ) ) (otherlv_3= Comma ( (lv_l2_4_0= RULE_UNSIGNED ) ) )? )
                    // InternalSQLParser.g:1775:4: ( (lv_l1_2_0= RULE_UNSIGNED ) ) (otherlv_3= Comma ( (lv_l2_4_0= RULE_UNSIGNED ) ) )?
                    {
                    // InternalSQLParser.g:1775:4: ( (lv_l1_2_0= RULE_UNSIGNED ) )
                    // InternalSQLParser.g:1776:5: (lv_l1_2_0= RULE_UNSIGNED )
                    {
                    // InternalSQLParser.g:1776:5: (lv_l1_2_0= RULE_UNSIGNED )
                    // InternalSQLParser.g:1777:6: lv_l1_2_0= RULE_UNSIGNED
                    {
                    lv_l1_2_0=(Token)match(input,RULE_UNSIGNED,FOLLOW_11); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_l1_2_0, grammarAccess.getLimitAccess().getL1UNSIGNEDTerminalRuleCall_1_0_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getLimitRule());
                      						}
                      						setWithLastConsumed(
                      							current,
                      							"l1",
                      							lv_l1_2_0,
                      							"org.xtext.example.mydsl_sql.SQL.UNSIGNED");
                      					
                    }

                    }


                    }

                    // InternalSQLParser.g:1793:4: (otherlv_3= Comma ( (lv_l2_4_0= RULE_UNSIGNED ) ) )?
                    int alt20=2;
                    int LA20_0 = input.LA(1);

                    if ( (LA20_0==Comma) ) {
                        alt20=1;
                    }
                    switch (alt20) {
                        case 1 :
                            // InternalSQLParser.g:1794:5: otherlv_3= Comma ( (lv_l2_4_0= RULE_UNSIGNED ) )
                            {
                            otherlv_3=(Token)match(input,Comma,FOLLOW_28); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(otherlv_3, grammarAccess.getLimitAccess().getCommaKeyword_1_1_0());
                              				
                            }
                            // InternalSQLParser.g:1798:5: ( (lv_l2_4_0= RULE_UNSIGNED ) )
                            // InternalSQLParser.g:1799:6: (lv_l2_4_0= RULE_UNSIGNED )
                            {
                            // InternalSQLParser.g:1799:6: (lv_l2_4_0= RULE_UNSIGNED )
                            // InternalSQLParser.g:1800:7: lv_l2_4_0= RULE_UNSIGNED
                            {
                            lv_l2_4_0=(Token)match(input,RULE_UNSIGNED,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(lv_l2_4_0, grammarAccess.getLimitAccess().getL2UNSIGNEDTerminalRuleCall_1_1_1_0());
                              						
                            }
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getLimitRule());
                              							}
                              							setWithLastConsumed(
                              								current,
                              								"l2",
                              								lv_l2_4_0,
                              								"org.xtext.example.mydsl_sql.SQL.UNSIGNED");
                              						
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleLimit"


    // $ANTLR start "entryRuleSelectQuery"
    // InternalSQLParser.g:1822:1: entryRuleSelectQuery returns [EObject current=null] : iv_ruleSelectQuery= ruleSelectQuery EOF ;
    public final EObject entryRuleSelectQuery() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSelectQuery = null;


        try {
            // InternalSQLParser.g:1822:52: (iv_ruleSelectQuery= ruleSelectQuery EOF )
            // InternalSQLParser.g:1823:2: iv_ruleSelectQuery= ruleSelectQuery EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSelectQueryRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSelectQuery=ruleSelectQuery();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSelectQuery; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSelectQuery"


    // $ANTLR start "ruleSelectQuery"
    // InternalSQLParser.g:1829:1: ruleSelectQuery returns [EObject current=null] : (this_Select_0= ruleSelect ( (lv_op_1_0= ruleSelectSubSet ) )* ) ;
    public final EObject ruleSelectQuery() throws RecognitionException {
        EObject current = null;

        EObject this_Select_0 = null;

        EObject lv_op_1_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:1835:2: ( (this_Select_0= ruleSelect ( (lv_op_1_0= ruleSelectSubSet ) )* ) )
            // InternalSQLParser.g:1836:2: (this_Select_0= ruleSelect ( (lv_op_1_0= ruleSelectSubSet ) )* )
            {
            // InternalSQLParser.g:1836:2: (this_Select_0= ruleSelect ( (lv_op_1_0= ruleSelectSubSet ) )* )
            // InternalSQLParser.g:1837:3: this_Select_0= ruleSelect ( (lv_op_1_0= ruleSelectSubSet ) )*
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getSelectQueryAccess().getSelectParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_29);
            this_Select_0=ruleSelect();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_Select_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:1848:3: ( (lv_op_1_0= ruleSelectSubSet ) )*
            loop22:
            do {
                int alt22=2;
                int LA22_0 = input.LA(1);

                if ( (LA22_0==INTERSECT||LA22_0==EXCEPT||LA22_0==MINUS||LA22_0==UNION) ) {
                    alt22=1;
                }


                switch (alt22) {
            	case 1 :
            	    // InternalSQLParser.g:1849:4: (lv_op_1_0= ruleSelectSubSet )
            	    {
            	    // InternalSQLParser.g:1849:4: (lv_op_1_0= ruleSelectSubSet )
            	    // InternalSQLParser.g:1850:5: lv_op_1_0= ruleSelectSubSet
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getSelectQueryAccess().getOpSelectSubSetParserRuleCall_1_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_29);
            	    lv_op_1_0=ruleSelectSubSet();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getSelectQueryRule());
            	      					}
            	      					add(
            	      						current,
            	      						"op",
            	      						lv_op_1_0,
            	      						"org.xtext.example.mydsl_sql.SQL.SelectSubSet");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop22;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSelectQuery"


    // $ANTLR start "entryRuleSelectSubSet"
    // InternalSQLParser.g:1871:1: entryRuleSelectSubSet returns [EObject current=null] : iv_ruleSelectSubSet= ruleSelectSubSet EOF ;
    public final EObject entryRuleSelectSubSet() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSelectSubSet = null;


        try {
            // InternalSQLParser.g:1871:53: (iv_ruleSelectSubSet= ruleSelectSubSet EOF )
            // InternalSQLParser.g:1872:2: iv_ruleSelectSubSet= ruleSelectSubSet EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSelectSubSetRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSelectSubSet=ruleSelectSubSet();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSelectSubSet; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSelectSubSet"


    // $ANTLR start "ruleSelectSubSet"
    // InternalSQLParser.g:1878:1: ruleSelectSubSet returns [EObject current=null] : ( ( ( (lv_op_0_1= UNION | lv_op_0_2= INTERSECT | lv_op_0_3= MINUS | lv_op_0_4= EXCEPT ) ) ) ( (lv_all_1_0= ALL ) )? ( (lv_query_2_0= ruleSelect ) ) ) ;
    public final EObject ruleSelectSubSet() throws RecognitionException {
        EObject current = null;

        Token lv_op_0_1=null;
        Token lv_op_0_2=null;
        Token lv_op_0_3=null;
        Token lv_op_0_4=null;
        Token lv_all_1_0=null;
        EObject lv_query_2_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:1884:2: ( ( ( ( (lv_op_0_1= UNION | lv_op_0_2= INTERSECT | lv_op_0_3= MINUS | lv_op_0_4= EXCEPT ) ) ) ( (lv_all_1_0= ALL ) )? ( (lv_query_2_0= ruleSelect ) ) ) )
            // InternalSQLParser.g:1885:2: ( ( ( (lv_op_0_1= UNION | lv_op_0_2= INTERSECT | lv_op_0_3= MINUS | lv_op_0_4= EXCEPT ) ) ) ( (lv_all_1_0= ALL ) )? ( (lv_query_2_0= ruleSelect ) ) )
            {
            // InternalSQLParser.g:1885:2: ( ( ( (lv_op_0_1= UNION | lv_op_0_2= INTERSECT | lv_op_0_3= MINUS | lv_op_0_4= EXCEPT ) ) ) ( (lv_all_1_0= ALL ) )? ( (lv_query_2_0= ruleSelect ) ) )
            // InternalSQLParser.g:1886:3: ( ( (lv_op_0_1= UNION | lv_op_0_2= INTERSECT | lv_op_0_3= MINUS | lv_op_0_4= EXCEPT ) ) ) ( (lv_all_1_0= ALL ) )? ( (lv_query_2_0= ruleSelect ) )
            {
            // InternalSQLParser.g:1886:3: ( ( (lv_op_0_1= UNION | lv_op_0_2= INTERSECT | lv_op_0_3= MINUS | lv_op_0_4= EXCEPT ) ) )
            // InternalSQLParser.g:1887:4: ( (lv_op_0_1= UNION | lv_op_0_2= INTERSECT | lv_op_0_3= MINUS | lv_op_0_4= EXCEPT ) )
            {
            // InternalSQLParser.g:1887:4: ( (lv_op_0_1= UNION | lv_op_0_2= INTERSECT | lv_op_0_3= MINUS | lv_op_0_4= EXCEPT ) )
            // InternalSQLParser.g:1888:5: (lv_op_0_1= UNION | lv_op_0_2= INTERSECT | lv_op_0_3= MINUS | lv_op_0_4= EXCEPT )
            {
            // InternalSQLParser.g:1888:5: (lv_op_0_1= UNION | lv_op_0_2= INTERSECT | lv_op_0_3= MINUS | lv_op_0_4= EXCEPT )
            int alt23=4;
            switch ( input.LA(1) ) {
            case UNION:
                {
                alt23=1;
                }
                break;
            case INTERSECT:
                {
                alt23=2;
                }
                break;
            case MINUS:
                {
                alt23=3;
                }
                break;
            case EXCEPT:
                {
                alt23=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 23, 0, input);

                throw nvae;
            }

            switch (alt23) {
                case 1 :
                    // InternalSQLParser.g:1889:6: lv_op_0_1= UNION
                    {
                    lv_op_0_1=(Token)match(input,UNION,FOLLOW_30); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_op_0_1, grammarAccess.getSelectSubSetAccess().getOpUNIONKeyword_0_0_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getSelectSubSetRule());
                      						}
                      						setWithLastConsumed(current, "op", lv_op_0_1, null);
                      					
                    }

                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:1900:6: lv_op_0_2= INTERSECT
                    {
                    lv_op_0_2=(Token)match(input,INTERSECT,FOLLOW_30); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_op_0_2, grammarAccess.getSelectSubSetAccess().getOpINTERSECTKeyword_0_0_1());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getSelectSubSetRule());
                      						}
                      						setWithLastConsumed(current, "op", lv_op_0_2, null);
                      					
                    }

                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:1911:6: lv_op_0_3= MINUS
                    {
                    lv_op_0_3=(Token)match(input,MINUS,FOLLOW_30); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_op_0_3, grammarAccess.getSelectSubSetAccess().getOpMINUSKeyword_0_0_2());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getSelectSubSetRule());
                      						}
                      						setWithLastConsumed(current, "op", lv_op_0_3, null);
                      					
                    }

                    }
                    break;
                case 4 :
                    // InternalSQLParser.g:1922:6: lv_op_0_4= EXCEPT
                    {
                    lv_op_0_4=(Token)match(input,EXCEPT,FOLLOW_30); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_op_0_4, grammarAccess.getSelectSubSetAccess().getOpEXCEPTKeyword_0_0_3());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getSelectSubSetRule());
                      						}
                      						setWithLastConsumed(current, "op", lv_op_0_4, null);
                      					
                    }

                    }
                    break;

            }


            }


            }

            // InternalSQLParser.g:1935:3: ( (lv_all_1_0= ALL ) )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==ALL) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // InternalSQLParser.g:1936:4: (lv_all_1_0= ALL )
                    {
                    // InternalSQLParser.g:1936:4: (lv_all_1_0= ALL )
                    // InternalSQLParser.g:1937:5: lv_all_1_0= ALL
                    {
                    lv_all_1_0=(Token)match(input,ALL,FOLLOW_3); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_all_1_0, grammarAccess.getSelectSubSetAccess().getAllALLKeyword_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getSelectSubSetRule());
                      					}
                      					setWithLastConsumed(current, "all", lv_all_1_0, "ALL");
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalSQLParser.g:1949:3: ( (lv_query_2_0= ruleSelect ) )
            // InternalSQLParser.g:1950:4: (lv_query_2_0= ruleSelect )
            {
            // InternalSQLParser.g:1950:4: (lv_query_2_0= ruleSelect )
            // InternalSQLParser.g:1951:5: lv_query_2_0= ruleSelect
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getSelectSubSetAccess().getQuerySelectParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_query_2_0=ruleSelect();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getSelectSubSetRule());
              					}
              					set(
              						current,
              						"query",
              						lv_query_2_0,
              						"org.xtext.example.mydsl_sql.SQL.Select");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSelectSubSet"


    // $ANTLR start "entryRuleSelect"
    // InternalSQLParser.g:1972:1: entryRuleSelect returns [EObject current=null] : iv_ruleSelect= ruleSelect EOF ;
    public final EObject entryRuleSelect() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSelect = null;


        try {
            // InternalSQLParser.g:1972:47: (iv_ruleSelect= ruleSelect EOF )
            // InternalSQLParser.g:1973:2: iv_ruleSelect= ruleSelect EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSelectRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSelect=ruleSelect();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSelect; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSelect"


    // $ANTLR start "ruleSelect"
    // InternalSQLParser.g:1979:1: ruleSelect returns [EObject current=null] : ( ( (lv_select_0_0= SELECT ) ) (otherlv_1= DISTINCT )? (otherlv_2= TOP (this_INT_3= RULE_INT | this_SIGNED_DOUBLE_4= RULE_SIGNED_DOUBLE ) (otherlv_5= PERCENT )? (otherlv_6= WITH otherlv_7= TIES )? )? ( (lv_cols_8_0= ruleColumns ) ) otherlv_9= FROM ( (lv_tbl_10_0= ruleTables ) ) (otherlv_11= WHERE ( (lv_whereExpression_12_0= ruleFullExpression ) ) )? (otherlv_13= GROUP otherlv_14= BY ( (lv_groupByEntry_15_0= ruleGroupByColumns ) ) )? (otherlv_16= HAVING ( (lv_havingEntry_17_0= ruleFullExpression ) ) )? (otherlv_18= ORDER otherlv_19= BY ( (lv_orderByEntry_20_0= ruleOrderByColumns ) ) )? (otherlv_21= LIMIT ( (lv_lim_22_0= ruleLimit ) ) )? (otherlv_23= OFFSET ( (lv_offset_24_0= ruleOffset ) ) )? (otherlv_25= FETCH otherlv_26= FIRST ( (lv_fetchFirst_27_0= ruleFetchFirst ) ) )? ) ;
    public final EObject ruleSelect() throws RecognitionException {
        EObject current = null;

        Token lv_select_0_0=null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        Token this_INT_3=null;
        Token this_SIGNED_DOUBLE_4=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        Token otherlv_7=null;
        Token otherlv_9=null;
        Token otherlv_11=null;
        Token otherlv_13=null;
        Token otherlv_14=null;
        Token otherlv_16=null;
        Token otherlv_18=null;
        Token otherlv_19=null;
        Token otherlv_21=null;
        Token otherlv_23=null;
        Token otherlv_25=null;
        Token otherlv_26=null;
        EObject lv_cols_8_0 = null;

        EObject lv_tbl_10_0 = null;

        EObject lv_whereExpression_12_0 = null;

        EObject lv_groupByEntry_15_0 = null;

        EObject lv_havingEntry_17_0 = null;

        EObject lv_orderByEntry_20_0 = null;

        EObject lv_lim_22_0 = null;

        EObject lv_offset_24_0 = null;

        EObject lv_fetchFirst_27_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:1985:2: ( ( ( (lv_select_0_0= SELECT ) ) (otherlv_1= DISTINCT )? (otherlv_2= TOP (this_INT_3= RULE_INT | this_SIGNED_DOUBLE_4= RULE_SIGNED_DOUBLE ) (otherlv_5= PERCENT )? (otherlv_6= WITH otherlv_7= TIES )? )? ( (lv_cols_8_0= ruleColumns ) ) otherlv_9= FROM ( (lv_tbl_10_0= ruleTables ) ) (otherlv_11= WHERE ( (lv_whereExpression_12_0= ruleFullExpression ) ) )? (otherlv_13= GROUP otherlv_14= BY ( (lv_groupByEntry_15_0= ruleGroupByColumns ) ) )? (otherlv_16= HAVING ( (lv_havingEntry_17_0= ruleFullExpression ) ) )? (otherlv_18= ORDER otherlv_19= BY ( (lv_orderByEntry_20_0= ruleOrderByColumns ) ) )? (otherlv_21= LIMIT ( (lv_lim_22_0= ruleLimit ) ) )? (otherlv_23= OFFSET ( (lv_offset_24_0= ruleOffset ) ) )? (otherlv_25= FETCH otherlv_26= FIRST ( (lv_fetchFirst_27_0= ruleFetchFirst ) ) )? ) )
            // InternalSQLParser.g:1986:2: ( ( (lv_select_0_0= SELECT ) ) (otherlv_1= DISTINCT )? (otherlv_2= TOP (this_INT_3= RULE_INT | this_SIGNED_DOUBLE_4= RULE_SIGNED_DOUBLE ) (otherlv_5= PERCENT )? (otherlv_6= WITH otherlv_7= TIES )? )? ( (lv_cols_8_0= ruleColumns ) ) otherlv_9= FROM ( (lv_tbl_10_0= ruleTables ) ) (otherlv_11= WHERE ( (lv_whereExpression_12_0= ruleFullExpression ) ) )? (otherlv_13= GROUP otherlv_14= BY ( (lv_groupByEntry_15_0= ruleGroupByColumns ) ) )? (otherlv_16= HAVING ( (lv_havingEntry_17_0= ruleFullExpression ) ) )? (otherlv_18= ORDER otherlv_19= BY ( (lv_orderByEntry_20_0= ruleOrderByColumns ) ) )? (otherlv_21= LIMIT ( (lv_lim_22_0= ruleLimit ) ) )? (otherlv_23= OFFSET ( (lv_offset_24_0= ruleOffset ) ) )? (otherlv_25= FETCH otherlv_26= FIRST ( (lv_fetchFirst_27_0= ruleFetchFirst ) ) )? )
            {
            // InternalSQLParser.g:1986:2: ( ( (lv_select_0_0= SELECT ) ) (otherlv_1= DISTINCT )? (otherlv_2= TOP (this_INT_3= RULE_INT | this_SIGNED_DOUBLE_4= RULE_SIGNED_DOUBLE ) (otherlv_5= PERCENT )? (otherlv_6= WITH otherlv_7= TIES )? )? ( (lv_cols_8_0= ruleColumns ) ) otherlv_9= FROM ( (lv_tbl_10_0= ruleTables ) ) (otherlv_11= WHERE ( (lv_whereExpression_12_0= ruleFullExpression ) ) )? (otherlv_13= GROUP otherlv_14= BY ( (lv_groupByEntry_15_0= ruleGroupByColumns ) ) )? (otherlv_16= HAVING ( (lv_havingEntry_17_0= ruleFullExpression ) ) )? (otherlv_18= ORDER otherlv_19= BY ( (lv_orderByEntry_20_0= ruleOrderByColumns ) ) )? (otherlv_21= LIMIT ( (lv_lim_22_0= ruleLimit ) ) )? (otherlv_23= OFFSET ( (lv_offset_24_0= ruleOffset ) ) )? (otherlv_25= FETCH otherlv_26= FIRST ( (lv_fetchFirst_27_0= ruleFetchFirst ) ) )? )
            // InternalSQLParser.g:1987:3: ( (lv_select_0_0= SELECT ) ) (otherlv_1= DISTINCT )? (otherlv_2= TOP (this_INT_3= RULE_INT | this_SIGNED_DOUBLE_4= RULE_SIGNED_DOUBLE ) (otherlv_5= PERCENT )? (otherlv_6= WITH otherlv_7= TIES )? )? ( (lv_cols_8_0= ruleColumns ) ) otherlv_9= FROM ( (lv_tbl_10_0= ruleTables ) ) (otherlv_11= WHERE ( (lv_whereExpression_12_0= ruleFullExpression ) ) )? (otherlv_13= GROUP otherlv_14= BY ( (lv_groupByEntry_15_0= ruleGroupByColumns ) ) )? (otherlv_16= HAVING ( (lv_havingEntry_17_0= ruleFullExpression ) ) )? (otherlv_18= ORDER otherlv_19= BY ( (lv_orderByEntry_20_0= ruleOrderByColumns ) ) )? (otherlv_21= LIMIT ( (lv_lim_22_0= ruleLimit ) ) )? (otherlv_23= OFFSET ( (lv_offset_24_0= ruleOffset ) ) )? (otherlv_25= FETCH otherlv_26= FIRST ( (lv_fetchFirst_27_0= ruleFetchFirst ) ) )?
            {
            // InternalSQLParser.g:1987:3: ( (lv_select_0_0= SELECT ) )
            // InternalSQLParser.g:1988:4: (lv_select_0_0= SELECT )
            {
            // InternalSQLParser.g:1988:4: (lv_select_0_0= SELECT )
            // InternalSQLParser.g:1989:5: lv_select_0_0= SELECT
            {
            lv_select_0_0=(Token)match(input,SELECT,FOLLOW_31); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_select_0_0, grammarAccess.getSelectAccess().getSelectSELECTKeyword_0_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getSelectRule());
              					}
              					setWithLastConsumed(current, "select", lv_select_0_0, "SELECT");
              				
            }

            }


            }

            // InternalSQLParser.g:2001:3: (otherlv_1= DISTINCT )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==DISTINCT) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    // InternalSQLParser.g:2002:4: otherlv_1= DISTINCT
                    {
                    otherlv_1=(Token)match(input,DISTINCT,FOLLOW_32); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getSelectAccess().getDISTINCTKeyword_1());
                      			
                    }

                    }
                    break;

            }

            // InternalSQLParser.g:2007:3: (otherlv_2= TOP (this_INT_3= RULE_INT | this_SIGNED_DOUBLE_4= RULE_SIGNED_DOUBLE ) (otherlv_5= PERCENT )? (otherlv_6= WITH otherlv_7= TIES )? )?
            int alt29=2;
            int LA29_0 = input.LA(1);

            if ( (LA29_0==TOP) ) {
                alt29=1;
            }
            switch (alt29) {
                case 1 :
                    // InternalSQLParser.g:2008:4: otherlv_2= TOP (this_INT_3= RULE_INT | this_SIGNED_DOUBLE_4= RULE_SIGNED_DOUBLE ) (otherlv_5= PERCENT )? (otherlv_6= WITH otherlv_7= TIES )?
                    {
                    otherlv_2=(Token)match(input,TOP,FOLLOW_33); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getSelectAccess().getTOPKeyword_2_0());
                      			
                    }
                    // InternalSQLParser.g:2012:4: (this_INT_3= RULE_INT | this_SIGNED_DOUBLE_4= RULE_SIGNED_DOUBLE )
                    int alt26=2;
                    int LA26_0 = input.LA(1);

                    if ( (LA26_0==RULE_INT) ) {
                        alt26=1;
                    }
                    else if ( (LA26_0==RULE_SIGNED_DOUBLE) ) {
                        alt26=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 26, 0, input);

                        throw nvae;
                    }
                    switch (alt26) {
                        case 1 :
                            // InternalSQLParser.g:2013:5: this_INT_3= RULE_INT
                            {
                            this_INT_3=(Token)match(input,RULE_INT,FOLLOW_34); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(this_INT_3, grammarAccess.getSelectAccess().getINTTerminalRuleCall_2_1_0());
                              				
                            }

                            }
                            break;
                        case 2 :
                            // InternalSQLParser.g:2018:5: this_SIGNED_DOUBLE_4= RULE_SIGNED_DOUBLE
                            {
                            this_SIGNED_DOUBLE_4=(Token)match(input,RULE_SIGNED_DOUBLE,FOLLOW_34); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(this_SIGNED_DOUBLE_4, grammarAccess.getSelectAccess().getSIGNED_DOUBLETerminalRuleCall_2_1_1());
                              				
                            }

                            }
                            break;

                    }

                    // InternalSQLParser.g:2023:4: (otherlv_5= PERCENT )?
                    int alt27=2;
                    int LA27_0 = input.LA(1);

                    if ( (LA27_0==PERCENT) ) {
                        alt27=1;
                    }
                    switch (alt27) {
                        case 1 :
                            // InternalSQLParser.g:2024:5: otherlv_5= PERCENT
                            {
                            otherlv_5=(Token)match(input,PERCENT,FOLLOW_35); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(otherlv_5, grammarAccess.getSelectAccess().getPERCENTKeyword_2_2());
                              				
                            }

                            }
                            break;

                    }

                    // InternalSQLParser.g:2029:4: (otherlv_6= WITH otherlv_7= TIES )?
                    int alt28=2;
                    int LA28_0 = input.LA(1);

                    if ( (LA28_0==WITH) ) {
                        alt28=1;
                    }
                    switch (alt28) {
                        case 1 :
                            // InternalSQLParser.g:2030:5: otherlv_6= WITH otherlv_7= TIES
                            {
                            otherlv_6=(Token)match(input,WITH,FOLLOW_36); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(otherlv_6, grammarAccess.getSelectAccess().getWITHKeyword_2_3_0());
                              				
                            }
                            otherlv_7=(Token)match(input,TIES,FOLLOW_6); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(otherlv_7, grammarAccess.getSelectAccess().getTIESKeyword_2_3_1());
                              				
                            }

                            }
                            break;

                    }


                    }
                    break;

            }

            // InternalSQLParser.g:2040:3: ( (lv_cols_8_0= ruleColumns ) )
            // InternalSQLParser.g:2041:4: (lv_cols_8_0= ruleColumns )
            {
            // InternalSQLParser.g:2041:4: (lv_cols_8_0= ruleColumns )
            // InternalSQLParser.g:2042:5: lv_cols_8_0= ruleColumns
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getSelectAccess().getColsColumnsParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_37);
            lv_cols_8_0=ruleColumns();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getSelectRule());
              					}
              					set(
              						current,
              						"cols",
              						lv_cols_8_0,
              						"org.xtext.example.mydsl_sql.SQL.Columns");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_9=(Token)match(input,FROM,FOLLOW_5); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_9, grammarAccess.getSelectAccess().getFROMKeyword_4());
              		
            }
            // InternalSQLParser.g:2063:3: ( (lv_tbl_10_0= ruleTables ) )
            // InternalSQLParser.g:2064:4: (lv_tbl_10_0= ruleTables )
            {
            // InternalSQLParser.g:2064:4: (lv_tbl_10_0= ruleTables )
            // InternalSQLParser.g:2065:5: lv_tbl_10_0= ruleTables
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getSelectAccess().getTblTablesParserRuleCall_5_0());
              				
            }
            pushFollow(FOLLOW_38);
            lv_tbl_10_0=ruleTables();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getSelectRule());
              					}
              					set(
              						current,
              						"tbl",
              						lv_tbl_10_0,
              						"org.xtext.example.mydsl_sql.SQL.Tables");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:2082:3: (otherlv_11= WHERE ( (lv_whereExpression_12_0= ruleFullExpression ) ) )?
            int alt30=2;
            int LA30_0 = input.LA(1);

            if ( (LA30_0==WHERE) ) {
                alt30=1;
            }
            switch (alt30) {
                case 1 :
                    // InternalSQLParser.g:2083:4: otherlv_11= WHERE ( (lv_whereExpression_12_0= ruleFullExpression ) )
                    {
                    otherlv_11=(Token)match(input,WHERE,FOLLOW_39); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_11, grammarAccess.getSelectAccess().getWHEREKeyword_6_0());
                      			
                    }
                    // InternalSQLParser.g:2087:4: ( (lv_whereExpression_12_0= ruleFullExpression ) )
                    // InternalSQLParser.g:2088:5: (lv_whereExpression_12_0= ruleFullExpression )
                    {
                    // InternalSQLParser.g:2088:5: (lv_whereExpression_12_0= ruleFullExpression )
                    // InternalSQLParser.g:2089:6: lv_whereExpression_12_0= ruleFullExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getSelectAccess().getWhereExpressionFullExpressionParserRuleCall_6_1_0());
                      					
                    }
                    pushFollow(FOLLOW_40);
                    lv_whereExpression_12_0=ruleFullExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSelectRule());
                      						}
                      						set(
                      							current,
                      							"whereExpression",
                      							lv_whereExpression_12_0,
                      							"org.xtext.example.mydsl_sql.SQL.FullExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            // InternalSQLParser.g:2107:3: (otherlv_13= GROUP otherlv_14= BY ( (lv_groupByEntry_15_0= ruleGroupByColumns ) ) )?
            int alt31=2;
            int LA31_0 = input.LA(1);

            if ( (LA31_0==GROUP) ) {
                alt31=1;
            }
            switch (alt31) {
                case 1 :
                    // InternalSQLParser.g:2108:4: otherlv_13= GROUP otherlv_14= BY ( (lv_groupByEntry_15_0= ruleGroupByColumns ) )
                    {
                    otherlv_13=(Token)match(input,GROUP,FOLLOW_41); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_13, grammarAccess.getSelectAccess().getGROUPKeyword_7_0());
                      			
                    }
                    otherlv_14=(Token)match(input,BY,FOLLOW_42); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_14, grammarAccess.getSelectAccess().getBYKeyword_7_1());
                      			
                    }
                    // InternalSQLParser.g:2116:4: ( (lv_groupByEntry_15_0= ruleGroupByColumns ) )
                    // InternalSQLParser.g:2117:5: (lv_groupByEntry_15_0= ruleGroupByColumns )
                    {
                    // InternalSQLParser.g:2117:5: (lv_groupByEntry_15_0= ruleGroupByColumns )
                    // InternalSQLParser.g:2118:6: lv_groupByEntry_15_0= ruleGroupByColumns
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getSelectAccess().getGroupByEntryGroupByColumnsParserRuleCall_7_2_0());
                      					
                    }
                    pushFollow(FOLLOW_43);
                    lv_groupByEntry_15_0=ruleGroupByColumns();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSelectRule());
                      						}
                      						set(
                      							current,
                      							"groupByEntry",
                      							lv_groupByEntry_15_0,
                      							"org.xtext.example.mydsl_sql.SQL.GroupByColumns");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            // InternalSQLParser.g:2136:3: (otherlv_16= HAVING ( (lv_havingEntry_17_0= ruleFullExpression ) ) )?
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==HAVING) ) {
                alt32=1;
            }
            switch (alt32) {
                case 1 :
                    // InternalSQLParser.g:2137:4: otherlv_16= HAVING ( (lv_havingEntry_17_0= ruleFullExpression ) )
                    {
                    otherlv_16=(Token)match(input,HAVING,FOLLOW_39); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_16, grammarAccess.getSelectAccess().getHAVINGKeyword_8_0());
                      			
                    }
                    // InternalSQLParser.g:2141:4: ( (lv_havingEntry_17_0= ruleFullExpression ) )
                    // InternalSQLParser.g:2142:5: (lv_havingEntry_17_0= ruleFullExpression )
                    {
                    // InternalSQLParser.g:2142:5: (lv_havingEntry_17_0= ruleFullExpression )
                    // InternalSQLParser.g:2143:6: lv_havingEntry_17_0= ruleFullExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getSelectAccess().getHavingEntryFullExpressionParserRuleCall_8_1_0());
                      					
                    }
                    pushFollow(FOLLOW_44);
                    lv_havingEntry_17_0=ruleFullExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSelectRule());
                      						}
                      						set(
                      							current,
                      							"havingEntry",
                      							lv_havingEntry_17_0,
                      							"org.xtext.example.mydsl_sql.SQL.FullExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            // InternalSQLParser.g:2161:3: (otherlv_18= ORDER otherlv_19= BY ( (lv_orderByEntry_20_0= ruleOrderByColumns ) ) )?
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==ORDER) ) {
                alt33=1;
            }
            switch (alt33) {
                case 1 :
                    // InternalSQLParser.g:2162:4: otherlv_18= ORDER otherlv_19= BY ( (lv_orderByEntry_20_0= ruleOrderByColumns ) )
                    {
                    otherlv_18=(Token)match(input,ORDER,FOLLOW_41); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_18, grammarAccess.getSelectAccess().getORDERKeyword_9_0());
                      			
                    }
                    otherlv_19=(Token)match(input,BY,FOLLOW_42); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_19, grammarAccess.getSelectAccess().getBYKeyword_9_1());
                      			
                    }
                    // InternalSQLParser.g:2170:4: ( (lv_orderByEntry_20_0= ruleOrderByColumns ) )
                    // InternalSQLParser.g:2171:5: (lv_orderByEntry_20_0= ruleOrderByColumns )
                    {
                    // InternalSQLParser.g:2171:5: (lv_orderByEntry_20_0= ruleOrderByColumns )
                    // InternalSQLParser.g:2172:6: lv_orderByEntry_20_0= ruleOrderByColumns
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getSelectAccess().getOrderByEntryOrderByColumnsParserRuleCall_9_2_0());
                      					
                    }
                    pushFollow(FOLLOW_45);
                    lv_orderByEntry_20_0=ruleOrderByColumns();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSelectRule());
                      						}
                      						set(
                      							current,
                      							"orderByEntry",
                      							lv_orderByEntry_20_0,
                      							"org.xtext.example.mydsl_sql.SQL.OrderByColumns");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            // InternalSQLParser.g:2190:3: (otherlv_21= LIMIT ( (lv_lim_22_0= ruleLimit ) ) )?
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==LIMIT) ) {
                alt34=1;
            }
            switch (alt34) {
                case 1 :
                    // InternalSQLParser.g:2191:4: otherlv_21= LIMIT ( (lv_lim_22_0= ruleLimit ) )
                    {
                    otherlv_21=(Token)match(input,LIMIT,FOLLOW_46); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_21, grammarAccess.getSelectAccess().getLIMITKeyword_10_0());
                      			
                    }
                    // InternalSQLParser.g:2195:4: ( (lv_lim_22_0= ruleLimit ) )
                    // InternalSQLParser.g:2196:5: (lv_lim_22_0= ruleLimit )
                    {
                    // InternalSQLParser.g:2196:5: (lv_lim_22_0= ruleLimit )
                    // InternalSQLParser.g:2197:6: lv_lim_22_0= ruleLimit
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getSelectAccess().getLimLimitParserRuleCall_10_1_0());
                      					
                    }
                    pushFollow(FOLLOW_47);
                    lv_lim_22_0=ruleLimit();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSelectRule());
                      						}
                      						set(
                      							current,
                      							"lim",
                      							lv_lim_22_0,
                      							"org.xtext.example.mydsl_sql.SQL.Limit");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            // InternalSQLParser.g:2215:3: (otherlv_23= OFFSET ( (lv_offset_24_0= ruleOffset ) ) )?
            int alt35=2;
            int LA35_0 = input.LA(1);

            if ( (LA35_0==OFFSET) ) {
                alt35=1;
            }
            switch (alt35) {
                case 1 :
                    // InternalSQLParser.g:2216:4: otherlv_23= OFFSET ( (lv_offset_24_0= ruleOffset ) )
                    {
                    otherlv_23=(Token)match(input,OFFSET,FOLLOW_19); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_23, grammarAccess.getSelectAccess().getOFFSETKeyword_11_0());
                      			
                    }
                    // InternalSQLParser.g:2220:4: ( (lv_offset_24_0= ruleOffset ) )
                    // InternalSQLParser.g:2221:5: (lv_offset_24_0= ruleOffset )
                    {
                    // InternalSQLParser.g:2221:5: (lv_offset_24_0= ruleOffset )
                    // InternalSQLParser.g:2222:6: lv_offset_24_0= ruleOffset
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getSelectAccess().getOffsetOffsetParserRuleCall_11_1_0());
                      					
                    }
                    pushFollow(FOLLOW_48);
                    lv_offset_24_0=ruleOffset();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSelectRule());
                      						}
                      						set(
                      							current,
                      							"offset",
                      							lv_offset_24_0,
                      							"org.xtext.example.mydsl_sql.SQL.Offset");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            // InternalSQLParser.g:2240:3: (otherlv_25= FETCH otherlv_26= FIRST ( (lv_fetchFirst_27_0= ruleFetchFirst ) ) )?
            int alt36=2;
            int LA36_0 = input.LA(1);

            if ( (LA36_0==FETCH) ) {
                alt36=1;
            }
            switch (alt36) {
                case 1 :
                    // InternalSQLParser.g:2241:4: otherlv_25= FETCH otherlv_26= FIRST ( (lv_fetchFirst_27_0= ruleFetchFirst ) )
                    {
                    otherlv_25=(Token)match(input,FETCH,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_25, grammarAccess.getSelectAccess().getFETCHKeyword_12_0());
                      			
                    }
                    otherlv_26=(Token)match(input,FIRST,FOLLOW_28); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_26, grammarAccess.getSelectAccess().getFIRSTKeyword_12_1());
                      			
                    }
                    // InternalSQLParser.g:2249:4: ( (lv_fetchFirst_27_0= ruleFetchFirst ) )
                    // InternalSQLParser.g:2250:5: (lv_fetchFirst_27_0= ruleFetchFirst )
                    {
                    // InternalSQLParser.g:2250:5: (lv_fetchFirst_27_0= ruleFetchFirst )
                    // InternalSQLParser.g:2251:6: lv_fetchFirst_27_0= ruleFetchFirst
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getSelectAccess().getFetchFirstFetchFirstParserRuleCall_12_2_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_fetchFirst_27_0=ruleFetchFirst();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSelectRule());
                      						}
                      						set(
                      							current,
                      							"fetchFirst",
                      							lv_fetchFirst_27_0,
                      							"org.xtext.example.mydsl_sql.SQL.FetchFirst");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSelect"


    // $ANTLR start "entryRuleColumns"
    // InternalSQLParser.g:2273:1: entryRuleColumns returns [EObject current=null] : iv_ruleColumns= ruleColumns EOF ;
    public final EObject entryRuleColumns() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleColumns = null;


        try {
            // InternalSQLParser.g:2273:48: (iv_ruleColumns= ruleColumns EOF )
            // InternalSQLParser.g:2274:2: iv_ruleColumns= ruleColumns EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getColumnsRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleColumns=ruleColumns();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleColumns; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleColumns"


    // $ANTLR start "ruleColumns"
    // InternalSQLParser.g:2280:1: ruleColumns returns [EObject current=null] : (this_ColumnOrAlias_0= ruleColumnOrAlias ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleColumnOrAlias ) ) )+ )? ) ;
    public final EObject ruleColumns() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_ColumnOrAlias_0 = null;

        EObject lv_entries_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:2286:2: ( (this_ColumnOrAlias_0= ruleColumnOrAlias ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleColumnOrAlias ) ) )+ )? ) )
            // InternalSQLParser.g:2287:2: (this_ColumnOrAlias_0= ruleColumnOrAlias ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleColumnOrAlias ) ) )+ )? )
            {
            // InternalSQLParser.g:2287:2: (this_ColumnOrAlias_0= ruleColumnOrAlias ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleColumnOrAlias ) ) )+ )? )
            // InternalSQLParser.g:2288:3: this_ColumnOrAlias_0= ruleColumnOrAlias ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleColumnOrAlias ) ) )+ )?
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getColumnsAccess().getColumnOrAliasParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_11);
            this_ColumnOrAlias_0=ruleColumnOrAlias();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ColumnOrAlias_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:2299:3: ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleColumnOrAlias ) ) )+ )?
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( (LA38_0==Comma) ) {
                alt38=1;
            }
            switch (alt38) {
                case 1 :
                    // InternalSQLParser.g:2300:4: () (otherlv_2= Comma ( (lv_entries_3_0= ruleColumnOrAlias ) ) )+
                    {
                    // InternalSQLParser.g:2300:4: ()
                    // InternalSQLParser.g:2301:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getColumnsAccess().getOrColumnEntriesAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalSQLParser.g:2310:4: (otherlv_2= Comma ( (lv_entries_3_0= ruleColumnOrAlias ) ) )+
                    int cnt37=0;
                    loop37:
                    do {
                        int alt37=2;
                        int LA37_0 = input.LA(1);

                        if ( (LA37_0==Comma) ) {
                            alt37=1;
                        }


                        switch (alt37) {
                    	case 1 :
                    	    // InternalSQLParser.g:2311:5: otherlv_2= Comma ( (lv_entries_3_0= ruleColumnOrAlias ) )
                    	    {
                    	    otherlv_2=(Token)match(input,Comma,FOLLOW_6); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_2, grammarAccess.getColumnsAccess().getCommaKeyword_1_1_0());
                    	      				
                    	    }
                    	    // InternalSQLParser.g:2315:5: ( (lv_entries_3_0= ruleColumnOrAlias ) )
                    	    // InternalSQLParser.g:2316:6: (lv_entries_3_0= ruleColumnOrAlias )
                    	    {
                    	    // InternalSQLParser.g:2316:6: (lv_entries_3_0= ruleColumnOrAlias )
                    	    // InternalSQLParser.g:2317:7: lv_entries_3_0= ruleColumnOrAlias
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getColumnsAccess().getEntriesColumnOrAliasParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_11);
                    	    lv_entries_3_0=ruleColumnOrAlias();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getColumnsRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"entries",
                    	      								lv_entries_3_0,
                    	      								"org.xtext.example.mydsl_sql.SQL.ColumnOrAlias");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt37 >= 1 ) break loop37;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(37, input);
                                throw eee;
                        }
                        cnt37++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleColumns"


    // $ANTLR start "entryRuleColumnOrAlias"
    // InternalSQLParser.g:2340:1: entryRuleColumnOrAlias returns [EObject current=null] : iv_ruleColumnOrAlias= ruleColumnOrAlias EOF ;
    public final EObject entryRuleColumnOrAlias() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleColumnOrAlias = null;


        try {
            // InternalSQLParser.g:2340:54: (iv_ruleColumnOrAlias= ruleColumnOrAlias EOF )
            // InternalSQLParser.g:2341:2: iv_ruleColumnOrAlias= ruleColumnOrAlias EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getColumnOrAliasRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleColumnOrAlias=ruleColumnOrAlias();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleColumnOrAlias; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleColumnOrAlias"


    // $ANTLR start "ruleColumnOrAlias"
    // InternalSQLParser.g:2347:1: ruleColumnOrAlias returns [EObject current=null] : ( ( ( (lv_ce_0_0= ruleOperandGroup ) ) ( (lv_alias_1_0= AS ) )? ( (lv_colAlias_2_0= ruleDbObjectName ) )? ) | ( (lv_allCols_3_0= RULE_STAR ) ) | ( (lv_dbAllCols_4_0= ruleDbObjectNameAll ) ) ) ;
    public final EObject ruleColumnOrAlias() throws RecognitionException {
        EObject current = null;

        Token lv_alias_1_0=null;
        Token lv_allCols_3_0=null;
        EObject lv_ce_0_0 = null;

        EObject lv_colAlias_2_0 = null;

        EObject lv_dbAllCols_4_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:2353:2: ( ( ( ( (lv_ce_0_0= ruleOperandGroup ) ) ( (lv_alias_1_0= AS ) )? ( (lv_colAlias_2_0= ruleDbObjectName ) )? ) | ( (lv_allCols_3_0= RULE_STAR ) ) | ( (lv_dbAllCols_4_0= ruleDbObjectNameAll ) ) ) )
            // InternalSQLParser.g:2354:2: ( ( ( (lv_ce_0_0= ruleOperandGroup ) ) ( (lv_alias_1_0= AS ) )? ( (lv_colAlias_2_0= ruleDbObjectName ) )? ) | ( (lv_allCols_3_0= RULE_STAR ) ) | ( (lv_dbAllCols_4_0= ruleDbObjectNameAll ) ) )
            {
            // InternalSQLParser.g:2354:2: ( ( ( (lv_ce_0_0= ruleOperandGroup ) ) ( (lv_alias_1_0= AS ) )? ( (lv_colAlias_2_0= ruleDbObjectName ) )? ) | ( (lv_allCols_3_0= RULE_STAR ) ) | ( (lv_dbAllCols_4_0= ruleDbObjectNameAll ) ) )
            int alt41=3;
            switch ( input.LA(1) ) {
            case RULE_ID:
                {
                int LA41_1 = input.LA(2);

                if ( (LA41_1==EOF||LA41_1==FROM||LA41_1==LeftParenthesisPlusSignRightParenthesis||LA41_1==AS||(LA41_1>=VerticalLineVerticalLine && LA41_1<=HyphenMinus)||LA41_1==Solidus||LA41_1==RULE_STAR||(LA41_1>=RULE_STRING && LA41_1<=RULE_ID)) ) {
                    alt41=1;
                }
                else if ( (LA41_1==FullStop) ) {
                    int LA41_6 = input.LA(3);

                    if ( (LA41_6==RULE_STAR) ) {
                        alt41=3;
                    }
                    else if ( ((LA41_6>=RULE_STRING && LA41_6<=RULE_ID)) ) {
                        alt41=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 41, 6, input);

                        throw nvae;
                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 41, 1, input);

                    throw nvae;
                }
                }
                break;
            case RULE_DBNAME:
                {
                int LA41_2 = input.LA(2);

                if ( (LA41_2==FullStop) ) {
                    int LA41_6 = input.LA(3);

                    if ( (LA41_6==RULE_STAR) ) {
                        alt41=3;
                    }
                    else if ( ((LA41_6>=RULE_STRING && LA41_6<=RULE_ID)) ) {
                        alt41=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 41, 6, input);

                        throw nvae;
                    }
                }
                else if ( (LA41_2==EOF||LA41_2==FROM||LA41_2==LeftParenthesisPlusSignRightParenthesis||LA41_2==AS||(LA41_2>=VerticalLineVerticalLine && LA41_2<=HyphenMinus)||LA41_2==Solidus||LA41_2==RULE_STAR||(LA41_2>=RULE_STRING && LA41_2<=RULE_ID)) ) {
                    alt41=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 41, 2, input);

                    throw nvae;
                }
                }
                break;
            case RULE_STRING:
                {
                int LA41_3 = input.LA(2);

                if ( (LA41_3==FullStop) ) {
                    int LA41_6 = input.LA(3);

                    if ( (LA41_6==RULE_STAR) ) {
                        alt41=3;
                    }
                    else if ( ((LA41_6>=RULE_STRING && LA41_6<=RULE_ID)) ) {
                        alt41=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 41, 6, input);

                        throw nvae;
                    }
                }
                else if ( (LA41_3==EOF||LA41_3==FROM||LA41_3==LeftParenthesisPlusSignRightParenthesis||LA41_3==AS||(LA41_3>=VerticalLineVerticalLine && LA41_3<=HyphenMinus)||LA41_3==Solidus||LA41_3==RULE_STAR||(LA41_3>=RULE_STRING && LA41_3<=RULE_ID)) ) {
                    alt41=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 41, 3, input);

                    throw nvae;
                }
                }
                break;
            case EXTRACT:
            case CAST:
            case CASE:
            case LeftParenthesis:
            case RULE_JRPARAM:
            case RULE_JRNPARAM:
            case RULE_UNSIGNED:
            case RULE_INT:
            case RULE_SIGNED_DOUBLE:
            case RULE_STRING_:
                {
                alt41=1;
                }
                break;
            case RULE_STAR:
                {
                alt41=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 41, 0, input);

                throw nvae;
            }

            switch (alt41) {
                case 1 :
                    // InternalSQLParser.g:2355:3: ( ( (lv_ce_0_0= ruleOperandGroup ) ) ( (lv_alias_1_0= AS ) )? ( (lv_colAlias_2_0= ruleDbObjectName ) )? )
                    {
                    // InternalSQLParser.g:2355:3: ( ( (lv_ce_0_0= ruleOperandGroup ) ) ( (lv_alias_1_0= AS ) )? ( (lv_colAlias_2_0= ruleDbObjectName ) )? )
                    // InternalSQLParser.g:2356:4: ( (lv_ce_0_0= ruleOperandGroup ) ) ( (lv_alias_1_0= AS ) )? ( (lv_colAlias_2_0= ruleDbObjectName ) )?
                    {
                    // InternalSQLParser.g:2356:4: ( (lv_ce_0_0= ruleOperandGroup ) )
                    // InternalSQLParser.g:2357:5: (lv_ce_0_0= ruleOperandGroup )
                    {
                    // InternalSQLParser.g:2357:5: (lv_ce_0_0= ruleOperandGroup )
                    // InternalSQLParser.g:2358:6: lv_ce_0_0= ruleOperandGroup
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getColumnOrAliasAccess().getCeOperandGroupParserRuleCall_0_0_0());
                      					
                    }
                    pushFollow(FOLLOW_50);
                    lv_ce_0_0=ruleOperandGroup();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getColumnOrAliasRule());
                      						}
                      						set(
                      							current,
                      							"ce",
                      							lv_ce_0_0,
                      							"org.xtext.example.mydsl_sql.SQL.OperandGroup");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalSQLParser.g:2375:4: ( (lv_alias_1_0= AS ) )?
                    int alt39=2;
                    int LA39_0 = input.LA(1);

                    if ( (LA39_0==AS) ) {
                        alt39=1;
                    }
                    switch (alt39) {
                        case 1 :
                            // InternalSQLParser.g:2376:5: (lv_alias_1_0= AS )
                            {
                            // InternalSQLParser.g:2376:5: (lv_alias_1_0= AS )
                            // InternalSQLParser.g:2377:6: lv_alias_1_0= AS
                            {
                            lv_alias_1_0=(Token)match(input,AS,FOLLOW_51); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(lv_alias_1_0, grammarAccess.getColumnOrAliasAccess().getAliasASKeyword_0_1_0());
                              					
                            }
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getColumnOrAliasRule());
                              						}
                              						setWithLastConsumed(current, "alias", lv_alias_1_0, "AS");
                              					
                            }

                            }


                            }
                            break;

                    }

                    // InternalSQLParser.g:2389:4: ( (lv_colAlias_2_0= ruleDbObjectName ) )?
                    int alt40=2;
                    int LA40_0 = input.LA(1);

                    if ( ((LA40_0>=RULE_STRING && LA40_0<=RULE_ID)) ) {
                        alt40=1;
                    }
                    switch (alt40) {
                        case 1 :
                            // InternalSQLParser.g:2390:5: (lv_colAlias_2_0= ruleDbObjectName )
                            {
                            // InternalSQLParser.g:2390:5: (lv_colAlias_2_0= ruleDbObjectName )
                            // InternalSQLParser.g:2391:6: lv_colAlias_2_0= ruleDbObjectName
                            {
                            if ( state.backtracking==0 ) {

                              						newCompositeNode(grammarAccess.getColumnOrAliasAccess().getColAliasDbObjectNameParserRuleCall_0_2_0());
                              					
                            }
                            pushFollow(FOLLOW_2);
                            lv_colAlias_2_0=ruleDbObjectName();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElementForParent(grammarAccess.getColumnOrAliasRule());
                              						}
                              						set(
                              							current,
                              							"colAlias",
                              							lv_colAlias_2_0,
                              							"org.xtext.example.mydsl_sql.SQL.DbObjectName");
                              						afterParserOrEnumRuleCall();
                              					
                            }

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:2410:3: ( (lv_allCols_3_0= RULE_STAR ) )
                    {
                    // InternalSQLParser.g:2410:3: ( (lv_allCols_3_0= RULE_STAR ) )
                    // InternalSQLParser.g:2411:4: (lv_allCols_3_0= RULE_STAR )
                    {
                    // InternalSQLParser.g:2411:4: (lv_allCols_3_0= RULE_STAR )
                    // InternalSQLParser.g:2412:5: lv_allCols_3_0= RULE_STAR
                    {
                    lv_allCols_3_0=(Token)match(input,RULE_STAR,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_allCols_3_0, grammarAccess.getColumnOrAliasAccess().getAllColsSTARTerminalRuleCall_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getColumnOrAliasRule());
                      					}
                      					setWithLastConsumed(
                      						current,
                      						"allCols",
                      						lv_allCols_3_0,
                      						"org.xtext.example.mydsl_sql.SQL.STAR");
                      				
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:2429:3: ( (lv_dbAllCols_4_0= ruleDbObjectNameAll ) )
                    {
                    // InternalSQLParser.g:2429:3: ( (lv_dbAllCols_4_0= ruleDbObjectNameAll ) )
                    // InternalSQLParser.g:2430:4: (lv_dbAllCols_4_0= ruleDbObjectNameAll )
                    {
                    // InternalSQLParser.g:2430:4: (lv_dbAllCols_4_0= ruleDbObjectNameAll )
                    // InternalSQLParser.g:2431:5: lv_dbAllCols_4_0= ruleDbObjectNameAll
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getColumnOrAliasAccess().getDbAllColsDbObjectNameAllParserRuleCall_2_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_dbAllCols_4_0=ruleDbObjectNameAll();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getColumnOrAliasRule());
                      					}
                      					set(
                      						current,
                      						"dbAllCols",
                      						lv_dbAllCols_4_0,
                      						"org.xtext.example.mydsl_sql.SQL.DbObjectNameAll");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleColumnOrAlias"


    // $ANTLR start "entryRuleColumnFull"
    // InternalSQLParser.g:2452:1: entryRuleColumnFull returns [EObject current=null] : iv_ruleColumnFull= ruleColumnFull EOF ;
    public final EObject entryRuleColumnFull() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleColumnFull = null;


        try {
            // InternalSQLParser.g:2452:51: (iv_ruleColumnFull= ruleColumnFull EOF )
            // InternalSQLParser.g:2453:2: iv_ruleColumnFull= ruleColumnFull EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getColumnFullRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleColumnFull=ruleColumnFull();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleColumnFull; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleColumnFull"


    // $ANTLR start "ruleColumnFull"
    // InternalSQLParser.g:2459:1: ruleColumnFull returns [EObject current=null] : (this_DbObjectName_0= ruleDbObjectName ( () (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )? ) ;
    public final EObject ruleColumnFull() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_DbObjectName_0 = null;

        EObject lv_entries_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:2465:2: ( (this_DbObjectName_0= ruleDbObjectName ( () (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )? ) )
            // InternalSQLParser.g:2466:2: (this_DbObjectName_0= ruleDbObjectName ( () (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )? )
            {
            // InternalSQLParser.g:2466:2: (this_DbObjectName_0= ruleDbObjectName ( () (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )? )
            // InternalSQLParser.g:2467:3: this_DbObjectName_0= ruleDbObjectName ( () (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )?
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getColumnFullAccess().getDbObjectNameParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_52);
            this_DbObjectName_0=ruleDbObjectName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_DbObjectName_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:2478:3: ( () (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )?
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==FullStop) ) {
                alt43=1;
            }
            switch (alt43) {
                case 1 :
                    // InternalSQLParser.g:2479:4: () (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+
                    {
                    // InternalSQLParser.g:2479:4: ()
                    // InternalSQLParser.g:2480:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getColumnFullAccess().getColEntriesAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalSQLParser.g:2489:4: (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+
                    int cnt42=0;
                    loop42:
                    do {
                        int alt42=2;
                        int LA42_0 = input.LA(1);

                        if ( (LA42_0==FullStop) ) {
                            alt42=1;
                        }


                        switch (alt42) {
                    	case 1 :
                    	    // InternalSQLParser.g:2490:5: otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) )
                    	    {
                    	    otherlv_2=(Token)match(input,FullStop,FOLLOW_23); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_2, grammarAccess.getColumnFullAccess().getFullStopKeyword_1_1_0());
                    	      				
                    	    }
                    	    // InternalSQLParser.g:2494:5: ( (lv_entries_3_0= ruleDbObjectName ) )
                    	    // InternalSQLParser.g:2495:6: (lv_entries_3_0= ruleDbObjectName )
                    	    {
                    	    // InternalSQLParser.g:2495:6: (lv_entries_3_0= ruleDbObjectName )
                    	    // InternalSQLParser.g:2496:7: lv_entries_3_0= ruleDbObjectName
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getColumnFullAccess().getEntriesDbObjectNameParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_52);
                    	    lv_entries_3_0=ruleDbObjectName();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getColumnFullRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"entries",
                    	      								lv_entries_3_0,
                    	      								"org.xtext.example.mydsl_sql.SQL.DbObjectName");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt42 >= 1 ) break loop42;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(42, input);
                                throw eee;
                        }
                        cnt42++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleColumnFull"


    // $ANTLR start "entryRuleTables"
    // InternalSQLParser.g:2519:1: entryRuleTables returns [EObject current=null] : iv_ruleTables= ruleTables EOF ;
    public final EObject entryRuleTables() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTables = null;


        try {
            // InternalSQLParser.g:2519:47: (iv_ruleTables= ruleTables EOF )
            // InternalSQLParser.g:2520:2: iv_ruleTables= ruleTables EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTablesRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTables=ruleTables();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTables; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTables"


    // $ANTLR start "ruleTables"
    // InternalSQLParser.g:2526:1: ruleTables returns [EObject current=null] : (this_FromTable_0= ruleFromTable ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleFromTable ) ) )+ )? ) ;
    public final EObject ruleTables() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_FromTable_0 = null;

        EObject lv_entries_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:2532:2: ( (this_FromTable_0= ruleFromTable ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleFromTable ) ) )+ )? ) )
            // InternalSQLParser.g:2533:2: (this_FromTable_0= ruleFromTable ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleFromTable ) ) )+ )? )
            {
            // InternalSQLParser.g:2533:2: (this_FromTable_0= ruleFromTable ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleFromTable ) ) )+ )? )
            // InternalSQLParser.g:2534:3: this_FromTable_0= ruleFromTable ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleFromTable ) ) )+ )?
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getTablesAccess().getFromTableParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_11);
            this_FromTable_0=ruleFromTable();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_FromTable_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:2545:3: ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleFromTable ) ) )+ )?
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==Comma) ) {
                alt45=1;
            }
            switch (alt45) {
                case 1 :
                    // InternalSQLParser.g:2546:4: () (otherlv_2= Comma ( (lv_entries_3_0= ruleFromTable ) ) )+
                    {
                    // InternalSQLParser.g:2546:4: ()
                    // InternalSQLParser.g:2547:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getTablesAccess().getOrTableEntriesAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalSQLParser.g:2556:4: (otherlv_2= Comma ( (lv_entries_3_0= ruleFromTable ) ) )+
                    int cnt44=0;
                    loop44:
                    do {
                        int alt44=2;
                        int LA44_0 = input.LA(1);

                        if ( (LA44_0==Comma) ) {
                            alt44=1;
                        }


                        switch (alt44) {
                    	case 1 :
                    	    // InternalSQLParser.g:2557:5: otherlv_2= Comma ( (lv_entries_3_0= ruleFromTable ) )
                    	    {
                    	    otherlv_2=(Token)match(input,Comma,FOLLOW_5); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_2, grammarAccess.getTablesAccess().getCommaKeyword_1_1_0());
                    	      				
                    	    }
                    	    // InternalSQLParser.g:2561:5: ( (lv_entries_3_0= ruleFromTable ) )
                    	    // InternalSQLParser.g:2562:6: (lv_entries_3_0= ruleFromTable )
                    	    {
                    	    // InternalSQLParser.g:2562:6: (lv_entries_3_0= ruleFromTable )
                    	    // InternalSQLParser.g:2563:7: lv_entries_3_0= ruleFromTable
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getTablesAccess().getEntriesFromTableParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_11);
                    	    lv_entries_3_0=ruleFromTable();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getTablesRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"entries",
                    	      								lv_entries_3_0,
                    	      								"org.xtext.example.mydsl_sql.SQL.FromTable");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt44 >= 1 ) break loop44;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(44, input);
                                throw eee;
                        }
                        cnt44++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTables"


    // $ANTLR start "entryRuleFromTable"
    // InternalSQLParser.g:2586:1: entryRuleFromTable returns [EObject current=null] : iv_ruleFromTable= ruleFromTable EOF ;
    public final EObject entryRuleFromTable() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFromTable = null;


        try {
            // InternalSQLParser.g:2586:50: (iv_ruleFromTable= ruleFromTable EOF )
            // InternalSQLParser.g:2587:2: iv_ruleFromTable= ruleFromTable EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFromTableRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFromTable=ruleFromTable();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFromTable; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFromTable"


    // $ANTLR start "ruleFromTable"
    // InternalSQLParser.g:2593:1: ruleFromTable returns [EObject current=null] : ( ( (lv_table_0_0= ruleTableOrAlias ) ) ( (lv_fjoin_1_0= ruleFromTableJoin ) )* ) ;
    public final EObject ruleFromTable() throws RecognitionException {
        EObject current = null;

        EObject lv_table_0_0 = null;

        EObject lv_fjoin_1_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:2599:2: ( ( ( (lv_table_0_0= ruleTableOrAlias ) ) ( (lv_fjoin_1_0= ruleFromTableJoin ) )* ) )
            // InternalSQLParser.g:2600:2: ( ( (lv_table_0_0= ruleTableOrAlias ) ) ( (lv_fjoin_1_0= ruleFromTableJoin ) )* )
            {
            // InternalSQLParser.g:2600:2: ( ( (lv_table_0_0= ruleTableOrAlias ) ) ( (lv_fjoin_1_0= ruleFromTableJoin ) )* )
            // InternalSQLParser.g:2601:3: ( (lv_table_0_0= ruleTableOrAlias ) ) ( (lv_fjoin_1_0= ruleFromTableJoin ) )*
            {
            // InternalSQLParser.g:2601:3: ( (lv_table_0_0= ruleTableOrAlias ) )
            // InternalSQLParser.g:2602:4: (lv_table_0_0= ruleTableOrAlias )
            {
            // InternalSQLParser.g:2602:4: (lv_table_0_0= ruleTableOrAlias )
            // InternalSQLParser.g:2603:5: lv_table_0_0= ruleTableOrAlias
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getFromTableAccess().getTableTableOrAliasParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_53);
            lv_table_0_0=ruleTableOrAlias();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getFromTableRule());
              					}
              					set(
              						current,
              						"table",
              						lv_table_0_0,
              						"org.xtext.example.mydsl_sql.SQL.TableOrAlias");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:2620:3: ( (lv_fjoin_1_0= ruleFromTableJoin ) )*
            loop46:
            do {
                int alt46=2;
                int LA46_0 = input.LA(1);

                if ( (LA46_0==STRAIGHT_JOIN||LA46_0==NATURAL||LA46_0==CROSS||LA46_0==INNER||LA46_0==RIGHT||LA46_0==FULL||LA46_0==JOIN||LA46_0==LEFT) ) {
                    alt46=1;
                }


                switch (alt46) {
            	case 1 :
            	    // InternalSQLParser.g:2621:4: (lv_fjoin_1_0= ruleFromTableJoin )
            	    {
            	    // InternalSQLParser.g:2621:4: (lv_fjoin_1_0= ruleFromTableJoin )
            	    // InternalSQLParser.g:2622:5: lv_fjoin_1_0= ruleFromTableJoin
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getFromTableAccess().getFjoinFromTableJoinParserRuleCall_1_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_53);
            	    lv_fjoin_1_0=ruleFromTableJoin();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getFromTableRule());
            	      					}
            	      					add(
            	      						current,
            	      						"fjoin",
            	      						lv_fjoin_1_0,
            	      						"org.xtext.example.mydsl_sql.SQL.FromTableJoin");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop46;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFromTable"


    // $ANTLR start "entryRuleFromTableJoin"
    // InternalSQLParser.g:2643:1: entryRuleFromTableJoin returns [EObject current=null] : iv_ruleFromTableJoin= ruleFromTableJoin EOF ;
    public final EObject entryRuleFromTableJoin() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFromTableJoin = null;


        try {
            // InternalSQLParser.g:2643:54: (iv_ruleFromTableJoin= ruleFromTableJoin EOF )
            // InternalSQLParser.g:2644:2: iv_ruleFromTableJoin= ruleFromTableJoin EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFromTableJoinRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFromTableJoin=ruleFromTableJoin();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFromTableJoin; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFromTableJoin"


    // $ANTLR start "ruleFromTableJoin"
    // InternalSQLParser.g:2650:1: ruleFromTableJoin returns [EObject current=null] : ( ( (lv_join_0_0= ruleJoinType ) ) ( (lv_onTable_1_0= ruleTableOrAlias ) ) ( (otherlv_2= ON ( (lv_joinExpr_3_0= ruleFullExpression ) ) ) | ( (lv_joinCond_4_0= ruleJoinCondition ) ) ) ) ;
    public final EObject ruleFromTableJoin() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        AntlrDatatypeRuleToken lv_join_0_0 = null;

        EObject lv_onTable_1_0 = null;

        EObject lv_joinExpr_3_0 = null;

        EObject lv_joinCond_4_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:2656:2: ( ( ( (lv_join_0_0= ruleJoinType ) ) ( (lv_onTable_1_0= ruleTableOrAlias ) ) ( (otherlv_2= ON ( (lv_joinExpr_3_0= ruleFullExpression ) ) ) | ( (lv_joinCond_4_0= ruleJoinCondition ) ) ) ) )
            // InternalSQLParser.g:2657:2: ( ( (lv_join_0_0= ruleJoinType ) ) ( (lv_onTable_1_0= ruleTableOrAlias ) ) ( (otherlv_2= ON ( (lv_joinExpr_3_0= ruleFullExpression ) ) ) | ( (lv_joinCond_4_0= ruleJoinCondition ) ) ) )
            {
            // InternalSQLParser.g:2657:2: ( ( (lv_join_0_0= ruleJoinType ) ) ( (lv_onTable_1_0= ruleTableOrAlias ) ) ( (otherlv_2= ON ( (lv_joinExpr_3_0= ruleFullExpression ) ) ) | ( (lv_joinCond_4_0= ruleJoinCondition ) ) ) )
            // InternalSQLParser.g:2658:3: ( (lv_join_0_0= ruleJoinType ) ) ( (lv_onTable_1_0= ruleTableOrAlias ) ) ( (otherlv_2= ON ( (lv_joinExpr_3_0= ruleFullExpression ) ) ) | ( (lv_joinCond_4_0= ruleJoinCondition ) ) )
            {
            // InternalSQLParser.g:2658:3: ( (lv_join_0_0= ruleJoinType ) )
            // InternalSQLParser.g:2659:4: (lv_join_0_0= ruleJoinType )
            {
            // InternalSQLParser.g:2659:4: (lv_join_0_0= ruleJoinType )
            // InternalSQLParser.g:2660:5: lv_join_0_0= ruleJoinType
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getFromTableJoinAccess().getJoinJoinTypeParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_5);
            lv_join_0_0=ruleJoinType();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getFromTableJoinRule());
              					}
              					set(
              						current,
              						"join",
              						lv_join_0_0,
              						"org.xtext.example.mydsl_sql.SQL.JoinType");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:2677:3: ( (lv_onTable_1_0= ruleTableOrAlias ) )
            // InternalSQLParser.g:2678:4: (lv_onTable_1_0= ruleTableOrAlias )
            {
            // InternalSQLParser.g:2678:4: (lv_onTable_1_0= ruleTableOrAlias )
            // InternalSQLParser.g:2679:5: lv_onTable_1_0= ruleTableOrAlias
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getFromTableJoinAccess().getOnTableTableOrAliasParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_54);
            lv_onTable_1_0=ruleTableOrAlias();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getFromTableJoinRule());
              					}
              					set(
              						current,
              						"onTable",
              						lv_onTable_1_0,
              						"org.xtext.example.mydsl_sql.SQL.TableOrAlias");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:2696:3: ( (otherlv_2= ON ( (lv_joinExpr_3_0= ruleFullExpression ) ) ) | ( (lv_joinCond_4_0= ruleJoinCondition ) ) )
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==ON) ) {
                alt47=1;
            }
            else if ( (LA47_0==USING) ) {
                alt47=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 47, 0, input);

                throw nvae;
            }
            switch (alt47) {
                case 1 :
                    // InternalSQLParser.g:2697:4: (otherlv_2= ON ( (lv_joinExpr_3_0= ruleFullExpression ) ) )
                    {
                    // InternalSQLParser.g:2697:4: (otherlv_2= ON ( (lv_joinExpr_3_0= ruleFullExpression ) ) )
                    // InternalSQLParser.g:2698:5: otherlv_2= ON ( (lv_joinExpr_3_0= ruleFullExpression ) )
                    {
                    otherlv_2=(Token)match(input,ON,FOLLOW_39); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_2, grammarAccess.getFromTableJoinAccess().getONKeyword_2_0_0());
                      				
                    }
                    // InternalSQLParser.g:2702:5: ( (lv_joinExpr_3_0= ruleFullExpression ) )
                    // InternalSQLParser.g:2703:6: (lv_joinExpr_3_0= ruleFullExpression )
                    {
                    // InternalSQLParser.g:2703:6: (lv_joinExpr_3_0= ruleFullExpression )
                    // InternalSQLParser.g:2704:7: lv_joinExpr_3_0= ruleFullExpression
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getFromTableJoinAccess().getJoinExprFullExpressionParserRuleCall_2_0_1_0());
                      						
                    }
                    pushFollow(FOLLOW_2);
                    lv_joinExpr_3_0=ruleFullExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getFromTableJoinRule());
                      							}
                      							set(
                      								current,
                      								"joinExpr",
                      								lv_joinExpr_3_0,
                      								"org.xtext.example.mydsl_sql.SQL.FullExpression");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:2723:4: ( (lv_joinCond_4_0= ruleJoinCondition ) )
                    {
                    // InternalSQLParser.g:2723:4: ( (lv_joinCond_4_0= ruleJoinCondition ) )
                    // InternalSQLParser.g:2724:5: (lv_joinCond_4_0= ruleJoinCondition )
                    {
                    // InternalSQLParser.g:2724:5: (lv_joinCond_4_0= ruleJoinCondition )
                    // InternalSQLParser.g:2725:6: lv_joinCond_4_0= ruleJoinCondition
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getFromTableJoinAccess().getJoinCondJoinConditionParserRuleCall_2_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_joinCond_4_0=ruleJoinCondition();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getFromTableJoinRule());
                      						}
                      						set(
                      							current,
                      							"joinCond",
                      							lv_joinCond_4_0,
                      							"org.xtext.example.mydsl_sql.SQL.JoinCondition");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFromTableJoin"


    // $ANTLR start "entryRuleJoinCondition"
    // InternalSQLParser.g:2747:1: entryRuleJoinCondition returns [EObject current=null] : iv_ruleJoinCondition= ruleJoinCondition EOF ;
    public final EObject entryRuleJoinCondition() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleJoinCondition = null;


        try {
            // InternalSQLParser.g:2747:54: (iv_ruleJoinCondition= ruleJoinCondition EOF )
            // InternalSQLParser.g:2748:2: iv_ruleJoinCondition= ruleJoinCondition EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getJoinConditionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleJoinCondition=ruleJoinCondition();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleJoinCondition; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleJoinCondition"


    // $ANTLR start "ruleJoinCondition"
    // InternalSQLParser.g:2754:1: ruleJoinCondition returns [EObject current=null] : (otherlv_0= USING otherlv_1= LeftParenthesis ( (lv_useCols_2_0= ruleUsingCols ) ) otherlv_3= RightParenthesis ) ;
    public final EObject ruleJoinCondition() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_useCols_2_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:2760:2: ( (otherlv_0= USING otherlv_1= LeftParenthesis ( (lv_useCols_2_0= ruleUsingCols ) ) otherlv_3= RightParenthesis ) )
            // InternalSQLParser.g:2761:2: (otherlv_0= USING otherlv_1= LeftParenthesis ( (lv_useCols_2_0= ruleUsingCols ) ) otherlv_3= RightParenthesis )
            {
            // InternalSQLParser.g:2761:2: (otherlv_0= USING otherlv_1= LeftParenthesis ( (lv_useCols_2_0= ruleUsingCols ) ) otherlv_3= RightParenthesis )
            // InternalSQLParser.g:2762:3: otherlv_0= USING otherlv_1= LeftParenthesis ( (lv_useCols_2_0= ruleUsingCols ) ) otherlv_3= RightParenthesis
            {
            otherlv_0=(Token)match(input,USING,FOLLOW_8); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getJoinConditionAccess().getUSINGKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_23); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getJoinConditionAccess().getLeftParenthesisKeyword_1());
              		
            }
            // InternalSQLParser.g:2770:3: ( (lv_useCols_2_0= ruleUsingCols ) )
            // InternalSQLParser.g:2771:4: (lv_useCols_2_0= ruleUsingCols )
            {
            // InternalSQLParser.g:2771:4: (lv_useCols_2_0= ruleUsingCols )
            // InternalSQLParser.g:2772:5: lv_useCols_2_0= ruleUsingCols
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getJoinConditionAccess().getUseColsUsingColsParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_10);
            lv_useCols_2_0=ruleUsingCols();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getJoinConditionRule());
              					}
              					set(
              						current,
              						"useCols",
              						lv_useCols_2_0,
              						"org.xtext.example.mydsl_sql.SQL.UsingCols");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getJoinConditionAccess().getRightParenthesisKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleJoinCondition"


    // $ANTLR start "entryRuleUsingCols"
    // InternalSQLParser.g:2797:1: entryRuleUsingCols returns [EObject current=null] : iv_ruleUsingCols= ruleUsingCols EOF ;
    public final EObject entryRuleUsingCols() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleUsingCols = null;


        try {
            // InternalSQLParser.g:2797:50: (iv_ruleUsingCols= ruleUsingCols EOF )
            // InternalSQLParser.g:2798:2: iv_ruleUsingCols= ruleUsingCols EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getUsingColsRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleUsingCols=ruleUsingCols();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleUsingCols; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleUsingCols"


    // $ANTLR start "ruleUsingCols"
    // InternalSQLParser.g:2804:1: ruleUsingCols returns [EObject current=null] : (this_DbObjectName_0= ruleDbObjectName ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )? ) ;
    public final EObject ruleUsingCols() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_DbObjectName_0 = null;

        EObject lv_entries_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:2810:2: ( (this_DbObjectName_0= ruleDbObjectName ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )? ) )
            // InternalSQLParser.g:2811:2: (this_DbObjectName_0= ruleDbObjectName ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )? )
            {
            // InternalSQLParser.g:2811:2: (this_DbObjectName_0= ruleDbObjectName ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )? )
            // InternalSQLParser.g:2812:3: this_DbObjectName_0= ruleDbObjectName ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )?
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getUsingColsAccess().getDbObjectNameParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_11);
            this_DbObjectName_0=ruleDbObjectName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_DbObjectName_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:2823:3: ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )?
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( (LA49_0==Comma) ) {
                alt49=1;
            }
            switch (alt49) {
                case 1 :
                    // InternalSQLParser.g:2824:4: () (otherlv_2= Comma ( (lv_entries_3_0= ruleDbObjectName ) ) )+
                    {
                    // InternalSQLParser.g:2824:4: ()
                    // InternalSQLParser.g:2825:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getUsingColsAccess().getUsingColsEntriesAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalSQLParser.g:2834:4: (otherlv_2= Comma ( (lv_entries_3_0= ruleDbObjectName ) ) )+
                    int cnt48=0;
                    loop48:
                    do {
                        int alt48=2;
                        int LA48_0 = input.LA(1);

                        if ( (LA48_0==Comma) ) {
                            alt48=1;
                        }


                        switch (alt48) {
                    	case 1 :
                    	    // InternalSQLParser.g:2835:5: otherlv_2= Comma ( (lv_entries_3_0= ruleDbObjectName ) )
                    	    {
                    	    otherlv_2=(Token)match(input,Comma,FOLLOW_23); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_2, grammarAccess.getUsingColsAccess().getCommaKeyword_1_1_0());
                    	      				
                    	    }
                    	    // InternalSQLParser.g:2839:5: ( (lv_entries_3_0= ruleDbObjectName ) )
                    	    // InternalSQLParser.g:2840:6: (lv_entries_3_0= ruleDbObjectName )
                    	    {
                    	    // InternalSQLParser.g:2840:6: (lv_entries_3_0= ruleDbObjectName )
                    	    // InternalSQLParser.g:2841:7: lv_entries_3_0= ruleDbObjectName
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getUsingColsAccess().getEntriesDbObjectNameParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_11);
                    	    lv_entries_3_0=ruleDbObjectName();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getUsingColsRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"entries",
                    	      								lv_entries_3_0,
                    	      								"org.xtext.example.mydsl_sql.SQL.DbObjectName");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt48 >= 1 ) break loop48;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(48, input);
                                throw eee;
                        }
                        cnt48++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleUsingCols"


    // $ANTLR start "entryRuleTableOrAlias"
    // InternalSQLParser.g:2864:1: entryRuleTableOrAlias returns [EObject current=null] : iv_ruleTableOrAlias= ruleTableOrAlias EOF ;
    public final EObject entryRuleTableOrAlias() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTableOrAlias = null;


        try {
            // InternalSQLParser.g:2864:53: (iv_ruleTableOrAlias= ruleTableOrAlias EOF )
            // InternalSQLParser.g:2865:2: iv_ruleTableOrAlias= ruleTableOrAlias EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTableOrAliasRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTableOrAlias=ruleTableOrAlias();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTableOrAlias; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTableOrAlias"


    // $ANTLR start "ruleTableOrAlias"
    // InternalSQLParser.g:2871:1: ruleTableOrAlias returns [EObject current=null] : ( ( ( (lv_tfull_0_0= ruleTableFull ) ) | ( (lv_sq_1_0= ruleSubQueryOperand ) ) | ( (lv_values_2_0= ruleFromValues ) ) ) ( ( (lv_pivot_3_0= rulePivotTable ) ) | ( (lv_unpivot_4_0= ruleUnpivotTable ) ) )? ( (lv_alias_5_0= AS ) )? ( (lv_tblAlias_6_0= ruleDbObjectName ) )? ) ;
    public final EObject ruleTableOrAlias() throws RecognitionException {
        EObject current = null;

        Token lv_alias_5_0=null;
        EObject lv_tfull_0_0 = null;

        EObject lv_sq_1_0 = null;

        EObject lv_values_2_0 = null;

        EObject lv_pivot_3_0 = null;

        EObject lv_unpivot_4_0 = null;

        EObject lv_tblAlias_6_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:2877:2: ( ( ( ( (lv_tfull_0_0= ruleTableFull ) ) | ( (lv_sq_1_0= ruleSubQueryOperand ) ) | ( (lv_values_2_0= ruleFromValues ) ) ) ( ( (lv_pivot_3_0= rulePivotTable ) ) | ( (lv_unpivot_4_0= ruleUnpivotTable ) ) )? ( (lv_alias_5_0= AS ) )? ( (lv_tblAlias_6_0= ruleDbObjectName ) )? ) )
            // InternalSQLParser.g:2878:2: ( ( ( (lv_tfull_0_0= ruleTableFull ) ) | ( (lv_sq_1_0= ruleSubQueryOperand ) ) | ( (lv_values_2_0= ruleFromValues ) ) ) ( ( (lv_pivot_3_0= rulePivotTable ) ) | ( (lv_unpivot_4_0= ruleUnpivotTable ) ) )? ( (lv_alias_5_0= AS ) )? ( (lv_tblAlias_6_0= ruleDbObjectName ) )? )
            {
            // InternalSQLParser.g:2878:2: ( ( ( (lv_tfull_0_0= ruleTableFull ) ) | ( (lv_sq_1_0= ruleSubQueryOperand ) ) | ( (lv_values_2_0= ruleFromValues ) ) ) ( ( (lv_pivot_3_0= rulePivotTable ) ) | ( (lv_unpivot_4_0= ruleUnpivotTable ) ) )? ( (lv_alias_5_0= AS ) )? ( (lv_tblAlias_6_0= ruleDbObjectName ) )? )
            // InternalSQLParser.g:2879:3: ( ( (lv_tfull_0_0= ruleTableFull ) ) | ( (lv_sq_1_0= ruleSubQueryOperand ) ) | ( (lv_values_2_0= ruleFromValues ) ) ) ( ( (lv_pivot_3_0= rulePivotTable ) ) | ( (lv_unpivot_4_0= ruleUnpivotTable ) ) )? ( (lv_alias_5_0= AS ) )? ( (lv_tblAlias_6_0= ruleDbObjectName ) )?
            {
            // InternalSQLParser.g:2879:3: ( ( (lv_tfull_0_0= ruleTableFull ) ) | ( (lv_sq_1_0= ruleSubQueryOperand ) ) | ( (lv_values_2_0= ruleFromValues ) ) )
            int alt50=3;
            int LA50_0 = input.LA(1);

            if ( ((LA50_0>=RULE_STRING && LA50_0<=RULE_ID)) ) {
                alt50=1;
            }
            else if ( (LA50_0==LeftParenthesis) ) {
                int LA50_2 = input.LA(2);

                if ( (LA50_2==SELECT) ) {
                    alt50=2;
                }
                else if ( (LA50_2==VALUES) ) {
                    alt50=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 50, 2, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 50, 0, input);

                throw nvae;
            }
            switch (alt50) {
                case 1 :
                    // InternalSQLParser.g:2880:4: ( (lv_tfull_0_0= ruleTableFull ) )
                    {
                    // InternalSQLParser.g:2880:4: ( (lv_tfull_0_0= ruleTableFull ) )
                    // InternalSQLParser.g:2881:5: (lv_tfull_0_0= ruleTableFull )
                    {
                    // InternalSQLParser.g:2881:5: (lv_tfull_0_0= ruleTableFull )
                    // InternalSQLParser.g:2882:6: lv_tfull_0_0= ruleTableFull
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTableOrAliasAccess().getTfullTableFullParserRuleCall_0_0_0());
                      					
                    }
                    pushFollow(FOLLOW_55);
                    lv_tfull_0_0=ruleTableFull();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTableOrAliasRule());
                      						}
                      						set(
                      							current,
                      							"tfull",
                      							lv_tfull_0_0,
                      							"org.xtext.example.mydsl_sql.SQL.TableFull");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:2900:4: ( (lv_sq_1_0= ruleSubQueryOperand ) )
                    {
                    // InternalSQLParser.g:2900:4: ( (lv_sq_1_0= ruleSubQueryOperand ) )
                    // InternalSQLParser.g:2901:5: (lv_sq_1_0= ruleSubQueryOperand )
                    {
                    // InternalSQLParser.g:2901:5: (lv_sq_1_0= ruleSubQueryOperand )
                    // InternalSQLParser.g:2902:6: lv_sq_1_0= ruleSubQueryOperand
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTableOrAliasAccess().getSqSubQueryOperandParserRuleCall_0_1_0());
                      					
                    }
                    pushFollow(FOLLOW_55);
                    lv_sq_1_0=ruleSubQueryOperand();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTableOrAliasRule());
                      						}
                      						set(
                      							current,
                      							"sq",
                      							lv_sq_1_0,
                      							"org.xtext.example.mydsl_sql.SQL.SubQueryOperand");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:2920:4: ( (lv_values_2_0= ruleFromValues ) )
                    {
                    // InternalSQLParser.g:2920:4: ( (lv_values_2_0= ruleFromValues ) )
                    // InternalSQLParser.g:2921:5: (lv_values_2_0= ruleFromValues )
                    {
                    // InternalSQLParser.g:2921:5: (lv_values_2_0= ruleFromValues )
                    // InternalSQLParser.g:2922:6: lv_values_2_0= ruleFromValues
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTableOrAliasAccess().getValuesFromValuesParserRuleCall_0_2_0());
                      					
                    }
                    pushFollow(FOLLOW_55);
                    lv_values_2_0=ruleFromValues();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTableOrAliasRule());
                      						}
                      						set(
                      							current,
                      							"values",
                      							lv_values_2_0,
                      							"org.xtext.example.mydsl_sql.SQL.FromValues");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            // InternalSQLParser.g:2940:3: ( ( (lv_pivot_3_0= rulePivotTable ) ) | ( (lv_unpivot_4_0= ruleUnpivotTable ) ) )?
            int alt51=3;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==PIVOT) ) {
                alt51=1;
            }
            else if ( (LA51_0==UNPIVOT) ) {
                alt51=2;
            }
            switch (alt51) {
                case 1 :
                    // InternalSQLParser.g:2941:4: ( (lv_pivot_3_0= rulePivotTable ) )
                    {
                    // InternalSQLParser.g:2941:4: ( (lv_pivot_3_0= rulePivotTable ) )
                    // InternalSQLParser.g:2942:5: (lv_pivot_3_0= rulePivotTable )
                    {
                    // InternalSQLParser.g:2942:5: (lv_pivot_3_0= rulePivotTable )
                    // InternalSQLParser.g:2943:6: lv_pivot_3_0= rulePivotTable
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTableOrAliasAccess().getPivotPivotTableParserRuleCall_1_0_0());
                      					
                    }
                    pushFollow(FOLLOW_50);
                    lv_pivot_3_0=rulePivotTable();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTableOrAliasRule());
                      						}
                      						set(
                      							current,
                      							"pivot",
                      							lv_pivot_3_0,
                      							"org.xtext.example.mydsl_sql.SQL.PivotTable");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:2961:4: ( (lv_unpivot_4_0= ruleUnpivotTable ) )
                    {
                    // InternalSQLParser.g:2961:4: ( (lv_unpivot_4_0= ruleUnpivotTable ) )
                    // InternalSQLParser.g:2962:5: (lv_unpivot_4_0= ruleUnpivotTable )
                    {
                    // InternalSQLParser.g:2962:5: (lv_unpivot_4_0= ruleUnpivotTable )
                    // InternalSQLParser.g:2963:6: lv_unpivot_4_0= ruleUnpivotTable
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTableOrAliasAccess().getUnpivotUnpivotTableParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_50);
                    lv_unpivot_4_0=ruleUnpivotTable();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTableOrAliasRule());
                      						}
                      						set(
                      							current,
                      							"unpivot",
                      							lv_unpivot_4_0,
                      							"org.xtext.example.mydsl_sql.SQL.UnpivotTable");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            // InternalSQLParser.g:2981:3: ( (lv_alias_5_0= AS ) )?
            int alt52=2;
            int LA52_0 = input.LA(1);

            if ( (LA52_0==AS) ) {
                alt52=1;
            }
            switch (alt52) {
                case 1 :
                    // InternalSQLParser.g:2982:4: (lv_alias_5_0= AS )
                    {
                    // InternalSQLParser.g:2982:4: (lv_alias_5_0= AS )
                    // InternalSQLParser.g:2983:5: lv_alias_5_0= AS
                    {
                    lv_alias_5_0=(Token)match(input,AS,FOLLOW_51); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_alias_5_0, grammarAccess.getTableOrAliasAccess().getAliasASKeyword_2_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getTableOrAliasRule());
                      					}
                      					setWithLastConsumed(current, "alias", lv_alias_5_0, "AS");
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalSQLParser.g:2995:3: ( (lv_tblAlias_6_0= ruleDbObjectName ) )?
            int alt53=2;
            alt53 = dfa53.predict(input);
            switch (alt53) {
                case 1 :
                    // InternalSQLParser.g:2996:4: (lv_tblAlias_6_0= ruleDbObjectName )
                    {
                    // InternalSQLParser.g:2996:4: (lv_tblAlias_6_0= ruleDbObjectName )
                    // InternalSQLParser.g:2997:5: lv_tblAlias_6_0= ruleDbObjectName
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getTableOrAliasAccess().getTblAliasDbObjectNameParserRuleCall_3_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_tblAlias_6_0=ruleDbObjectName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getTableOrAliasRule());
                      					}
                      					set(
                      						current,
                      						"tblAlias",
                      						lv_tblAlias_6_0,
                      						"org.xtext.example.mydsl_sql.SQL.DbObjectName");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTableOrAlias"


    // $ANTLR start "entryRuleFromValues"
    // InternalSQLParser.g:3018:1: entryRuleFromValues returns [EObject current=null] : iv_ruleFromValues= ruleFromValues EOF ;
    public final EObject entryRuleFromValues() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFromValues = null;


        try {
            // InternalSQLParser.g:3018:51: (iv_ruleFromValues= ruleFromValues EOF )
            // InternalSQLParser.g:3019:2: iv_ruleFromValues= ruleFromValues EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFromValuesRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFromValues=ruleFromValues();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFromValues; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFromValues"


    // $ANTLR start "ruleFromValues"
    // InternalSQLParser.g:3025:1: ruleFromValues returns [EObject current=null] : ( ( (lv_values_0_0= ruleValues ) ) ( (lv_c_1_0= ruleFromValuesColumns ) )? ) ;
    public final EObject ruleFromValues() throws RecognitionException {
        EObject current = null;

        EObject lv_values_0_0 = null;

        EObject lv_c_1_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:3031:2: ( ( ( (lv_values_0_0= ruleValues ) ) ( (lv_c_1_0= ruleFromValuesColumns ) )? ) )
            // InternalSQLParser.g:3032:2: ( ( (lv_values_0_0= ruleValues ) ) ( (lv_c_1_0= ruleFromValuesColumns ) )? )
            {
            // InternalSQLParser.g:3032:2: ( ( (lv_values_0_0= ruleValues ) ) ( (lv_c_1_0= ruleFromValuesColumns ) )? )
            // InternalSQLParser.g:3033:3: ( (lv_values_0_0= ruleValues ) ) ( (lv_c_1_0= ruleFromValuesColumns ) )?
            {
            // InternalSQLParser.g:3033:3: ( (lv_values_0_0= ruleValues ) )
            // InternalSQLParser.g:3034:4: (lv_values_0_0= ruleValues )
            {
            // InternalSQLParser.g:3034:4: (lv_values_0_0= ruleValues )
            // InternalSQLParser.g:3035:5: lv_values_0_0= ruleValues
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getFromValuesAccess().getValuesValuesParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_56);
            lv_values_0_0=ruleValues();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getFromValuesRule());
              					}
              					set(
              						current,
              						"values",
              						lv_values_0_0,
              						"org.xtext.example.mydsl_sql.SQL.Values");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:3052:3: ( (lv_c_1_0= ruleFromValuesColumns ) )?
            int alt54=2;
            alt54 = dfa54.predict(input);
            switch (alt54) {
                case 1 :
                    // InternalSQLParser.g:3053:4: (lv_c_1_0= ruleFromValuesColumns )
                    {
                    // InternalSQLParser.g:3053:4: (lv_c_1_0= ruleFromValuesColumns )
                    // InternalSQLParser.g:3054:5: lv_c_1_0= ruleFromValuesColumns
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getFromValuesAccess().getCFromValuesColumnsParserRuleCall_1_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_c_1_0=ruleFromValuesColumns();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getFromValuesRule());
                      					}
                      					set(
                      						current,
                      						"c",
                      						lv_c_1_0,
                      						"org.xtext.example.mydsl_sql.SQL.FromValuesColumns");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFromValues"


    // $ANTLR start "entryRuleFromValuesColumns"
    // InternalSQLParser.g:3075:1: entryRuleFromValuesColumns returns [EObject current=null] : iv_ruleFromValuesColumns= ruleFromValuesColumns EOF ;
    public final EObject entryRuleFromValuesColumns() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFromValuesColumns = null;


        try {
            // InternalSQLParser.g:3075:58: (iv_ruleFromValuesColumns= ruleFromValuesColumns EOF )
            // InternalSQLParser.g:3076:2: iv_ruleFromValuesColumns= ruleFromValuesColumns EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFromValuesColumnsRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFromValuesColumns=ruleFromValuesColumns();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFromValuesColumns; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFromValuesColumns"


    // $ANTLR start "ruleFromValuesColumns"
    // InternalSQLParser.g:3082:1: ruleFromValuesColumns returns [EObject current=null] : (this_ID_0= RULE_ID otherlv_1= LeftParenthesis ( (lv_fvCols_2_0= ruleFromValuesColumnNames ) ) otherlv_3= RightParenthesis ) ;
    public final EObject ruleFromValuesColumns() throws RecognitionException {
        EObject current = null;

        Token this_ID_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_fvCols_2_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:3088:2: ( (this_ID_0= RULE_ID otherlv_1= LeftParenthesis ( (lv_fvCols_2_0= ruleFromValuesColumnNames ) ) otherlv_3= RightParenthesis ) )
            // InternalSQLParser.g:3089:2: (this_ID_0= RULE_ID otherlv_1= LeftParenthesis ( (lv_fvCols_2_0= ruleFromValuesColumnNames ) ) otherlv_3= RightParenthesis )
            {
            // InternalSQLParser.g:3089:2: (this_ID_0= RULE_ID otherlv_1= LeftParenthesis ( (lv_fvCols_2_0= ruleFromValuesColumnNames ) ) otherlv_3= RightParenthesis )
            // InternalSQLParser.g:3090:3: this_ID_0= RULE_ID otherlv_1= LeftParenthesis ( (lv_fvCols_2_0= ruleFromValuesColumnNames ) ) otherlv_3= RightParenthesis
            {
            this_ID_0=(Token)match(input,RULE_ID,FOLLOW_8); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(this_ID_0, grammarAccess.getFromValuesColumnsAccess().getIDTerminalRuleCall_0());
              		
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_57); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getFromValuesColumnsAccess().getLeftParenthesisKeyword_1());
              		
            }
            // InternalSQLParser.g:3098:3: ( (lv_fvCols_2_0= ruleFromValuesColumnNames ) )
            // InternalSQLParser.g:3099:4: (lv_fvCols_2_0= ruleFromValuesColumnNames )
            {
            // InternalSQLParser.g:3099:4: (lv_fvCols_2_0= ruleFromValuesColumnNames )
            // InternalSQLParser.g:3100:5: lv_fvCols_2_0= ruleFromValuesColumnNames
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getFromValuesColumnsAccess().getFvColsFromValuesColumnNamesParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_10);
            lv_fvCols_2_0=ruleFromValuesColumnNames();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getFromValuesColumnsRule());
              					}
              					set(
              						current,
              						"fvCols",
              						lv_fvCols_2_0,
              						"org.xtext.example.mydsl_sql.SQL.FromValuesColumnNames");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getFromValuesColumnsAccess().getRightParenthesisKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFromValuesColumns"


    // $ANTLR start "entryRuleFromValuesColumnNames"
    // InternalSQLParser.g:3125:1: entryRuleFromValuesColumnNames returns [EObject current=null] : iv_ruleFromValuesColumnNames= ruleFromValuesColumnNames EOF ;
    public final EObject entryRuleFromValuesColumnNames() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFromValuesColumnNames = null;


        try {
            // InternalSQLParser.g:3125:62: (iv_ruleFromValuesColumnNames= ruleFromValuesColumnNames EOF )
            // InternalSQLParser.g:3126:2: iv_ruleFromValuesColumnNames= ruleFromValuesColumnNames EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFromValuesColumnNamesRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFromValuesColumnNames=ruleFromValuesColumnNames();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFromValuesColumnNames; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFromValuesColumnNames"


    // $ANTLR start "ruleFromValuesColumnNames"
    // InternalSQLParser.g:3132:1: ruleFromValuesColumnNames returns [EObject current=null] : (this_ColumnName_0= ruleColumnName ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleColumnName ) ) )+ )? ) ;
    public final EObject ruleFromValuesColumnNames() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_ColumnName_0 = null;

        EObject lv_entries_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:3138:2: ( (this_ColumnName_0= ruleColumnName ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleColumnName ) ) )+ )? ) )
            // InternalSQLParser.g:3139:2: (this_ColumnName_0= ruleColumnName ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleColumnName ) ) )+ )? )
            {
            // InternalSQLParser.g:3139:2: (this_ColumnName_0= ruleColumnName ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleColumnName ) ) )+ )? )
            // InternalSQLParser.g:3140:3: this_ColumnName_0= ruleColumnName ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleColumnName ) ) )+ )?
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getFromValuesColumnNamesAccess().getColumnNameParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_11);
            this_ColumnName_0=ruleColumnName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ColumnName_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:3151:3: ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleColumnName ) ) )+ )?
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==Comma) ) {
                alt56=1;
            }
            switch (alt56) {
                case 1 :
                    // InternalSQLParser.g:3152:4: () (otherlv_2= Comma ( (lv_entries_3_0= ruleColumnName ) ) )+
                    {
                    // InternalSQLParser.g:3152:4: ()
                    // InternalSQLParser.g:3153:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getFromValuesColumnNamesAccess().getAbcEntriesAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalSQLParser.g:3162:4: (otherlv_2= Comma ( (lv_entries_3_0= ruleColumnName ) ) )+
                    int cnt55=0;
                    loop55:
                    do {
                        int alt55=2;
                        int LA55_0 = input.LA(1);

                        if ( (LA55_0==Comma) ) {
                            alt55=1;
                        }


                        switch (alt55) {
                    	case 1 :
                    	    // InternalSQLParser.g:3163:5: otherlv_2= Comma ( (lv_entries_3_0= ruleColumnName ) )
                    	    {
                    	    otherlv_2=(Token)match(input,Comma,FOLLOW_57); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_2, grammarAccess.getFromValuesColumnNamesAccess().getCommaKeyword_1_1_0());
                    	      				
                    	    }
                    	    // InternalSQLParser.g:3167:5: ( (lv_entries_3_0= ruleColumnName ) )
                    	    // InternalSQLParser.g:3168:6: (lv_entries_3_0= ruleColumnName )
                    	    {
                    	    // InternalSQLParser.g:3168:6: (lv_entries_3_0= ruleColumnName )
                    	    // InternalSQLParser.g:3169:7: lv_entries_3_0= ruleColumnName
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getFromValuesColumnNamesAccess().getEntriesColumnNameParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_11);
                    	    lv_entries_3_0=ruleColumnName();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getFromValuesColumnNamesRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"entries",
                    	      								lv_entries_3_0,
                    	      								"org.xtext.example.mydsl_sql.SQL.ColumnName");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt55 >= 1 ) break loop55;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(55, input);
                                throw eee;
                        }
                        cnt55++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFromValuesColumnNames"


    // $ANTLR start "entryRuleColumnName"
    // InternalSQLParser.g:3192:1: entryRuleColumnName returns [EObject current=null] : iv_ruleColumnName= ruleColumnName EOF ;
    public final EObject entryRuleColumnName() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleColumnName = null;


        try {
            // InternalSQLParser.g:3192:51: (iv_ruleColumnName= ruleColumnName EOF )
            // InternalSQLParser.g:3193:2: iv_ruleColumnName= ruleColumnName EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getColumnNameRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleColumnName=ruleColumnName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleColumnName; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleColumnName"


    // $ANTLR start "ruleColumnName"
    // InternalSQLParser.g:3199:1: ruleColumnName returns [EObject current=null] : ( (lv_colName_0_0= RULE_STRING ) ) ;
    public final EObject ruleColumnName() throws RecognitionException {
        EObject current = null;

        Token lv_colName_0_0=null;


        	enterRule();

        try {
            // InternalSQLParser.g:3205:2: ( ( (lv_colName_0_0= RULE_STRING ) ) )
            // InternalSQLParser.g:3206:2: ( (lv_colName_0_0= RULE_STRING ) )
            {
            // InternalSQLParser.g:3206:2: ( (lv_colName_0_0= RULE_STRING ) )
            // InternalSQLParser.g:3207:3: (lv_colName_0_0= RULE_STRING )
            {
            // InternalSQLParser.g:3207:3: (lv_colName_0_0= RULE_STRING )
            // InternalSQLParser.g:3208:4: lv_colName_0_0= RULE_STRING
            {
            lv_colName_0_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(lv_colName_0_0, grammarAccess.getColumnNameAccess().getColNameSTRINGTerminalRuleCall_0());
              			
            }
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getColumnNameRule());
              				}
              				setWithLastConsumed(
              					current,
              					"colName",
              					lv_colName_0_0,
              					"org.xtext.example.mydsl_sql.SQL.STRING");
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleColumnName"


    // $ANTLR start "entryRuleValues"
    // InternalSQLParser.g:3227:1: entryRuleValues returns [EObject current=null] : iv_ruleValues= ruleValues EOF ;
    public final EObject entryRuleValues() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleValues = null;


        try {
            // InternalSQLParser.g:3227:47: (iv_ruleValues= ruleValues EOF )
            // InternalSQLParser.g:3228:2: iv_ruleValues= ruleValues EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getValuesRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleValues=ruleValues();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleValues; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleValues"


    // $ANTLR start "ruleValues"
    // InternalSQLParser.g:3234:1: ruleValues returns [EObject current=null] : (otherlv_0= LeftParenthesis otherlv_1= VALUES ( (lv_rows_2_0= ruleRows ) ) otherlv_3= RightParenthesis ) ;
    public final EObject ruleValues() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_rows_2_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:3240:2: ( (otherlv_0= LeftParenthesis otherlv_1= VALUES ( (lv_rows_2_0= ruleRows ) ) otherlv_3= RightParenthesis ) )
            // InternalSQLParser.g:3241:2: (otherlv_0= LeftParenthesis otherlv_1= VALUES ( (lv_rows_2_0= ruleRows ) ) otherlv_3= RightParenthesis )
            {
            // InternalSQLParser.g:3241:2: (otherlv_0= LeftParenthesis otherlv_1= VALUES ( (lv_rows_2_0= ruleRows ) ) otherlv_3= RightParenthesis )
            // InternalSQLParser.g:3242:3: otherlv_0= LeftParenthesis otherlv_1= VALUES ( (lv_rows_2_0= ruleRows ) ) otherlv_3= RightParenthesis
            {
            otherlv_0=(Token)match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getValuesAccess().getLeftParenthesisKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,VALUES,FOLLOW_8); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getValuesAccess().getVALUESKeyword_1());
              		
            }
            // InternalSQLParser.g:3250:3: ( (lv_rows_2_0= ruleRows ) )
            // InternalSQLParser.g:3251:4: (lv_rows_2_0= ruleRows )
            {
            // InternalSQLParser.g:3251:4: (lv_rows_2_0= ruleRows )
            // InternalSQLParser.g:3252:5: lv_rows_2_0= ruleRows
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getValuesAccess().getRowsRowsParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_10);
            lv_rows_2_0=ruleRows();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getValuesRule());
              					}
              					set(
              						current,
              						"rows",
              						lv_rows_2_0,
              						"org.xtext.example.mydsl_sql.SQL.Rows");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getValuesAccess().getRightParenthesisKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleValues"


    // $ANTLR start "entryRuleRows"
    // InternalSQLParser.g:3277:1: entryRuleRows returns [EObject current=null] : iv_ruleRows= ruleRows EOF ;
    public final EObject entryRuleRows() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleRows = null;


        try {
            // InternalSQLParser.g:3277:45: (iv_ruleRows= ruleRows EOF )
            // InternalSQLParser.g:3278:2: iv_ruleRows= ruleRows EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRowsRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRows=ruleRows();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRows; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleRows"


    // $ANTLR start "ruleRows"
    // InternalSQLParser.g:3284:1: ruleRows returns [EObject current=null] : (this_Row_0= ruleRow ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleRow ) ) )+ )? ) ;
    public final EObject ruleRows() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_Row_0 = null;

        EObject lv_entries_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:3290:2: ( (this_Row_0= ruleRow ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleRow ) ) )+ )? ) )
            // InternalSQLParser.g:3291:2: (this_Row_0= ruleRow ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleRow ) ) )+ )? )
            {
            // InternalSQLParser.g:3291:2: (this_Row_0= ruleRow ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleRow ) ) )+ )? )
            // InternalSQLParser.g:3292:3: this_Row_0= ruleRow ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleRow ) ) )+ )?
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getRowsAccess().getRowParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_11);
            this_Row_0=ruleRow();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_Row_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:3303:3: ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleRow ) ) )+ )?
            int alt58=2;
            int LA58_0 = input.LA(1);

            if ( (LA58_0==Comma) ) {
                alt58=1;
            }
            switch (alt58) {
                case 1 :
                    // InternalSQLParser.g:3304:4: () (otherlv_2= Comma ( (lv_entries_3_0= ruleRow ) ) )+
                    {
                    // InternalSQLParser.g:3304:4: ()
                    // InternalSQLParser.g:3305:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getRowsAccess().getRowsEntriesAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalSQLParser.g:3314:4: (otherlv_2= Comma ( (lv_entries_3_0= ruleRow ) ) )+
                    int cnt57=0;
                    loop57:
                    do {
                        int alt57=2;
                        int LA57_0 = input.LA(1);

                        if ( (LA57_0==Comma) ) {
                            alt57=1;
                        }


                        switch (alt57) {
                    	case 1 :
                    	    // InternalSQLParser.g:3315:5: otherlv_2= Comma ( (lv_entries_3_0= ruleRow ) )
                    	    {
                    	    otherlv_2=(Token)match(input,Comma,FOLLOW_8); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_2, grammarAccess.getRowsAccess().getCommaKeyword_1_1_0());
                    	      				
                    	    }
                    	    // InternalSQLParser.g:3319:5: ( (lv_entries_3_0= ruleRow ) )
                    	    // InternalSQLParser.g:3320:6: (lv_entries_3_0= ruleRow )
                    	    {
                    	    // InternalSQLParser.g:3320:6: (lv_entries_3_0= ruleRow )
                    	    // InternalSQLParser.g:3321:7: lv_entries_3_0= ruleRow
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getRowsAccess().getEntriesRowParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_11);
                    	    lv_entries_3_0=ruleRow();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getRowsRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"entries",
                    	      								lv_entries_3_0,
                    	      								"org.xtext.example.mydsl_sql.SQL.Row");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt57 >= 1 ) break loop57;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(57, input);
                                throw eee;
                        }
                        cnt57++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleRows"


    // $ANTLR start "entryRuleRow"
    // InternalSQLParser.g:3344:1: entryRuleRow returns [EObject current=null] : iv_ruleRow= ruleRow EOF ;
    public final EObject entryRuleRow() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleRow = null;


        try {
            // InternalSQLParser.g:3344:44: (iv_ruleRow= ruleRow EOF )
            // InternalSQLParser.g:3345:2: iv_ruleRow= ruleRow EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRowRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRow=ruleRow();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRow; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleRow"


    // $ANTLR start "ruleRow"
    // InternalSQLParser.g:3351:1: ruleRow returns [EObject current=null] : (otherlv_0= LeftParenthesis ( (lv_rowValues_1_0= ruleRowValues ) ) otherlv_2= RightParenthesis ) ;
    public final EObject ruleRow() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_rowValues_1_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:3357:2: ( (otherlv_0= LeftParenthesis ( (lv_rowValues_1_0= ruleRowValues ) ) otherlv_2= RightParenthesis ) )
            // InternalSQLParser.g:3358:2: (otherlv_0= LeftParenthesis ( (lv_rowValues_1_0= ruleRowValues ) ) otherlv_2= RightParenthesis )
            {
            // InternalSQLParser.g:3358:2: (otherlv_0= LeftParenthesis ( (lv_rowValues_1_0= ruleRowValues ) ) otherlv_2= RightParenthesis )
            // InternalSQLParser.g:3359:3: otherlv_0= LeftParenthesis ( (lv_rowValues_1_0= ruleRowValues ) ) otherlv_2= RightParenthesis
            {
            otherlv_0=(Token)match(input,LeftParenthesis,FOLLOW_59); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getRowAccess().getLeftParenthesisKeyword_0());
              		
            }
            // InternalSQLParser.g:3363:3: ( (lv_rowValues_1_0= ruleRowValues ) )
            // InternalSQLParser.g:3364:4: (lv_rowValues_1_0= ruleRowValues )
            {
            // InternalSQLParser.g:3364:4: (lv_rowValues_1_0= ruleRowValues )
            // InternalSQLParser.g:3365:5: lv_rowValues_1_0= ruleRowValues
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getRowAccess().getRowValuesRowValuesParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_10);
            lv_rowValues_1_0=ruleRowValues();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getRowRule());
              					}
              					set(
              						current,
              						"rowValues",
              						lv_rowValues_1_0,
              						"org.xtext.example.mydsl_sql.SQL.RowValues");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getRowAccess().getRightParenthesisKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleRow"


    // $ANTLR start "entryRuleRowValues"
    // InternalSQLParser.g:3390:1: entryRuleRowValues returns [EObject current=null] : iv_ruleRowValues= ruleRowValues EOF ;
    public final EObject entryRuleRowValues() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleRowValues = null;


        try {
            // InternalSQLParser.g:3390:50: (iv_ruleRowValues= ruleRowValues EOF )
            // InternalSQLParser.g:3391:2: iv_ruleRowValues= ruleRowValues EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRowValuesRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRowValues=ruleRowValues();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRowValues; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleRowValues"


    // $ANTLR start "ruleRowValues"
    // InternalSQLParser.g:3397:1: ruleRowValues returns [EObject current=null] : (this_RowValue_0= ruleRowValue ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleRowValue ) ) )+ )? ) ;
    public final EObject ruleRowValues() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_RowValue_0 = null;

        EObject lv_entries_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:3403:2: ( (this_RowValue_0= ruleRowValue ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleRowValue ) ) )+ )? ) )
            // InternalSQLParser.g:3404:2: (this_RowValue_0= ruleRowValue ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleRowValue ) ) )+ )? )
            {
            // InternalSQLParser.g:3404:2: (this_RowValue_0= ruleRowValue ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleRowValue ) ) )+ )? )
            // InternalSQLParser.g:3405:3: this_RowValue_0= ruleRowValue ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleRowValue ) ) )+ )?
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getRowValuesAccess().getRowValueParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_11);
            this_RowValue_0=ruleRowValue();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_RowValue_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:3416:3: ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleRowValue ) ) )+ )?
            int alt60=2;
            int LA60_0 = input.LA(1);

            if ( (LA60_0==Comma) ) {
                alt60=1;
            }
            switch (alt60) {
                case 1 :
                    // InternalSQLParser.g:3417:4: () (otherlv_2= Comma ( (lv_entries_3_0= ruleRowValue ) ) )+
                    {
                    // InternalSQLParser.g:3417:4: ()
                    // InternalSQLParser.g:3418:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getRowValuesAccess().getRowValuesEntriesAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalSQLParser.g:3427:4: (otherlv_2= Comma ( (lv_entries_3_0= ruleRowValue ) ) )+
                    int cnt59=0;
                    loop59:
                    do {
                        int alt59=2;
                        int LA59_0 = input.LA(1);

                        if ( (LA59_0==Comma) ) {
                            alt59=1;
                        }


                        switch (alt59) {
                    	case 1 :
                    	    // InternalSQLParser.g:3428:5: otherlv_2= Comma ( (lv_entries_3_0= ruleRowValue ) )
                    	    {
                    	    otherlv_2=(Token)match(input,Comma,FOLLOW_59); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_2, grammarAccess.getRowValuesAccess().getCommaKeyword_1_1_0());
                    	      				
                    	    }
                    	    // InternalSQLParser.g:3432:5: ( (lv_entries_3_0= ruleRowValue ) )
                    	    // InternalSQLParser.g:3433:6: (lv_entries_3_0= ruleRowValue )
                    	    {
                    	    // InternalSQLParser.g:3433:6: (lv_entries_3_0= ruleRowValue )
                    	    // InternalSQLParser.g:3434:7: lv_entries_3_0= ruleRowValue
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getRowValuesAccess().getEntriesRowValueParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_11);
                    	    lv_entries_3_0=ruleRowValue();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getRowValuesRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"entries",
                    	      								lv_entries_3_0,
                    	      								"org.xtext.example.mydsl_sql.SQL.RowValue");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt59 >= 1 ) break loop59;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(59, input);
                                throw eee;
                        }
                        cnt59++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleRowValues"


    // $ANTLR start "entryRuleRowValue"
    // InternalSQLParser.g:3457:1: entryRuleRowValue returns [EObject current=null] : iv_ruleRowValue= ruleRowValue EOF ;
    public final EObject entryRuleRowValue() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleRowValue = null;


        try {
            // InternalSQLParser.g:3457:49: (iv_ruleRowValue= ruleRowValue EOF )
            // InternalSQLParser.g:3458:2: iv_ruleRowValue= ruleRowValue EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRowValueRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRowValue=ruleRowValue();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRowValue; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleRowValue"


    // $ANTLR start "ruleRowValue"
    // InternalSQLParser.g:3464:1: ruleRowValue returns [EObject current=null] : (this_ScalarNumberOperand_0= ruleScalarNumberOperand | ( (lv_null_1_0= NULL ) ) ) ;
    public final EObject ruleRowValue() throws RecognitionException {
        EObject current = null;

        Token lv_null_1_0=null;
        EObject this_ScalarNumberOperand_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:3470:2: ( (this_ScalarNumberOperand_0= ruleScalarNumberOperand | ( (lv_null_1_0= NULL ) ) ) )
            // InternalSQLParser.g:3471:2: (this_ScalarNumberOperand_0= ruleScalarNumberOperand | ( (lv_null_1_0= NULL ) ) )
            {
            // InternalSQLParser.g:3471:2: (this_ScalarNumberOperand_0= ruleScalarNumberOperand | ( (lv_null_1_0= NULL ) ) )
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( ((LA61_0>=RULE_UNSIGNED && LA61_0<=RULE_SIGNED_DOUBLE)||LA61_0==RULE_STRING_) ) {
                alt61=1;
            }
            else if ( (LA61_0==NULL) ) {
                alt61=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 61, 0, input);

                throw nvae;
            }
            switch (alt61) {
                case 1 :
                    // InternalSQLParser.g:3472:3: this_ScalarNumberOperand_0= ruleScalarNumberOperand
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getRowValueAccess().getScalarNumberOperandParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ScalarNumberOperand_0=ruleScalarNumberOperand();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ScalarNumberOperand_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:3484:3: ( (lv_null_1_0= NULL ) )
                    {
                    // InternalSQLParser.g:3484:3: ( (lv_null_1_0= NULL ) )
                    // InternalSQLParser.g:3485:4: (lv_null_1_0= NULL )
                    {
                    // InternalSQLParser.g:3485:4: (lv_null_1_0= NULL )
                    // InternalSQLParser.g:3486:5: lv_null_1_0= NULL
                    {
                    lv_null_1_0=(Token)match(input,NULL,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_null_1_0, grammarAccess.getRowValueAccess().getNullNULLKeyword_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getRowValueRule());
                      					}
                      					setWithLastConsumed(current, "null", lv_null_1_0, "NULL");
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleRowValue"


    // $ANTLR start "entryRulePivotTable"
    // InternalSQLParser.g:3502:1: entryRulePivotTable returns [EObject current=null] : iv_rulePivotTable= rulePivotTable EOF ;
    public final EObject entryRulePivotTable() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePivotTable = null;


        try {
            // InternalSQLParser.g:3502:51: (iv_rulePivotTable= rulePivotTable EOF )
            // InternalSQLParser.g:3503:2: iv_rulePivotTable= rulePivotTable EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPivotTableRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePivotTable=rulePivotTable();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePivotTable; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePivotTable"


    // $ANTLR start "rulePivotTable"
    // InternalSQLParser.g:3509:1: rulePivotTable returns [EObject current=null] : (otherlv_0= PIVOT (otherlv_1= XML )? otherlv_2= LeftParenthesis ( (lv_pfun_3_0= rulePivotFunctions ) ) ( (lv_pfor_4_0= rulePivotForClause ) ) ( (lv_pin_5_0= rulePivotInClause ) ) otherlv_6= RightParenthesis ) ;
    public final EObject rulePivotTable() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_6=null;
        EObject lv_pfun_3_0 = null;

        EObject lv_pfor_4_0 = null;

        EObject lv_pin_5_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:3515:2: ( (otherlv_0= PIVOT (otherlv_1= XML )? otherlv_2= LeftParenthesis ( (lv_pfun_3_0= rulePivotFunctions ) ) ( (lv_pfor_4_0= rulePivotForClause ) ) ( (lv_pin_5_0= rulePivotInClause ) ) otherlv_6= RightParenthesis ) )
            // InternalSQLParser.g:3516:2: (otherlv_0= PIVOT (otherlv_1= XML )? otherlv_2= LeftParenthesis ( (lv_pfun_3_0= rulePivotFunctions ) ) ( (lv_pfor_4_0= rulePivotForClause ) ) ( (lv_pin_5_0= rulePivotInClause ) ) otherlv_6= RightParenthesis )
            {
            // InternalSQLParser.g:3516:2: (otherlv_0= PIVOT (otherlv_1= XML )? otherlv_2= LeftParenthesis ( (lv_pfun_3_0= rulePivotFunctions ) ) ( (lv_pfor_4_0= rulePivotForClause ) ) ( (lv_pin_5_0= rulePivotInClause ) ) otherlv_6= RightParenthesis )
            // InternalSQLParser.g:3517:3: otherlv_0= PIVOT (otherlv_1= XML )? otherlv_2= LeftParenthesis ( (lv_pfun_3_0= rulePivotFunctions ) ) ( (lv_pfor_4_0= rulePivotForClause ) ) ( (lv_pin_5_0= rulePivotInClause ) ) otherlv_6= RightParenthesis
            {
            otherlv_0=(Token)match(input,PIVOT,FOLLOW_60); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getPivotTableAccess().getPIVOTKeyword_0());
              		
            }
            // InternalSQLParser.g:3521:3: (otherlv_1= XML )?
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==XML) ) {
                alt62=1;
            }
            switch (alt62) {
                case 1 :
                    // InternalSQLParser.g:3522:4: otherlv_1= XML
                    {
                    otherlv_1=(Token)match(input,XML,FOLLOW_8); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getPivotTableAccess().getXMLKeyword_1());
                      			
                    }

                    }
                    break;

            }

            otherlv_2=(Token)match(input,LeftParenthesis,FOLLOW_14); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getPivotTableAccess().getLeftParenthesisKeyword_2());
              		
            }
            // InternalSQLParser.g:3531:3: ( (lv_pfun_3_0= rulePivotFunctions ) )
            // InternalSQLParser.g:3532:4: (lv_pfun_3_0= rulePivotFunctions )
            {
            // InternalSQLParser.g:3532:4: (lv_pfun_3_0= rulePivotFunctions )
            // InternalSQLParser.g:3533:5: lv_pfun_3_0= rulePivotFunctions
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getPivotTableAccess().getPfunPivotFunctionsParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_61);
            lv_pfun_3_0=rulePivotFunctions();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPivotTableRule());
              					}
              					set(
              						current,
              						"pfun",
              						lv_pfun_3_0,
              						"org.xtext.example.mydsl_sql.SQL.PivotFunctions");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:3550:3: ( (lv_pfor_4_0= rulePivotForClause ) )
            // InternalSQLParser.g:3551:4: (lv_pfor_4_0= rulePivotForClause )
            {
            // InternalSQLParser.g:3551:4: (lv_pfor_4_0= rulePivotForClause )
            // InternalSQLParser.g:3552:5: lv_pfor_4_0= rulePivotForClause
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getPivotTableAccess().getPforPivotForClauseParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_62);
            lv_pfor_4_0=rulePivotForClause();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPivotTableRule());
              					}
              					set(
              						current,
              						"pfor",
              						lv_pfor_4_0,
              						"org.xtext.example.mydsl_sql.SQL.PivotForClause");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:3569:3: ( (lv_pin_5_0= rulePivotInClause ) )
            // InternalSQLParser.g:3570:4: (lv_pin_5_0= rulePivotInClause )
            {
            // InternalSQLParser.g:3570:4: (lv_pin_5_0= rulePivotInClause )
            // InternalSQLParser.g:3571:5: lv_pin_5_0= rulePivotInClause
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getPivotTableAccess().getPinPivotInClauseParserRuleCall_5_0());
              				
            }
            pushFollow(FOLLOW_10);
            lv_pin_5_0=rulePivotInClause();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPivotTableRule());
              					}
              					set(
              						current,
              						"pin",
              						lv_pin_5_0,
              						"org.xtext.example.mydsl_sql.SQL.PivotInClause");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_6=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_6, grammarAccess.getPivotTableAccess().getRightParenthesisKeyword_6());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePivotTable"


    // $ANTLR start "entryRulePivotFunctions"
    // InternalSQLParser.g:3596:1: entryRulePivotFunctions returns [EObject current=null] : iv_rulePivotFunctions= rulePivotFunctions EOF ;
    public final EObject entryRulePivotFunctions() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePivotFunctions = null;


        try {
            // InternalSQLParser.g:3596:55: (iv_rulePivotFunctions= rulePivotFunctions EOF )
            // InternalSQLParser.g:3597:2: iv_rulePivotFunctions= rulePivotFunctions EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPivotFunctionsRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePivotFunctions=rulePivotFunctions();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePivotFunctions; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePivotFunctions"


    // $ANTLR start "rulePivotFunctions"
    // InternalSQLParser.g:3603:1: rulePivotFunctions returns [EObject current=null] : ( (lv_abc_0_0= RULE_ID ) ) ;
    public final EObject rulePivotFunctions() throws RecognitionException {
        EObject current = null;

        Token lv_abc_0_0=null;


        	enterRule();

        try {
            // InternalSQLParser.g:3609:2: ( ( (lv_abc_0_0= RULE_ID ) ) )
            // InternalSQLParser.g:3610:2: ( (lv_abc_0_0= RULE_ID ) )
            {
            // InternalSQLParser.g:3610:2: ( (lv_abc_0_0= RULE_ID ) )
            // InternalSQLParser.g:3611:3: (lv_abc_0_0= RULE_ID )
            {
            // InternalSQLParser.g:3611:3: (lv_abc_0_0= RULE_ID )
            // InternalSQLParser.g:3612:4: lv_abc_0_0= RULE_ID
            {
            lv_abc_0_0=(Token)match(input,RULE_ID,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(lv_abc_0_0, grammarAccess.getPivotFunctionsAccess().getAbcIDTerminalRuleCall_0());
              			
            }
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getPivotFunctionsRule());
              				}
              				setWithLastConsumed(
              					current,
              					"abc",
              					lv_abc_0_0,
              					"org.xtext.example.mydsl_sql.SQL.ID");
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePivotFunctions"


    // $ANTLR start "entryRulePivotInClause"
    // InternalSQLParser.g:3631:1: entryRulePivotInClause returns [EObject current=null] : iv_rulePivotInClause= rulePivotInClause EOF ;
    public final EObject entryRulePivotInClause() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePivotInClause = null;


        try {
            // InternalSQLParser.g:3631:54: (iv_rulePivotInClause= rulePivotInClause EOF )
            // InternalSQLParser.g:3632:2: iv_rulePivotInClause= rulePivotInClause EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPivotInClauseRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePivotInClause=rulePivotInClause();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePivotInClause; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePivotInClause"


    // $ANTLR start "rulePivotInClause"
    // InternalSQLParser.g:3638:1: rulePivotInClause returns [EObject current=null] : (otherlv_0= IN otherlv_1= LeftParenthesis ( ( (lv_sq_2_0= ruleSubQueryOperand ) ) | ( (lv_args_3_0= ruleUnpivotInClauseArgs ) ) | ( (lv_pinany_4_0= rulePivotInClauseAny ) ) ) otherlv_5= RightParenthesis ) ;
    public final EObject rulePivotInClause() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_5=null;
        EObject lv_sq_2_0 = null;

        EObject lv_args_3_0 = null;

        AntlrDatatypeRuleToken lv_pinany_4_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:3644:2: ( (otherlv_0= IN otherlv_1= LeftParenthesis ( ( (lv_sq_2_0= ruleSubQueryOperand ) ) | ( (lv_args_3_0= ruleUnpivotInClauseArgs ) ) | ( (lv_pinany_4_0= rulePivotInClauseAny ) ) ) otherlv_5= RightParenthesis ) )
            // InternalSQLParser.g:3645:2: (otherlv_0= IN otherlv_1= LeftParenthesis ( ( (lv_sq_2_0= ruleSubQueryOperand ) ) | ( (lv_args_3_0= ruleUnpivotInClauseArgs ) ) | ( (lv_pinany_4_0= rulePivotInClauseAny ) ) ) otherlv_5= RightParenthesis )
            {
            // InternalSQLParser.g:3645:2: (otherlv_0= IN otherlv_1= LeftParenthesis ( ( (lv_sq_2_0= ruleSubQueryOperand ) ) | ( (lv_args_3_0= ruleUnpivotInClauseArgs ) ) | ( (lv_pinany_4_0= rulePivotInClauseAny ) ) ) otherlv_5= RightParenthesis )
            // InternalSQLParser.g:3646:3: otherlv_0= IN otherlv_1= LeftParenthesis ( ( (lv_sq_2_0= ruleSubQueryOperand ) ) | ( (lv_args_3_0= ruleUnpivotInClauseArgs ) ) | ( (lv_pinany_4_0= rulePivotInClauseAny ) ) ) otherlv_5= RightParenthesis
            {
            otherlv_0=(Token)match(input,IN,FOLLOW_8); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getPivotInClauseAccess().getINKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_63); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getPivotInClauseAccess().getLeftParenthesisKeyword_1());
              		
            }
            // InternalSQLParser.g:3654:3: ( ( (lv_sq_2_0= ruleSubQueryOperand ) ) | ( (lv_args_3_0= ruleUnpivotInClauseArgs ) ) | ( (lv_pinany_4_0= rulePivotInClauseAny ) ) )
            int alt63=3;
            switch ( input.LA(1) ) {
            case LeftParenthesis:
                {
                int LA63_1 = input.LA(2);

                if ( ((LA63_1>=RULE_STRING && LA63_1<=RULE_ID)) ) {
                    alt63=2;
                }
                else if ( (LA63_1==SELECT) ) {
                    alt63=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 63, 1, input);

                    throw nvae;
                }
                }
                break;
            case RULE_STRING:
            case RULE_DBNAME:
            case RULE_ID:
                {
                alt63=2;
                }
                break;
            case ANY:
                {
                alt63=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 63, 0, input);

                throw nvae;
            }

            switch (alt63) {
                case 1 :
                    // InternalSQLParser.g:3655:4: ( (lv_sq_2_0= ruleSubQueryOperand ) )
                    {
                    // InternalSQLParser.g:3655:4: ( (lv_sq_2_0= ruleSubQueryOperand ) )
                    // InternalSQLParser.g:3656:5: (lv_sq_2_0= ruleSubQueryOperand )
                    {
                    // InternalSQLParser.g:3656:5: (lv_sq_2_0= ruleSubQueryOperand )
                    // InternalSQLParser.g:3657:6: lv_sq_2_0= ruleSubQueryOperand
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getPivotInClauseAccess().getSqSubQueryOperandParserRuleCall_2_0_0());
                      					
                    }
                    pushFollow(FOLLOW_10);
                    lv_sq_2_0=ruleSubQueryOperand();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getPivotInClauseRule());
                      						}
                      						set(
                      							current,
                      							"sq",
                      							lv_sq_2_0,
                      							"org.xtext.example.mydsl_sql.SQL.SubQueryOperand");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:3675:4: ( (lv_args_3_0= ruleUnpivotInClauseArgs ) )
                    {
                    // InternalSQLParser.g:3675:4: ( (lv_args_3_0= ruleUnpivotInClauseArgs ) )
                    // InternalSQLParser.g:3676:5: (lv_args_3_0= ruleUnpivotInClauseArgs )
                    {
                    // InternalSQLParser.g:3676:5: (lv_args_3_0= ruleUnpivotInClauseArgs )
                    // InternalSQLParser.g:3677:6: lv_args_3_0= ruleUnpivotInClauseArgs
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getPivotInClauseAccess().getArgsUnpivotInClauseArgsParserRuleCall_2_1_0());
                      					
                    }
                    pushFollow(FOLLOW_10);
                    lv_args_3_0=ruleUnpivotInClauseArgs();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getPivotInClauseRule());
                      						}
                      						set(
                      							current,
                      							"args",
                      							lv_args_3_0,
                      							"org.xtext.example.mydsl_sql.SQL.UnpivotInClauseArgs");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:3695:4: ( (lv_pinany_4_0= rulePivotInClauseAny ) )
                    {
                    // InternalSQLParser.g:3695:4: ( (lv_pinany_4_0= rulePivotInClauseAny ) )
                    // InternalSQLParser.g:3696:5: (lv_pinany_4_0= rulePivotInClauseAny )
                    {
                    // InternalSQLParser.g:3696:5: (lv_pinany_4_0= rulePivotInClauseAny )
                    // InternalSQLParser.g:3697:6: lv_pinany_4_0= rulePivotInClauseAny
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getPivotInClauseAccess().getPinanyPivotInClauseAnyParserRuleCall_2_2_0());
                      					
                    }
                    pushFollow(FOLLOW_10);
                    lv_pinany_4_0=rulePivotInClauseAny();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getPivotInClauseRule());
                      						}
                      						set(
                      							current,
                      							"pinany",
                      							lv_pinany_4_0,
                      							"org.xtext.example.mydsl_sql.SQL.PivotInClauseAny");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getPivotInClauseAccess().getRightParenthesisKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePivotInClause"


    // $ANTLR start "entryRulePivotInClauseAny"
    // InternalSQLParser.g:3723:1: entryRulePivotInClauseAny returns [String current=null] : iv_rulePivotInClauseAny= rulePivotInClauseAny EOF ;
    public final String entryRulePivotInClauseAny() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_rulePivotInClauseAny = null;


        try {
            // InternalSQLParser.g:3723:56: (iv_rulePivotInClauseAny= rulePivotInClauseAny EOF )
            // InternalSQLParser.g:3724:2: iv_rulePivotInClauseAny= rulePivotInClauseAny EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPivotInClauseAnyRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePivotInClauseAny=rulePivotInClauseAny();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePivotInClauseAny.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePivotInClauseAny"


    // $ANTLR start "rulePivotInClauseAny"
    // InternalSQLParser.g:3730:1: rulePivotInClauseAny returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= ANY (kw= Comma kw= ANY )* ) ;
    public final AntlrDatatypeRuleToken rulePivotInClauseAny() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            // InternalSQLParser.g:3736:2: ( (kw= ANY (kw= Comma kw= ANY )* ) )
            // InternalSQLParser.g:3737:2: (kw= ANY (kw= Comma kw= ANY )* )
            {
            // InternalSQLParser.g:3737:2: (kw= ANY (kw= Comma kw= ANY )* )
            // InternalSQLParser.g:3738:3: kw= ANY (kw= Comma kw= ANY )*
            {
            kw=(Token)match(input,ANY,FOLLOW_11); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(kw);
              			newLeafNode(kw, grammarAccess.getPivotInClauseAnyAccess().getANYKeyword_0());
              		
            }
            // InternalSQLParser.g:3743:3: (kw= Comma kw= ANY )*
            loop64:
            do {
                int alt64=2;
                int LA64_0 = input.LA(1);

                if ( (LA64_0==Comma) ) {
                    alt64=1;
                }


                switch (alt64) {
            	case 1 :
            	    // InternalSQLParser.g:3744:4: kw= Comma kw= ANY
            	    {
            	    kw=(Token)match(input,Comma,FOLLOW_64); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				current.merge(kw);
            	      				newLeafNode(kw, grammarAccess.getPivotInClauseAnyAccess().getCommaKeyword_1_0());
            	      			
            	    }
            	    kw=(Token)match(input,ANY,FOLLOW_11); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				current.merge(kw);
            	      				newLeafNode(kw, grammarAccess.getPivotInClauseAnyAccess().getANYKeyword_1_1());
            	      			
            	    }

            	    }
            	    break;

            	default :
            	    break loop64;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePivotInClauseAny"


    // $ANTLR start "entryRuleUnpivotTable"
    // InternalSQLParser.g:3759:1: entryRuleUnpivotTable returns [EObject current=null] : iv_ruleUnpivotTable= ruleUnpivotTable EOF ;
    public final EObject entryRuleUnpivotTable() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleUnpivotTable = null;


        try {
            // InternalSQLParser.g:3759:53: (iv_ruleUnpivotTable= ruleUnpivotTable EOF )
            // InternalSQLParser.g:3760:2: iv_ruleUnpivotTable= ruleUnpivotTable EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getUnpivotTableRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleUnpivotTable=ruleUnpivotTable();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleUnpivotTable; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleUnpivotTable"


    // $ANTLR start "ruleUnpivotTable"
    // InternalSQLParser.g:3766:1: ruleUnpivotTable returns [EObject current=null] : (otherlv_0= UNPIVOT ( (otherlv_1= INCLUDE | otherlv_2= EXCLUDE ) otherlv_3= NULLS )? otherlv_4= LeftParenthesis ( (lv_pcols_5_0= rulePivotColumns ) ) ( (lv_pfor_6_0= rulePivotForClause ) ) ( (lv_inop_7_0= ruleUnpivotInClause ) ) otherlv_8= RightParenthesis ) ;
    public final EObject ruleUnpivotTable() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        Token otherlv_8=null;
        EObject lv_pcols_5_0 = null;

        EObject lv_pfor_6_0 = null;

        EObject lv_inop_7_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:3772:2: ( (otherlv_0= UNPIVOT ( (otherlv_1= INCLUDE | otherlv_2= EXCLUDE ) otherlv_3= NULLS )? otherlv_4= LeftParenthesis ( (lv_pcols_5_0= rulePivotColumns ) ) ( (lv_pfor_6_0= rulePivotForClause ) ) ( (lv_inop_7_0= ruleUnpivotInClause ) ) otherlv_8= RightParenthesis ) )
            // InternalSQLParser.g:3773:2: (otherlv_0= UNPIVOT ( (otherlv_1= INCLUDE | otherlv_2= EXCLUDE ) otherlv_3= NULLS )? otherlv_4= LeftParenthesis ( (lv_pcols_5_0= rulePivotColumns ) ) ( (lv_pfor_6_0= rulePivotForClause ) ) ( (lv_inop_7_0= ruleUnpivotInClause ) ) otherlv_8= RightParenthesis )
            {
            // InternalSQLParser.g:3773:2: (otherlv_0= UNPIVOT ( (otherlv_1= INCLUDE | otherlv_2= EXCLUDE ) otherlv_3= NULLS )? otherlv_4= LeftParenthesis ( (lv_pcols_5_0= rulePivotColumns ) ) ( (lv_pfor_6_0= rulePivotForClause ) ) ( (lv_inop_7_0= ruleUnpivotInClause ) ) otherlv_8= RightParenthesis )
            // InternalSQLParser.g:3774:3: otherlv_0= UNPIVOT ( (otherlv_1= INCLUDE | otherlv_2= EXCLUDE ) otherlv_3= NULLS )? otherlv_4= LeftParenthesis ( (lv_pcols_5_0= rulePivotColumns ) ) ( (lv_pfor_6_0= rulePivotForClause ) ) ( (lv_inop_7_0= ruleUnpivotInClause ) ) otherlv_8= RightParenthesis
            {
            otherlv_0=(Token)match(input,UNPIVOT,FOLLOW_65); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getUnpivotTableAccess().getUNPIVOTKeyword_0());
              		
            }
            // InternalSQLParser.g:3778:3: ( (otherlv_1= INCLUDE | otherlv_2= EXCLUDE ) otherlv_3= NULLS )?
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==EXCLUDE||LA66_0==INCLUDE) ) {
                alt66=1;
            }
            switch (alt66) {
                case 1 :
                    // InternalSQLParser.g:3779:4: (otherlv_1= INCLUDE | otherlv_2= EXCLUDE ) otherlv_3= NULLS
                    {
                    // InternalSQLParser.g:3779:4: (otherlv_1= INCLUDE | otherlv_2= EXCLUDE )
                    int alt65=2;
                    int LA65_0 = input.LA(1);

                    if ( (LA65_0==INCLUDE) ) {
                        alt65=1;
                    }
                    else if ( (LA65_0==EXCLUDE) ) {
                        alt65=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 65, 0, input);

                        throw nvae;
                    }
                    switch (alt65) {
                        case 1 :
                            // InternalSQLParser.g:3780:5: otherlv_1= INCLUDE
                            {
                            otherlv_1=(Token)match(input,INCLUDE,FOLLOW_66); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(otherlv_1, grammarAccess.getUnpivotTableAccess().getINCLUDEKeyword_1_0_0());
                              				
                            }

                            }
                            break;
                        case 2 :
                            // InternalSQLParser.g:3785:5: otherlv_2= EXCLUDE
                            {
                            otherlv_2=(Token)match(input,EXCLUDE,FOLLOW_66); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(otherlv_2, grammarAccess.getUnpivotTableAccess().getEXCLUDEKeyword_1_0_1());
                              				
                            }

                            }
                            break;

                    }

                    otherlv_3=(Token)match(input,NULLS,FOLLOW_8); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_3, grammarAccess.getUnpivotTableAccess().getNULLSKeyword_1_1());
                      			
                    }

                    }
                    break;

            }

            otherlv_4=(Token)match(input,LeftParenthesis,FOLLOW_5); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getUnpivotTableAccess().getLeftParenthesisKeyword_2());
              		
            }
            // InternalSQLParser.g:3799:3: ( (lv_pcols_5_0= rulePivotColumns ) )
            // InternalSQLParser.g:3800:4: (lv_pcols_5_0= rulePivotColumns )
            {
            // InternalSQLParser.g:3800:4: (lv_pcols_5_0= rulePivotColumns )
            // InternalSQLParser.g:3801:5: lv_pcols_5_0= rulePivotColumns
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getUnpivotTableAccess().getPcolsPivotColumnsParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_61);
            lv_pcols_5_0=rulePivotColumns();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getUnpivotTableRule());
              					}
              					set(
              						current,
              						"pcols",
              						lv_pcols_5_0,
              						"org.xtext.example.mydsl_sql.SQL.PivotColumns");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:3818:3: ( (lv_pfor_6_0= rulePivotForClause ) )
            // InternalSQLParser.g:3819:4: (lv_pfor_6_0= rulePivotForClause )
            {
            // InternalSQLParser.g:3819:4: (lv_pfor_6_0= rulePivotForClause )
            // InternalSQLParser.g:3820:5: lv_pfor_6_0= rulePivotForClause
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getUnpivotTableAccess().getPforPivotForClauseParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_62);
            lv_pfor_6_0=rulePivotForClause();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getUnpivotTableRule());
              					}
              					set(
              						current,
              						"pfor",
              						lv_pfor_6_0,
              						"org.xtext.example.mydsl_sql.SQL.PivotForClause");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:3837:3: ( (lv_inop_7_0= ruleUnpivotInClause ) )
            // InternalSQLParser.g:3838:4: (lv_inop_7_0= ruleUnpivotInClause )
            {
            // InternalSQLParser.g:3838:4: (lv_inop_7_0= ruleUnpivotInClause )
            // InternalSQLParser.g:3839:5: lv_inop_7_0= ruleUnpivotInClause
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getUnpivotTableAccess().getInopUnpivotInClauseParserRuleCall_5_0());
              				
            }
            pushFollow(FOLLOW_10);
            lv_inop_7_0=ruleUnpivotInClause();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getUnpivotTableRule());
              					}
              					set(
              						current,
              						"inop",
              						lv_inop_7_0,
              						"org.xtext.example.mydsl_sql.SQL.UnpivotInClause");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_8=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_8, grammarAccess.getUnpivotTableAccess().getRightParenthesisKeyword_6());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleUnpivotTable"


    // $ANTLR start "entryRuleUnpivotInClause"
    // InternalSQLParser.g:3864:1: entryRuleUnpivotInClause returns [EObject current=null] : iv_ruleUnpivotInClause= ruleUnpivotInClause EOF ;
    public final EObject entryRuleUnpivotInClause() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleUnpivotInClause = null;


        try {
            // InternalSQLParser.g:3864:56: (iv_ruleUnpivotInClause= ruleUnpivotInClause EOF )
            // InternalSQLParser.g:3865:2: iv_ruleUnpivotInClause= ruleUnpivotInClause EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getUnpivotInClauseRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleUnpivotInClause=ruleUnpivotInClause();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleUnpivotInClause; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleUnpivotInClause"


    // $ANTLR start "ruleUnpivotInClause"
    // InternalSQLParser.g:3871:1: ruleUnpivotInClause returns [EObject current=null] : ( () ( (lv_op_1_0= IN ) ) otherlv_2= LeftParenthesis ( (lv_args_3_0= ruleUnpivotInClauseArgs ) ) otherlv_4= RightParenthesis ) ;
    public final EObject ruleUnpivotInClause() throws RecognitionException {
        EObject current = null;

        Token lv_op_1_0=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject lv_args_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:3877:2: ( ( () ( (lv_op_1_0= IN ) ) otherlv_2= LeftParenthesis ( (lv_args_3_0= ruleUnpivotInClauseArgs ) ) otherlv_4= RightParenthesis ) )
            // InternalSQLParser.g:3878:2: ( () ( (lv_op_1_0= IN ) ) otherlv_2= LeftParenthesis ( (lv_args_3_0= ruleUnpivotInClauseArgs ) ) otherlv_4= RightParenthesis )
            {
            // InternalSQLParser.g:3878:2: ( () ( (lv_op_1_0= IN ) ) otherlv_2= LeftParenthesis ( (lv_args_3_0= ruleUnpivotInClauseArgs ) ) otherlv_4= RightParenthesis )
            // InternalSQLParser.g:3879:3: () ( (lv_op_1_0= IN ) ) otherlv_2= LeftParenthesis ( (lv_args_3_0= ruleUnpivotInClauseArgs ) ) otherlv_4= RightParenthesis
            {
            // InternalSQLParser.g:3879:3: ()
            // InternalSQLParser.g:3880:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getUnpivotInClauseAccess().getUnipivotInClauseAction_0(),
              					current);
              			
            }

            }

            // InternalSQLParser.g:3889:3: ( (lv_op_1_0= IN ) )
            // InternalSQLParser.g:3890:4: (lv_op_1_0= IN )
            {
            // InternalSQLParser.g:3890:4: (lv_op_1_0= IN )
            // InternalSQLParser.g:3891:5: lv_op_1_0= IN
            {
            lv_op_1_0=(Token)match(input,IN,FOLLOW_8); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_op_1_0, grammarAccess.getUnpivotInClauseAccess().getOpINKeyword_1_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getUnpivotInClauseRule());
              					}
              					setWithLastConsumed(current, "op", lv_op_1_0, "IN");
              				
            }

            }


            }

            otherlv_2=(Token)match(input,LeftParenthesis,FOLLOW_5); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getUnpivotInClauseAccess().getLeftParenthesisKeyword_2());
              		
            }
            // InternalSQLParser.g:3907:3: ( (lv_args_3_0= ruleUnpivotInClauseArgs ) )
            // InternalSQLParser.g:3908:4: (lv_args_3_0= ruleUnpivotInClauseArgs )
            {
            // InternalSQLParser.g:3908:4: (lv_args_3_0= ruleUnpivotInClauseArgs )
            // InternalSQLParser.g:3909:5: lv_args_3_0= ruleUnpivotInClauseArgs
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getUnpivotInClauseAccess().getArgsUnpivotInClauseArgsParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_10);
            lv_args_3_0=ruleUnpivotInClauseArgs();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getUnpivotInClauseRule());
              					}
              					set(
              						current,
              						"args",
              						lv_args_3_0,
              						"org.xtext.example.mydsl_sql.SQL.UnpivotInClauseArgs");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_4=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getUnpivotInClauseAccess().getRightParenthesisKeyword_4());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleUnpivotInClause"


    // $ANTLR start "entryRuleUnpivotInClauseArgs"
    // InternalSQLParser.g:3934:1: entryRuleUnpivotInClauseArgs returns [EObject current=null] : iv_ruleUnpivotInClauseArgs= ruleUnpivotInClauseArgs EOF ;
    public final EObject entryRuleUnpivotInClauseArgs() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleUnpivotInClauseArgs = null;


        try {
            // InternalSQLParser.g:3934:60: (iv_ruleUnpivotInClauseArgs= ruleUnpivotInClauseArgs EOF )
            // InternalSQLParser.g:3935:2: iv_ruleUnpivotInClauseArgs= ruleUnpivotInClauseArgs EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getUnpivotInClauseArgsRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleUnpivotInClauseArgs=ruleUnpivotInClauseArgs();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleUnpivotInClauseArgs; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleUnpivotInClauseArgs"


    // $ANTLR start "ruleUnpivotInClauseArgs"
    // InternalSQLParser.g:3941:1: ruleUnpivotInClauseArgs returns [EObject current=null] : (this_UnpivotInClauseArg_0= ruleUnpivotInClauseArg ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleUnpivotInClauseArg ) ) )+ )? ) ;
    public final EObject ruleUnpivotInClauseArgs() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_UnpivotInClauseArg_0 = null;

        EObject lv_entries_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:3947:2: ( (this_UnpivotInClauseArg_0= ruleUnpivotInClauseArg ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleUnpivotInClauseArg ) ) )+ )? ) )
            // InternalSQLParser.g:3948:2: (this_UnpivotInClauseArg_0= ruleUnpivotInClauseArg ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleUnpivotInClauseArg ) ) )+ )? )
            {
            // InternalSQLParser.g:3948:2: (this_UnpivotInClauseArg_0= ruleUnpivotInClauseArg ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleUnpivotInClauseArg ) ) )+ )? )
            // InternalSQLParser.g:3949:3: this_UnpivotInClauseArg_0= ruleUnpivotInClauseArg ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleUnpivotInClauseArg ) ) )+ )?
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getUnpivotInClauseArgsAccess().getUnpivotInClauseArgParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_11);
            this_UnpivotInClauseArg_0=ruleUnpivotInClauseArg();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_UnpivotInClauseArg_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:3960:3: ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleUnpivotInClauseArg ) ) )+ )?
            int alt68=2;
            int LA68_0 = input.LA(1);

            if ( (LA68_0==Comma) ) {
                alt68=1;
            }
            switch (alt68) {
                case 1 :
                    // InternalSQLParser.g:3961:4: () (otherlv_2= Comma ( (lv_entries_3_0= ruleUnpivotInClauseArg ) ) )+
                    {
                    // InternalSQLParser.g:3961:4: ()
                    // InternalSQLParser.g:3962:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getUnpivotInClauseArgsAccess().getUicargsEntriesAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalSQLParser.g:3971:4: (otherlv_2= Comma ( (lv_entries_3_0= ruleUnpivotInClauseArg ) ) )+
                    int cnt67=0;
                    loop67:
                    do {
                        int alt67=2;
                        int LA67_0 = input.LA(1);

                        if ( (LA67_0==Comma) ) {
                            alt67=1;
                        }


                        switch (alt67) {
                    	case 1 :
                    	    // InternalSQLParser.g:3972:5: otherlv_2= Comma ( (lv_entries_3_0= ruleUnpivotInClauseArg ) )
                    	    {
                    	    otherlv_2=(Token)match(input,Comma,FOLLOW_5); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_2, grammarAccess.getUnpivotInClauseArgsAccess().getCommaKeyword_1_1_0());
                    	      				
                    	    }
                    	    // InternalSQLParser.g:3976:5: ( (lv_entries_3_0= ruleUnpivotInClauseArg ) )
                    	    // InternalSQLParser.g:3977:6: (lv_entries_3_0= ruleUnpivotInClauseArg )
                    	    {
                    	    // InternalSQLParser.g:3977:6: (lv_entries_3_0= ruleUnpivotInClauseArg )
                    	    // InternalSQLParser.g:3978:7: lv_entries_3_0= ruleUnpivotInClauseArg
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getUnpivotInClauseArgsAccess().getEntriesUnpivotInClauseArgParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_11);
                    	    lv_entries_3_0=ruleUnpivotInClauseArg();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getUnpivotInClauseArgsRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"entries",
                    	      								lv_entries_3_0,
                    	      								"org.xtext.example.mydsl_sql.SQL.UnpivotInClauseArg");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt67 >= 1 ) break loop67;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(67, input);
                                throw eee;
                        }
                        cnt67++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleUnpivotInClauseArgs"


    // $ANTLR start "entryRuleUnpivotInClauseArg"
    // InternalSQLParser.g:4001:1: entryRuleUnpivotInClauseArg returns [EObject current=null] : iv_ruleUnpivotInClauseArg= ruleUnpivotInClauseArg EOF ;
    public final EObject entryRuleUnpivotInClauseArg() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleUnpivotInClauseArg = null;


        try {
            // InternalSQLParser.g:4001:59: (iv_ruleUnpivotInClauseArg= ruleUnpivotInClauseArg EOF )
            // InternalSQLParser.g:4002:2: iv_ruleUnpivotInClauseArg= ruleUnpivotInClauseArg EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getUnpivotInClauseArgRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleUnpivotInClauseArg=ruleUnpivotInClauseArg();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleUnpivotInClauseArg; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleUnpivotInClauseArg"


    // $ANTLR start "ruleUnpivotInClauseArg"
    // InternalSQLParser.g:4008:1: ruleUnpivotInClauseArg returns [EObject current=null] : ( ( (lv_pcols_0_0= rulePivotColumns ) ) (otherlv_1= AS ( (lv_cfuls_2_0= rulePivotColumns ) ) )? ) ;
    public final EObject ruleUnpivotInClauseArg() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_pcols_0_0 = null;

        EObject lv_cfuls_2_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:4014:2: ( ( ( (lv_pcols_0_0= rulePivotColumns ) ) (otherlv_1= AS ( (lv_cfuls_2_0= rulePivotColumns ) ) )? ) )
            // InternalSQLParser.g:4015:2: ( ( (lv_pcols_0_0= rulePivotColumns ) ) (otherlv_1= AS ( (lv_cfuls_2_0= rulePivotColumns ) ) )? )
            {
            // InternalSQLParser.g:4015:2: ( ( (lv_pcols_0_0= rulePivotColumns ) ) (otherlv_1= AS ( (lv_cfuls_2_0= rulePivotColumns ) ) )? )
            // InternalSQLParser.g:4016:3: ( (lv_pcols_0_0= rulePivotColumns ) ) (otherlv_1= AS ( (lv_cfuls_2_0= rulePivotColumns ) ) )?
            {
            // InternalSQLParser.g:4016:3: ( (lv_pcols_0_0= rulePivotColumns ) )
            // InternalSQLParser.g:4017:4: (lv_pcols_0_0= rulePivotColumns )
            {
            // InternalSQLParser.g:4017:4: (lv_pcols_0_0= rulePivotColumns )
            // InternalSQLParser.g:4018:5: lv_pcols_0_0= rulePivotColumns
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getUnpivotInClauseArgAccess().getPcolsPivotColumnsParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_67);
            lv_pcols_0_0=rulePivotColumns();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getUnpivotInClauseArgRule());
              					}
              					set(
              						current,
              						"pcols",
              						lv_pcols_0_0,
              						"org.xtext.example.mydsl_sql.SQL.PivotColumns");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:4035:3: (otherlv_1= AS ( (lv_cfuls_2_0= rulePivotColumns ) ) )?
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( (LA69_0==AS) ) {
                alt69=1;
            }
            switch (alt69) {
                case 1 :
                    // InternalSQLParser.g:4036:4: otherlv_1= AS ( (lv_cfuls_2_0= rulePivotColumns ) )
                    {
                    otherlv_1=(Token)match(input,AS,FOLLOW_5); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getUnpivotInClauseArgAccess().getASKeyword_1_0());
                      			
                    }
                    // InternalSQLParser.g:4040:4: ( (lv_cfuls_2_0= rulePivotColumns ) )
                    // InternalSQLParser.g:4041:5: (lv_cfuls_2_0= rulePivotColumns )
                    {
                    // InternalSQLParser.g:4041:5: (lv_cfuls_2_0= rulePivotColumns )
                    // InternalSQLParser.g:4042:6: lv_cfuls_2_0= rulePivotColumns
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getUnpivotInClauseArgAccess().getCfulsPivotColumnsParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_cfuls_2_0=rulePivotColumns();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getUnpivotInClauseArgRule());
                      						}
                      						set(
                      							current,
                      							"cfuls",
                      							lv_cfuls_2_0,
                      							"org.xtext.example.mydsl_sql.SQL.PivotColumns");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleUnpivotInClauseArg"


    // $ANTLR start "entryRulePivotForClause"
    // InternalSQLParser.g:4064:1: entryRulePivotForClause returns [EObject current=null] : iv_rulePivotForClause= rulePivotForClause EOF ;
    public final EObject entryRulePivotForClause() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePivotForClause = null;


        try {
            // InternalSQLParser.g:4064:55: (iv_rulePivotForClause= rulePivotForClause EOF )
            // InternalSQLParser.g:4065:2: iv_rulePivotForClause= rulePivotForClause EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPivotForClauseRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePivotForClause=rulePivotForClause();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePivotForClause; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePivotForClause"


    // $ANTLR start "rulePivotForClause"
    // InternalSQLParser.g:4071:1: rulePivotForClause returns [EObject current=null] : (otherlv_0= FOR (this_ColumnFull_1= ruleColumnFull | (otherlv_2= LeftParenthesis this_Columns_3= ruleColumns otherlv_4= RightParenthesis ) ) ) ;
    public final EObject rulePivotForClause() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject this_ColumnFull_1 = null;

        EObject this_Columns_3 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:4077:2: ( (otherlv_0= FOR (this_ColumnFull_1= ruleColumnFull | (otherlv_2= LeftParenthesis this_Columns_3= ruleColumns otherlv_4= RightParenthesis ) ) ) )
            // InternalSQLParser.g:4078:2: (otherlv_0= FOR (this_ColumnFull_1= ruleColumnFull | (otherlv_2= LeftParenthesis this_Columns_3= ruleColumns otherlv_4= RightParenthesis ) ) )
            {
            // InternalSQLParser.g:4078:2: (otherlv_0= FOR (this_ColumnFull_1= ruleColumnFull | (otherlv_2= LeftParenthesis this_Columns_3= ruleColumns otherlv_4= RightParenthesis ) ) )
            // InternalSQLParser.g:4079:3: otherlv_0= FOR (this_ColumnFull_1= ruleColumnFull | (otherlv_2= LeftParenthesis this_Columns_3= ruleColumns otherlv_4= RightParenthesis ) )
            {
            otherlv_0=(Token)match(input,FOR,FOLLOW_5); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getPivotForClauseAccess().getFORKeyword_0());
              		
            }
            // InternalSQLParser.g:4083:3: (this_ColumnFull_1= ruleColumnFull | (otherlv_2= LeftParenthesis this_Columns_3= ruleColumns otherlv_4= RightParenthesis ) )
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( ((LA70_0>=RULE_STRING && LA70_0<=RULE_ID)) ) {
                alt70=1;
            }
            else if ( (LA70_0==LeftParenthesis) ) {
                alt70=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 70, 0, input);

                throw nvae;
            }
            switch (alt70) {
                case 1 :
                    // InternalSQLParser.g:4084:4: this_ColumnFull_1= ruleColumnFull
                    {
                    if ( state.backtracking==0 ) {

                      				/* */
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getPivotForClauseAccess().getColumnFullParserRuleCall_1_0());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_ColumnFull_1=ruleColumnFull();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ColumnFull_1;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:4096:4: (otherlv_2= LeftParenthesis this_Columns_3= ruleColumns otherlv_4= RightParenthesis )
                    {
                    // InternalSQLParser.g:4096:4: (otherlv_2= LeftParenthesis this_Columns_3= ruleColumns otherlv_4= RightParenthesis )
                    // InternalSQLParser.g:4097:5: otherlv_2= LeftParenthesis this_Columns_3= ruleColumns otherlv_4= RightParenthesis
                    {
                    otherlv_2=(Token)match(input,LeftParenthesis,FOLLOW_6); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_2, grammarAccess.getPivotForClauseAccess().getLeftParenthesisKeyword_1_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getPivotForClauseAccess().getColumnsParserRuleCall_1_1_1());
                      				
                    }
                    pushFollow(FOLLOW_10);
                    this_Columns_3=ruleColumns();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_Columns_3;
                      					afterParserOrEnumRuleCall();
                      				
                    }
                    otherlv_4=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_4, grammarAccess.getPivotForClauseAccess().getRightParenthesisKeyword_1_1_2());
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePivotForClause"


    // $ANTLR start "entryRulePivotColumns"
    // InternalSQLParser.g:4122:1: entryRulePivotColumns returns [EObject current=null] : iv_rulePivotColumns= rulePivotColumns EOF ;
    public final EObject entryRulePivotColumns() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePivotColumns = null;


        try {
            // InternalSQLParser.g:4122:53: (iv_rulePivotColumns= rulePivotColumns EOF )
            // InternalSQLParser.g:4123:2: iv_rulePivotColumns= rulePivotColumns EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPivotColumnsRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePivotColumns=rulePivotColumns();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePivotColumns; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePivotColumns"


    // $ANTLR start "rulePivotColumns"
    // InternalSQLParser.g:4129:1: rulePivotColumns returns [EObject current=null] : (this_PivotCol_0= rulePivotCol | (otherlv_1= LeftParenthesis this_PivotCols_2= rulePivotCols otherlv_3= RightParenthesis ) ) ;
    public final EObject rulePivotColumns() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject this_PivotCol_0 = null;

        EObject this_PivotCols_2 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:4135:2: ( (this_PivotCol_0= rulePivotCol | (otherlv_1= LeftParenthesis this_PivotCols_2= rulePivotCols otherlv_3= RightParenthesis ) ) )
            // InternalSQLParser.g:4136:2: (this_PivotCol_0= rulePivotCol | (otherlv_1= LeftParenthesis this_PivotCols_2= rulePivotCols otherlv_3= RightParenthesis ) )
            {
            // InternalSQLParser.g:4136:2: (this_PivotCol_0= rulePivotCol | (otherlv_1= LeftParenthesis this_PivotCols_2= rulePivotCols otherlv_3= RightParenthesis ) )
            int alt71=2;
            int LA71_0 = input.LA(1);

            if ( ((LA71_0>=RULE_STRING && LA71_0<=RULE_ID)) ) {
                alt71=1;
            }
            else if ( (LA71_0==LeftParenthesis) ) {
                alt71=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 71, 0, input);

                throw nvae;
            }
            switch (alt71) {
                case 1 :
                    // InternalSQLParser.g:4137:3: this_PivotCol_0= rulePivotCol
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPivotColumnsAccess().getPivotColParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_PivotCol_0=rulePivotCol();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_PivotCol_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:4149:3: (otherlv_1= LeftParenthesis this_PivotCols_2= rulePivotCols otherlv_3= RightParenthesis )
                    {
                    // InternalSQLParser.g:4149:3: (otherlv_1= LeftParenthesis this_PivotCols_2= rulePivotCols otherlv_3= RightParenthesis )
                    // InternalSQLParser.g:4150:4: otherlv_1= LeftParenthesis this_PivotCols_2= rulePivotCols otherlv_3= RightParenthesis
                    {
                    otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_23); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getPivotColumnsAccess().getLeftParenthesisKeyword_1_0());
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				/* */
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getPivotColumnsAccess().getPivotColsParserRuleCall_1_1());
                      			
                    }
                    pushFollow(FOLLOW_10);
                    this_PivotCols_2=rulePivotCols();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_PivotCols_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }
                    otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_3, grammarAccess.getPivotColumnsAccess().getRightParenthesisKeyword_1_2());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePivotColumns"


    // $ANTLR start "entryRulePivotCols"
    // InternalSQLParser.g:4174:1: entryRulePivotCols returns [EObject current=null] : iv_rulePivotCols= rulePivotCols EOF ;
    public final EObject entryRulePivotCols() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePivotCols = null;


        try {
            // InternalSQLParser.g:4174:50: (iv_rulePivotCols= rulePivotCols EOF )
            // InternalSQLParser.g:4175:2: iv_rulePivotCols= rulePivotCols EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPivotColsRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePivotCols=rulePivotCols();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePivotCols; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePivotCols"


    // $ANTLR start "rulePivotCols"
    // InternalSQLParser.g:4181:1: rulePivotCols returns [EObject current=null] : (this_PivotCol_0= rulePivotCol ( () (otherlv_2= Comma ( (lv_entries_3_0= rulePivotCol ) ) )+ )? ) ;
    public final EObject rulePivotCols() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_PivotCol_0 = null;

        EObject lv_entries_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:4187:2: ( (this_PivotCol_0= rulePivotCol ( () (otherlv_2= Comma ( (lv_entries_3_0= rulePivotCol ) ) )+ )? ) )
            // InternalSQLParser.g:4188:2: (this_PivotCol_0= rulePivotCol ( () (otherlv_2= Comma ( (lv_entries_3_0= rulePivotCol ) ) )+ )? )
            {
            // InternalSQLParser.g:4188:2: (this_PivotCol_0= rulePivotCol ( () (otherlv_2= Comma ( (lv_entries_3_0= rulePivotCol ) ) )+ )? )
            // InternalSQLParser.g:4189:3: this_PivotCol_0= rulePivotCol ( () (otherlv_2= Comma ( (lv_entries_3_0= rulePivotCol ) ) )+ )?
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getPivotColsAccess().getPivotColParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_11);
            this_PivotCol_0=rulePivotCol();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_PivotCol_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:4200:3: ( () (otherlv_2= Comma ( (lv_entries_3_0= rulePivotCol ) ) )+ )?
            int alt73=2;
            int LA73_0 = input.LA(1);

            if ( (LA73_0==Comma) ) {
                alt73=1;
            }
            switch (alt73) {
                case 1 :
                    // InternalSQLParser.g:4201:4: () (otherlv_2= Comma ( (lv_entries_3_0= rulePivotCol ) ) )+
                    {
                    // InternalSQLParser.g:4201:4: ()
                    // InternalSQLParser.g:4202:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getPivotColsAccess().getPvcsEntriesAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalSQLParser.g:4211:4: (otherlv_2= Comma ( (lv_entries_3_0= rulePivotCol ) ) )+
                    int cnt72=0;
                    loop72:
                    do {
                        int alt72=2;
                        int LA72_0 = input.LA(1);

                        if ( (LA72_0==Comma) ) {
                            alt72=1;
                        }


                        switch (alt72) {
                    	case 1 :
                    	    // InternalSQLParser.g:4212:5: otherlv_2= Comma ( (lv_entries_3_0= rulePivotCol ) )
                    	    {
                    	    otherlv_2=(Token)match(input,Comma,FOLLOW_23); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_2, grammarAccess.getPivotColsAccess().getCommaKeyword_1_1_0());
                    	      				
                    	    }
                    	    // InternalSQLParser.g:4216:5: ( (lv_entries_3_0= rulePivotCol ) )
                    	    // InternalSQLParser.g:4217:6: (lv_entries_3_0= rulePivotCol )
                    	    {
                    	    // InternalSQLParser.g:4217:6: (lv_entries_3_0= rulePivotCol )
                    	    // InternalSQLParser.g:4218:7: lv_entries_3_0= rulePivotCol
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getPivotColsAccess().getEntriesPivotColParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_11);
                    	    lv_entries_3_0=rulePivotCol();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getPivotColsRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"entries",
                    	      								lv_entries_3_0,
                    	      								"org.xtext.example.mydsl_sql.SQL.PivotCol");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt72 >= 1 ) break loop72;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(72, input);
                                throw eee;
                        }
                        cnt72++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePivotCols"


    // $ANTLR start "entryRulePivotCol"
    // InternalSQLParser.g:4241:1: entryRulePivotCol returns [EObject current=null] : iv_rulePivotCol= rulePivotCol EOF ;
    public final EObject entryRulePivotCol() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePivotCol = null;


        try {
            // InternalSQLParser.g:4241:49: (iv_rulePivotCol= rulePivotCol EOF )
            // InternalSQLParser.g:4242:2: iv_rulePivotCol= rulePivotCol EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPivotColRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePivotCol=rulePivotCol();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePivotCol; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePivotCol"


    // $ANTLR start "rulePivotCol"
    // InternalSQLParser.g:4248:1: rulePivotCol returns [EObject current=null] : (this_DbObjectName_0= ruleDbObjectName ( () (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )? ) ;
    public final EObject rulePivotCol() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_DbObjectName_0 = null;

        EObject lv_entries_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:4254:2: ( (this_DbObjectName_0= ruleDbObjectName ( () (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )? ) )
            // InternalSQLParser.g:4255:2: (this_DbObjectName_0= ruleDbObjectName ( () (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )? )
            {
            // InternalSQLParser.g:4255:2: (this_DbObjectName_0= ruleDbObjectName ( () (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )? )
            // InternalSQLParser.g:4256:3: this_DbObjectName_0= ruleDbObjectName ( () (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )?
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getPivotColAccess().getDbObjectNameParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_52);
            this_DbObjectName_0=ruleDbObjectName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_DbObjectName_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:4267:3: ( () (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )?
            int alt75=2;
            int LA75_0 = input.LA(1);

            if ( (LA75_0==FullStop) ) {
                alt75=1;
            }
            switch (alt75) {
                case 1 :
                    // InternalSQLParser.g:4268:4: () (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+
                    {
                    // InternalSQLParser.g:4268:4: ()
                    // InternalSQLParser.g:4269:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getPivotColAccess().getPcolsEntriesAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalSQLParser.g:4278:4: (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+
                    int cnt74=0;
                    loop74:
                    do {
                        int alt74=2;
                        int LA74_0 = input.LA(1);

                        if ( (LA74_0==FullStop) ) {
                            alt74=1;
                        }


                        switch (alt74) {
                    	case 1 :
                    	    // InternalSQLParser.g:4279:5: otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) )
                    	    {
                    	    otherlv_2=(Token)match(input,FullStop,FOLLOW_23); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_2, grammarAccess.getPivotColAccess().getFullStopKeyword_1_1_0());
                    	      				
                    	    }
                    	    // InternalSQLParser.g:4283:5: ( (lv_entries_3_0= ruleDbObjectName ) )
                    	    // InternalSQLParser.g:4284:6: (lv_entries_3_0= ruleDbObjectName )
                    	    {
                    	    // InternalSQLParser.g:4284:6: (lv_entries_3_0= ruleDbObjectName )
                    	    // InternalSQLParser.g:4285:7: lv_entries_3_0= ruleDbObjectName
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getPivotColAccess().getEntriesDbObjectNameParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_52);
                    	    lv_entries_3_0=ruleDbObjectName();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getPivotColRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"entries",
                    	      								lv_entries_3_0,
                    	      								"org.xtext.example.mydsl_sql.SQL.DbObjectName");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt74 >= 1 ) break loop74;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(74, input);
                                throw eee;
                        }
                        cnt74++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePivotCol"


    // $ANTLR start "entryRuleTableFull"
    // InternalSQLParser.g:4308:1: entryRuleTableFull returns [EObject current=null] : iv_ruleTableFull= ruleTableFull EOF ;
    public final EObject entryRuleTableFull() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTableFull = null;


        try {
            // InternalSQLParser.g:4308:50: (iv_ruleTableFull= ruleTableFull EOF )
            // InternalSQLParser.g:4309:2: iv_ruleTableFull= ruleTableFull EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTableFullRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTableFull=ruleTableFull();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTableFull; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTableFull"


    // $ANTLR start "ruleTableFull"
    // InternalSQLParser.g:4315:1: ruleTableFull returns [EObject current=null] : (this_DbObjectName_0= ruleDbObjectName ( () (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )? ) ;
    public final EObject ruleTableFull() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_DbObjectName_0 = null;

        EObject lv_entries_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:4321:2: ( (this_DbObjectName_0= ruleDbObjectName ( () (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )? ) )
            // InternalSQLParser.g:4322:2: (this_DbObjectName_0= ruleDbObjectName ( () (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )? )
            {
            // InternalSQLParser.g:4322:2: (this_DbObjectName_0= ruleDbObjectName ( () (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )? )
            // InternalSQLParser.g:4323:3: this_DbObjectName_0= ruleDbObjectName ( () (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )?
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getTableFullAccess().getDbObjectNameParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_52);
            this_DbObjectName_0=ruleDbObjectName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_DbObjectName_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:4334:3: ( () (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )?
            int alt77=2;
            int LA77_0 = input.LA(1);

            if ( (LA77_0==FullStop) ) {
                alt77=1;
            }
            switch (alt77) {
                case 1 :
                    // InternalSQLParser.g:4335:4: () (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+
                    {
                    // InternalSQLParser.g:4335:4: ()
                    // InternalSQLParser.g:4336:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getTableFullAccess().getTblsEntriesAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalSQLParser.g:4345:4: (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+
                    int cnt76=0;
                    loop76:
                    do {
                        int alt76=2;
                        int LA76_0 = input.LA(1);

                        if ( (LA76_0==FullStop) ) {
                            alt76=1;
                        }


                        switch (alt76) {
                    	case 1 :
                    	    // InternalSQLParser.g:4346:5: otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) )
                    	    {
                    	    otherlv_2=(Token)match(input,FullStop,FOLLOW_23); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_2, grammarAccess.getTableFullAccess().getFullStopKeyword_1_1_0());
                    	      				
                    	    }
                    	    // InternalSQLParser.g:4350:5: ( (lv_entries_3_0= ruleDbObjectName ) )
                    	    // InternalSQLParser.g:4351:6: (lv_entries_3_0= ruleDbObjectName )
                    	    {
                    	    // InternalSQLParser.g:4351:6: (lv_entries_3_0= ruleDbObjectName )
                    	    // InternalSQLParser.g:4352:7: lv_entries_3_0= ruleDbObjectName
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getTableFullAccess().getEntriesDbObjectNameParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_52);
                    	    lv_entries_3_0=ruleDbObjectName();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getTableFullRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"entries",
                    	      								lv_entries_3_0,
                    	      								"org.xtext.example.mydsl_sql.SQL.DbObjectName");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt76 >= 1 ) break loop76;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(76, input);
                                throw eee;
                        }
                        cnt76++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTableFull"


    // $ANTLR start "entryRuleDbObjectNameAll"
    // InternalSQLParser.g:4375:1: entryRuleDbObjectNameAll returns [EObject current=null] : iv_ruleDbObjectNameAll= ruleDbObjectNameAll EOF ;
    public final EObject entryRuleDbObjectNameAll() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleDbObjectNameAll = null;


        try {
            // InternalSQLParser.g:4375:56: (iv_ruleDbObjectNameAll= ruleDbObjectNameAll EOF )
            // InternalSQLParser.g:4376:2: iv_ruleDbObjectNameAll= ruleDbObjectNameAll EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDbObjectNameAllRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDbObjectNameAll=ruleDbObjectNameAll();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDbObjectNameAll; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleDbObjectNameAll"


    // $ANTLR start "ruleDbObjectNameAll"
    // InternalSQLParser.g:4382:1: ruleDbObjectNameAll returns [EObject current=null] : ( ( (lv_dbname_0_0= ruleDBID ) ) otherlv_1= FullStop this_STAR_2= RULE_STAR ) ;
    public final EObject ruleDbObjectNameAll() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token this_STAR_2=null;
        AntlrDatatypeRuleToken lv_dbname_0_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:4388:2: ( ( ( (lv_dbname_0_0= ruleDBID ) ) otherlv_1= FullStop this_STAR_2= RULE_STAR ) )
            // InternalSQLParser.g:4389:2: ( ( (lv_dbname_0_0= ruleDBID ) ) otherlv_1= FullStop this_STAR_2= RULE_STAR )
            {
            // InternalSQLParser.g:4389:2: ( ( (lv_dbname_0_0= ruleDBID ) ) otherlv_1= FullStop this_STAR_2= RULE_STAR )
            // InternalSQLParser.g:4390:3: ( (lv_dbname_0_0= ruleDBID ) ) otherlv_1= FullStop this_STAR_2= RULE_STAR
            {
            // InternalSQLParser.g:4390:3: ( (lv_dbname_0_0= ruleDBID ) )
            // InternalSQLParser.g:4391:4: (lv_dbname_0_0= ruleDBID )
            {
            // InternalSQLParser.g:4391:4: (lv_dbname_0_0= ruleDBID )
            // InternalSQLParser.g:4392:5: lv_dbname_0_0= ruleDBID
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getDbObjectNameAllAccess().getDbnameDBIDParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_68);
            lv_dbname_0_0=ruleDBID();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getDbObjectNameAllRule());
              					}
              					set(
              						current,
              						"dbname",
              						lv_dbname_0_0,
              						"org.xtext.example.mydsl_sql.SQL.DBID");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_1=(Token)match(input,FullStop,FOLLOW_69); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getDbObjectNameAllAccess().getFullStopKeyword_1());
              		
            }
            this_STAR_2=(Token)match(input,RULE_STAR,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(this_STAR_2, grammarAccess.getDbObjectNameAllAccess().getSTARTerminalRuleCall_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleDbObjectNameAll"


    // $ANTLR start "entryRuleDbObjectName"
    // InternalSQLParser.g:4421:1: entryRuleDbObjectName returns [EObject current=null] : iv_ruleDbObjectName= ruleDbObjectName EOF ;
    public final EObject entryRuleDbObjectName() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleDbObjectName = null;


        try {
            // InternalSQLParser.g:4421:53: (iv_ruleDbObjectName= ruleDbObjectName EOF )
            // InternalSQLParser.g:4422:2: iv_ruleDbObjectName= ruleDbObjectName EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDbObjectNameRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDbObjectName=ruleDbObjectName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDbObjectName; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleDbObjectName"


    // $ANTLR start "ruleDbObjectName"
    // InternalSQLParser.g:4428:1: ruleDbObjectName returns [EObject current=null] : ( (lv_dbname_0_0= ruleDBID ) ) ;
    public final EObject ruleDbObjectName() throws RecognitionException {
        EObject current = null;

        AntlrDatatypeRuleToken lv_dbname_0_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:4434:2: ( ( (lv_dbname_0_0= ruleDBID ) ) )
            // InternalSQLParser.g:4435:2: ( (lv_dbname_0_0= ruleDBID ) )
            {
            // InternalSQLParser.g:4435:2: ( (lv_dbname_0_0= ruleDBID ) )
            // InternalSQLParser.g:4436:3: (lv_dbname_0_0= ruleDBID )
            {
            // InternalSQLParser.g:4436:3: (lv_dbname_0_0= ruleDBID )
            // InternalSQLParser.g:4437:4: lv_dbname_0_0= ruleDBID
            {
            if ( state.backtracking==0 ) {

              				newCompositeNode(grammarAccess.getDbObjectNameAccess().getDbnameDBIDParserRuleCall_0());
              			
            }
            pushFollow(FOLLOW_2);
            lv_dbname_0_0=ruleDBID();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getDbObjectNameRule());
              				}
              				set(
              					current,
              					"dbname",
              					lv_dbname_0_0,
              					"org.xtext.example.mydsl_sql.SQL.DBID");
              				afterParserOrEnumRuleCall();
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleDbObjectName"


    // $ANTLR start "entryRuleOrderByColumns"
    // InternalSQLParser.g:4457:1: entryRuleOrderByColumns returns [EObject current=null] : iv_ruleOrderByColumns= ruleOrderByColumns EOF ;
    public final EObject entryRuleOrderByColumns() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOrderByColumns = null;


        try {
            // InternalSQLParser.g:4457:55: (iv_ruleOrderByColumns= ruleOrderByColumns EOF )
            // InternalSQLParser.g:4458:2: iv_ruleOrderByColumns= ruleOrderByColumns EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOrderByColumnsRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOrderByColumns=ruleOrderByColumns();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOrderByColumns; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOrderByColumns"


    // $ANTLR start "ruleOrderByColumns"
    // InternalSQLParser.g:4464:1: ruleOrderByColumns returns [EObject current=null] : (this_OrderByColumnFull_0= ruleOrderByColumnFull ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleOrderByColumnFull ) ) )+ )? ) ;
    public final EObject ruleOrderByColumns() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_OrderByColumnFull_0 = null;

        EObject lv_entries_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:4470:2: ( (this_OrderByColumnFull_0= ruleOrderByColumnFull ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleOrderByColumnFull ) ) )+ )? ) )
            // InternalSQLParser.g:4471:2: (this_OrderByColumnFull_0= ruleOrderByColumnFull ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleOrderByColumnFull ) ) )+ )? )
            {
            // InternalSQLParser.g:4471:2: (this_OrderByColumnFull_0= ruleOrderByColumnFull ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleOrderByColumnFull ) ) )+ )? )
            // InternalSQLParser.g:4472:3: this_OrderByColumnFull_0= ruleOrderByColumnFull ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleOrderByColumnFull ) ) )+ )?
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getOrderByColumnsAccess().getOrderByColumnFullParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_11);
            this_OrderByColumnFull_0=ruleOrderByColumnFull();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_OrderByColumnFull_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:4483:3: ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleOrderByColumnFull ) ) )+ )?
            int alt79=2;
            int LA79_0 = input.LA(1);

            if ( (LA79_0==Comma) ) {
                alt79=1;
            }
            switch (alt79) {
                case 1 :
                    // InternalSQLParser.g:4484:4: () (otherlv_2= Comma ( (lv_entries_3_0= ruleOrderByColumnFull ) ) )+
                    {
                    // InternalSQLParser.g:4484:4: ()
                    // InternalSQLParser.g:4485:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getOrderByColumnsAccess().getOrOrderByColumnEntriesAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalSQLParser.g:4494:4: (otherlv_2= Comma ( (lv_entries_3_0= ruleOrderByColumnFull ) ) )+
                    int cnt78=0;
                    loop78:
                    do {
                        int alt78=2;
                        int LA78_0 = input.LA(1);

                        if ( (LA78_0==Comma) ) {
                            alt78=1;
                        }


                        switch (alt78) {
                    	case 1 :
                    	    // InternalSQLParser.g:4495:5: otherlv_2= Comma ( (lv_entries_3_0= ruleOrderByColumnFull ) )
                    	    {
                    	    otherlv_2=(Token)match(input,Comma,FOLLOW_42); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_2, grammarAccess.getOrderByColumnsAccess().getCommaKeyword_1_1_0());
                    	      				
                    	    }
                    	    // InternalSQLParser.g:4499:5: ( (lv_entries_3_0= ruleOrderByColumnFull ) )
                    	    // InternalSQLParser.g:4500:6: (lv_entries_3_0= ruleOrderByColumnFull )
                    	    {
                    	    // InternalSQLParser.g:4500:6: (lv_entries_3_0= ruleOrderByColumnFull )
                    	    // InternalSQLParser.g:4501:7: lv_entries_3_0= ruleOrderByColumnFull
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getOrderByColumnsAccess().getEntriesOrderByColumnFullParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_11);
                    	    lv_entries_3_0=ruleOrderByColumnFull();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getOrderByColumnsRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"entries",
                    	      								lv_entries_3_0,
                    	      								"org.xtext.example.mydsl_sql.SQL.OrderByColumnFull");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt78 >= 1 ) break loop78;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(78, input);
                                throw eee;
                        }
                        cnt78++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOrderByColumns"


    // $ANTLR start "entryRuleOrderByColumnFull"
    // InternalSQLParser.g:4524:1: entryRuleOrderByColumnFull returns [EObject current=null] : iv_ruleOrderByColumnFull= ruleOrderByColumnFull EOF ;
    public final EObject entryRuleOrderByColumnFull() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOrderByColumnFull = null;


        try {
            // InternalSQLParser.g:4524:58: (iv_ruleOrderByColumnFull= ruleOrderByColumnFull EOF )
            // InternalSQLParser.g:4525:2: iv_ruleOrderByColumnFull= ruleOrderByColumnFull EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOrderByColumnFullRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOrderByColumnFull=ruleOrderByColumnFull();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOrderByColumnFull; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOrderByColumnFull"


    // $ANTLR start "ruleOrderByColumnFull"
    // InternalSQLParser.g:4531:1: ruleOrderByColumnFull returns [EObject current=null] : ( ( ( (lv_colOrder_0_0= ruleColumnFull ) ) | ( (lv_colOrderInt_1_0= RULE_UNSIGNED ) ) ) ( ( (lv_direction_2_1= ASC | lv_direction_2_2= DESC ) ) )? ) ;
    public final EObject ruleOrderByColumnFull() throws RecognitionException {
        EObject current = null;

        Token lv_colOrderInt_1_0=null;
        Token lv_direction_2_1=null;
        Token lv_direction_2_2=null;
        EObject lv_colOrder_0_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:4537:2: ( ( ( ( (lv_colOrder_0_0= ruleColumnFull ) ) | ( (lv_colOrderInt_1_0= RULE_UNSIGNED ) ) ) ( ( (lv_direction_2_1= ASC | lv_direction_2_2= DESC ) ) )? ) )
            // InternalSQLParser.g:4538:2: ( ( ( (lv_colOrder_0_0= ruleColumnFull ) ) | ( (lv_colOrderInt_1_0= RULE_UNSIGNED ) ) ) ( ( (lv_direction_2_1= ASC | lv_direction_2_2= DESC ) ) )? )
            {
            // InternalSQLParser.g:4538:2: ( ( ( (lv_colOrder_0_0= ruleColumnFull ) ) | ( (lv_colOrderInt_1_0= RULE_UNSIGNED ) ) ) ( ( (lv_direction_2_1= ASC | lv_direction_2_2= DESC ) ) )? )
            // InternalSQLParser.g:4539:3: ( ( (lv_colOrder_0_0= ruleColumnFull ) ) | ( (lv_colOrderInt_1_0= RULE_UNSIGNED ) ) ) ( ( (lv_direction_2_1= ASC | lv_direction_2_2= DESC ) ) )?
            {
            // InternalSQLParser.g:4539:3: ( ( (lv_colOrder_0_0= ruleColumnFull ) ) | ( (lv_colOrderInt_1_0= RULE_UNSIGNED ) ) )
            int alt80=2;
            int LA80_0 = input.LA(1);

            if ( ((LA80_0>=RULE_STRING && LA80_0<=RULE_ID)) ) {
                alt80=1;
            }
            else if ( (LA80_0==RULE_UNSIGNED) ) {
                alt80=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 80, 0, input);

                throw nvae;
            }
            switch (alt80) {
                case 1 :
                    // InternalSQLParser.g:4540:4: ( (lv_colOrder_0_0= ruleColumnFull ) )
                    {
                    // InternalSQLParser.g:4540:4: ( (lv_colOrder_0_0= ruleColumnFull ) )
                    // InternalSQLParser.g:4541:5: (lv_colOrder_0_0= ruleColumnFull )
                    {
                    // InternalSQLParser.g:4541:5: (lv_colOrder_0_0= ruleColumnFull )
                    // InternalSQLParser.g:4542:6: lv_colOrder_0_0= ruleColumnFull
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getOrderByColumnFullAccess().getColOrderColumnFullParserRuleCall_0_0_0());
                      					
                    }
                    pushFollow(FOLLOW_70);
                    lv_colOrder_0_0=ruleColumnFull();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getOrderByColumnFullRule());
                      						}
                      						set(
                      							current,
                      							"colOrder",
                      							lv_colOrder_0_0,
                      							"org.xtext.example.mydsl_sql.SQL.ColumnFull");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:4560:4: ( (lv_colOrderInt_1_0= RULE_UNSIGNED ) )
                    {
                    // InternalSQLParser.g:4560:4: ( (lv_colOrderInt_1_0= RULE_UNSIGNED ) )
                    // InternalSQLParser.g:4561:5: (lv_colOrderInt_1_0= RULE_UNSIGNED )
                    {
                    // InternalSQLParser.g:4561:5: (lv_colOrderInt_1_0= RULE_UNSIGNED )
                    // InternalSQLParser.g:4562:6: lv_colOrderInt_1_0= RULE_UNSIGNED
                    {
                    lv_colOrderInt_1_0=(Token)match(input,RULE_UNSIGNED,FOLLOW_70); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_colOrderInt_1_0, grammarAccess.getOrderByColumnFullAccess().getColOrderIntUNSIGNEDTerminalRuleCall_0_1_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getOrderByColumnFullRule());
                      						}
                      						setWithLastConsumed(
                      							current,
                      							"colOrderInt",
                      							lv_colOrderInt_1_0,
                      							"org.xtext.example.mydsl_sql.SQL.UNSIGNED");
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            // InternalSQLParser.g:4579:3: ( ( (lv_direction_2_1= ASC | lv_direction_2_2= DESC ) ) )?
            int alt82=2;
            int LA82_0 = input.LA(1);

            if ( (LA82_0==DESC||LA82_0==ASC) ) {
                alt82=1;
            }
            switch (alt82) {
                case 1 :
                    // InternalSQLParser.g:4580:4: ( (lv_direction_2_1= ASC | lv_direction_2_2= DESC ) )
                    {
                    // InternalSQLParser.g:4580:4: ( (lv_direction_2_1= ASC | lv_direction_2_2= DESC ) )
                    // InternalSQLParser.g:4581:5: (lv_direction_2_1= ASC | lv_direction_2_2= DESC )
                    {
                    // InternalSQLParser.g:4581:5: (lv_direction_2_1= ASC | lv_direction_2_2= DESC )
                    int alt81=2;
                    int LA81_0 = input.LA(1);

                    if ( (LA81_0==ASC) ) {
                        alt81=1;
                    }
                    else if ( (LA81_0==DESC) ) {
                        alt81=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 81, 0, input);

                        throw nvae;
                    }
                    switch (alt81) {
                        case 1 :
                            // InternalSQLParser.g:4582:6: lv_direction_2_1= ASC
                            {
                            lv_direction_2_1=(Token)match(input,ASC,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(lv_direction_2_1, grammarAccess.getOrderByColumnFullAccess().getDirectionASCKeyword_1_0_0());
                              					
                            }
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getOrderByColumnFullRule());
                              						}
                              						setWithLastConsumed(current, "direction", lv_direction_2_1, null);
                              					
                            }

                            }
                            break;
                        case 2 :
                            // InternalSQLParser.g:4593:6: lv_direction_2_2= DESC
                            {
                            lv_direction_2_2=(Token)match(input,DESC,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(lv_direction_2_2, grammarAccess.getOrderByColumnFullAccess().getDirectionDESCKeyword_1_0_1());
                              					
                            }
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getOrderByColumnFullRule());
                              						}
                              						setWithLastConsumed(current, "direction", lv_direction_2_2, null);
                              					
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOrderByColumnFull"


    // $ANTLR start "entryRuleGroupByColumns"
    // InternalSQLParser.g:4610:1: entryRuleGroupByColumns returns [EObject current=null] : iv_ruleGroupByColumns= ruleGroupByColumns EOF ;
    public final EObject entryRuleGroupByColumns() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleGroupByColumns = null;


        try {
            // InternalSQLParser.g:4610:55: (iv_ruleGroupByColumns= ruleGroupByColumns EOF )
            // InternalSQLParser.g:4611:2: iv_ruleGroupByColumns= ruleGroupByColumns EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getGroupByColumnsRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleGroupByColumns=ruleGroupByColumns();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleGroupByColumns; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleGroupByColumns"


    // $ANTLR start "ruleGroupByColumns"
    // InternalSQLParser.g:4617:1: ruleGroupByColumns returns [EObject current=null] : (this_GroupByColumnFull_0= ruleGroupByColumnFull ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleGroupByColumnFull ) ) )+ )? ) ;
    public final EObject ruleGroupByColumns() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_GroupByColumnFull_0 = null;

        EObject lv_entries_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:4623:2: ( (this_GroupByColumnFull_0= ruleGroupByColumnFull ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleGroupByColumnFull ) ) )+ )? ) )
            // InternalSQLParser.g:4624:2: (this_GroupByColumnFull_0= ruleGroupByColumnFull ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleGroupByColumnFull ) ) )+ )? )
            {
            // InternalSQLParser.g:4624:2: (this_GroupByColumnFull_0= ruleGroupByColumnFull ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleGroupByColumnFull ) ) )+ )? )
            // InternalSQLParser.g:4625:3: this_GroupByColumnFull_0= ruleGroupByColumnFull ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleGroupByColumnFull ) ) )+ )?
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getGroupByColumnsAccess().getGroupByColumnFullParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_11);
            this_GroupByColumnFull_0=ruleGroupByColumnFull();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_GroupByColumnFull_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:4636:3: ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleGroupByColumnFull ) ) )+ )?
            int alt84=2;
            int LA84_0 = input.LA(1);

            if ( (LA84_0==Comma) ) {
                alt84=1;
            }
            switch (alt84) {
                case 1 :
                    // InternalSQLParser.g:4637:4: () (otherlv_2= Comma ( (lv_entries_3_0= ruleGroupByColumnFull ) ) )+
                    {
                    // InternalSQLParser.g:4637:4: ()
                    // InternalSQLParser.g:4638:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getGroupByColumnsAccess().getOrGroupByColumnEntriesAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalSQLParser.g:4647:4: (otherlv_2= Comma ( (lv_entries_3_0= ruleGroupByColumnFull ) ) )+
                    int cnt83=0;
                    loop83:
                    do {
                        int alt83=2;
                        int LA83_0 = input.LA(1);

                        if ( (LA83_0==Comma) ) {
                            alt83=1;
                        }


                        switch (alt83) {
                    	case 1 :
                    	    // InternalSQLParser.g:4648:5: otherlv_2= Comma ( (lv_entries_3_0= ruleGroupByColumnFull ) )
                    	    {
                    	    otherlv_2=(Token)match(input,Comma,FOLLOW_42); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_2, grammarAccess.getGroupByColumnsAccess().getCommaKeyword_1_1_0());
                    	      				
                    	    }
                    	    // InternalSQLParser.g:4652:5: ( (lv_entries_3_0= ruleGroupByColumnFull ) )
                    	    // InternalSQLParser.g:4653:6: (lv_entries_3_0= ruleGroupByColumnFull )
                    	    {
                    	    // InternalSQLParser.g:4653:6: (lv_entries_3_0= ruleGroupByColumnFull )
                    	    // InternalSQLParser.g:4654:7: lv_entries_3_0= ruleGroupByColumnFull
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getGroupByColumnsAccess().getEntriesGroupByColumnFullParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_11);
                    	    lv_entries_3_0=ruleGroupByColumnFull();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getGroupByColumnsRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"entries",
                    	      								lv_entries_3_0,
                    	      								"org.xtext.example.mydsl_sql.SQL.GroupByColumnFull");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt83 >= 1 ) break loop83;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(83, input);
                                throw eee;
                        }
                        cnt83++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleGroupByColumns"


    // $ANTLR start "entryRuleGroupByColumnFull"
    // InternalSQLParser.g:4677:1: entryRuleGroupByColumnFull returns [EObject current=null] : iv_ruleGroupByColumnFull= ruleGroupByColumnFull EOF ;
    public final EObject entryRuleGroupByColumnFull() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleGroupByColumnFull = null;


        try {
            // InternalSQLParser.g:4677:58: (iv_ruleGroupByColumnFull= ruleGroupByColumnFull EOF )
            // InternalSQLParser.g:4678:2: iv_ruleGroupByColumnFull= ruleGroupByColumnFull EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getGroupByColumnFullRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleGroupByColumnFull=ruleGroupByColumnFull();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleGroupByColumnFull; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleGroupByColumnFull"


    // $ANTLR start "ruleGroupByColumnFull"
    // InternalSQLParser.g:4684:1: ruleGroupByColumnFull returns [EObject current=null] : ( ( (lv_colGrBy_0_0= ruleColumnFull ) ) | ( (lv_gbFunction_1_0= ruleOperandFunction ) ) | ( (lv_grByInt_2_0= RULE_UNSIGNED ) ) ) ;
    public final EObject ruleGroupByColumnFull() throws RecognitionException {
        EObject current = null;

        Token lv_grByInt_2_0=null;
        EObject lv_colGrBy_0_0 = null;

        EObject lv_gbFunction_1_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:4690:2: ( ( ( (lv_colGrBy_0_0= ruleColumnFull ) ) | ( (lv_gbFunction_1_0= ruleOperandFunction ) ) | ( (lv_grByInt_2_0= RULE_UNSIGNED ) ) ) )
            // InternalSQLParser.g:4691:2: ( ( (lv_colGrBy_0_0= ruleColumnFull ) ) | ( (lv_gbFunction_1_0= ruleOperandFunction ) ) | ( (lv_grByInt_2_0= RULE_UNSIGNED ) ) )
            {
            // InternalSQLParser.g:4691:2: ( ( (lv_colGrBy_0_0= ruleColumnFull ) ) | ( (lv_gbFunction_1_0= ruleOperandFunction ) ) | ( (lv_grByInt_2_0= RULE_UNSIGNED ) ) )
            int alt85=3;
            switch ( input.LA(1) ) {
            case RULE_ID:
                {
                int LA85_1 = input.LA(2);

                if ( (LA85_1==LeftParenthesis) ) {
                    alt85=2;
                }
                else if ( (LA85_1==EOF||LA85_1==INTERSECT||LA85_1==EXCEPT||LA85_1==HAVING||LA85_1==OFFSET||LA85_1==FETCH||(LA85_1>=LIMIT && LA85_1<=MINUS)||LA85_1==ORDER||LA85_1==UNION||LA85_1==RightParenthesis||LA85_1==Comma||LA85_1==FullStop) ) {
                    alt85=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 85, 1, input);

                    throw nvae;
                }
                }
                break;
            case RULE_STRING:
            case RULE_DBNAME:
                {
                alt85=1;
                }
                break;
            case RULE_UNSIGNED:
                {
                alt85=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 85, 0, input);

                throw nvae;
            }

            switch (alt85) {
                case 1 :
                    // InternalSQLParser.g:4692:3: ( (lv_colGrBy_0_0= ruleColumnFull ) )
                    {
                    // InternalSQLParser.g:4692:3: ( (lv_colGrBy_0_0= ruleColumnFull ) )
                    // InternalSQLParser.g:4693:4: (lv_colGrBy_0_0= ruleColumnFull )
                    {
                    // InternalSQLParser.g:4693:4: (lv_colGrBy_0_0= ruleColumnFull )
                    // InternalSQLParser.g:4694:5: lv_colGrBy_0_0= ruleColumnFull
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getGroupByColumnFullAccess().getColGrByColumnFullParserRuleCall_0_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_colGrBy_0_0=ruleColumnFull();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getGroupByColumnFullRule());
                      					}
                      					set(
                      						current,
                      						"colGrBy",
                      						lv_colGrBy_0_0,
                      						"org.xtext.example.mydsl_sql.SQL.ColumnFull");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:4712:3: ( (lv_gbFunction_1_0= ruleOperandFunction ) )
                    {
                    // InternalSQLParser.g:4712:3: ( (lv_gbFunction_1_0= ruleOperandFunction ) )
                    // InternalSQLParser.g:4713:4: (lv_gbFunction_1_0= ruleOperandFunction )
                    {
                    // InternalSQLParser.g:4713:4: (lv_gbFunction_1_0= ruleOperandFunction )
                    // InternalSQLParser.g:4714:5: lv_gbFunction_1_0= ruleOperandFunction
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getGroupByColumnFullAccess().getGbFunctionOperandFunctionParserRuleCall_1_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_gbFunction_1_0=ruleOperandFunction();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getGroupByColumnFullRule());
                      					}
                      					set(
                      						current,
                      						"gbFunction",
                      						lv_gbFunction_1_0,
                      						"org.xtext.example.mydsl_sql.SQL.OperandFunction");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:4732:3: ( (lv_grByInt_2_0= RULE_UNSIGNED ) )
                    {
                    // InternalSQLParser.g:4732:3: ( (lv_grByInt_2_0= RULE_UNSIGNED ) )
                    // InternalSQLParser.g:4733:4: (lv_grByInt_2_0= RULE_UNSIGNED )
                    {
                    // InternalSQLParser.g:4733:4: (lv_grByInt_2_0= RULE_UNSIGNED )
                    // InternalSQLParser.g:4734:5: lv_grByInt_2_0= RULE_UNSIGNED
                    {
                    lv_grByInt_2_0=(Token)match(input,RULE_UNSIGNED,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_grByInt_2_0, grammarAccess.getGroupByColumnFullAccess().getGrByIntUNSIGNEDTerminalRuleCall_2_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getGroupByColumnFullRule());
                      					}
                      					setWithLastConsumed(
                      						current,
                      						"grByInt",
                      						lv_grByInt_2_0,
                      						"org.xtext.example.mydsl_sql.SQL.UNSIGNED");
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleGroupByColumnFull"


    // $ANTLR start "entryRuleFullExpression"
    // InternalSQLParser.g:4754:1: entryRuleFullExpression returns [EObject current=null] : iv_ruleFullExpression= ruleFullExpression EOF ;
    public final EObject entryRuleFullExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFullExpression = null;


        try {
            // InternalSQLParser.g:4754:55: (iv_ruleFullExpression= ruleFullExpression EOF )
            // InternalSQLParser.g:4755:2: iv_ruleFullExpression= ruleFullExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFullExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFullExpression=ruleFullExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFullExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFullExpression"


    // $ANTLR start "ruleFullExpression"
    // InternalSQLParser.g:4761:1: ruleFullExpression returns [EObject current=null] : (this_ExpressionFragment_0= ruleExpressionFragment ( () ( (lv_entries_2_0= ruleExpressionFragmentSecond ) )+ )? ) ;
    public final EObject ruleFullExpression() throws RecognitionException {
        EObject current = null;

        EObject this_ExpressionFragment_0 = null;

        EObject lv_entries_2_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:4767:2: ( (this_ExpressionFragment_0= ruleExpressionFragment ( () ( (lv_entries_2_0= ruleExpressionFragmentSecond ) )+ )? ) )
            // InternalSQLParser.g:4768:2: (this_ExpressionFragment_0= ruleExpressionFragment ( () ( (lv_entries_2_0= ruleExpressionFragmentSecond ) )+ )? )
            {
            // InternalSQLParser.g:4768:2: (this_ExpressionFragment_0= ruleExpressionFragment ( () ( (lv_entries_2_0= ruleExpressionFragmentSecond ) )+ )? )
            // InternalSQLParser.g:4769:3: this_ExpressionFragment_0= ruleExpressionFragment ( () ( (lv_entries_2_0= ruleExpressionFragmentSecond ) )+ )?
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getFullExpressionAccess().getExpressionFragmentParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_71);
            this_ExpressionFragment_0=ruleExpressionFragment();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ExpressionFragment_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:4780:3: ( () ( (lv_entries_2_0= ruleExpressionFragmentSecond ) )+ )?
            int alt87=2;
            alt87 = dfa87.predict(input);
            switch (alt87) {
                case 1 :
                    // InternalSQLParser.g:4781:4: () ( (lv_entries_2_0= ruleExpressionFragmentSecond ) )+
                    {
                    // InternalSQLParser.g:4781:4: ()
                    // InternalSQLParser.g:4782:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getFullExpressionAccess().getOrExprEntriesAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalSQLParser.g:4791:4: ( (lv_entries_2_0= ruleExpressionFragmentSecond ) )+
                    int cnt86=0;
                    loop86:
                    do {
                        int alt86=2;
                        alt86 = dfa86.predict(input);
                        switch (alt86) {
                    	case 1 :
                    	    // InternalSQLParser.g:4792:5: (lv_entries_2_0= ruleExpressionFragmentSecond )
                    	    {
                    	    // InternalSQLParser.g:4792:5: (lv_entries_2_0= ruleExpressionFragmentSecond )
                    	    // InternalSQLParser.g:4793:6: lv_entries_2_0= ruleExpressionFragmentSecond
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      						newCompositeNode(grammarAccess.getFullExpressionAccess().getEntriesExpressionFragmentSecondParserRuleCall_1_1_0());
                    	      					
                    	    }
                    	    pushFollow(FOLLOW_71);
                    	    lv_entries_2_0=ruleExpressionFragmentSecond();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						if (current==null) {
                    	      							current = createModelElementForParent(grammarAccess.getFullExpressionRule());
                    	      						}
                    	      						add(
                    	      							current,
                    	      							"entries",
                    	      							lv_entries_2_0,
                    	      							"org.xtext.example.mydsl_sql.SQL.ExpressionFragmentSecond");
                    	      						afterParserOrEnumRuleCall();
                    	      					
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt86 >= 1 ) break loop86;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(86, input);
                                throw eee;
                        }
                        cnt86++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFullExpression"


    // $ANTLR start "entryRuleExpressionFragmentSecond"
    // InternalSQLParser.g:4815:1: entryRuleExpressionFragmentSecond returns [EObject current=null] : iv_ruleExpressionFragmentSecond= ruleExpressionFragmentSecond EOF ;
    public final EObject entryRuleExpressionFragmentSecond() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExpressionFragmentSecond = null;


        try {
            // InternalSQLParser.g:4815:65: (iv_ruleExpressionFragmentSecond= ruleExpressionFragmentSecond EOF )
            // InternalSQLParser.g:4816:2: iv_ruleExpressionFragmentSecond= ruleExpressionFragmentSecond EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExpressionFragmentSecondRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExpressionFragmentSecond=ruleExpressionFragmentSecond();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExpressionFragmentSecond; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleExpressionFragmentSecond"


    // $ANTLR start "ruleExpressionFragmentSecond"
    // InternalSQLParser.g:4822:1: ruleExpressionFragmentSecond returns [EObject current=null] : ( ( ( ( (lv_c_0_1= AND | lv_c_0_2= OR ) ) ) ( (lv_efrag_1_0= ruleExpressionFragment ) ) ) | ( (lv_notPrm_2_0= RULE_JRNPARAM ) ) ) ;
    public final EObject ruleExpressionFragmentSecond() throws RecognitionException {
        EObject current = null;

        Token lv_c_0_1=null;
        Token lv_c_0_2=null;
        Token lv_notPrm_2_0=null;
        EObject lv_efrag_1_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:4828:2: ( ( ( ( ( (lv_c_0_1= AND | lv_c_0_2= OR ) ) ) ( (lv_efrag_1_0= ruleExpressionFragment ) ) ) | ( (lv_notPrm_2_0= RULE_JRNPARAM ) ) ) )
            // InternalSQLParser.g:4829:2: ( ( ( ( (lv_c_0_1= AND | lv_c_0_2= OR ) ) ) ( (lv_efrag_1_0= ruleExpressionFragment ) ) ) | ( (lv_notPrm_2_0= RULE_JRNPARAM ) ) )
            {
            // InternalSQLParser.g:4829:2: ( ( ( ( (lv_c_0_1= AND | lv_c_0_2= OR ) ) ) ( (lv_efrag_1_0= ruleExpressionFragment ) ) ) | ( (lv_notPrm_2_0= RULE_JRNPARAM ) ) )
            int alt89=2;
            int LA89_0 = input.LA(1);

            if ( (LA89_0==AND||LA89_0==OR) ) {
                alt89=1;
            }
            else if ( (LA89_0==RULE_JRNPARAM) ) {
                alt89=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 89, 0, input);

                throw nvae;
            }
            switch (alt89) {
                case 1 :
                    // InternalSQLParser.g:4830:3: ( ( ( (lv_c_0_1= AND | lv_c_0_2= OR ) ) ) ( (lv_efrag_1_0= ruleExpressionFragment ) ) )
                    {
                    // InternalSQLParser.g:4830:3: ( ( ( (lv_c_0_1= AND | lv_c_0_2= OR ) ) ) ( (lv_efrag_1_0= ruleExpressionFragment ) ) )
                    // InternalSQLParser.g:4831:4: ( ( (lv_c_0_1= AND | lv_c_0_2= OR ) ) ) ( (lv_efrag_1_0= ruleExpressionFragment ) )
                    {
                    // InternalSQLParser.g:4831:4: ( ( (lv_c_0_1= AND | lv_c_0_2= OR ) ) )
                    // InternalSQLParser.g:4832:5: ( (lv_c_0_1= AND | lv_c_0_2= OR ) )
                    {
                    // InternalSQLParser.g:4832:5: ( (lv_c_0_1= AND | lv_c_0_2= OR ) )
                    // InternalSQLParser.g:4833:6: (lv_c_0_1= AND | lv_c_0_2= OR )
                    {
                    // InternalSQLParser.g:4833:6: (lv_c_0_1= AND | lv_c_0_2= OR )
                    int alt88=2;
                    int LA88_0 = input.LA(1);

                    if ( (LA88_0==AND) ) {
                        alt88=1;
                    }
                    else if ( (LA88_0==OR) ) {
                        alt88=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 88, 0, input);

                        throw nvae;
                    }
                    switch (alt88) {
                        case 1 :
                            // InternalSQLParser.g:4834:7: lv_c_0_1= AND
                            {
                            lv_c_0_1=(Token)match(input,AND,FOLLOW_39); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(lv_c_0_1, grammarAccess.getExpressionFragmentSecondAccess().getCANDKeyword_0_0_0_0());
                              						
                            }
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getExpressionFragmentSecondRule());
                              							}
                              							setWithLastConsumed(current, "c", lv_c_0_1, null);
                              						
                            }

                            }
                            break;
                        case 2 :
                            // InternalSQLParser.g:4845:7: lv_c_0_2= OR
                            {
                            lv_c_0_2=(Token)match(input,OR,FOLLOW_39); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(lv_c_0_2, grammarAccess.getExpressionFragmentSecondAccess().getCORKeyword_0_0_0_1());
                              						
                            }
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getExpressionFragmentSecondRule());
                              							}
                              							setWithLastConsumed(current, "c", lv_c_0_2, null);
                              						
                            }

                            }
                            break;

                    }


                    }


                    }

                    // InternalSQLParser.g:4858:4: ( (lv_efrag_1_0= ruleExpressionFragment ) )
                    // InternalSQLParser.g:4859:5: (lv_efrag_1_0= ruleExpressionFragment )
                    {
                    // InternalSQLParser.g:4859:5: (lv_efrag_1_0= ruleExpressionFragment )
                    // InternalSQLParser.g:4860:6: lv_efrag_1_0= ruleExpressionFragment
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getExpressionFragmentSecondAccess().getEfragExpressionFragmentParserRuleCall_0_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_efrag_1_0=ruleExpressionFragment();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExpressionFragmentSecondRule());
                      						}
                      						set(
                      							current,
                      							"efrag",
                      							lv_efrag_1_0,
                      							"org.xtext.example.mydsl_sql.SQL.ExpressionFragment");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:4879:3: ( (lv_notPrm_2_0= RULE_JRNPARAM ) )
                    {
                    // InternalSQLParser.g:4879:3: ( (lv_notPrm_2_0= RULE_JRNPARAM ) )
                    // InternalSQLParser.g:4880:4: (lv_notPrm_2_0= RULE_JRNPARAM )
                    {
                    // InternalSQLParser.g:4880:4: (lv_notPrm_2_0= RULE_JRNPARAM )
                    // InternalSQLParser.g:4881:5: lv_notPrm_2_0= RULE_JRNPARAM
                    {
                    lv_notPrm_2_0=(Token)match(input,RULE_JRNPARAM,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_notPrm_2_0, grammarAccess.getExpressionFragmentSecondAccess().getNotPrmJRNPARAMTerminalRuleCall_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getExpressionFragmentSecondRule());
                      					}
                      					setWithLastConsumed(
                      						current,
                      						"notPrm",
                      						lv_notPrm_2_0,
                      						"org.xtext.example.mydsl_sql.SQL.JRNPARAM");
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleExpressionFragmentSecond"


    // $ANTLR start "entryRuleExpressionFragment"
    // InternalSQLParser.g:4901:1: entryRuleExpressionFragment returns [EObject current=null] : iv_ruleExpressionFragment= ruleExpressionFragment EOF ;
    public final EObject entryRuleExpressionFragment() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExpressionFragment = null;


        try {
            // InternalSQLParser.g:4901:59: (iv_ruleExpressionFragment= ruleExpressionFragment EOF )
            // InternalSQLParser.g:4902:2: iv_ruleExpressionFragment= ruleExpressionFragment EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExpressionFragmentRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExpressionFragment=ruleExpressionFragment();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExpressionFragment; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleExpressionFragment"


    // $ANTLR start "ruleExpressionFragment"
    // InternalSQLParser.g:4908:1: ruleExpressionFragment returns [EObject current=null] : ( ( (lv_expgroup_0_0= ruleExpressionGroup ) ) | ( (lv_exp_1_0= ruleExpression ) ) | ( ( (lv_xexp_2_1= ruleXExpression | lv_xexp_2_2= ruleXExpression_ ) ) ) | ( (lv_notPrm_3_0= RULE_JRNPARAM ) ) | ( (lv_in_4_0= ruleInOperator ) ) | ( (lv_exists_5_0= ruleExistsOperator ) ) ) ;
    public final EObject ruleExpressionFragment() throws RecognitionException {
        EObject current = null;

        Token lv_notPrm_3_0=null;
        EObject lv_expgroup_0_0 = null;

        EObject lv_exp_1_0 = null;

        EObject lv_xexp_2_1 = null;

        EObject lv_xexp_2_2 = null;

        EObject lv_in_4_0 = null;

        EObject lv_exists_5_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:4914:2: ( ( ( (lv_expgroup_0_0= ruleExpressionGroup ) ) | ( (lv_exp_1_0= ruleExpression ) ) | ( ( (lv_xexp_2_1= ruleXExpression | lv_xexp_2_2= ruleXExpression_ ) ) ) | ( (lv_notPrm_3_0= RULE_JRNPARAM ) ) | ( (lv_in_4_0= ruleInOperator ) ) | ( (lv_exists_5_0= ruleExistsOperator ) ) ) )
            // InternalSQLParser.g:4915:2: ( ( (lv_expgroup_0_0= ruleExpressionGroup ) ) | ( (lv_exp_1_0= ruleExpression ) ) | ( ( (lv_xexp_2_1= ruleXExpression | lv_xexp_2_2= ruleXExpression_ ) ) ) | ( (lv_notPrm_3_0= RULE_JRNPARAM ) ) | ( (lv_in_4_0= ruleInOperator ) ) | ( (lv_exists_5_0= ruleExistsOperator ) ) )
            {
            // InternalSQLParser.g:4915:2: ( ( (lv_expgroup_0_0= ruleExpressionGroup ) ) | ( (lv_exp_1_0= ruleExpression ) ) | ( ( (lv_xexp_2_1= ruleXExpression | lv_xexp_2_2= ruleXExpression_ ) ) ) | ( (lv_notPrm_3_0= RULE_JRNPARAM ) ) | ( (lv_in_4_0= ruleInOperator ) ) | ( (lv_exists_5_0= ruleExistsOperator ) ) )
            int alt91=6;
            alt91 = dfa91.predict(input);
            switch (alt91) {
                case 1 :
                    // InternalSQLParser.g:4916:3: ( (lv_expgroup_0_0= ruleExpressionGroup ) )
                    {
                    // InternalSQLParser.g:4916:3: ( (lv_expgroup_0_0= ruleExpressionGroup ) )
                    // InternalSQLParser.g:4917:4: (lv_expgroup_0_0= ruleExpressionGroup )
                    {
                    // InternalSQLParser.g:4917:4: (lv_expgroup_0_0= ruleExpressionGroup )
                    // InternalSQLParser.g:4918:5: lv_expgroup_0_0= ruleExpressionGroup
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getExpressionFragmentAccess().getExpgroupExpressionGroupParserRuleCall_0_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_expgroup_0_0=ruleExpressionGroup();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getExpressionFragmentRule());
                      					}
                      					set(
                      						current,
                      						"expgroup",
                      						lv_expgroup_0_0,
                      						"org.xtext.example.mydsl_sql.SQL.ExpressionGroup");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:4936:3: ( (lv_exp_1_0= ruleExpression ) )
                    {
                    // InternalSQLParser.g:4936:3: ( (lv_exp_1_0= ruleExpression ) )
                    // InternalSQLParser.g:4937:4: (lv_exp_1_0= ruleExpression )
                    {
                    // InternalSQLParser.g:4937:4: (lv_exp_1_0= ruleExpression )
                    // InternalSQLParser.g:4938:5: lv_exp_1_0= ruleExpression
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getExpressionFragmentAccess().getExpExpressionParserRuleCall_1_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_exp_1_0=ruleExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getExpressionFragmentRule());
                      					}
                      					set(
                      						current,
                      						"exp",
                      						lv_exp_1_0,
                      						"org.xtext.example.mydsl_sql.SQL.Expression");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:4956:3: ( ( (lv_xexp_2_1= ruleXExpression | lv_xexp_2_2= ruleXExpression_ ) ) )
                    {
                    // InternalSQLParser.g:4956:3: ( ( (lv_xexp_2_1= ruleXExpression | lv_xexp_2_2= ruleXExpression_ ) ) )
                    // InternalSQLParser.g:4957:4: ( (lv_xexp_2_1= ruleXExpression | lv_xexp_2_2= ruleXExpression_ ) )
                    {
                    // InternalSQLParser.g:4957:4: ( (lv_xexp_2_1= ruleXExpression | lv_xexp_2_2= ruleXExpression_ ) )
                    // InternalSQLParser.g:4958:5: (lv_xexp_2_1= ruleXExpression | lv_xexp_2_2= ruleXExpression_ )
                    {
                    // InternalSQLParser.g:4958:5: (lv_xexp_2_1= ruleXExpression | lv_xexp_2_2= ruleXExpression_ )
                    int alt90=2;
                    alt90 = dfa90.predict(input);
                    switch (alt90) {
                        case 1 :
                            // InternalSQLParser.g:4959:6: lv_xexp_2_1= ruleXExpression
                            {
                            if ( state.backtracking==0 ) {

                              						newCompositeNode(grammarAccess.getExpressionFragmentAccess().getXexpXExpressionParserRuleCall_2_0_0());
                              					
                            }
                            pushFollow(FOLLOW_2);
                            lv_xexp_2_1=ruleXExpression();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElementForParent(grammarAccess.getExpressionFragmentRule());
                              						}
                              						set(
                              							current,
                              							"xexp",
                              							lv_xexp_2_1,
                              							"org.xtext.example.mydsl_sql.SQL.XExpression");
                              						afterParserOrEnumRuleCall();
                              					
                            }

                            }
                            break;
                        case 2 :
                            // InternalSQLParser.g:4975:6: lv_xexp_2_2= ruleXExpression_
                            {
                            if ( state.backtracking==0 ) {

                              						newCompositeNode(grammarAccess.getExpressionFragmentAccess().getXexpXExpression_ParserRuleCall_2_0_1());
                              					
                            }
                            pushFollow(FOLLOW_2);
                            lv_xexp_2_2=ruleXExpression_();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElementForParent(grammarAccess.getExpressionFragmentRule());
                              						}
                              						set(
                              							current,
                              							"xexp",
                              							lv_xexp_2_2,
                              							"org.xtext.example.mydsl_sql.SQL.XExpression_");
                              						afterParserOrEnumRuleCall();
                              					
                            }

                            }
                            break;

                    }


                    }


                    }


                    }
                    break;
                case 4 :
                    // InternalSQLParser.g:4994:3: ( (lv_notPrm_3_0= RULE_JRNPARAM ) )
                    {
                    // InternalSQLParser.g:4994:3: ( (lv_notPrm_3_0= RULE_JRNPARAM ) )
                    // InternalSQLParser.g:4995:4: (lv_notPrm_3_0= RULE_JRNPARAM )
                    {
                    // InternalSQLParser.g:4995:4: (lv_notPrm_3_0= RULE_JRNPARAM )
                    // InternalSQLParser.g:4996:5: lv_notPrm_3_0= RULE_JRNPARAM
                    {
                    lv_notPrm_3_0=(Token)match(input,RULE_JRNPARAM,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_notPrm_3_0, grammarAccess.getExpressionFragmentAccess().getNotPrmJRNPARAMTerminalRuleCall_3_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getExpressionFragmentRule());
                      					}
                      					setWithLastConsumed(
                      						current,
                      						"notPrm",
                      						lv_notPrm_3_0,
                      						"org.xtext.example.mydsl_sql.SQL.JRNPARAM");
                      				
                    }

                    }


                    }


                    }
                    break;
                case 5 :
                    // InternalSQLParser.g:5013:3: ( (lv_in_4_0= ruleInOperator ) )
                    {
                    // InternalSQLParser.g:5013:3: ( (lv_in_4_0= ruleInOperator ) )
                    // InternalSQLParser.g:5014:4: (lv_in_4_0= ruleInOperator )
                    {
                    // InternalSQLParser.g:5014:4: (lv_in_4_0= ruleInOperator )
                    // InternalSQLParser.g:5015:5: lv_in_4_0= ruleInOperator
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getExpressionFragmentAccess().getInInOperatorParserRuleCall_4_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_in_4_0=ruleInOperator();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getExpressionFragmentRule());
                      					}
                      					set(
                      						current,
                      						"in",
                      						lv_in_4_0,
                      						"org.xtext.example.mydsl_sql.SQL.InOperator");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 6 :
                    // InternalSQLParser.g:5033:3: ( (lv_exists_5_0= ruleExistsOperator ) )
                    {
                    // InternalSQLParser.g:5033:3: ( (lv_exists_5_0= ruleExistsOperator ) )
                    // InternalSQLParser.g:5034:4: (lv_exists_5_0= ruleExistsOperator )
                    {
                    // InternalSQLParser.g:5034:4: (lv_exists_5_0= ruleExistsOperator )
                    // InternalSQLParser.g:5035:5: lv_exists_5_0= ruleExistsOperator
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getExpressionFragmentAccess().getExistsExistsOperatorParserRuleCall_5_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_exists_5_0=ruleExistsOperator();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getExpressionFragmentRule());
                      					}
                      					set(
                      						current,
                      						"exists",
                      						lv_exists_5_0,
                      						"org.xtext.example.mydsl_sql.SQL.ExistsOperator");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleExpressionFragment"


    // $ANTLR start "entryRuleExpressionGroup"
    // InternalSQLParser.g:5056:1: entryRuleExpressionGroup returns [EObject current=null] : iv_ruleExpressionGroup= ruleExpressionGroup EOF ;
    public final EObject entryRuleExpressionGroup() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExpressionGroup = null;


        try {
            // InternalSQLParser.g:5056:56: (iv_ruleExpressionGroup= ruleExpressionGroup EOF )
            // InternalSQLParser.g:5057:2: iv_ruleExpressionGroup= ruleExpressionGroup EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExpressionGroupRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExpressionGroup=ruleExpressionGroup();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExpressionGroup; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleExpressionGroup"


    // $ANTLR start "ruleExpressionGroup"
    // InternalSQLParser.g:5063:1: ruleExpressionGroup returns [EObject current=null] : ( () ( ( (lv_isnot_1_1= NOT | lv_isnot_1_2= NOT_1 ) ) )? otherlv_2= LeftParenthesis ( (lv_expr_3_0= ruleFullExpression ) ) otherlv_4= RightParenthesis ) ;
    public final EObject ruleExpressionGroup() throws RecognitionException {
        EObject current = null;

        Token lv_isnot_1_1=null;
        Token lv_isnot_1_2=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject lv_expr_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:5069:2: ( ( () ( ( (lv_isnot_1_1= NOT | lv_isnot_1_2= NOT_1 ) ) )? otherlv_2= LeftParenthesis ( (lv_expr_3_0= ruleFullExpression ) ) otherlv_4= RightParenthesis ) )
            // InternalSQLParser.g:5070:2: ( () ( ( (lv_isnot_1_1= NOT | lv_isnot_1_2= NOT_1 ) ) )? otherlv_2= LeftParenthesis ( (lv_expr_3_0= ruleFullExpression ) ) otherlv_4= RightParenthesis )
            {
            // InternalSQLParser.g:5070:2: ( () ( ( (lv_isnot_1_1= NOT | lv_isnot_1_2= NOT_1 ) ) )? otherlv_2= LeftParenthesis ( (lv_expr_3_0= ruleFullExpression ) ) otherlv_4= RightParenthesis )
            // InternalSQLParser.g:5071:3: () ( ( (lv_isnot_1_1= NOT | lv_isnot_1_2= NOT_1 ) ) )? otherlv_2= LeftParenthesis ( (lv_expr_3_0= ruleFullExpression ) ) otherlv_4= RightParenthesis
            {
            // InternalSQLParser.g:5071:3: ()
            // InternalSQLParser.g:5072:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getExpressionGroupAccess().getExprGroupAction_0(),
              					current);
              			
            }

            }

            // InternalSQLParser.g:5081:3: ( ( (lv_isnot_1_1= NOT | lv_isnot_1_2= NOT_1 ) ) )?
            int alt93=2;
            int LA93_0 = input.LA(1);

            if ( (LA93_0==NOT_1||LA93_0==NOT) ) {
                alt93=1;
            }
            switch (alt93) {
                case 1 :
                    // InternalSQLParser.g:5082:4: ( (lv_isnot_1_1= NOT | lv_isnot_1_2= NOT_1 ) )
                    {
                    // InternalSQLParser.g:5082:4: ( (lv_isnot_1_1= NOT | lv_isnot_1_2= NOT_1 ) )
                    // InternalSQLParser.g:5083:5: (lv_isnot_1_1= NOT | lv_isnot_1_2= NOT_1 )
                    {
                    // InternalSQLParser.g:5083:5: (lv_isnot_1_1= NOT | lv_isnot_1_2= NOT_1 )
                    int alt92=2;
                    int LA92_0 = input.LA(1);

                    if ( (LA92_0==NOT) ) {
                        alt92=1;
                    }
                    else if ( (LA92_0==NOT_1) ) {
                        alt92=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 92, 0, input);

                        throw nvae;
                    }
                    switch (alt92) {
                        case 1 :
                            // InternalSQLParser.g:5084:6: lv_isnot_1_1= NOT
                            {
                            lv_isnot_1_1=(Token)match(input,NOT,FOLLOW_8); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(lv_isnot_1_1, grammarAccess.getExpressionGroupAccess().getIsnotNOTKeyword_1_0_0());
                              					
                            }
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getExpressionGroupRule());
                              						}
                              						setWithLastConsumed(current, "isnot", lv_isnot_1_1, null);
                              					
                            }

                            }
                            break;
                        case 2 :
                            // InternalSQLParser.g:5095:6: lv_isnot_1_2= NOT_1
                            {
                            lv_isnot_1_2=(Token)match(input,NOT_1,FOLLOW_8); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(lv_isnot_1_2, grammarAccess.getExpressionGroupAccess().getIsnotNOTKeyword_1_0_1());
                              					
                            }
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getExpressionGroupRule());
                              						}
                              						setWithLastConsumed(current, "isnot", lv_isnot_1_2, null);
                              					
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;

            }

            otherlv_2=(Token)match(input,LeftParenthesis,FOLLOW_39); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getExpressionGroupAccess().getLeftParenthesisKeyword_2());
              		
            }
            // InternalSQLParser.g:5112:3: ( (lv_expr_3_0= ruleFullExpression ) )
            // InternalSQLParser.g:5113:4: (lv_expr_3_0= ruleFullExpression )
            {
            // InternalSQLParser.g:5113:4: (lv_expr_3_0= ruleFullExpression )
            // InternalSQLParser.g:5114:5: lv_expr_3_0= ruleFullExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getExpressionGroupAccess().getExprFullExpressionParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_10);
            lv_expr_3_0=ruleFullExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getExpressionGroupRule());
              					}
              					set(
              						current,
              						"expr",
              						lv_expr_3_0,
              						"org.xtext.example.mydsl_sql.SQL.FullExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_4=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getExpressionGroupAccess().getRightParenthesisKeyword_4());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleExpressionGroup"


    // $ANTLR start "entryRuleXExpression"
    // InternalSQLParser.g:5139:1: entryRuleXExpression returns [EObject current=null] : iv_ruleXExpression= ruleXExpression EOF ;
    public final EObject entryRuleXExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleXExpression = null;


        try {
            // InternalSQLParser.g:5139:52: (iv_ruleXExpression= ruleXExpression EOF )
            // InternalSQLParser.g:5140:2: iv_ruleXExpression= ruleXExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getXExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleXExpression=ruleXExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleXExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleXExpression"


    // $ANTLR start "ruleXExpression"
    // InternalSQLParser.g:5146:1: ruleXExpression returns [EObject current=null] : (otherlv_0= X () ( (lv_xf_2_0= ruleXFunction ) ) otherlv_3= Comma ( (lv_col_4_0= ruleOperandGroup ) ) (otherlv_5= Comma ( (lv_prm_6_0= ruleXExpressionParams ) ) )? otherlv_7= RightCurlyBracket ) ;
    public final EObject ruleXExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Token otherlv_7=null;
        Enumerator lv_xf_2_0 = null;

        EObject lv_col_4_0 = null;

        EObject lv_prm_6_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:5152:2: ( (otherlv_0= X () ( (lv_xf_2_0= ruleXFunction ) ) otherlv_3= Comma ( (lv_col_4_0= ruleOperandGroup ) ) (otherlv_5= Comma ( (lv_prm_6_0= ruleXExpressionParams ) ) )? otherlv_7= RightCurlyBracket ) )
            // InternalSQLParser.g:5153:2: (otherlv_0= X () ( (lv_xf_2_0= ruleXFunction ) ) otherlv_3= Comma ( (lv_col_4_0= ruleOperandGroup ) ) (otherlv_5= Comma ( (lv_prm_6_0= ruleXExpressionParams ) ) )? otherlv_7= RightCurlyBracket )
            {
            // InternalSQLParser.g:5153:2: (otherlv_0= X () ( (lv_xf_2_0= ruleXFunction ) ) otherlv_3= Comma ( (lv_col_4_0= ruleOperandGroup ) ) (otherlv_5= Comma ( (lv_prm_6_0= ruleXExpressionParams ) ) )? otherlv_7= RightCurlyBracket )
            // InternalSQLParser.g:5154:3: otherlv_0= X () ( (lv_xf_2_0= ruleXFunction ) ) otherlv_3= Comma ( (lv_col_4_0= ruleOperandGroup ) ) (otherlv_5= Comma ( (lv_prm_6_0= ruleXExpressionParams ) ) )? otherlv_7= RightCurlyBracket
            {
            otherlv_0=(Token)match(input,X,FOLLOW_72); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getXExpressionAccess().getXKeyword_0());
              		
            }
            // InternalSQLParser.g:5158:3: ()
            // InternalSQLParser.g:5159:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getXExpressionAccess().getXExprAction_1(),
              					current);
              			
            }

            }

            // InternalSQLParser.g:5168:3: ( (lv_xf_2_0= ruleXFunction ) )
            // InternalSQLParser.g:5169:4: (lv_xf_2_0= ruleXFunction )
            {
            // InternalSQLParser.g:5169:4: (lv_xf_2_0= ruleXFunction )
            // InternalSQLParser.g:5170:5: lv_xf_2_0= ruleXFunction
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getXExpressionAccess().getXfXFunctionEnumRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_73);
            lv_xf_2_0=ruleXFunction();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getXExpressionRule());
              					}
              					set(
              						current,
              						"xf",
              						lv_xf_2_0,
              						"org.xtext.example.mydsl_sql.SQL.XFunction");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,Comma,FOLLOW_74); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getXExpressionAccess().getCommaKeyword_3());
              		
            }
            // InternalSQLParser.g:5191:3: ( (lv_col_4_0= ruleOperandGroup ) )
            // InternalSQLParser.g:5192:4: (lv_col_4_0= ruleOperandGroup )
            {
            // InternalSQLParser.g:5192:4: (lv_col_4_0= ruleOperandGroup )
            // InternalSQLParser.g:5193:5: lv_col_4_0= ruleOperandGroup
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getXExpressionAccess().getColOperandGroupParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_75);
            lv_col_4_0=ruleOperandGroup();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getXExpressionRule());
              					}
              					set(
              						current,
              						"col",
              						lv_col_4_0,
              						"org.xtext.example.mydsl_sql.SQL.OperandGroup");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:5210:3: (otherlv_5= Comma ( (lv_prm_6_0= ruleXExpressionParams ) ) )?
            int alt94=2;
            int LA94_0 = input.LA(1);

            if ( (LA94_0==Comma) ) {
                alt94=1;
            }
            switch (alt94) {
                case 1 :
                    // InternalSQLParser.g:5211:4: otherlv_5= Comma ( (lv_prm_6_0= ruleXExpressionParams ) )
                    {
                    otherlv_5=(Token)match(input,Comma,FOLLOW_14); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_5, grammarAccess.getXExpressionAccess().getCommaKeyword_5_0());
                      			
                    }
                    // InternalSQLParser.g:5215:4: ( (lv_prm_6_0= ruleXExpressionParams ) )
                    // InternalSQLParser.g:5216:5: (lv_prm_6_0= ruleXExpressionParams )
                    {
                    // InternalSQLParser.g:5216:5: (lv_prm_6_0= ruleXExpressionParams )
                    // InternalSQLParser.g:5217:6: lv_prm_6_0= ruleXExpressionParams
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getXExpressionAccess().getPrmXExpressionParamsParserRuleCall_5_1_0());
                      					
                    }
                    pushFollow(FOLLOW_76);
                    lv_prm_6_0=ruleXExpressionParams();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getXExpressionRule());
                      						}
                      						set(
                      							current,
                      							"prm",
                      							lv_prm_6_0,
                      							"org.xtext.example.mydsl_sql.SQL.XExpressionParams");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            otherlv_7=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_7, grammarAccess.getXExpressionAccess().getRightCurlyBracketKeyword_6());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleXExpression"


    // $ANTLR start "entryRuleXExpression_"
    // InternalSQLParser.g:5243:1: entryRuleXExpression_ returns [EObject current=null] : iv_ruleXExpression_= ruleXExpression_ EOF ;
    public final EObject entryRuleXExpression_() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleXExpression_ = null;


        try {
            // InternalSQLParser.g:5243:53: (iv_ruleXExpression_= ruleXExpression_ EOF )
            // InternalSQLParser.g:5244:2: iv_ruleXExpression_= ruleXExpression_ EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getXExpression_Rule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleXExpression_=ruleXExpression_();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleXExpression_; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleXExpression_"


    // $ANTLR start "ruleXExpression_"
    // InternalSQLParser.g:5250:1: ruleXExpression_ returns [EObject current=null] : (otherlv_0= X () ( (lv_xf_2_0= ruleXFunction ) ) otherlv_3= VerticalLine ( (lv_col_4_0= ruleOperandGroup ) ) (otherlv_5= VerticalLine ( (lv_prm_6_0= ruleXExpressionParams ) ) )? otherlv_7= RightCurlyBracket ) ;
    public final EObject ruleXExpression_() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Token otherlv_7=null;
        Enumerator lv_xf_2_0 = null;

        EObject lv_col_4_0 = null;

        EObject lv_prm_6_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:5256:2: ( (otherlv_0= X () ( (lv_xf_2_0= ruleXFunction ) ) otherlv_3= VerticalLine ( (lv_col_4_0= ruleOperandGroup ) ) (otherlv_5= VerticalLine ( (lv_prm_6_0= ruleXExpressionParams ) ) )? otherlv_7= RightCurlyBracket ) )
            // InternalSQLParser.g:5257:2: (otherlv_0= X () ( (lv_xf_2_0= ruleXFunction ) ) otherlv_3= VerticalLine ( (lv_col_4_0= ruleOperandGroup ) ) (otherlv_5= VerticalLine ( (lv_prm_6_0= ruleXExpressionParams ) ) )? otherlv_7= RightCurlyBracket )
            {
            // InternalSQLParser.g:5257:2: (otherlv_0= X () ( (lv_xf_2_0= ruleXFunction ) ) otherlv_3= VerticalLine ( (lv_col_4_0= ruleOperandGroup ) ) (otherlv_5= VerticalLine ( (lv_prm_6_0= ruleXExpressionParams ) ) )? otherlv_7= RightCurlyBracket )
            // InternalSQLParser.g:5258:3: otherlv_0= X () ( (lv_xf_2_0= ruleXFunction ) ) otherlv_3= VerticalLine ( (lv_col_4_0= ruleOperandGroup ) ) (otherlv_5= VerticalLine ( (lv_prm_6_0= ruleXExpressionParams ) ) )? otherlv_7= RightCurlyBracket
            {
            otherlv_0=(Token)match(input,X,FOLLOW_72); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getXExpression_Access().getXKeyword_0());
              		
            }
            // InternalSQLParser.g:5262:3: ()
            // InternalSQLParser.g:5263:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getXExpression_Access().getXExprAction_1(),
              					current);
              			
            }

            }

            // InternalSQLParser.g:5272:3: ( (lv_xf_2_0= ruleXFunction ) )
            // InternalSQLParser.g:5273:4: (lv_xf_2_0= ruleXFunction )
            {
            // InternalSQLParser.g:5273:4: (lv_xf_2_0= ruleXFunction )
            // InternalSQLParser.g:5274:5: lv_xf_2_0= ruleXFunction
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getXExpression_Access().getXfXFunctionEnumRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_77);
            lv_xf_2_0=ruleXFunction();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getXExpression_Rule());
              					}
              					set(
              						current,
              						"xf",
              						lv_xf_2_0,
              						"org.xtext.example.mydsl_sql.SQL.XFunction");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,VerticalLine,FOLLOW_74); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getXExpression_Access().getVerticalLineKeyword_3());
              		
            }
            // InternalSQLParser.g:5295:3: ( (lv_col_4_0= ruleOperandGroup ) )
            // InternalSQLParser.g:5296:4: (lv_col_4_0= ruleOperandGroup )
            {
            // InternalSQLParser.g:5296:4: (lv_col_4_0= ruleOperandGroup )
            // InternalSQLParser.g:5297:5: lv_col_4_0= ruleOperandGroup
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getXExpression_Access().getColOperandGroupParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_78);
            lv_col_4_0=ruleOperandGroup();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getXExpression_Rule());
              					}
              					set(
              						current,
              						"col",
              						lv_col_4_0,
              						"org.xtext.example.mydsl_sql.SQL.OperandGroup");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:5314:3: (otherlv_5= VerticalLine ( (lv_prm_6_0= ruleXExpressionParams ) ) )?
            int alt95=2;
            int LA95_0 = input.LA(1);

            if ( (LA95_0==VerticalLine) ) {
                alt95=1;
            }
            switch (alt95) {
                case 1 :
                    // InternalSQLParser.g:5315:4: otherlv_5= VerticalLine ( (lv_prm_6_0= ruleXExpressionParams ) )
                    {
                    otherlv_5=(Token)match(input,VerticalLine,FOLLOW_14); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_5, grammarAccess.getXExpression_Access().getVerticalLineKeyword_5_0());
                      			
                    }
                    // InternalSQLParser.g:5319:4: ( (lv_prm_6_0= ruleXExpressionParams ) )
                    // InternalSQLParser.g:5320:5: (lv_prm_6_0= ruleXExpressionParams )
                    {
                    // InternalSQLParser.g:5320:5: (lv_prm_6_0= ruleXExpressionParams )
                    // InternalSQLParser.g:5321:6: lv_prm_6_0= ruleXExpressionParams
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getXExpression_Access().getPrmXExpressionParamsParserRuleCall_5_1_0());
                      					
                    }
                    pushFollow(FOLLOW_76);
                    lv_prm_6_0=ruleXExpressionParams();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getXExpression_Rule());
                      						}
                      						set(
                      							current,
                      							"prm",
                      							lv_prm_6_0,
                      							"org.xtext.example.mydsl_sql.SQL.XExpressionParams");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            otherlv_7=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_7, grammarAccess.getXExpression_Access().getRightCurlyBracketKeyword_6());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleXExpression_"


    // $ANTLR start "entryRuleXExpressionParams"
    // InternalSQLParser.g:5347:1: entryRuleXExpressionParams returns [EObject current=null] : iv_ruleXExpressionParams= ruleXExpressionParams EOF ;
    public final EObject entryRuleXExpressionParams() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleXExpressionParams = null;


        try {
            // InternalSQLParser.g:5347:58: (iv_ruleXExpressionParams= ruleXExpressionParams EOF )
            // InternalSQLParser.g:5348:2: iv_ruleXExpressionParams= ruleXExpressionParams EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getXExpressionParamsRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleXExpressionParams=ruleXExpressionParams();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleXExpressionParams; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleXExpressionParams"


    // $ANTLR start "ruleXExpressionParams"
    // InternalSQLParser.g:5354:1: ruleXExpressionParams returns [EObject current=null] : (this_JRParameter_0= ruleJRParameter ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleJRParameter ) ) )+ )? ) ;
    public final EObject ruleXExpressionParams() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_JRParameter_0 = null;

        EObject lv_entries_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:5360:2: ( (this_JRParameter_0= ruleJRParameter ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleJRParameter ) ) )+ )? ) )
            // InternalSQLParser.g:5361:2: (this_JRParameter_0= ruleJRParameter ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleJRParameter ) ) )+ )? )
            {
            // InternalSQLParser.g:5361:2: (this_JRParameter_0= ruleJRParameter ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleJRParameter ) ) )+ )? )
            // InternalSQLParser.g:5362:3: this_JRParameter_0= ruleJRParameter ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleJRParameter ) ) )+ )?
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getXExpressionParamsAccess().getJRParameterParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_11);
            this_JRParameter_0=ruleJRParameter();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_JRParameter_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:5373:3: ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleJRParameter ) ) )+ )?
            int alt97=2;
            int LA97_0 = input.LA(1);

            if ( (LA97_0==Comma) ) {
                alt97=1;
            }
            switch (alt97) {
                case 1 :
                    // InternalSQLParser.g:5374:4: () (otherlv_2= Comma ( (lv_entries_3_0= ruleJRParameter ) ) )+
                    {
                    // InternalSQLParser.g:5374:4: ()
                    // InternalSQLParser.g:5375:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getXExpressionParamsAccess().getPrmsEntriesAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalSQLParser.g:5384:4: (otherlv_2= Comma ( (lv_entries_3_0= ruleJRParameter ) ) )+
                    int cnt96=0;
                    loop96:
                    do {
                        int alt96=2;
                        int LA96_0 = input.LA(1);

                        if ( (LA96_0==Comma) ) {
                            alt96=1;
                        }


                        switch (alt96) {
                    	case 1 :
                    	    // InternalSQLParser.g:5385:5: otherlv_2= Comma ( (lv_entries_3_0= ruleJRParameter ) )
                    	    {
                    	    otherlv_2=(Token)match(input,Comma,FOLLOW_14); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_2, grammarAccess.getXExpressionParamsAccess().getCommaKeyword_1_1_0());
                    	      				
                    	    }
                    	    // InternalSQLParser.g:5389:5: ( (lv_entries_3_0= ruleJRParameter ) )
                    	    // InternalSQLParser.g:5390:6: (lv_entries_3_0= ruleJRParameter )
                    	    {
                    	    // InternalSQLParser.g:5390:6: (lv_entries_3_0= ruleJRParameter )
                    	    // InternalSQLParser.g:5391:7: lv_entries_3_0= ruleJRParameter
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getXExpressionParamsAccess().getEntriesJRParameterParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_11);
                    	    lv_entries_3_0=ruleJRParameter();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getXExpressionParamsRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"entries",
                    	      								lv_entries_3_0,
                    	      								"org.xtext.example.mydsl_sql.SQL.JRParameter");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt96 >= 1 ) break loop96;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(96, input);
                                throw eee;
                        }
                        cnt96++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleXExpressionParams"


    // $ANTLR start "entryRuleJRParameter"
    // InternalSQLParser.g:5414:1: entryRuleJRParameter returns [EObject current=null] : iv_ruleJRParameter= ruleJRParameter EOF ;
    public final EObject entryRuleJRParameter() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleJRParameter = null;


        try {
            // InternalSQLParser.g:5414:52: (iv_ruleJRParameter= ruleJRParameter EOF )
            // InternalSQLParser.g:5415:2: iv_ruleJRParameter= ruleJRParameter EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getJRParameterRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleJRParameter=ruleJRParameter();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleJRParameter; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleJRParameter"


    // $ANTLR start "ruleJRParameter"
    // InternalSQLParser.g:5421:1: ruleJRParameter returns [EObject current=null] : ( (lv_jrprm_0_0= RULE_ID ) ) ;
    public final EObject ruleJRParameter() throws RecognitionException {
        EObject current = null;

        Token lv_jrprm_0_0=null;


        	enterRule();

        try {
            // InternalSQLParser.g:5427:2: ( ( (lv_jrprm_0_0= RULE_ID ) ) )
            // InternalSQLParser.g:5428:2: ( (lv_jrprm_0_0= RULE_ID ) )
            {
            // InternalSQLParser.g:5428:2: ( (lv_jrprm_0_0= RULE_ID ) )
            // InternalSQLParser.g:5429:3: (lv_jrprm_0_0= RULE_ID )
            {
            // InternalSQLParser.g:5429:3: (lv_jrprm_0_0= RULE_ID )
            // InternalSQLParser.g:5430:4: lv_jrprm_0_0= RULE_ID
            {
            lv_jrprm_0_0=(Token)match(input,RULE_ID,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(lv_jrprm_0_0, grammarAccess.getJRParameterAccess().getJrprmIDTerminalRuleCall_0());
              			
            }
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getJRParameterRule());
              				}
              				setWithLastConsumed(
              					current,
              					"jrprm",
              					lv_jrprm_0_0,
              					"org.xtext.example.mydsl_sql.SQL.ID");
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleJRParameter"


    // $ANTLR start "entryRuleExpression"
    // InternalSQLParser.g:5449:1: entryRuleExpression returns [EObject current=null] : iv_ruleExpression= ruleExpression EOF ;
    public final EObject entryRuleExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExpression = null;


        try {
            // InternalSQLParser.g:5449:51: (iv_ruleExpression= ruleExpression EOF )
            // InternalSQLParser.g:5450:2: iv_ruleExpression= ruleExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExpression=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleExpression"


    // $ANTLR start "ruleExpression"
    // InternalSQLParser.g:5456:1: ruleExpression returns [EObject current=null] : ( ( (lv_op1_0_0= ruleOperand ) ) ( ( (lv_isnull_1_0= ruleIsNullValue ) ) | ( (lv_in_2_0= ruleInOperator ) ) | ( (lv_exists_3_0= ruleExistsOperator ) ) | ( (lv_between_4_0= ruleBetween ) ) | ( (lv_like_5_0= ruleLike ) ) | ( (lv_comp_6_0= ruleComparison ) ) ) ) ;
    public final EObject ruleExpression() throws RecognitionException {
        EObject current = null;

        EObject lv_op1_0_0 = null;

        AntlrDatatypeRuleToken lv_isnull_1_0 = null;

        EObject lv_in_2_0 = null;

        EObject lv_exists_3_0 = null;

        EObject lv_between_4_0 = null;

        EObject lv_like_5_0 = null;

        EObject lv_comp_6_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:5462:2: ( ( ( (lv_op1_0_0= ruleOperand ) ) ( ( (lv_isnull_1_0= ruleIsNullValue ) ) | ( (lv_in_2_0= ruleInOperator ) ) | ( (lv_exists_3_0= ruleExistsOperator ) ) | ( (lv_between_4_0= ruleBetween ) ) | ( (lv_like_5_0= ruleLike ) ) | ( (lv_comp_6_0= ruleComparison ) ) ) ) )
            // InternalSQLParser.g:5463:2: ( ( (lv_op1_0_0= ruleOperand ) ) ( ( (lv_isnull_1_0= ruleIsNullValue ) ) | ( (lv_in_2_0= ruleInOperator ) ) | ( (lv_exists_3_0= ruleExistsOperator ) ) | ( (lv_between_4_0= ruleBetween ) ) | ( (lv_like_5_0= ruleLike ) ) | ( (lv_comp_6_0= ruleComparison ) ) ) )
            {
            // InternalSQLParser.g:5463:2: ( ( (lv_op1_0_0= ruleOperand ) ) ( ( (lv_isnull_1_0= ruleIsNullValue ) ) | ( (lv_in_2_0= ruleInOperator ) ) | ( (lv_exists_3_0= ruleExistsOperator ) ) | ( (lv_between_4_0= ruleBetween ) ) | ( (lv_like_5_0= ruleLike ) ) | ( (lv_comp_6_0= ruleComparison ) ) ) )
            // InternalSQLParser.g:5464:3: ( (lv_op1_0_0= ruleOperand ) ) ( ( (lv_isnull_1_0= ruleIsNullValue ) ) | ( (lv_in_2_0= ruleInOperator ) ) | ( (lv_exists_3_0= ruleExistsOperator ) ) | ( (lv_between_4_0= ruleBetween ) ) | ( (lv_like_5_0= ruleLike ) ) | ( (lv_comp_6_0= ruleComparison ) ) )
            {
            // InternalSQLParser.g:5464:3: ( (lv_op1_0_0= ruleOperand ) )
            // InternalSQLParser.g:5465:4: (lv_op1_0_0= ruleOperand )
            {
            // InternalSQLParser.g:5465:4: (lv_op1_0_0= ruleOperand )
            // InternalSQLParser.g:5466:5: lv_op1_0_0= ruleOperand
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getExpressionAccess().getOp1OperandParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_79);
            lv_op1_0_0=ruleOperand();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getExpressionRule());
              					}
              					set(
              						current,
              						"op1",
              						lv_op1_0_0,
              						"org.xtext.example.mydsl_sql.SQL.Operand");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:5483:3: ( ( (lv_isnull_1_0= ruleIsNullValue ) ) | ( (lv_in_2_0= ruleInOperator ) ) | ( (lv_exists_3_0= ruleExistsOperator ) ) | ( (lv_between_4_0= ruleBetween ) ) | ( (lv_like_5_0= ruleLike ) ) | ( (lv_comp_6_0= ruleComparison ) ) )
            int alt98=6;
            switch ( input.LA(1) ) {
            case IS:
                {
                alt98=1;
                }
                break;
            case NOT:
                {
                switch ( input.LA(2) ) {
                case EXISTS:
                    {
                    alt98=3;
                    }
                    break;
                case LIKE:
                    {
                    alt98=5;
                    }
                    break;
                case IN:
                    {
                    alt98=2;
                    }
                    break;
                case BETWEEN:
                    {
                    alt98=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 98, 2, input);

                    throw nvae;
                }

                }
                break;
            case IN:
                {
                alt98=2;
                }
                break;
            case EXISTS:
                {
                alt98=3;
                }
                break;
            case BETWEEN:
                {
                alt98=4;
                }
                break;
            case LIKE:
                {
                alt98=5;
                }
                break;
            case ExclamationMarkEqualsSign:
            case LessThanSignEqualsSign:
            case LessThanSignGreaterThanSign:
            case GreaterThanSignEqualsSign:
            case CircumflexAccentEqualsSign:
            case LessThanSign:
            case EqualsSign:
            case GreaterThanSign:
                {
                alt98=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 98, 0, input);

                throw nvae;
            }

            switch (alt98) {
                case 1 :
                    // InternalSQLParser.g:5484:4: ( (lv_isnull_1_0= ruleIsNullValue ) )
                    {
                    // InternalSQLParser.g:5484:4: ( (lv_isnull_1_0= ruleIsNullValue ) )
                    // InternalSQLParser.g:5485:5: (lv_isnull_1_0= ruleIsNullValue )
                    {
                    // InternalSQLParser.g:5485:5: (lv_isnull_1_0= ruleIsNullValue )
                    // InternalSQLParser.g:5486:6: lv_isnull_1_0= ruleIsNullValue
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getExpressionAccess().getIsnullIsNullValueParserRuleCall_1_0_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_isnull_1_0=ruleIsNullValue();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExpressionRule());
                      						}
                      						set(
                      							current,
                      							"isnull",
                      							lv_isnull_1_0,
                      							"org.xtext.example.mydsl_sql.SQL.IsNullValue");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:5504:4: ( (lv_in_2_0= ruleInOperator ) )
                    {
                    // InternalSQLParser.g:5504:4: ( (lv_in_2_0= ruleInOperator ) )
                    // InternalSQLParser.g:5505:5: (lv_in_2_0= ruleInOperator )
                    {
                    // InternalSQLParser.g:5505:5: (lv_in_2_0= ruleInOperator )
                    // InternalSQLParser.g:5506:6: lv_in_2_0= ruleInOperator
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getExpressionAccess().getInInOperatorParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_in_2_0=ruleInOperator();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExpressionRule());
                      						}
                      						set(
                      							current,
                      							"in",
                      							lv_in_2_0,
                      							"org.xtext.example.mydsl_sql.SQL.InOperator");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:5524:4: ( (lv_exists_3_0= ruleExistsOperator ) )
                    {
                    // InternalSQLParser.g:5524:4: ( (lv_exists_3_0= ruleExistsOperator ) )
                    // InternalSQLParser.g:5525:5: (lv_exists_3_0= ruleExistsOperator )
                    {
                    // InternalSQLParser.g:5525:5: (lv_exists_3_0= ruleExistsOperator )
                    // InternalSQLParser.g:5526:6: lv_exists_3_0= ruleExistsOperator
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getExpressionAccess().getExistsExistsOperatorParserRuleCall_1_2_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_exists_3_0=ruleExistsOperator();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExpressionRule());
                      						}
                      						set(
                      							current,
                      							"exists",
                      							lv_exists_3_0,
                      							"org.xtext.example.mydsl_sql.SQL.ExistsOperator");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 4 :
                    // InternalSQLParser.g:5544:4: ( (lv_between_4_0= ruleBetween ) )
                    {
                    // InternalSQLParser.g:5544:4: ( (lv_between_4_0= ruleBetween ) )
                    // InternalSQLParser.g:5545:5: (lv_between_4_0= ruleBetween )
                    {
                    // InternalSQLParser.g:5545:5: (lv_between_4_0= ruleBetween )
                    // InternalSQLParser.g:5546:6: lv_between_4_0= ruleBetween
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getExpressionAccess().getBetweenBetweenParserRuleCall_1_3_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_between_4_0=ruleBetween();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExpressionRule());
                      						}
                      						set(
                      							current,
                      							"between",
                      							lv_between_4_0,
                      							"org.xtext.example.mydsl_sql.SQL.Between");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 5 :
                    // InternalSQLParser.g:5564:4: ( (lv_like_5_0= ruleLike ) )
                    {
                    // InternalSQLParser.g:5564:4: ( (lv_like_5_0= ruleLike ) )
                    // InternalSQLParser.g:5565:5: (lv_like_5_0= ruleLike )
                    {
                    // InternalSQLParser.g:5565:5: (lv_like_5_0= ruleLike )
                    // InternalSQLParser.g:5566:6: lv_like_5_0= ruleLike
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getExpressionAccess().getLikeLikeParserRuleCall_1_4_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_like_5_0=ruleLike();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExpressionRule());
                      						}
                      						set(
                      							current,
                      							"like",
                      							lv_like_5_0,
                      							"org.xtext.example.mydsl_sql.SQL.Like");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 6 :
                    // InternalSQLParser.g:5584:4: ( (lv_comp_6_0= ruleComparison ) )
                    {
                    // InternalSQLParser.g:5584:4: ( (lv_comp_6_0= ruleComparison ) )
                    // InternalSQLParser.g:5585:5: (lv_comp_6_0= ruleComparison )
                    {
                    // InternalSQLParser.g:5585:5: (lv_comp_6_0= ruleComparison )
                    // InternalSQLParser.g:5586:6: lv_comp_6_0= ruleComparison
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getExpressionAccess().getCompComparisonParserRuleCall_1_5_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_comp_6_0=ruleComparison();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExpressionRule());
                      						}
                      						set(
                      							current,
                      							"comp",
                      							lv_comp_6_0,
                      							"org.xtext.example.mydsl_sql.SQL.Comparison");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleExpression"


    // $ANTLR start "entryRuleIsNullValue"
    // InternalSQLParser.g:5608:1: entryRuleIsNullValue returns [String current=null] : iv_ruleIsNullValue= ruleIsNullValue EOF ;
    public final String entryRuleIsNullValue() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleIsNullValue = null;


        try {
            // InternalSQLParser.g:5608:51: (iv_ruleIsNullValue= ruleIsNullValue EOF )
            // InternalSQLParser.g:5609:2: iv_ruleIsNullValue= ruleIsNullValue EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIsNullValueRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIsNullValue=ruleIsNullValue();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIsNullValue.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleIsNullValue"


    // $ANTLR start "ruleIsNullValue"
    // InternalSQLParser.g:5615:1: ruleIsNullValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= IS (kw= NOT )? kw= NULL ) ;
    public final AntlrDatatypeRuleToken ruleIsNullValue() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            // InternalSQLParser.g:5621:2: ( (kw= IS (kw= NOT )? kw= NULL ) )
            // InternalSQLParser.g:5622:2: (kw= IS (kw= NOT )? kw= NULL )
            {
            // InternalSQLParser.g:5622:2: (kw= IS (kw= NOT )? kw= NULL )
            // InternalSQLParser.g:5623:3: kw= IS (kw= NOT )? kw= NULL
            {
            kw=(Token)match(input,IS,FOLLOW_80); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(kw);
              			newLeafNode(kw, grammarAccess.getIsNullValueAccess().getISKeyword_0());
              		
            }
            // InternalSQLParser.g:5628:3: (kw= NOT )?
            int alt99=2;
            int LA99_0 = input.LA(1);

            if ( (LA99_0==NOT) ) {
                alt99=1;
            }
            switch (alt99) {
                case 1 :
                    // InternalSQLParser.g:5629:4: kw= NOT
                    {
                    kw=(Token)match(input,NOT,FOLLOW_20); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getIsNullValueAccess().getNOTKeyword_1());
                      			
                    }

                    }
                    break;

            }

            kw=(Token)match(input,NULL,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(kw);
              			newLeafNode(kw, grammarAccess.getIsNullValueAccess().getNULLKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleIsNullValue"


    // $ANTLR start "entryRuleComparison"
    // InternalSQLParser.g:5644:1: entryRuleComparison returns [EObject current=null] : iv_ruleComparison= ruleComparison EOF ;
    public final EObject entryRuleComparison() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleComparison = null;


        try {
            // InternalSQLParser.g:5644:51: (iv_ruleComparison= ruleComparison EOF )
            // InternalSQLParser.g:5645:2: iv_ruleComparison= ruleComparison EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getComparisonRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleComparison=ruleComparison();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleComparison; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleComparison"


    // $ANTLR start "ruleComparison"
    // InternalSQLParser.g:5651:1: ruleComparison returns [EObject current=null] : ( ( ( (lv_operator_0_1= GreaterThanSign | lv_operator_0_2= GreaterThanSignEqualsSign | lv_operator_0_3= LessThanSign | lv_operator_0_4= LessThanSignEqualsSign | lv_operator_0_5= EqualsSign | lv_operator_0_6= LessThanSignGreaterThanSign | lv_operator_0_7= ExclamationMarkEqualsSign | lv_operator_0_8= CircumflexAccentEqualsSign ) ) ) ( ( (lv_subOperator_1_1= ANY | lv_subOperator_1_2= ALL | lv_subOperator_1_3= SOME ) ) )? ( (lv_op2_2_0= ruleOperand ) ) ) ;
    public final EObject ruleComparison() throws RecognitionException {
        EObject current = null;

        Token lv_operator_0_1=null;
        Token lv_operator_0_2=null;
        Token lv_operator_0_3=null;
        Token lv_operator_0_4=null;
        Token lv_operator_0_5=null;
        Token lv_operator_0_6=null;
        Token lv_operator_0_7=null;
        Token lv_operator_0_8=null;
        Token lv_subOperator_1_1=null;
        Token lv_subOperator_1_2=null;
        Token lv_subOperator_1_3=null;
        EObject lv_op2_2_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:5657:2: ( ( ( ( (lv_operator_0_1= GreaterThanSign | lv_operator_0_2= GreaterThanSignEqualsSign | lv_operator_0_3= LessThanSign | lv_operator_0_4= LessThanSignEqualsSign | lv_operator_0_5= EqualsSign | lv_operator_0_6= LessThanSignGreaterThanSign | lv_operator_0_7= ExclamationMarkEqualsSign | lv_operator_0_8= CircumflexAccentEqualsSign ) ) ) ( ( (lv_subOperator_1_1= ANY | lv_subOperator_1_2= ALL | lv_subOperator_1_3= SOME ) ) )? ( (lv_op2_2_0= ruleOperand ) ) ) )
            // InternalSQLParser.g:5658:2: ( ( ( (lv_operator_0_1= GreaterThanSign | lv_operator_0_2= GreaterThanSignEqualsSign | lv_operator_0_3= LessThanSign | lv_operator_0_4= LessThanSignEqualsSign | lv_operator_0_5= EqualsSign | lv_operator_0_6= LessThanSignGreaterThanSign | lv_operator_0_7= ExclamationMarkEqualsSign | lv_operator_0_8= CircumflexAccentEqualsSign ) ) ) ( ( (lv_subOperator_1_1= ANY | lv_subOperator_1_2= ALL | lv_subOperator_1_3= SOME ) ) )? ( (lv_op2_2_0= ruleOperand ) ) )
            {
            // InternalSQLParser.g:5658:2: ( ( ( (lv_operator_0_1= GreaterThanSign | lv_operator_0_2= GreaterThanSignEqualsSign | lv_operator_0_3= LessThanSign | lv_operator_0_4= LessThanSignEqualsSign | lv_operator_0_5= EqualsSign | lv_operator_0_6= LessThanSignGreaterThanSign | lv_operator_0_7= ExclamationMarkEqualsSign | lv_operator_0_8= CircumflexAccentEqualsSign ) ) ) ( ( (lv_subOperator_1_1= ANY | lv_subOperator_1_2= ALL | lv_subOperator_1_3= SOME ) ) )? ( (lv_op2_2_0= ruleOperand ) ) )
            // InternalSQLParser.g:5659:3: ( ( (lv_operator_0_1= GreaterThanSign | lv_operator_0_2= GreaterThanSignEqualsSign | lv_operator_0_3= LessThanSign | lv_operator_0_4= LessThanSignEqualsSign | lv_operator_0_5= EqualsSign | lv_operator_0_6= LessThanSignGreaterThanSign | lv_operator_0_7= ExclamationMarkEqualsSign | lv_operator_0_8= CircumflexAccentEqualsSign ) ) ) ( ( (lv_subOperator_1_1= ANY | lv_subOperator_1_2= ALL | lv_subOperator_1_3= SOME ) ) )? ( (lv_op2_2_0= ruleOperand ) )
            {
            // InternalSQLParser.g:5659:3: ( ( (lv_operator_0_1= GreaterThanSign | lv_operator_0_2= GreaterThanSignEqualsSign | lv_operator_0_3= LessThanSign | lv_operator_0_4= LessThanSignEqualsSign | lv_operator_0_5= EqualsSign | lv_operator_0_6= LessThanSignGreaterThanSign | lv_operator_0_7= ExclamationMarkEqualsSign | lv_operator_0_8= CircumflexAccentEqualsSign ) ) )
            // InternalSQLParser.g:5660:4: ( (lv_operator_0_1= GreaterThanSign | lv_operator_0_2= GreaterThanSignEqualsSign | lv_operator_0_3= LessThanSign | lv_operator_0_4= LessThanSignEqualsSign | lv_operator_0_5= EqualsSign | lv_operator_0_6= LessThanSignGreaterThanSign | lv_operator_0_7= ExclamationMarkEqualsSign | lv_operator_0_8= CircumflexAccentEqualsSign ) )
            {
            // InternalSQLParser.g:5660:4: ( (lv_operator_0_1= GreaterThanSign | lv_operator_0_2= GreaterThanSignEqualsSign | lv_operator_0_3= LessThanSign | lv_operator_0_4= LessThanSignEqualsSign | lv_operator_0_5= EqualsSign | lv_operator_0_6= LessThanSignGreaterThanSign | lv_operator_0_7= ExclamationMarkEqualsSign | lv_operator_0_8= CircumflexAccentEqualsSign ) )
            // InternalSQLParser.g:5661:5: (lv_operator_0_1= GreaterThanSign | lv_operator_0_2= GreaterThanSignEqualsSign | lv_operator_0_3= LessThanSign | lv_operator_0_4= LessThanSignEqualsSign | lv_operator_0_5= EqualsSign | lv_operator_0_6= LessThanSignGreaterThanSign | lv_operator_0_7= ExclamationMarkEqualsSign | lv_operator_0_8= CircumflexAccentEqualsSign )
            {
            // InternalSQLParser.g:5661:5: (lv_operator_0_1= GreaterThanSign | lv_operator_0_2= GreaterThanSignEqualsSign | lv_operator_0_3= LessThanSign | lv_operator_0_4= LessThanSignEqualsSign | lv_operator_0_5= EqualsSign | lv_operator_0_6= LessThanSignGreaterThanSign | lv_operator_0_7= ExclamationMarkEqualsSign | lv_operator_0_8= CircumflexAccentEqualsSign )
            int alt100=8;
            switch ( input.LA(1) ) {
            case GreaterThanSign:
                {
                alt100=1;
                }
                break;
            case GreaterThanSignEqualsSign:
                {
                alt100=2;
                }
                break;
            case LessThanSign:
                {
                alt100=3;
                }
                break;
            case LessThanSignEqualsSign:
                {
                alt100=4;
                }
                break;
            case EqualsSign:
                {
                alt100=5;
                }
                break;
            case LessThanSignGreaterThanSign:
                {
                alt100=6;
                }
                break;
            case ExclamationMarkEqualsSign:
                {
                alt100=7;
                }
                break;
            case CircumflexAccentEqualsSign:
                {
                alt100=8;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 100, 0, input);

                throw nvae;
            }

            switch (alt100) {
                case 1 :
                    // InternalSQLParser.g:5662:6: lv_operator_0_1= GreaterThanSign
                    {
                    lv_operator_0_1=(Token)match(input,GreaterThanSign,FOLLOW_81); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_operator_0_1, grammarAccess.getComparisonAccess().getOperatorGreaterThanSignKeyword_0_0_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getComparisonRule());
                      						}
                      						setWithLastConsumed(current, "operator", lv_operator_0_1, null);
                      					
                    }

                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:5673:6: lv_operator_0_2= GreaterThanSignEqualsSign
                    {
                    lv_operator_0_2=(Token)match(input,GreaterThanSignEqualsSign,FOLLOW_81); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_operator_0_2, grammarAccess.getComparisonAccess().getOperatorGreaterThanSignEqualsSignKeyword_0_0_1());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getComparisonRule());
                      						}
                      						setWithLastConsumed(current, "operator", lv_operator_0_2, null);
                      					
                    }

                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:5684:6: lv_operator_0_3= LessThanSign
                    {
                    lv_operator_0_3=(Token)match(input,LessThanSign,FOLLOW_81); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_operator_0_3, grammarAccess.getComparisonAccess().getOperatorLessThanSignKeyword_0_0_2());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getComparisonRule());
                      						}
                      						setWithLastConsumed(current, "operator", lv_operator_0_3, null);
                      					
                    }

                    }
                    break;
                case 4 :
                    // InternalSQLParser.g:5695:6: lv_operator_0_4= LessThanSignEqualsSign
                    {
                    lv_operator_0_4=(Token)match(input,LessThanSignEqualsSign,FOLLOW_81); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_operator_0_4, grammarAccess.getComparisonAccess().getOperatorLessThanSignEqualsSignKeyword_0_0_3());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getComparisonRule());
                      						}
                      						setWithLastConsumed(current, "operator", lv_operator_0_4, null);
                      					
                    }

                    }
                    break;
                case 5 :
                    // InternalSQLParser.g:5706:6: lv_operator_0_5= EqualsSign
                    {
                    lv_operator_0_5=(Token)match(input,EqualsSign,FOLLOW_81); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_operator_0_5, grammarAccess.getComparisonAccess().getOperatorEqualsSignKeyword_0_0_4());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getComparisonRule());
                      						}
                      						setWithLastConsumed(current, "operator", lv_operator_0_5, null);
                      					
                    }

                    }
                    break;
                case 6 :
                    // InternalSQLParser.g:5717:6: lv_operator_0_6= LessThanSignGreaterThanSign
                    {
                    lv_operator_0_6=(Token)match(input,LessThanSignGreaterThanSign,FOLLOW_81); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_operator_0_6, grammarAccess.getComparisonAccess().getOperatorLessThanSignGreaterThanSignKeyword_0_0_5());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getComparisonRule());
                      						}
                      						setWithLastConsumed(current, "operator", lv_operator_0_6, null);
                      					
                    }

                    }
                    break;
                case 7 :
                    // InternalSQLParser.g:5728:6: lv_operator_0_7= ExclamationMarkEqualsSign
                    {
                    lv_operator_0_7=(Token)match(input,ExclamationMarkEqualsSign,FOLLOW_81); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_operator_0_7, grammarAccess.getComparisonAccess().getOperatorExclamationMarkEqualsSignKeyword_0_0_6());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getComparisonRule());
                      						}
                      						setWithLastConsumed(current, "operator", lv_operator_0_7, null);
                      					
                    }

                    }
                    break;
                case 8 :
                    // InternalSQLParser.g:5739:6: lv_operator_0_8= CircumflexAccentEqualsSign
                    {
                    lv_operator_0_8=(Token)match(input,CircumflexAccentEqualsSign,FOLLOW_81); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_operator_0_8, grammarAccess.getComparisonAccess().getOperatorCircumflexAccentEqualsSignKeyword_0_0_7());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getComparisonRule());
                      						}
                      						setWithLastConsumed(current, "operator", lv_operator_0_8, null);
                      					
                    }

                    }
                    break;

            }


            }


            }

            // InternalSQLParser.g:5752:3: ( ( (lv_subOperator_1_1= ANY | lv_subOperator_1_2= ALL | lv_subOperator_1_3= SOME ) ) )?
            int alt102=2;
            int LA102_0 = input.LA(1);

            if ( (LA102_0==SOME||LA102_0==ALL||LA102_0==ANY) ) {
                alt102=1;
            }
            switch (alt102) {
                case 1 :
                    // InternalSQLParser.g:5753:4: ( (lv_subOperator_1_1= ANY | lv_subOperator_1_2= ALL | lv_subOperator_1_3= SOME ) )
                    {
                    // InternalSQLParser.g:5753:4: ( (lv_subOperator_1_1= ANY | lv_subOperator_1_2= ALL | lv_subOperator_1_3= SOME ) )
                    // InternalSQLParser.g:5754:5: (lv_subOperator_1_1= ANY | lv_subOperator_1_2= ALL | lv_subOperator_1_3= SOME )
                    {
                    // InternalSQLParser.g:5754:5: (lv_subOperator_1_1= ANY | lv_subOperator_1_2= ALL | lv_subOperator_1_3= SOME )
                    int alt101=3;
                    switch ( input.LA(1) ) {
                    case ANY:
                        {
                        alt101=1;
                        }
                        break;
                    case ALL:
                        {
                        alt101=2;
                        }
                        break;
                    case SOME:
                        {
                        alt101=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 101, 0, input);

                        throw nvae;
                    }

                    switch (alt101) {
                        case 1 :
                            // InternalSQLParser.g:5755:6: lv_subOperator_1_1= ANY
                            {
                            lv_subOperator_1_1=(Token)match(input,ANY,FOLLOW_74); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(lv_subOperator_1_1, grammarAccess.getComparisonAccess().getSubOperatorANYKeyword_1_0_0());
                              					
                            }
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getComparisonRule());
                              						}
                              						setWithLastConsumed(current, "subOperator", lv_subOperator_1_1, null);
                              					
                            }

                            }
                            break;
                        case 2 :
                            // InternalSQLParser.g:5766:6: lv_subOperator_1_2= ALL
                            {
                            lv_subOperator_1_2=(Token)match(input,ALL,FOLLOW_74); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(lv_subOperator_1_2, grammarAccess.getComparisonAccess().getSubOperatorALLKeyword_1_0_1());
                              					
                            }
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getComparisonRule());
                              						}
                              						setWithLastConsumed(current, "subOperator", lv_subOperator_1_2, null);
                              					
                            }

                            }
                            break;
                        case 3 :
                            // InternalSQLParser.g:5777:6: lv_subOperator_1_3= SOME
                            {
                            lv_subOperator_1_3=(Token)match(input,SOME,FOLLOW_74); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(lv_subOperator_1_3, grammarAccess.getComparisonAccess().getSubOperatorSOMEKeyword_1_0_2());
                              					
                            }
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getComparisonRule());
                              						}
                              						setWithLastConsumed(current, "subOperator", lv_subOperator_1_3, null);
                              					
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;

            }

            // InternalSQLParser.g:5790:3: ( (lv_op2_2_0= ruleOperand ) )
            // InternalSQLParser.g:5791:4: (lv_op2_2_0= ruleOperand )
            {
            // InternalSQLParser.g:5791:4: (lv_op2_2_0= ruleOperand )
            // InternalSQLParser.g:5792:5: lv_op2_2_0= ruleOperand
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getComparisonAccess().getOp2OperandParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_op2_2_0=ruleOperand();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getComparisonRule());
              					}
              					set(
              						current,
              						"op2",
              						lv_op2_2_0,
              						"org.xtext.example.mydsl_sql.SQL.Operand");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleComparison"


    // $ANTLR start "entryRuleLike"
    // InternalSQLParser.g:5813:1: entryRuleLike returns [EObject current=null] : iv_ruleLike= ruleLike EOF ;
    public final EObject entryRuleLike() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleLike = null;


        try {
            // InternalSQLParser.g:5813:45: (iv_ruleLike= ruleLike EOF )
            // InternalSQLParser.g:5814:2: iv_ruleLike= ruleLike EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLikeRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLike=ruleLike();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLike; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleLike"


    // $ANTLR start "ruleLike"
    // InternalSQLParser.g:5820:1: ruleLike returns [EObject current=null] : ( ( (lv_opLike_0_0= ruleLikeValue ) ) ( (lv_op2_1_0= ruleLikeOperand ) ) ) ;
    public final EObject ruleLike() throws RecognitionException {
        EObject current = null;

        AntlrDatatypeRuleToken lv_opLike_0_0 = null;

        EObject lv_op2_1_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:5826:2: ( ( ( (lv_opLike_0_0= ruleLikeValue ) ) ( (lv_op2_1_0= ruleLikeOperand ) ) ) )
            // InternalSQLParser.g:5827:2: ( ( (lv_opLike_0_0= ruleLikeValue ) ) ( (lv_op2_1_0= ruleLikeOperand ) ) )
            {
            // InternalSQLParser.g:5827:2: ( ( (lv_opLike_0_0= ruleLikeValue ) ) ( (lv_op2_1_0= ruleLikeOperand ) ) )
            // InternalSQLParser.g:5828:3: ( (lv_opLike_0_0= ruleLikeValue ) ) ( (lv_op2_1_0= ruleLikeOperand ) )
            {
            // InternalSQLParser.g:5828:3: ( (lv_opLike_0_0= ruleLikeValue ) )
            // InternalSQLParser.g:5829:4: (lv_opLike_0_0= ruleLikeValue )
            {
            // InternalSQLParser.g:5829:4: (lv_opLike_0_0= ruleLikeValue )
            // InternalSQLParser.g:5830:5: lv_opLike_0_0= ruleLikeValue
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getLikeAccess().getOpLikeLikeValueParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_82);
            lv_opLike_0_0=ruleLikeValue();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getLikeRule());
              					}
              					set(
              						current,
              						"opLike",
              						lv_opLike_0_0,
              						"org.xtext.example.mydsl_sql.SQL.LikeValue");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:5847:3: ( (lv_op2_1_0= ruleLikeOperand ) )
            // InternalSQLParser.g:5848:4: (lv_op2_1_0= ruleLikeOperand )
            {
            // InternalSQLParser.g:5848:4: (lv_op2_1_0= ruleLikeOperand )
            // InternalSQLParser.g:5849:5: lv_op2_1_0= ruleLikeOperand
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getLikeAccess().getOp2LikeOperandParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_op2_1_0=ruleLikeOperand();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getLikeRule());
              					}
              					set(
              						current,
              						"op2",
              						lv_op2_1_0,
              						"org.xtext.example.mydsl_sql.SQL.LikeOperand");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleLike"


    // $ANTLR start "entryRuleLikeValue"
    // InternalSQLParser.g:5870:1: entryRuleLikeValue returns [String current=null] : iv_ruleLikeValue= ruleLikeValue EOF ;
    public final String entryRuleLikeValue() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleLikeValue = null;


        try {
            // InternalSQLParser.g:5870:49: (iv_ruleLikeValue= ruleLikeValue EOF )
            // InternalSQLParser.g:5871:2: iv_ruleLikeValue= ruleLikeValue EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLikeValueRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLikeValue=ruleLikeValue();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLikeValue.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleLikeValue"


    // $ANTLR start "ruleLikeValue"
    // InternalSQLParser.g:5877:1: ruleLikeValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : ( (kw= NOT )? kw= LIKE ) ;
    public final AntlrDatatypeRuleToken ruleLikeValue() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            // InternalSQLParser.g:5883:2: ( ( (kw= NOT )? kw= LIKE ) )
            // InternalSQLParser.g:5884:2: ( (kw= NOT )? kw= LIKE )
            {
            // InternalSQLParser.g:5884:2: ( (kw= NOT )? kw= LIKE )
            // InternalSQLParser.g:5885:3: (kw= NOT )? kw= LIKE
            {
            // InternalSQLParser.g:5885:3: (kw= NOT )?
            int alt103=2;
            int LA103_0 = input.LA(1);

            if ( (LA103_0==NOT) ) {
                alt103=1;
            }
            switch (alt103) {
                case 1 :
                    // InternalSQLParser.g:5886:4: kw= NOT
                    {
                    kw=(Token)match(input,NOT,FOLLOW_83); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getLikeValueAccess().getNOTKeyword_0());
                      			
                    }

                    }
                    break;

            }

            kw=(Token)match(input,LIKE,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(kw);
              			newLeafNode(kw, grammarAccess.getLikeValueAccess().getLIKEKeyword_1());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleLikeValue"


    // $ANTLR start "entryRuleLikeOperand"
    // InternalSQLParser.g:5901:1: entryRuleLikeOperand returns [EObject current=null] : iv_ruleLikeOperand= ruleLikeOperand EOF ;
    public final EObject entryRuleLikeOperand() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleLikeOperand = null;


        try {
            // InternalSQLParser.g:5901:52: (iv_ruleLikeOperand= ruleLikeOperand EOF )
            // InternalSQLParser.g:5902:2: iv_ruleLikeOperand= ruleLikeOperand EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLikeOperandRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLikeOperand=ruleLikeOperand();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLikeOperand; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleLikeOperand"


    // $ANTLR start "ruleLikeOperand"
    // InternalSQLParser.g:5908:1: ruleLikeOperand returns [EObject current=null] : ( ( (lv_op2_0_0= ruleStringOperand ) ) | ( (lv_fop2_1_0= ruleOperandFunction ) ) | ( (lv_fcast_2_0= ruleOpFunctionCast ) ) | ( (lv_fparam_3_0= ruleParameterOperand ) ) ) ;
    public final EObject ruleLikeOperand() throws RecognitionException {
        EObject current = null;

        AntlrDatatypeRuleToken lv_op2_0_0 = null;

        EObject lv_fop2_1_0 = null;

        EObject lv_fcast_2_0 = null;

        EObject lv_fparam_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:5914:2: ( ( ( (lv_op2_0_0= ruleStringOperand ) ) | ( (lv_fop2_1_0= ruleOperandFunction ) ) | ( (lv_fcast_2_0= ruleOpFunctionCast ) ) | ( (lv_fparam_3_0= ruleParameterOperand ) ) ) )
            // InternalSQLParser.g:5915:2: ( ( (lv_op2_0_0= ruleStringOperand ) ) | ( (lv_fop2_1_0= ruleOperandFunction ) ) | ( (lv_fcast_2_0= ruleOpFunctionCast ) ) | ( (lv_fparam_3_0= ruleParameterOperand ) ) )
            {
            // InternalSQLParser.g:5915:2: ( ( (lv_op2_0_0= ruleStringOperand ) ) | ( (lv_fop2_1_0= ruleOperandFunction ) ) | ( (lv_fcast_2_0= ruleOpFunctionCast ) ) | ( (lv_fparam_3_0= ruleParameterOperand ) ) )
            int alt104=4;
            switch ( input.LA(1) ) {
            case RULE_STRING_:
                {
                alt104=1;
                }
                break;
            case RULE_ID:
                {
                alt104=2;
                }
                break;
            case CAST:
                {
                alt104=3;
                }
                break;
            case RULE_JRPARAM:
                {
                alt104=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 104, 0, input);

                throw nvae;
            }

            switch (alt104) {
                case 1 :
                    // InternalSQLParser.g:5916:3: ( (lv_op2_0_0= ruleStringOperand ) )
                    {
                    // InternalSQLParser.g:5916:3: ( (lv_op2_0_0= ruleStringOperand ) )
                    // InternalSQLParser.g:5917:4: (lv_op2_0_0= ruleStringOperand )
                    {
                    // InternalSQLParser.g:5917:4: (lv_op2_0_0= ruleStringOperand )
                    // InternalSQLParser.g:5918:5: lv_op2_0_0= ruleStringOperand
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getLikeOperandAccess().getOp2StringOperandParserRuleCall_0_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_op2_0_0=ruleStringOperand();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getLikeOperandRule());
                      					}
                      					set(
                      						current,
                      						"op2",
                      						lv_op2_0_0,
                      						"org.xtext.example.mydsl_sql.SQL.StringOperand");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:5936:3: ( (lv_fop2_1_0= ruleOperandFunction ) )
                    {
                    // InternalSQLParser.g:5936:3: ( (lv_fop2_1_0= ruleOperandFunction ) )
                    // InternalSQLParser.g:5937:4: (lv_fop2_1_0= ruleOperandFunction )
                    {
                    // InternalSQLParser.g:5937:4: (lv_fop2_1_0= ruleOperandFunction )
                    // InternalSQLParser.g:5938:5: lv_fop2_1_0= ruleOperandFunction
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getLikeOperandAccess().getFop2OperandFunctionParserRuleCall_1_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_fop2_1_0=ruleOperandFunction();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getLikeOperandRule());
                      					}
                      					set(
                      						current,
                      						"fop2",
                      						lv_fop2_1_0,
                      						"org.xtext.example.mydsl_sql.SQL.OperandFunction");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:5956:3: ( (lv_fcast_2_0= ruleOpFunctionCast ) )
                    {
                    // InternalSQLParser.g:5956:3: ( (lv_fcast_2_0= ruleOpFunctionCast ) )
                    // InternalSQLParser.g:5957:4: (lv_fcast_2_0= ruleOpFunctionCast )
                    {
                    // InternalSQLParser.g:5957:4: (lv_fcast_2_0= ruleOpFunctionCast )
                    // InternalSQLParser.g:5958:5: lv_fcast_2_0= ruleOpFunctionCast
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getLikeOperandAccess().getFcastOpFunctionCastParserRuleCall_2_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_fcast_2_0=ruleOpFunctionCast();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getLikeOperandRule());
                      					}
                      					set(
                      						current,
                      						"fcast",
                      						lv_fcast_2_0,
                      						"org.xtext.example.mydsl_sql.SQL.OpFunctionCast");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 4 :
                    // InternalSQLParser.g:5976:3: ( (lv_fparam_3_0= ruleParameterOperand ) )
                    {
                    // InternalSQLParser.g:5976:3: ( (lv_fparam_3_0= ruleParameterOperand ) )
                    // InternalSQLParser.g:5977:4: (lv_fparam_3_0= ruleParameterOperand )
                    {
                    // InternalSQLParser.g:5977:4: (lv_fparam_3_0= ruleParameterOperand )
                    // InternalSQLParser.g:5978:5: lv_fparam_3_0= ruleParameterOperand
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getLikeOperandAccess().getFparamParameterOperandParserRuleCall_3_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_fparam_3_0=ruleParameterOperand();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getLikeOperandRule());
                      					}
                      					set(
                      						current,
                      						"fparam",
                      						lv_fparam_3_0,
                      						"org.xtext.example.mydsl_sql.SQL.ParameterOperand");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleLikeOperand"


    // $ANTLR start "entryRuleBetween"
    // InternalSQLParser.g:5999:1: entryRuleBetween returns [EObject current=null] : iv_ruleBetween= ruleBetween EOF ;
    public final EObject entryRuleBetween() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleBetween = null;


        try {
            // InternalSQLParser.g:5999:48: (iv_ruleBetween= ruleBetween EOF )
            // InternalSQLParser.g:6000:2: iv_ruleBetween= ruleBetween EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBetweenRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBetween=ruleBetween();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBetween; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleBetween"


    // $ANTLR start "ruleBetween"
    // InternalSQLParser.g:6006:1: ruleBetween returns [EObject current=null] : ( ( (lv_opBetween_0_0= ruleBetweenValue ) ) ( (lv_op2_1_0= ruleOperandGroup ) ) otherlv_2= AND ( (lv_op3_3_0= ruleOperandGroup ) ) ) ;
    public final EObject ruleBetween() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        AntlrDatatypeRuleToken lv_opBetween_0_0 = null;

        EObject lv_op2_1_0 = null;

        EObject lv_op3_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:6012:2: ( ( ( (lv_opBetween_0_0= ruleBetweenValue ) ) ( (lv_op2_1_0= ruleOperandGroup ) ) otherlv_2= AND ( (lv_op3_3_0= ruleOperandGroup ) ) ) )
            // InternalSQLParser.g:6013:2: ( ( (lv_opBetween_0_0= ruleBetweenValue ) ) ( (lv_op2_1_0= ruleOperandGroup ) ) otherlv_2= AND ( (lv_op3_3_0= ruleOperandGroup ) ) )
            {
            // InternalSQLParser.g:6013:2: ( ( (lv_opBetween_0_0= ruleBetweenValue ) ) ( (lv_op2_1_0= ruleOperandGroup ) ) otherlv_2= AND ( (lv_op3_3_0= ruleOperandGroup ) ) )
            // InternalSQLParser.g:6014:3: ( (lv_opBetween_0_0= ruleBetweenValue ) ) ( (lv_op2_1_0= ruleOperandGroup ) ) otherlv_2= AND ( (lv_op3_3_0= ruleOperandGroup ) )
            {
            // InternalSQLParser.g:6014:3: ( (lv_opBetween_0_0= ruleBetweenValue ) )
            // InternalSQLParser.g:6015:4: (lv_opBetween_0_0= ruleBetweenValue )
            {
            // InternalSQLParser.g:6015:4: (lv_opBetween_0_0= ruleBetweenValue )
            // InternalSQLParser.g:6016:5: lv_opBetween_0_0= ruleBetweenValue
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getBetweenAccess().getOpBetweenBetweenValueParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_74);
            lv_opBetween_0_0=ruleBetweenValue();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getBetweenRule());
              					}
              					set(
              						current,
              						"opBetween",
              						lv_opBetween_0_0,
              						"org.xtext.example.mydsl_sql.SQL.BetweenValue");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:6033:3: ( (lv_op2_1_0= ruleOperandGroup ) )
            // InternalSQLParser.g:6034:4: (lv_op2_1_0= ruleOperandGroup )
            {
            // InternalSQLParser.g:6034:4: (lv_op2_1_0= ruleOperandGroup )
            // InternalSQLParser.g:6035:5: lv_op2_1_0= ruleOperandGroup
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getBetweenAccess().getOp2OperandGroupParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_84);
            lv_op2_1_0=ruleOperandGroup();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getBetweenRule());
              					}
              					set(
              						current,
              						"op2",
              						lv_op2_1_0,
              						"org.xtext.example.mydsl_sql.SQL.OperandGroup");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_2=(Token)match(input,AND,FOLLOW_74); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getBetweenAccess().getANDKeyword_2());
              		
            }
            // InternalSQLParser.g:6056:3: ( (lv_op3_3_0= ruleOperandGroup ) )
            // InternalSQLParser.g:6057:4: (lv_op3_3_0= ruleOperandGroup )
            {
            // InternalSQLParser.g:6057:4: (lv_op3_3_0= ruleOperandGroup )
            // InternalSQLParser.g:6058:5: lv_op3_3_0= ruleOperandGroup
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getBetweenAccess().getOp3OperandGroupParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_op3_3_0=ruleOperandGroup();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getBetweenRule());
              					}
              					set(
              						current,
              						"op3",
              						lv_op3_3_0,
              						"org.xtext.example.mydsl_sql.SQL.OperandGroup");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleBetween"


    // $ANTLR start "entryRuleBetweenValue"
    // InternalSQLParser.g:6079:1: entryRuleBetweenValue returns [String current=null] : iv_ruleBetweenValue= ruleBetweenValue EOF ;
    public final String entryRuleBetweenValue() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleBetweenValue = null;


        try {
            // InternalSQLParser.g:6079:52: (iv_ruleBetweenValue= ruleBetweenValue EOF )
            // InternalSQLParser.g:6080:2: iv_ruleBetweenValue= ruleBetweenValue EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBetweenValueRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBetweenValue=ruleBetweenValue();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBetweenValue.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleBetweenValue"


    // $ANTLR start "ruleBetweenValue"
    // InternalSQLParser.g:6086:1: ruleBetweenValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : ( (kw= NOT )? kw= BETWEEN ) ;
    public final AntlrDatatypeRuleToken ruleBetweenValue() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            // InternalSQLParser.g:6092:2: ( ( (kw= NOT )? kw= BETWEEN ) )
            // InternalSQLParser.g:6093:2: ( (kw= NOT )? kw= BETWEEN )
            {
            // InternalSQLParser.g:6093:2: ( (kw= NOT )? kw= BETWEEN )
            // InternalSQLParser.g:6094:3: (kw= NOT )? kw= BETWEEN
            {
            // InternalSQLParser.g:6094:3: (kw= NOT )?
            int alt105=2;
            int LA105_0 = input.LA(1);

            if ( (LA105_0==NOT) ) {
                alt105=1;
            }
            switch (alt105) {
                case 1 :
                    // InternalSQLParser.g:6095:4: kw= NOT
                    {
                    kw=(Token)match(input,NOT,FOLLOW_85); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getBetweenValueAccess().getNOTKeyword_0());
                      			
                    }

                    }
                    break;

            }

            kw=(Token)match(input,BETWEEN,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(kw);
              			newLeafNode(kw, grammarAccess.getBetweenValueAccess().getBETWEENKeyword_1());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleBetweenValue"


    // $ANTLR start "entryRuleInOperator"
    // InternalSQLParser.g:6110:1: entryRuleInOperator returns [EObject current=null] : iv_ruleInOperator= ruleInOperator EOF ;
    public final EObject entryRuleInOperator() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleInOperator = null;


        try {
            // InternalSQLParser.g:6110:51: (iv_ruleInOperator= ruleInOperator EOF )
            // InternalSQLParser.g:6111:2: iv_ruleInOperator= ruleInOperator EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getInOperatorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleInOperator=ruleInOperator();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleInOperator; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleInOperator"


    // $ANTLR start "ruleInOperator"
    // InternalSQLParser.g:6117:1: ruleInOperator returns [EObject current=null] : ( () ( (lv_op_1_0= ruleInValue ) ) ( ( (lv_subquery_2_0= ruleSubQueryOperand ) ) | ( (lv_opList_3_0= ruleOperandListGroup ) ) ) ) ;
    public final EObject ruleInOperator() throws RecognitionException {
        EObject current = null;

        AntlrDatatypeRuleToken lv_op_1_0 = null;

        EObject lv_subquery_2_0 = null;

        EObject lv_opList_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:6123:2: ( ( () ( (lv_op_1_0= ruleInValue ) ) ( ( (lv_subquery_2_0= ruleSubQueryOperand ) ) | ( (lv_opList_3_0= ruleOperandListGroup ) ) ) ) )
            // InternalSQLParser.g:6124:2: ( () ( (lv_op_1_0= ruleInValue ) ) ( ( (lv_subquery_2_0= ruleSubQueryOperand ) ) | ( (lv_opList_3_0= ruleOperandListGroup ) ) ) )
            {
            // InternalSQLParser.g:6124:2: ( () ( (lv_op_1_0= ruleInValue ) ) ( ( (lv_subquery_2_0= ruleSubQueryOperand ) ) | ( (lv_opList_3_0= ruleOperandListGroup ) ) ) )
            // InternalSQLParser.g:6125:3: () ( (lv_op_1_0= ruleInValue ) ) ( ( (lv_subquery_2_0= ruleSubQueryOperand ) ) | ( (lv_opList_3_0= ruleOperandListGroup ) ) )
            {
            // InternalSQLParser.g:6125:3: ()
            // InternalSQLParser.g:6126:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getInOperatorAccess().getInOperAction_0(),
              					current);
              			
            }

            }

            // InternalSQLParser.g:6135:3: ( (lv_op_1_0= ruleInValue ) )
            // InternalSQLParser.g:6136:4: (lv_op_1_0= ruleInValue )
            {
            // InternalSQLParser.g:6136:4: (lv_op_1_0= ruleInValue )
            // InternalSQLParser.g:6137:5: lv_op_1_0= ruleInValue
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getInOperatorAccess().getOpInValueParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_8);
            lv_op_1_0=ruleInValue();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getInOperatorRule());
              					}
              					set(
              						current,
              						"op",
              						lv_op_1_0,
              						"org.xtext.example.mydsl_sql.SQL.InValue");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:6154:3: ( ( (lv_subquery_2_0= ruleSubQueryOperand ) ) | ( (lv_opList_3_0= ruleOperandListGroup ) ) )
            int alt106=2;
            int LA106_0 = input.LA(1);

            if ( (LA106_0==LeftParenthesis) ) {
                int LA106_1 = input.LA(2);

                if ( (LA106_1==SELECT) ) {
                    alt106=1;
                }
                else if ( ((LA106_1>=RULE_SIGNED_DOUBLE && LA106_1<=RULE_TIMESTAMP)||LA106_1==RULE_STRING_) ) {
                    alt106=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 106, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 106, 0, input);

                throw nvae;
            }
            switch (alt106) {
                case 1 :
                    // InternalSQLParser.g:6155:4: ( (lv_subquery_2_0= ruleSubQueryOperand ) )
                    {
                    // InternalSQLParser.g:6155:4: ( (lv_subquery_2_0= ruleSubQueryOperand ) )
                    // InternalSQLParser.g:6156:5: (lv_subquery_2_0= ruleSubQueryOperand )
                    {
                    // InternalSQLParser.g:6156:5: (lv_subquery_2_0= ruleSubQueryOperand )
                    // InternalSQLParser.g:6157:6: lv_subquery_2_0= ruleSubQueryOperand
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getInOperatorAccess().getSubquerySubQueryOperandParserRuleCall_2_0_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_subquery_2_0=ruleSubQueryOperand();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getInOperatorRule());
                      						}
                      						set(
                      							current,
                      							"subquery",
                      							lv_subquery_2_0,
                      							"org.xtext.example.mydsl_sql.SQL.SubQueryOperand");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:6175:4: ( (lv_opList_3_0= ruleOperandListGroup ) )
                    {
                    // InternalSQLParser.g:6175:4: ( (lv_opList_3_0= ruleOperandListGroup ) )
                    // InternalSQLParser.g:6176:5: (lv_opList_3_0= ruleOperandListGroup )
                    {
                    // InternalSQLParser.g:6176:5: (lv_opList_3_0= ruleOperandListGroup )
                    // InternalSQLParser.g:6177:6: lv_opList_3_0= ruleOperandListGroup
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getInOperatorAccess().getOpListOperandListGroupParserRuleCall_2_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_opList_3_0=ruleOperandListGroup();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getInOperatorRule());
                      						}
                      						set(
                      							current,
                      							"opList",
                      							lv_opList_3_0,
                      							"org.xtext.example.mydsl_sql.SQL.OperandListGroup");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleInOperator"


    // $ANTLR start "entryRuleInValue"
    // InternalSQLParser.g:6199:1: entryRuleInValue returns [String current=null] : iv_ruleInValue= ruleInValue EOF ;
    public final String entryRuleInValue() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleInValue = null;


        try {
            // InternalSQLParser.g:6199:47: (iv_ruleInValue= ruleInValue EOF )
            // InternalSQLParser.g:6200:2: iv_ruleInValue= ruleInValue EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getInValueRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleInValue=ruleInValue();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleInValue.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleInValue"


    // $ANTLR start "ruleInValue"
    // InternalSQLParser.g:6206:1: ruleInValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : ( (kw= NOT )? kw= IN ) ;
    public final AntlrDatatypeRuleToken ruleInValue() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            // InternalSQLParser.g:6212:2: ( ( (kw= NOT )? kw= IN ) )
            // InternalSQLParser.g:6213:2: ( (kw= NOT )? kw= IN )
            {
            // InternalSQLParser.g:6213:2: ( (kw= NOT )? kw= IN )
            // InternalSQLParser.g:6214:3: (kw= NOT )? kw= IN
            {
            // InternalSQLParser.g:6214:3: (kw= NOT )?
            int alt107=2;
            int LA107_0 = input.LA(1);

            if ( (LA107_0==NOT) ) {
                alt107=1;
            }
            switch (alt107) {
                case 1 :
                    // InternalSQLParser.g:6215:4: kw= NOT
                    {
                    kw=(Token)match(input,NOT,FOLLOW_62); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getInValueAccess().getNOTKeyword_0());
                      			
                    }

                    }
                    break;

            }

            kw=(Token)match(input,IN,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(kw);
              			newLeafNode(kw, grammarAccess.getInValueAccess().getINKeyword_1());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleInValue"


    // $ANTLR start "entryRuleExistsOperator"
    // InternalSQLParser.g:6230:1: entryRuleExistsOperator returns [EObject current=null] : iv_ruleExistsOperator= ruleExistsOperator EOF ;
    public final EObject entryRuleExistsOperator() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExistsOperator = null;


        try {
            // InternalSQLParser.g:6230:55: (iv_ruleExistsOperator= ruleExistsOperator EOF )
            // InternalSQLParser.g:6231:2: iv_ruleExistsOperator= ruleExistsOperator EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExistsOperatorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExistsOperator=ruleExistsOperator();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExistsOperator; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleExistsOperator"


    // $ANTLR start "ruleExistsOperator"
    // InternalSQLParser.g:6237:1: ruleExistsOperator returns [EObject current=null] : ( () ( (lv_op_1_0= ruleExistsValue ) ) ( ( (lv_subquery_2_0= ruleSubQueryOperand ) ) | ( (lv_opList_3_0= ruleOperandListGroup ) ) ) ) ;
    public final EObject ruleExistsOperator() throws RecognitionException {
        EObject current = null;

        AntlrDatatypeRuleToken lv_op_1_0 = null;

        EObject lv_subquery_2_0 = null;

        EObject lv_opList_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:6243:2: ( ( () ( (lv_op_1_0= ruleExistsValue ) ) ( ( (lv_subquery_2_0= ruleSubQueryOperand ) ) | ( (lv_opList_3_0= ruleOperandListGroup ) ) ) ) )
            // InternalSQLParser.g:6244:2: ( () ( (lv_op_1_0= ruleExistsValue ) ) ( ( (lv_subquery_2_0= ruleSubQueryOperand ) ) | ( (lv_opList_3_0= ruleOperandListGroup ) ) ) )
            {
            // InternalSQLParser.g:6244:2: ( () ( (lv_op_1_0= ruleExistsValue ) ) ( ( (lv_subquery_2_0= ruleSubQueryOperand ) ) | ( (lv_opList_3_0= ruleOperandListGroup ) ) ) )
            // InternalSQLParser.g:6245:3: () ( (lv_op_1_0= ruleExistsValue ) ) ( ( (lv_subquery_2_0= ruleSubQueryOperand ) ) | ( (lv_opList_3_0= ruleOperandListGroup ) ) )
            {
            // InternalSQLParser.g:6245:3: ()
            // InternalSQLParser.g:6246:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getExistsOperatorAccess().getExistsOperAction_0(),
              					current);
              			
            }

            }

            // InternalSQLParser.g:6255:3: ( (lv_op_1_0= ruleExistsValue ) )
            // InternalSQLParser.g:6256:4: (lv_op_1_0= ruleExistsValue )
            {
            // InternalSQLParser.g:6256:4: (lv_op_1_0= ruleExistsValue )
            // InternalSQLParser.g:6257:5: lv_op_1_0= ruleExistsValue
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getExistsOperatorAccess().getOpExistsValueParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_8);
            lv_op_1_0=ruleExistsValue();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getExistsOperatorRule());
              					}
              					set(
              						current,
              						"op",
              						lv_op_1_0,
              						"org.xtext.example.mydsl_sql.SQL.ExistsValue");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:6274:3: ( ( (lv_subquery_2_0= ruleSubQueryOperand ) ) | ( (lv_opList_3_0= ruleOperandListGroup ) ) )
            int alt108=2;
            int LA108_0 = input.LA(1);

            if ( (LA108_0==LeftParenthesis) ) {
                int LA108_1 = input.LA(2);

                if ( (LA108_1==SELECT) ) {
                    alt108=1;
                }
                else if ( ((LA108_1>=RULE_SIGNED_DOUBLE && LA108_1<=RULE_TIMESTAMP)||LA108_1==RULE_STRING_) ) {
                    alt108=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 108, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 108, 0, input);

                throw nvae;
            }
            switch (alt108) {
                case 1 :
                    // InternalSQLParser.g:6275:4: ( (lv_subquery_2_0= ruleSubQueryOperand ) )
                    {
                    // InternalSQLParser.g:6275:4: ( (lv_subquery_2_0= ruleSubQueryOperand ) )
                    // InternalSQLParser.g:6276:5: (lv_subquery_2_0= ruleSubQueryOperand )
                    {
                    // InternalSQLParser.g:6276:5: (lv_subquery_2_0= ruleSubQueryOperand )
                    // InternalSQLParser.g:6277:6: lv_subquery_2_0= ruleSubQueryOperand
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getExistsOperatorAccess().getSubquerySubQueryOperandParserRuleCall_2_0_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_subquery_2_0=ruleSubQueryOperand();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExistsOperatorRule());
                      						}
                      						set(
                      							current,
                      							"subquery",
                      							lv_subquery_2_0,
                      							"org.xtext.example.mydsl_sql.SQL.SubQueryOperand");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:6295:4: ( (lv_opList_3_0= ruleOperandListGroup ) )
                    {
                    // InternalSQLParser.g:6295:4: ( (lv_opList_3_0= ruleOperandListGroup ) )
                    // InternalSQLParser.g:6296:5: (lv_opList_3_0= ruleOperandListGroup )
                    {
                    // InternalSQLParser.g:6296:5: (lv_opList_3_0= ruleOperandListGroup )
                    // InternalSQLParser.g:6297:6: lv_opList_3_0= ruleOperandListGroup
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getExistsOperatorAccess().getOpListOperandListGroupParserRuleCall_2_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_opList_3_0=ruleOperandListGroup();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExistsOperatorRule());
                      						}
                      						set(
                      							current,
                      							"opList",
                      							lv_opList_3_0,
                      							"org.xtext.example.mydsl_sql.SQL.OperandListGroup");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleExistsOperator"


    // $ANTLR start "entryRuleExistsValue"
    // InternalSQLParser.g:6319:1: entryRuleExistsValue returns [String current=null] : iv_ruleExistsValue= ruleExistsValue EOF ;
    public final String entryRuleExistsValue() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleExistsValue = null;


        try {
            // InternalSQLParser.g:6319:51: (iv_ruleExistsValue= ruleExistsValue EOF )
            // InternalSQLParser.g:6320:2: iv_ruleExistsValue= ruleExistsValue EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExistsValueRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExistsValue=ruleExistsValue();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExistsValue.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleExistsValue"


    // $ANTLR start "ruleExistsValue"
    // InternalSQLParser.g:6326:1: ruleExistsValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : ( (kw= NOT )? kw= EXISTS ) ;
    public final AntlrDatatypeRuleToken ruleExistsValue() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            // InternalSQLParser.g:6332:2: ( ( (kw= NOT )? kw= EXISTS ) )
            // InternalSQLParser.g:6333:2: ( (kw= NOT )? kw= EXISTS )
            {
            // InternalSQLParser.g:6333:2: ( (kw= NOT )? kw= EXISTS )
            // InternalSQLParser.g:6334:3: (kw= NOT )? kw= EXISTS
            {
            // InternalSQLParser.g:6334:3: (kw= NOT )?
            int alt109=2;
            int LA109_0 = input.LA(1);

            if ( (LA109_0==NOT) ) {
                alt109=1;
            }
            switch (alt109) {
                case 1 :
                    // InternalSQLParser.g:6335:4: kw= NOT
                    {
                    kw=(Token)match(input,NOT,FOLLOW_86); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getExistsValueAccess().getNOTKeyword_0());
                      			
                    }

                    }
                    break;

            }

            kw=(Token)match(input,EXISTS,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(kw);
              			newLeafNode(kw, grammarAccess.getExistsValueAccess().getEXISTSKeyword_1());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleExistsValue"


    // $ANTLR start "entryRuleOperandListGroup"
    // InternalSQLParser.g:6350:1: entryRuleOperandListGroup returns [EObject current=null] : iv_ruleOperandListGroup= ruleOperandListGroup EOF ;
    public final EObject entryRuleOperandListGroup() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOperandListGroup = null;


        try {
            // InternalSQLParser.g:6350:57: (iv_ruleOperandListGroup= ruleOperandListGroup EOF )
            // InternalSQLParser.g:6351:2: iv_ruleOperandListGroup= ruleOperandListGroup EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOperandListGroupRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOperandListGroup=ruleOperandListGroup();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOperandListGroup; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOperandListGroup"


    // $ANTLR start "ruleOperandListGroup"
    // InternalSQLParser.g:6357:1: ruleOperandListGroup returns [EObject current=null] : (otherlv_0= LeftParenthesis ( (lv_opGroup_1_0= ruleOperandList ) ) otherlv_2= RightParenthesis ) ;
    public final EObject ruleOperandListGroup() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_opGroup_1_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:6363:2: ( (otherlv_0= LeftParenthesis ( (lv_opGroup_1_0= ruleOperandList ) ) otherlv_2= RightParenthesis ) )
            // InternalSQLParser.g:6364:2: (otherlv_0= LeftParenthesis ( (lv_opGroup_1_0= ruleOperandList ) ) otherlv_2= RightParenthesis )
            {
            // InternalSQLParser.g:6364:2: (otherlv_0= LeftParenthesis ( (lv_opGroup_1_0= ruleOperandList ) ) otherlv_2= RightParenthesis )
            // InternalSQLParser.g:6365:3: otherlv_0= LeftParenthesis ( (lv_opGroup_1_0= ruleOperandList ) ) otherlv_2= RightParenthesis
            {
            otherlv_0=(Token)match(input,LeftParenthesis,FOLLOW_87); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getOperandListGroupAccess().getLeftParenthesisKeyword_0());
              		
            }
            // InternalSQLParser.g:6369:3: ( (lv_opGroup_1_0= ruleOperandList ) )
            // InternalSQLParser.g:6370:4: (lv_opGroup_1_0= ruleOperandList )
            {
            // InternalSQLParser.g:6370:4: (lv_opGroup_1_0= ruleOperandList )
            // InternalSQLParser.g:6371:5: lv_opGroup_1_0= ruleOperandList
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getOperandListGroupAccess().getOpGroupOperandListParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_10);
            lv_opGroup_1_0=ruleOperandList();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getOperandListGroupRule());
              					}
              					set(
              						current,
              						"opGroup",
              						lv_opGroup_1_0,
              						"org.xtext.example.mydsl_sql.SQL.OperandList");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getOperandListGroupAccess().getRightParenthesisKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOperandListGroup"


    // $ANTLR start "entryRuleOperandList"
    // InternalSQLParser.g:6396:1: entryRuleOperandList returns [EObject current=null] : iv_ruleOperandList= ruleOperandList EOF ;
    public final EObject entryRuleOperandList() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOperandList = null;


        try {
            // InternalSQLParser.g:6396:52: (iv_ruleOperandList= ruleOperandList EOF )
            // InternalSQLParser.g:6397:2: iv_ruleOperandList= ruleOperandList EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOperandListRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOperandList=ruleOperandList();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOperandList; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOperandList"


    // $ANTLR start "ruleOperandList"
    // InternalSQLParser.g:6403:1: ruleOperandList returns [EObject current=null] : (this_ScalarOperand_0= ruleScalarOperand ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleScalarOperand ) ) )+ )? ) ;
    public final EObject ruleOperandList() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_ScalarOperand_0 = null;

        EObject lv_entries_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:6409:2: ( (this_ScalarOperand_0= ruleScalarOperand ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleScalarOperand ) ) )+ )? ) )
            // InternalSQLParser.g:6410:2: (this_ScalarOperand_0= ruleScalarOperand ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleScalarOperand ) ) )+ )? )
            {
            // InternalSQLParser.g:6410:2: (this_ScalarOperand_0= ruleScalarOperand ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleScalarOperand ) ) )+ )? )
            // InternalSQLParser.g:6411:3: this_ScalarOperand_0= ruleScalarOperand ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleScalarOperand ) ) )+ )?
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getOperandListAccess().getScalarOperandParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_11);
            this_ScalarOperand_0=ruleScalarOperand();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ScalarOperand_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:6422:3: ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleScalarOperand ) ) )+ )?
            int alt111=2;
            int LA111_0 = input.LA(1);

            if ( (LA111_0==Comma) ) {
                alt111=1;
            }
            switch (alt111) {
                case 1 :
                    // InternalSQLParser.g:6423:4: () (otherlv_2= Comma ( (lv_entries_3_0= ruleScalarOperand ) ) )+
                    {
                    // InternalSQLParser.g:6423:4: ()
                    // InternalSQLParser.g:6424:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getOperandListAccess().getOpListEntriesAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalSQLParser.g:6433:4: (otherlv_2= Comma ( (lv_entries_3_0= ruleScalarOperand ) ) )+
                    int cnt110=0;
                    loop110:
                    do {
                        int alt110=2;
                        int LA110_0 = input.LA(1);

                        if ( (LA110_0==Comma) ) {
                            alt110=1;
                        }


                        switch (alt110) {
                    	case 1 :
                    	    // InternalSQLParser.g:6434:5: otherlv_2= Comma ( (lv_entries_3_0= ruleScalarOperand ) )
                    	    {
                    	    otherlv_2=(Token)match(input,Comma,FOLLOW_87); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_2, grammarAccess.getOperandListAccess().getCommaKeyword_1_1_0());
                    	      				
                    	    }
                    	    // InternalSQLParser.g:6438:5: ( (lv_entries_3_0= ruleScalarOperand ) )
                    	    // InternalSQLParser.g:6439:6: (lv_entries_3_0= ruleScalarOperand )
                    	    {
                    	    // InternalSQLParser.g:6439:6: (lv_entries_3_0= ruleScalarOperand )
                    	    // InternalSQLParser.g:6440:7: lv_entries_3_0= ruleScalarOperand
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getOperandListAccess().getEntriesScalarOperandParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_11);
                    	    lv_entries_3_0=ruleScalarOperand();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getOperandListRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"entries",
                    	      								lv_entries_3_0,
                    	      								"org.xtext.example.mydsl_sql.SQL.ScalarOperand");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt110 >= 1 ) break loop110;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(110, input);
                                throw eee;
                        }
                        cnt110++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOperandList"


    // $ANTLR start "entryRuleOperandGroup"
    // InternalSQLParser.g:6463:1: entryRuleOperandGroup returns [EObject current=null] : iv_ruleOperandGroup= ruleOperandGroup EOF ;
    public final EObject entryRuleOperandGroup() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOperandGroup = null;


        try {
            // InternalSQLParser.g:6463:53: (iv_ruleOperandGroup= ruleOperandGroup EOF )
            // InternalSQLParser.g:6464:2: iv_ruleOperandGroup= ruleOperandGroup EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOperandGroupRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOperandGroup=ruleOperandGroup();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOperandGroup; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOperandGroup"


    // $ANTLR start "ruleOperandGroup"
    // InternalSQLParser.g:6470:1: ruleOperandGroup returns [EObject current=null] : (this_Operand_0= ruleOperand | (otherlv_1= LeftParenthesis this_Operand_2= ruleOperand otherlv_3= RightParenthesis ) ) ;
    public final EObject ruleOperandGroup() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject this_Operand_0 = null;

        EObject this_Operand_2 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:6476:2: ( (this_Operand_0= ruleOperand | (otherlv_1= LeftParenthesis this_Operand_2= ruleOperand otherlv_3= RightParenthesis ) ) )
            // InternalSQLParser.g:6477:2: (this_Operand_0= ruleOperand | (otherlv_1= LeftParenthesis this_Operand_2= ruleOperand otherlv_3= RightParenthesis ) )
            {
            // InternalSQLParser.g:6477:2: (this_Operand_0= ruleOperand | (otherlv_1= LeftParenthesis this_Operand_2= ruleOperand otherlv_3= RightParenthesis ) )
            int alt112=2;
            int LA112_0 = input.LA(1);

            if ( (LA112_0==EXTRACT||LA112_0==CAST||LA112_0==CASE||(LA112_0>=RULE_JRPARAM && LA112_0<=RULE_JRNPARAM)||(LA112_0>=RULE_UNSIGNED && LA112_0<=RULE_SIGNED_DOUBLE)||(LA112_0>=RULE_STRING_ && LA112_0<=RULE_ID)) ) {
                alt112=1;
            }
            else if ( (LA112_0==LeftParenthesis) ) {
                int LA112_2 = input.LA(2);

                if ( (LA112_2==SELECT) ) {
                    alt112=1;
                }
                else if ( (LA112_2==EXTRACT||LA112_2==CAST||LA112_2==CASE||LA112_2==LeftParenthesis||(LA112_2>=RULE_JRPARAM && LA112_2<=RULE_JRNPARAM)||(LA112_2>=RULE_UNSIGNED && LA112_2<=RULE_SIGNED_DOUBLE)||(LA112_2>=RULE_STRING_ && LA112_2<=RULE_ID)) ) {
                    alt112=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 112, 2, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 112, 0, input);

                throw nvae;
            }
            switch (alt112) {
                case 1 :
                    // InternalSQLParser.g:6478:3: this_Operand_0= ruleOperand
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getOperandGroupAccess().getOperandParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Operand_0=ruleOperand();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Operand_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:6490:3: (otherlv_1= LeftParenthesis this_Operand_2= ruleOperand otherlv_3= RightParenthesis )
                    {
                    // InternalSQLParser.g:6490:3: (otherlv_1= LeftParenthesis this_Operand_2= ruleOperand otherlv_3= RightParenthesis )
                    // InternalSQLParser.g:6491:4: otherlv_1= LeftParenthesis this_Operand_2= ruleOperand otherlv_3= RightParenthesis
                    {
                    otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_74); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getOperandGroupAccess().getLeftParenthesisKeyword_1_0());
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				/* */
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getOperandGroupAccess().getOperandParserRuleCall_1_1());
                      			
                    }
                    pushFollow(FOLLOW_10);
                    this_Operand_2=ruleOperand();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_Operand_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }
                    otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_3, grammarAccess.getOperandGroupAccess().getRightParenthesisKeyword_1_2());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOperandGroup"


    // $ANTLR start "entryRuleOperand"
    // InternalSQLParser.g:6515:1: entryRuleOperand returns [EObject current=null] : iv_ruleOperand= ruleOperand EOF ;
    public final EObject entryRuleOperand() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOperand = null;


        try {
            // InternalSQLParser.g:6515:48: (iv_ruleOperand= ruleOperand EOF )
            // InternalSQLParser.g:6516:2: iv_ruleOperand= ruleOperand EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOperandRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOperand=ruleOperand();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOperand; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOperand"


    // $ANTLR start "ruleOperand"
    // InternalSQLParser.g:6522:1: ruleOperand returns [EObject current=null] : ( ( (lv_op1_0_0= ruleOperandFragment ) ) ( ( ( () otherlv_2= PlusSign ) | ( () otherlv_4= HyphenMinus ) | ( () otherlv_6= VerticalLineVerticalLine ) | ( () this_STAR_8= RULE_STAR ) | ( () otherlv_10= Solidus ) ) ( (lv_right_11_0= ruleOperandFragment ) ) )* ) ;
    public final EObject ruleOperand() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        Token this_STAR_8=null;
        Token otherlv_10=null;
        EObject lv_op1_0_0 = null;

        EObject lv_right_11_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:6528:2: ( ( ( (lv_op1_0_0= ruleOperandFragment ) ) ( ( ( () otherlv_2= PlusSign ) | ( () otherlv_4= HyphenMinus ) | ( () otherlv_6= VerticalLineVerticalLine ) | ( () this_STAR_8= RULE_STAR ) | ( () otherlv_10= Solidus ) ) ( (lv_right_11_0= ruleOperandFragment ) ) )* ) )
            // InternalSQLParser.g:6529:2: ( ( (lv_op1_0_0= ruleOperandFragment ) ) ( ( ( () otherlv_2= PlusSign ) | ( () otherlv_4= HyphenMinus ) | ( () otherlv_6= VerticalLineVerticalLine ) | ( () this_STAR_8= RULE_STAR ) | ( () otherlv_10= Solidus ) ) ( (lv_right_11_0= ruleOperandFragment ) ) )* )
            {
            // InternalSQLParser.g:6529:2: ( ( (lv_op1_0_0= ruleOperandFragment ) ) ( ( ( () otherlv_2= PlusSign ) | ( () otherlv_4= HyphenMinus ) | ( () otherlv_6= VerticalLineVerticalLine ) | ( () this_STAR_8= RULE_STAR ) | ( () otherlv_10= Solidus ) ) ( (lv_right_11_0= ruleOperandFragment ) ) )* )
            // InternalSQLParser.g:6530:3: ( (lv_op1_0_0= ruleOperandFragment ) ) ( ( ( () otherlv_2= PlusSign ) | ( () otherlv_4= HyphenMinus ) | ( () otherlv_6= VerticalLineVerticalLine ) | ( () this_STAR_8= RULE_STAR ) | ( () otherlv_10= Solidus ) ) ( (lv_right_11_0= ruleOperandFragment ) ) )*
            {
            // InternalSQLParser.g:6530:3: ( (lv_op1_0_0= ruleOperandFragment ) )
            // InternalSQLParser.g:6531:4: (lv_op1_0_0= ruleOperandFragment )
            {
            // InternalSQLParser.g:6531:4: (lv_op1_0_0= ruleOperandFragment )
            // InternalSQLParser.g:6532:5: lv_op1_0_0= ruleOperandFragment
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getOperandAccess().getOp1OperandFragmentParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_88);
            lv_op1_0_0=ruleOperandFragment();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getOperandRule());
              					}
              					set(
              						current,
              						"op1",
              						lv_op1_0_0,
              						"org.xtext.example.mydsl_sql.SQL.OperandFragment");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:6549:3: ( ( ( () otherlv_2= PlusSign ) | ( () otherlv_4= HyphenMinus ) | ( () otherlv_6= VerticalLineVerticalLine ) | ( () this_STAR_8= RULE_STAR ) | ( () otherlv_10= Solidus ) ) ( (lv_right_11_0= ruleOperandFragment ) ) )*
            loop114:
            do {
                int alt114=2;
                int LA114_0 = input.LA(1);

                if ( (LA114_0==RULE_STAR) ) {
                    int LA114_2 = input.LA(2);

                    if ( (LA114_2==EXTRACT||LA114_2==CAST||LA114_2==CASE||(LA114_2>=RULE_JRPARAM && LA114_2<=RULE_JRNPARAM)||(LA114_2>=RULE_UNSIGNED && LA114_2<=RULE_SIGNED_DOUBLE)||(LA114_2>=RULE_STRING_ && LA114_2<=RULE_ID)) ) {
                        alt114=1;
                    }
                    else if ( (LA114_2==LeftParenthesis) ) {
                        int LA114_4 = input.LA(3);

                        if ( (LA114_4==SELECT) ) {
                            alt114=1;
                        }


                    }


                }
                else if ( (LA114_0==VerticalLineVerticalLine||LA114_0==PlusSign||LA114_0==HyphenMinus||LA114_0==Solidus) ) {
                    alt114=1;
                }


                switch (alt114) {
            	case 1 :
            	    // InternalSQLParser.g:6550:4: ( ( () otherlv_2= PlusSign ) | ( () otherlv_4= HyphenMinus ) | ( () otherlv_6= VerticalLineVerticalLine ) | ( () this_STAR_8= RULE_STAR ) | ( () otherlv_10= Solidus ) ) ( (lv_right_11_0= ruleOperandFragment ) )
            	    {
            	    // InternalSQLParser.g:6550:4: ( ( () otherlv_2= PlusSign ) | ( () otherlv_4= HyphenMinus ) | ( () otherlv_6= VerticalLineVerticalLine ) | ( () this_STAR_8= RULE_STAR ) | ( () otherlv_10= Solidus ) )
            	    int alt113=5;
            	    switch ( input.LA(1) ) {
            	    case PlusSign:
            	        {
            	        alt113=1;
            	        }
            	        break;
            	    case HyphenMinus:
            	        {
            	        alt113=2;
            	        }
            	        break;
            	    case VerticalLineVerticalLine:
            	        {
            	        alt113=3;
            	        }
            	        break;
            	    case RULE_STAR:
            	        {
            	        alt113=4;
            	        }
            	        break;
            	    case Solidus:
            	        {
            	        alt113=5;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 113, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt113) {
            	        case 1 :
            	            // InternalSQLParser.g:6551:5: ( () otherlv_2= PlusSign )
            	            {
            	            // InternalSQLParser.g:6551:5: ( () otherlv_2= PlusSign )
            	            // InternalSQLParser.g:6552:6: () otherlv_2= PlusSign
            	            {
            	            // InternalSQLParser.g:6552:6: ()
            	            // InternalSQLParser.g:6553:7: 
            	            {
            	            if ( state.backtracking==0 ) {

            	              							/* */
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							current = forceCreateModelElementAndSet(
            	              								grammarAccess.getOperandAccess().getPlusLeftAction_1_0_0_0(),
            	              								current);
            	              						
            	            }

            	            }

            	            otherlv_2=(Token)match(input,PlusSign,FOLLOW_74); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              						newLeafNode(otherlv_2, grammarAccess.getOperandAccess().getPlusSignKeyword_1_0_0_1());
            	              					
            	            }

            	            }


            	            }
            	            break;
            	        case 2 :
            	            // InternalSQLParser.g:6568:5: ( () otherlv_4= HyphenMinus )
            	            {
            	            // InternalSQLParser.g:6568:5: ( () otherlv_4= HyphenMinus )
            	            // InternalSQLParser.g:6569:6: () otherlv_4= HyphenMinus
            	            {
            	            // InternalSQLParser.g:6569:6: ()
            	            // InternalSQLParser.g:6570:7: 
            	            {
            	            if ( state.backtracking==0 ) {

            	              							/* */
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							current = forceCreateModelElementAndSet(
            	              								grammarAccess.getOperandAccess().getMinusLeftAction_1_0_1_0(),
            	              								current);
            	              						
            	            }

            	            }

            	            otherlv_4=(Token)match(input,HyphenMinus,FOLLOW_74); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              						newLeafNode(otherlv_4, grammarAccess.getOperandAccess().getHyphenMinusKeyword_1_0_1_1());
            	              					
            	            }

            	            }


            	            }
            	            break;
            	        case 3 :
            	            // InternalSQLParser.g:6585:5: ( () otherlv_6= VerticalLineVerticalLine )
            	            {
            	            // InternalSQLParser.g:6585:5: ( () otherlv_6= VerticalLineVerticalLine )
            	            // InternalSQLParser.g:6586:6: () otherlv_6= VerticalLineVerticalLine
            	            {
            	            // InternalSQLParser.g:6586:6: ()
            	            // InternalSQLParser.g:6587:7: 
            	            {
            	            if ( state.backtracking==0 ) {

            	              							/* */
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							current = forceCreateModelElementAndSet(
            	              								grammarAccess.getOperandAccess().getConcatLeftAction_1_0_2_0(),
            	              								current);
            	              						
            	            }

            	            }

            	            otherlv_6=(Token)match(input,VerticalLineVerticalLine,FOLLOW_74); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              						newLeafNode(otherlv_6, grammarAccess.getOperandAccess().getVerticalLineVerticalLineKeyword_1_0_2_1());
            	              					
            	            }

            	            }


            	            }
            	            break;
            	        case 4 :
            	            // InternalSQLParser.g:6602:5: ( () this_STAR_8= RULE_STAR )
            	            {
            	            // InternalSQLParser.g:6602:5: ( () this_STAR_8= RULE_STAR )
            	            // InternalSQLParser.g:6603:6: () this_STAR_8= RULE_STAR
            	            {
            	            // InternalSQLParser.g:6603:6: ()
            	            // InternalSQLParser.g:6604:7: 
            	            {
            	            if ( state.backtracking==0 ) {

            	              							/* */
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							current = forceCreateModelElementAndSet(
            	              								grammarAccess.getOperandAccess().getMultiplyLeftAction_1_0_3_0(),
            	              								current);
            	              						
            	            }

            	            }

            	            this_STAR_8=(Token)match(input,RULE_STAR,FOLLOW_74); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              						newLeafNode(this_STAR_8, grammarAccess.getOperandAccess().getSTARTerminalRuleCall_1_0_3_1());
            	              					
            	            }

            	            }


            	            }
            	            break;
            	        case 5 :
            	            // InternalSQLParser.g:6619:5: ( () otherlv_10= Solidus )
            	            {
            	            // InternalSQLParser.g:6619:5: ( () otherlv_10= Solidus )
            	            // InternalSQLParser.g:6620:6: () otherlv_10= Solidus
            	            {
            	            // InternalSQLParser.g:6620:6: ()
            	            // InternalSQLParser.g:6621:7: 
            	            {
            	            if ( state.backtracking==0 ) {

            	              							/* */
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							current = forceCreateModelElementAndSet(
            	              								grammarAccess.getOperandAccess().getDivisionLeftAction_1_0_4_0(),
            	              								current);
            	              						
            	            }

            	            }

            	            otherlv_10=(Token)match(input,Solidus,FOLLOW_74); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              						newLeafNode(otherlv_10, grammarAccess.getOperandAccess().getSolidusKeyword_1_0_4_1());
            	              					
            	            }

            	            }


            	            }
            	            break;

            	    }

            	    // InternalSQLParser.g:6636:4: ( (lv_right_11_0= ruleOperandFragment ) )
            	    // InternalSQLParser.g:6637:5: (lv_right_11_0= ruleOperandFragment )
            	    {
            	    // InternalSQLParser.g:6637:5: (lv_right_11_0= ruleOperandFragment )
            	    // InternalSQLParser.g:6638:6: lv_right_11_0= ruleOperandFragment
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getOperandAccess().getRightOperandFragmentParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_88);
            	    lv_right_11_0=ruleOperandFragment();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getOperandRule());
            	      						}
            	      						set(
            	      							current,
            	      							"right",
            	      							lv_right_11_0,
            	      							"org.xtext.example.mydsl_sql.SQL.OperandFragment");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop114;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOperand"


    // $ANTLR start "entryRuleOperandFragment"
    // InternalSQLParser.g:6660:1: entryRuleOperandFragment returns [EObject current=null] : iv_ruleOperandFragment= ruleOperandFragment EOF ;
    public final EObject entryRuleOperandFragment() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOperandFragment = null;


        try {
            // InternalSQLParser.g:6660:56: (iv_ruleOperandFragment= ruleOperandFragment EOF )
            // InternalSQLParser.g:6661:2: iv_ruleOperandFragment= ruleOperandFragment EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOperandFragmentRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOperandFragment=ruleOperandFragment();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOperandFragment; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOperandFragment"


    // $ANTLR start "ruleOperandFragment"
    // InternalSQLParser.g:6667:1: ruleOperandFragment returns [EObject current=null] : ( ( (lv_column_0_0= ruleColumnOperand ) ) | ( (lv_xop_1_0= ruleXOperandFragment ) ) | ( (lv_subq_2_0= ruleSubQueryOperand ) ) | ( (lv_fcast_3_0= ruleOpFunctionCast ) ) | ( (lv_fext_4_0= ruleFunctionExtract ) ) | ( (lv_func_5_0= ruleOperandFunction ) ) | ( (lv_sqlcase_6_0= ruleSQLCASE ) ) ) ;
    public final EObject ruleOperandFragment() throws RecognitionException {
        EObject current = null;

        EObject lv_column_0_0 = null;

        EObject lv_xop_1_0 = null;

        EObject lv_subq_2_0 = null;

        EObject lv_fcast_3_0 = null;

        EObject lv_fext_4_0 = null;

        EObject lv_func_5_0 = null;

        EObject lv_sqlcase_6_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:6673:2: ( ( ( (lv_column_0_0= ruleColumnOperand ) ) | ( (lv_xop_1_0= ruleXOperandFragment ) ) | ( (lv_subq_2_0= ruleSubQueryOperand ) ) | ( (lv_fcast_3_0= ruleOpFunctionCast ) ) | ( (lv_fext_4_0= ruleFunctionExtract ) ) | ( (lv_func_5_0= ruleOperandFunction ) ) | ( (lv_sqlcase_6_0= ruleSQLCASE ) ) ) )
            // InternalSQLParser.g:6674:2: ( ( (lv_column_0_0= ruleColumnOperand ) ) | ( (lv_xop_1_0= ruleXOperandFragment ) ) | ( (lv_subq_2_0= ruleSubQueryOperand ) ) | ( (lv_fcast_3_0= ruleOpFunctionCast ) ) | ( (lv_fext_4_0= ruleFunctionExtract ) ) | ( (lv_func_5_0= ruleOperandFunction ) ) | ( (lv_sqlcase_6_0= ruleSQLCASE ) ) )
            {
            // InternalSQLParser.g:6674:2: ( ( (lv_column_0_0= ruleColumnOperand ) ) | ( (lv_xop_1_0= ruleXOperandFragment ) ) | ( (lv_subq_2_0= ruleSubQueryOperand ) ) | ( (lv_fcast_3_0= ruleOpFunctionCast ) ) | ( (lv_fext_4_0= ruleFunctionExtract ) ) | ( (lv_func_5_0= ruleOperandFunction ) ) | ( (lv_sqlcase_6_0= ruleSQLCASE ) ) )
            int alt115=7;
            alt115 = dfa115.predict(input);
            switch (alt115) {
                case 1 :
                    // InternalSQLParser.g:6675:3: ( (lv_column_0_0= ruleColumnOperand ) )
                    {
                    // InternalSQLParser.g:6675:3: ( (lv_column_0_0= ruleColumnOperand ) )
                    // InternalSQLParser.g:6676:4: (lv_column_0_0= ruleColumnOperand )
                    {
                    // InternalSQLParser.g:6676:4: (lv_column_0_0= ruleColumnOperand )
                    // InternalSQLParser.g:6677:5: lv_column_0_0= ruleColumnOperand
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getOperandFragmentAccess().getColumnColumnOperandParserRuleCall_0_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_column_0_0=ruleColumnOperand();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getOperandFragmentRule());
                      					}
                      					set(
                      						current,
                      						"column",
                      						lv_column_0_0,
                      						"org.xtext.example.mydsl_sql.SQL.ColumnOperand");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:6695:3: ( (lv_xop_1_0= ruleXOperandFragment ) )
                    {
                    // InternalSQLParser.g:6695:3: ( (lv_xop_1_0= ruleXOperandFragment ) )
                    // InternalSQLParser.g:6696:4: (lv_xop_1_0= ruleXOperandFragment )
                    {
                    // InternalSQLParser.g:6696:4: (lv_xop_1_0= ruleXOperandFragment )
                    // InternalSQLParser.g:6697:5: lv_xop_1_0= ruleXOperandFragment
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getOperandFragmentAccess().getXopXOperandFragmentParserRuleCall_1_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_xop_1_0=ruleXOperandFragment();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getOperandFragmentRule());
                      					}
                      					set(
                      						current,
                      						"xop",
                      						lv_xop_1_0,
                      						"org.xtext.example.mydsl_sql.SQL.XOperandFragment");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:6715:3: ( (lv_subq_2_0= ruleSubQueryOperand ) )
                    {
                    // InternalSQLParser.g:6715:3: ( (lv_subq_2_0= ruleSubQueryOperand ) )
                    // InternalSQLParser.g:6716:4: (lv_subq_2_0= ruleSubQueryOperand )
                    {
                    // InternalSQLParser.g:6716:4: (lv_subq_2_0= ruleSubQueryOperand )
                    // InternalSQLParser.g:6717:5: lv_subq_2_0= ruleSubQueryOperand
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getOperandFragmentAccess().getSubqSubQueryOperandParserRuleCall_2_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_subq_2_0=ruleSubQueryOperand();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getOperandFragmentRule());
                      					}
                      					set(
                      						current,
                      						"subq",
                      						lv_subq_2_0,
                      						"org.xtext.example.mydsl_sql.SQL.SubQueryOperand");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 4 :
                    // InternalSQLParser.g:6735:3: ( (lv_fcast_3_0= ruleOpFunctionCast ) )
                    {
                    // InternalSQLParser.g:6735:3: ( (lv_fcast_3_0= ruleOpFunctionCast ) )
                    // InternalSQLParser.g:6736:4: (lv_fcast_3_0= ruleOpFunctionCast )
                    {
                    // InternalSQLParser.g:6736:4: (lv_fcast_3_0= ruleOpFunctionCast )
                    // InternalSQLParser.g:6737:5: lv_fcast_3_0= ruleOpFunctionCast
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getOperandFragmentAccess().getFcastOpFunctionCastParserRuleCall_3_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_fcast_3_0=ruleOpFunctionCast();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getOperandFragmentRule());
                      					}
                      					set(
                      						current,
                      						"fcast",
                      						lv_fcast_3_0,
                      						"org.xtext.example.mydsl_sql.SQL.OpFunctionCast");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 5 :
                    // InternalSQLParser.g:6755:3: ( (lv_fext_4_0= ruleFunctionExtract ) )
                    {
                    // InternalSQLParser.g:6755:3: ( (lv_fext_4_0= ruleFunctionExtract ) )
                    // InternalSQLParser.g:6756:4: (lv_fext_4_0= ruleFunctionExtract )
                    {
                    // InternalSQLParser.g:6756:4: (lv_fext_4_0= ruleFunctionExtract )
                    // InternalSQLParser.g:6757:5: lv_fext_4_0= ruleFunctionExtract
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getOperandFragmentAccess().getFextFunctionExtractParserRuleCall_4_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_fext_4_0=ruleFunctionExtract();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getOperandFragmentRule());
                      					}
                      					set(
                      						current,
                      						"fext",
                      						lv_fext_4_0,
                      						"org.xtext.example.mydsl_sql.SQL.FunctionExtract");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 6 :
                    // InternalSQLParser.g:6775:3: ( (lv_func_5_0= ruleOperandFunction ) )
                    {
                    // InternalSQLParser.g:6775:3: ( (lv_func_5_0= ruleOperandFunction ) )
                    // InternalSQLParser.g:6776:4: (lv_func_5_0= ruleOperandFunction )
                    {
                    // InternalSQLParser.g:6776:4: (lv_func_5_0= ruleOperandFunction )
                    // InternalSQLParser.g:6777:5: lv_func_5_0= ruleOperandFunction
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getOperandFragmentAccess().getFuncOperandFunctionParserRuleCall_5_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_func_5_0=ruleOperandFunction();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getOperandFragmentRule());
                      					}
                      					set(
                      						current,
                      						"func",
                      						lv_func_5_0,
                      						"org.xtext.example.mydsl_sql.SQL.OperandFunction");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 7 :
                    // InternalSQLParser.g:6795:3: ( (lv_sqlcase_6_0= ruleSQLCASE ) )
                    {
                    // InternalSQLParser.g:6795:3: ( (lv_sqlcase_6_0= ruleSQLCASE ) )
                    // InternalSQLParser.g:6796:4: (lv_sqlcase_6_0= ruleSQLCASE )
                    {
                    // InternalSQLParser.g:6796:4: (lv_sqlcase_6_0= ruleSQLCASE )
                    // InternalSQLParser.g:6797:5: lv_sqlcase_6_0= ruleSQLCASE
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getOperandFragmentAccess().getSqlcaseSQLCASEParserRuleCall_6_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_sqlcase_6_0=ruleSQLCASE();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getOperandFragmentRule());
                      					}
                      					set(
                      						current,
                      						"sqlcase",
                      						lv_sqlcase_6_0,
                      						"org.xtext.example.mydsl_sql.SQL.SQLCASE");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOperandFragment"


    // $ANTLR start "entryRuleOperandFunction"
    // InternalSQLParser.g:6818:1: entryRuleOperandFunction returns [EObject current=null] : iv_ruleOperandFunction= ruleOperandFunction EOF ;
    public final EObject entryRuleOperandFunction() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOperandFunction = null;


        try {
            // InternalSQLParser.g:6818:56: (iv_ruleOperandFunction= ruleOperandFunction EOF )
            // InternalSQLParser.g:6819:2: iv_ruleOperandFunction= ruleOperandFunction EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOperandFunctionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOperandFunction=ruleOperandFunction();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOperandFunction; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOperandFunction"


    // $ANTLR start "ruleOperandFunction"
    // InternalSQLParser.g:6825:1: ruleOperandFunction returns [EObject current=null] : ( () ( (lv_fname_1_0= ruleFNAME ) ) ( ( (lv_star_2_0= RULE_STAR ) ) | ( (lv_args_3_0= ruleOpFunctionArg ) ) )? otherlv_4= RightParenthesis ( (lv_fan_5_0= ruleFunctionAnalytical ) )? ) ;
    public final EObject ruleOperandFunction() throws RecognitionException {
        EObject current = null;

        Token lv_star_2_0=null;
        Token otherlv_4=null;
        AntlrDatatypeRuleToken lv_fname_1_0 = null;

        EObject lv_args_3_0 = null;

        EObject lv_fan_5_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:6831:2: ( ( () ( (lv_fname_1_0= ruleFNAME ) ) ( ( (lv_star_2_0= RULE_STAR ) ) | ( (lv_args_3_0= ruleOpFunctionArg ) ) )? otherlv_4= RightParenthesis ( (lv_fan_5_0= ruleFunctionAnalytical ) )? ) )
            // InternalSQLParser.g:6832:2: ( () ( (lv_fname_1_0= ruleFNAME ) ) ( ( (lv_star_2_0= RULE_STAR ) ) | ( (lv_args_3_0= ruleOpFunctionArg ) ) )? otherlv_4= RightParenthesis ( (lv_fan_5_0= ruleFunctionAnalytical ) )? )
            {
            // InternalSQLParser.g:6832:2: ( () ( (lv_fname_1_0= ruleFNAME ) ) ( ( (lv_star_2_0= RULE_STAR ) ) | ( (lv_args_3_0= ruleOpFunctionArg ) ) )? otherlv_4= RightParenthesis ( (lv_fan_5_0= ruleFunctionAnalytical ) )? )
            // InternalSQLParser.g:6833:3: () ( (lv_fname_1_0= ruleFNAME ) ) ( ( (lv_star_2_0= RULE_STAR ) ) | ( (lv_args_3_0= ruleOpFunctionArg ) ) )? otherlv_4= RightParenthesis ( (lv_fan_5_0= ruleFunctionAnalytical ) )?
            {
            // InternalSQLParser.g:6833:3: ()
            // InternalSQLParser.g:6834:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getOperandFunctionAccess().getOpFunctionAction_0(),
              					current);
              			
            }

            }

            // InternalSQLParser.g:6843:3: ( (lv_fname_1_0= ruleFNAME ) )
            // InternalSQLParser.g:6844:4: (lv_fname_1_0= ruleFNAME )
            {
            // InternalSQLParser.g:6844:4: (lv_fname_1_0= ruleFNAME )
            // InternalSQLParser.g:6845:5: lv_fname_1_0= ruleFNAME
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getOperandFunctionAccess().getFnameFNAMEParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_89);
            lv_fname_1_0=ruleFNAME();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getOperandFunctionRule());
              					}
              					set(
              						current,
              						"fname",
              						lv_fname_1_0,
              						"org.xtext.example.mydsl_sql.SQL.FNAME");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:6862:3: ( ( (lv_star_2_0= RULE_STAR ) ) | ( (lv_args_3_0= ruleOpFunctionArg ) ) )?
            int alt116=3;
            int LA116_0 = input.LA(1);

            if ( (LA116_0==RULE_STAR) ) {
                alt116=1;
            }
            else if ( (LA116_0==DISTINCT||LA116_0==EXTRACT||LA116_0==CAST||LA116_0==CASE||LA116_0==ALL||LA116_0==LeftParenthesis||(LA116_0>=RULE_JRPARAM && LA116_0<=RULE_JRNPARAM)||(LA116_0>=RULE_UNSIGNED && LA116_0<=RULE_SIGNED_DOUBLE)||(LA116_0>=RULE_STRING_ && LA116_0<=RULE_ID)) ) {
                alt116=2;
            }
            switch (alt116) {
                case 1 :
                    // InternalSQLParser.g:6863:4: ( (lv_star_2_0= RULE_STAR ) )
                    {
                    // InternalSQLParser.g:6863:4: ( (lv_star_2_0= RULE_STAR ) )
                    // InternalSQLParser.g:6864:5: (lv_star_2_0= RULE_STAR )
                    {
                    // InternalSQLParser.g:6864:5: (lv_star_2_0= RULE_STAR )
                    // InternalSQLParser.g:6865:6: lv_star_2_0= RULE_STAR
                    {
                    lv_star_2_0=(Token)match(input,RULE_STAR,FOLLOW_10); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_star_2_0, grammarAccess.getOperandFunctionAccess().getStarSTARTerminalRuleCall_2_0_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getOperandFunctionRule());
                      						}
                      						setWithLastConsumed(
                      							current,
                      							"star",
                      							lv_star_2_0,
                      							"org.xtext.example.mydsl_sql.SQL.STAR");
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:6882:4: ( (lv_args_3_0= ruleOpFunctionArg ) )
                    {
                    // InternalSQLParser.g:6882:4: ( (lv_args_3_0= ruleOpFunctionArg ) )
                    // InternalSQLParser.g:6883:5: (lv_args_3_0= ruleOpFunctionArg )
                    {
                    // InternalSQLParser.g:6883:5: (lv_args_3_0= ruleOpFunctionArg )
                    // InternalSQLParser.g:6884:6: lv_args_3_0= ruleOpFunctionArg
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getOperandFunctionAccess().getArgsOpFunctionArgParserRuleCall_2_1_0());
                      					
                    }
                    pushFollow(FOLLOW_10);
                    lv_args_3_0=ruleOpFunctionArg();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getOperandFunctionRule());
                      						}
                      						set(
                      							current,
                      							"args",
                      							lv_args_3_0,
                      							"org.xtext.example.mydsl_sql.SQL.OpFunctionArg");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            otherlv_4=(Token)match(input,RightParenthesis,FOLLOW_90); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getOperandFunctionAccess().getRightParenthesisKeyword_3());
              		
            }
            // InternalSQLParser.g:6906:3: ( (lv_fan_5_0= ruleFunctionAnalytical ) )?
            int alt117=2;
            int LA117_0 = input.LA(1);

            if ( (LA117_0==OVER) ) {
                alt117=1;
            }
            switch (alt117) {
                case 1 :
                    // InternalSQLParser.g:6907:4: (lv_fan_5_0= ruleFunctionAnalytical )
                    {
                    // InternalSQLParser.g:6907:4: (lv_fan_5_0= ruleFunctionAnalytical )
                    // InternalSQLParser.g:6908:5: lv_fan_5_0= ruleFunctionAnalytical
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getOperandFunctionAccess().getFanFunctionAnalyticalParserRuleCall_4_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_fan_5_0=ruleFunctionAnalytical();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getOperandFunctionRule());
                      					}
                      					set(
                      						current,
                      						"fan",
                      						lv_fan_5_0,
                      						"org.xtext.example.mydsl_sql.SQL.FunctionAnalytical");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOperandFunction"


    // $ANTLR start "entryRuleFunctionExtract"
    // InternalSQLParser.g:6929:1: entryRuleFunctionExtract returns [EObject current=null] : iv_ruleFunctionExtract= ruleFunctionExtract EOF ;
    public final EObject entryRuleFunctionExtract() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFunctionExtract = null;


        try {
            // InternalSQLParser.g:6929:56: (iv_ruleFunctionExtract= ruleFunctionExtract EOF )
            // InternalSQLParser.g:6930:2: iv_ruleFunctionExtract= ruleFunctionExtract EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFunctionExtractRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFunctionExtract=ruleFunctionExtract();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFunctionExtract; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFunctionExtract"


    // $ANTLR start "ruleFunctionExtract"
    // InternalSQLParser.g:6936:1: ruleFunctionExtract returns [EObject current=null] : (otherlv_0= EXTRACT otherlv_1= LeftParenthesis ( (lv_v_2_0= ruleEXTRACT_VALUES ) ) otherlv_3= FROM ( (lv_operand_4_0= ruleOperandGroup ) ) otherlv_5= RightParenthesis ) ;
    public final EObject ruleFunctionExtract() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Enumerator lv_v_2_0 = null;

        EObject lv_operand_4_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:6942:2: ( (otherlv_0= EXTRACT otherlv_1= LeftParenthesis ( (lv_v_2_0= ruleEXTRACT_VALUES ) ) otherlv_3= FROM ( (lv_operand_4_0= ruleOperandGroup ) ) otherlv_5= RightParenthesis ) )
            // InternalSQLParser.g:6943:2: (otherlv_0= EXTRACT otherlv_1= LeftParenthesis ( (lv_v_2_0= ruleEXTRACT_VALUES ) ) otherlv_3= FROM ( (lv_operand_4_0= ruleOperandGroup ) ) otherlv_5= RightParenthesis )
            {
            // InternalSQLParser.g:6943:2: (otherlv_0= EXTRACT otherlv_1= LeftParenthesis ( (lv_v_2_0= ruleEXTRACT_VALUES ) ) otherlv_3= FROM ( (lv_operand_4_0= ruleOperandGroup ) ) otherlv_5= RightParenthesis )
            // InternalSQLParser.g:6944:3: otherlv_0= EXTRACT otherlv_1= LeftParenthesis ( (lv_v_2_0= ruleEXTRACT_VALUES ) ) otherlv_3= FROM ( (lv_operand_4_0= ruleOperandGroup ) ) otherlv_5= RightParenthesis
            {
            otherlv_0=(Token)match(input,EXTRACT,FOLLOW_8); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getFunctionExtractAccess().getEXTRACTKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_91); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getFunctionExtractAccess().getLeftParenthesisKeyword_1());
              		
            }
            // InternalSQLParser.g:6952:3: ( (lv_v_2_0= ruleEXTRACT_VALUES ) )
            // InternalSQLParser.g:6953:4: (lv_v_2_0= ruleEXTRACT_VALUES )
            {
            // InternalSQLParser.g:6953:4: (lv_v_2_0= ruleEXTRACT_VALUES )
            // InternalSQLParser.g:6954:5: lv_v_2_0= ruleEXTRACT_VALUES
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getFunctionExtractAccess().getVEXTRACT_VALUESEnumRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_37);
            lv_v_2_0=ruleEXTRACT_VALUES();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getFunctionExtractRule());
              					}
              					set(
              						current,
              						"v",
              						lv_v_2_0,
              						"org.xtext.example.mydsl_sql.SQL.EXTRACT_VALUES");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,FROM,FOLLOW_74); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getFunctionExtractAccess().getFROMKeyword_3());
              		
            }
            // InternalSQLParser.g:6975:3: ( (lv_operand_4_0= ruleOperandGroup ) )
            // InternalSQLParser.g:6976:4: (lv_operand_4_0= ruleOperandGroup )
            {
            // InternalSQLParser.g:6976:4: (lv_operand_4_0= ruleOperandGroup )
            // InternalSQLParser.g:6977:5: lv_operand_4_0= ruleOperandGroup
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getFunctionExtractAccess().getOperandOperandGroupParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_10);
            lv_operand_4_0=ruleOperandGroup();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getFunctionExtractRule());
              					}
              					set(
              						current,
              						"operand",
              						lv_operand_4_0,
              						"org.xtext.example.mydsl_sql.SQL.OperandGroup");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getFunctionExtractAccess().getRightParenthesisKeyword_5());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFunctionExtract"


    // $ANTLR start "entryRuleFunctionAnalytical"
    // InternalSQLParser.g:7002:1: entryRuleFunctionAnalytical returns [EObject current=null] : iv_ruleFunctionAnalytical= ruleFunctionAnalytical EOF ;
    public final EObject entryRuleFunctionAnalytical() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFunctionAnalytical = null;


        try {
            // InternalSQLParser.g:7002:59: (iv_ruleFunctionAnalytical= ruleFunctionAnalytical EOF )
            // InternalSQLParser.g:7003:2: iv_ruleFunctionAnalytical= ruleFunctionAnalytical EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFunctionAnalyticalRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFunctionAnalytical=ruleFunctionAnalytical();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFunctionAnalytical; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFunctionAnalytical"


    // $ANTLR start "ruleFunctionAnalytical"
    // InternalSQLParser.g:7009:1: ruleFunctionAnalytical returns [EObject current=null] : (otherlv_0= OVER otherlv_1= LeftParenthesis ( (lv_anClause_2_0= ruleAnalyticClause ) ) otherlv_3= RightParenthesis ) ;
    public final EObject ruleFunctionAnalytical() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_anClause_2_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:7015:2: ( (otherlv_0= OVER otherlv_1= LeftParenthesis ( (lv_anClause_2_0= ruleAnalyticClause ) ) otherlv_3= RightParenthesis ) )
            // InternalSQLParser.g:7016:2: (otherlv_0= OVER otherlv_1= LeftParenthesis ( (lv_anClause_2_0= ruleAnalyticClause ) ) otherlv_3= RightParenthesis )
            {
            // InternalSQLParser.g:7016:2: (otherlv_0= OVER otherlv_1= LeftParenthesis ( (lv_anClause_2_0= ruleAnalyticClause ) ) otherlv_3= RightParenthesis )
            // InternalSQLParser.g:7017:3: otherlv_0= OVER otherlv_1= LeftParenthesis ( (lv_anClause_2_0= ruleAnalyticClause ) ) otherlv_3= RightParenthesis
            {
            otherlv_0=(Token)match(input,OVER,FOLLOW_8); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getFunctionAnalyticalAccess().getOVERKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_92); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getFunctionAnalyticalAccess().getLeftParenthesisKeyword_1());
              		
            }
            // InternalSQLParser.g:7025:3: ( (lv_anClause_2_0= ruleAnalyticClause ) )
            // InternalSQLParser.g:7026:4: (lv_anClause_2_0= ruleAnalyticClause )
            {
            // InternalSQLParser.g:7026:4: (lv_anClause_2_0= ruleAnalyticClause )
            // InternalSQLParser.g:7027:5: lv_anClause_2_0= ruleAnalyticClause
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getFunctionAnalyticalAccess().getAnClauseAnalyticClauseParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_10);
            lv_anClause_2_0=ruleAnalyticClause();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getFunctionAnalyticalRule());
              					}
              					set(
              						current,
              						"anClause",
              						lv_anClause_2_0,
              						"org.xtext.example.mydsl_sql.SQL.AnalyticClause");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getFunctionAnalyticalAccess().getRightParenthesisKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFunctionAnalytical"


    // $ANTLR start "entryRuleAnalyticClause"
    // InternalSQLParser.g:7052:1: entryRuleAnalyticClause returns [EObject current=null] : iv_ruleAnalyticClause= ruleAnalyticClause EOF ;
    public final EObject entryRuleAnalyticClause() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAnalyticClause = null;


        try {
            // InternalSQLParser.g:7052:55: (iv_ruleAnalyticClause= ruleAnalyticClause EOF )
            // InternalSQLParser.g:7053:2: iv_ruleAnalyticClause= ruleAnalyticClause EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnalyticClauseRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnalyticClause=ruleAnalyticClause();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnalyticClause; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleAnalyticClause"


    // $ANTLR start "ruleAnalyticClause"
    // InternalSQLParser.g:7059:1: ruleAnalyticClause returns [EObject current=null] : ( () ( (lv_abc_1_0= ruleQueryPartitionClause ) )? ( ( (lv_obc_2_0= ruleOrderByClause ) ) ( (lv_winc_3_0= ruleWindowingClause ) )? )? ) ;
    public final EObject ruleAnalyticClause() throws RecognitionException {
        EObject current = null;

        EObject lv_abc_1_0 = null;

        EObject lv_obc_2_0 = null;

        EObject lv_winc_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:7065:2: ( ( () ( (lv_abc_1_0= ruleQueryPartitionClause ) )? ( ( (lv_obc_2_0= ruleOrderByClause ) ) ( (lv_winc_3_0= ruleWindowingClause ) )? )? ) )
            // InternalSQLParser.g:7066:2: ( () ( (lv_abc_1_0= ruleQueryPartitionClause ) )? ( ( (lv_obc_2_0= ruleOrderByClause ) ) ( (lv_winc_3_0= ruleWindowingClause ) )? )? )
            {
            // InternalSQLParser.g:7066:2: ( () ( (lv_abc_1_0= ruleQueryPartitionClause ) )? ( ( (lv_obc_2_0= ruleOrderByClause ) ) ( (lv_winc_3_0= ruleWindowingClause ) )? )? )
            // InternalSQLParser.g:7067:3: () ( (lv_abc_1_0= ruleQueryPartitionClause ) )? ( ( (lv_obc_2_0= ruleOrderByClause ) ) ( (lv_winc_3_0= ruleWindowingClause ) )? )?
            {
            // InternalSQLParser.g:7067:3: ()
            // InternalSQLParser.g:7068:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getAnalyticClauseAccess().getAnalyticClauseAction_0(),
              					current);
              			
            }

            }

            // InternalSQLParser.g:7077:3: ( (lv_abc_1_0= ruleQueryPartitionClause ) )?
            int alt118=2;
            int LA118_0 = input.LA(1);

            if ( (LA118_0==PARTITION) ) {
                alt118=1;
            }
            switch (alt118) {
                case 1 :
                    // InternalSQLParser.g:7078:4: (lv_abc_1_0= ruleQueryPartitionClause )
                    {
                    // InternalSQLParser.g:7078:4: (lv_abc_1_0= ruleQueryPartitionClause )
                    // InternalSQLParser.g:7079:5: lv_abc_1_0= ruleQueryPartitionClause
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getAnalyticClauseAccess().getAbcQueryPartitionClauseParserRuleCall_1_0());
                      				
                    }
                    pushFollow(FOLLOW_93);
                    lv_abc_1_0=ruleQueryPartitionClause();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getAnalyticClauseRule());
                      					}
                      					set(
                      						current,
                      						"abc",
                      						lv_abc_1_0,
                      						"org.xtext.example.mydsl_sql.SQL.QueryPartitionClause");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalSQLParser.g:7096:3: ( ( (lv_obc_2_0= ruleOrderByClause ) ) ( (lv_winc_3_0= ruleWindowingClause ) )? )?
            int alt120=2;
            int LA120_0 = input.LA(1);

            if ( (LA120_0==ORDER) ) {
                alt120=1;
            }
            switch (alt120) {
                case 1 :
                    // InternalSQLParser.g:7097:4: ( (lv_obc_2_0= ruleOrderByClause ) ) ( (lv_winc_3_0= ruleWindowingClause ) )?
                    {
                    // InternalSQLParser.g:7097:4: ( (lv_obc_2_0= ruleOrderByClause ) )
                    // InternalSQLParser.g:7098:5: (lv_obc_2_0= ruleOrderByClause )
                    {
                    // InternalSQLParser.g:7098:5: (lv_obc_2_0= ruleOrderByClause )
                    // InternalSQLParser.g:7099:6: lv_obc_2_0= ruleOrderByClause
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getAnalyticClauseAccess().getObcOrderByClauseParserRuleCall_2_0_0());
                      					
                    }
                    pushFollow(FOLLOW_94);
                    lv_obc_2_0=ruleOrderByClause();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getAnalyticClauseRule());
                      						}
                      						set(
                      							current,
                      							"obc",
                      							lv_obc_2_0,
                      							"org.xtext.example.mydsl_sql.SQL.OrderByClause");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalSQLParser.g:7116:4: ( (lv_winc_3_0= ruleWindowingClause ) )?
                    int alt119=2;
                    int LA119_0 = input.LA(1);

                    if ( (LA119_0==RANGE||LA119_0==ROWS) ) {
                        alt119=1;
                    }
                    switch (alt119) {
                        case 1 :
                            // InternalSQLParser.g:7117:5: (lv_winc_3_0= ruleWindowingClause )
                            {
                            // InternalSQLParser.g:7117:5: (lv_winc_3_0= ruleWindowingClause )
                            // InternalSQLParser.g:7118:6: lv_winc_3_0= ruleWindowingClause
                            {
                            if ( state.backtracking==0 ) {

                              						newCompositeNode(grammarAccess.getAnalyticClauseAccess().getWincWindowingClauseParserRuleCall_2_1_0());
                              					
                            }
                            pushFollow(FOLLOW_2);
                            lv_winc_3_0=ruleWindowingClause();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElementForParent(grammarAccess.getAnalyticClauseRule());
                              						}
                              						set(
                              							current,
                              							"winc",
                              							lv_winc_3_0,
                              							"org.xtext.example.mydsl_sql.SQL.WindowingClause");
                              						afterParserOrEnumRuleCall();
                              					
                            }

                            }


                            }
                            break;

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleAnalyticClause"


    // $ANTLR start "entryRuleWindowingClause"
    // InternalSQLParser.g:7140:1: entryRuleWindowingClause returns [EObject current=null] : iv_ruleWindowingClause= ruleWindowingClause EOF ;
    public final EObject entryRuleWindowingClause() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleWindowingClause = null;


        try {
            // InternalSQLParser.g:7140:56: (iv_ruleWindowingClause= ruleWindowingClause EOF )
            // InternalSQLParser.g:7141:2: iv_ruleWindowingClause= ruleWindowingClause EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getWindowingClauseRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleWindowingClause=ruleWindowingClause();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleWindowingClause; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleWindowingClause"


    // $ANTLR start "ruleWindowingClause"
    // InternalSQLParser.g:7147:1: ruleWindowingClause returns [EObject current=null] : ( (otherlv_0= ROWS | otherlv_1= RANGE ) (this_WindowingClauseBetween_2= ruleWindowingClauseBetween | this_WindowingClauseOperandPreceding_3= ruleWindowingClauseOperandPreceding ) ) ;
    public final EObject ruleWindowingClause() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        EObject this_WindowingClauseBetween_2 = null;

        EObject this_WindowingClauseOperandPreceding_3 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:7153:2: ( ( (otherlv_0= ROWS | otherlv_1= RANGE ) (this_WindowingClauseBetween_2= ruleWindowingClauseBetween | this_WindowingClauseOperandPreceding_3= ruleWindowingClauseOperandPreceding ) ) )
            // InternalSQLParser.g:7154:2: ( (otherlv_0= ROWS | otherlv_1= RANGE ) (this_WindowingClauseBetween_2= ruleWindowingClauseBetween | this_WindowingClauseOperandPreceding_3= ruleWindowingClauseOperandPreceding ) )
            {
            // InternalSQLParser.g:7154:2: ( (otherlv_0= ROWS | otherlv_1= RANGE ) (this_WindowingClauseBetween_2= ruleWindowingClauseBetween | this_WindowingClauseOperandPreceding_3= ruleWindowingClauseOperandPreceding ) )
            // InternalSQLParser.g:7155:3: (otherlv_0= ROWS | otherlv_1= RANGE ) (this_WindowingClauseBetween_2= ruleWindowingClauseBetween | this_WindowingClauseOperandPreceding_3= ruleWindowingClauseOperandPreceding )
            {
            // InternalSQLParser.g:7155:3: (otherlv_0= ROWS | otherlv_1= RANGE )
            int alt121=2;
            int LA121_0 = input.LA(1);

            if ( (LA121_0==ROWS) ) {
                alt121=1;
            }
            else if ( (LA121_0==RANGE) ) {
                alt121=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 121, 0, input);

                throw nvae;
            }
            switch (alt121) {
                case 1 :
                    // InternalSQLParser.g:7156:4: otherlv_0= ROWS
                    {
                    otherlv_0=(Token)match(input,ROWS,FOLLOW_95); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_0, grammarAccess.getWindowingClauseAccess().getROWSKeyword_0_0());
                      			
                    }

                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:7161:4: otherlv_1= RANGE
                    {
                    otherlv_1=(Token)match(input,RANGE,FOLLOW_95); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getWindowingClauseAccess().getRANGEKeyword_0_1());
                      			
                    }

                    }
                    break;

            }

            // InternalSQLParser.g:7166:3: (this_WindowingClauseBetween_2= ruleWindowingClauseBetween | this_WindowingClauseOperandPreceding_3= ruleWindowingClauseOperandPreceding )
            int alt122=2;
            int LA122_0 = input.LA(1);

            if ( (LA122_0==BETWEEN) ) {
                alt122=1;
            }
            else if ( (LA122_0==UNBOUNDED||LA122_0==CURRENT||LA122_0==EXTRACT||LA122_0==CAST||LA122_0==CASE||LA122_0==LeftParenthesis||(LA122_0>=RULE_JRPARAM && LA122_0<=RULE_JRNPARAM)||(LA122_0>=RULE_UNSIGNED && LA122_0<=RULE_SIGNED_DOUBLE)||(LA122_0>=RULE_STRING_ && LA122_0<=RULE_ID)) ) {
                alt122=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 122, 0, input);

                throw nvae;
            }
            switch (alt122) {
                case 1 :
                    // InternalSQLParser.g:7167:4: this_WindowingClauseBetween_2= ruleWindowingClauseBetween
                    {
                    if ( state.backtracking==0 ) {

                      				/* */
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getWindowingClauseAccess().getWindowingClauseBetweenParserRuleCall_1_0());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_WindowingClauseBetween_2=ruleWindowingClauseBetween();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_WindowingClauseBetween_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:7179:4: this_WindowingClauseOperandPreceding_3= ruleWindowingClauseOperandPreceding
                    {
                    if ( state.backtracking==0 ) {

                      				/* */
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getWindowingClauseAccess().getWindowingClauseOperandPrecedingParserRuleCall_1_1());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_WindowingClauseOperandPreceding_3=ruleWindowingClauseOperandPreceding();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_WindowingClauseOperandPreceding_3;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleWindowingClause"


    // $ANTLR start "entryRuleWindowingClauseBetween"
    // InternalSQLParser.g:7195:1: entryRuleWindowingClauseBetween returns [EObject current=null] : iv_ruleWindowingClauseBetween= ruleWindowingClauseBetween EOF ;
    public final EObject entryRuleWindowingClauseBetween() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleWindowingClauseBetween = null;


        try {
            // InternalSQLParser.g:7195:63: (iv_ruleWindowingClauseBetween= ruleWindowingClauseBetween EOF )
            // InternalSQLParser.g:7196:2: iv_ruleWindowingClauseBetween= ruleWindowingClauseBetween EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getWindowingClauseBetweenRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleWindowingClauseBetween=ruleWindowingClauseBetween();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleWindowingClauseBetween; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleWindowingClauseBetween"


    // $ANTLR start "ruleWindowingClauseBetween"
    // InternalSQLParser.g:7202:1: ruleWindowingClauseBetween returns [EObject current=null] : (otherlv_0= BETWEEN ( (lv_wcoP_1_0= ruleWindowingClauseOperandPreceding ) ) otherlv_2= AND ( (lv_wcoF_3_0= ruleWindowingClauseOperandFollowing ) ) ) ;
    public final EObject ruleWindowingClauseBetween() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_wcoP_1_0 = null;

        EObject lv_wcoF_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:7208:2: ( (otherlv_0= BETWEEN ( (lv_wcoP_1_0= ruleWindowingClauseOperandPreceding ) ) otherlv_2= AND ( (lv_wcoF_3_0= ruleWindowingClauseOperandFollowing ) ) ) )
            // InternalSQLParser.g:7209:2: (otherlv_0= BETWEEN ( (lv_wcoP_1_0= ruleWindowingClauseOperandPreceding ) ) otherlv_2= AND ( (lv_wcoF_3_0= ruleWindowingClauseOperandFollowing ) ) )
            {
            // InternalSQLParser.g:7209:2: (otherlv_0= BETWEEN ( (lv_wcoP_1_0= ruleWindowingClauseOperandPreceding ) ) otherlv_2= AND ( (lv_wcoF_3_0= ruleWindowingClauseOperandFollowing ) ) )
            // InternalSQLParser.g:7210:3: otherlv_0= BETWEEN ( (lv_wcoP_1_0= ruleWindowingClauseOperandPreceding ) ) otherlv_2= AND ( (lv_wcoF_3_0= ruleWindowingClauseOperandFollowing ) )
            {
            otherlv_0=(Token)match(input,BETWEEN,FOLLOW_95); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getWindowingClauseBetweenAccess().getBETWEENKeyword_0());
              		
            }
            // InternalSQLParser.g:7214:3: ( (lv_wcoP_1_0= ruleWindowingClauseOperandPreceding ) )
            // InternalSQLParser.g:7215:4: (lv_wcoP_1_0= ruleWindowingClauseOperandPreceding )
            {
            // InternalSQLParser.g:7215:4: (lv_wcoP_1_0= ruleWindowingClauseOperandPreceding )
            // InternalSQLParser.g:7216:5: lv_wcoP_1_0= ruleWindowingClauseOperandPreceding
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getWindowingClauseBetweenAccess().getWcoPWindowingClauseOperandPrecedingParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_84);
            lv_wcoP_1_0=ruleWindowingClauseOperandPreceding();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getWindowingClauseBetweenRule());
              					}
              					set(
              						current,
              						"wcoP",
              						lv_wcoP_1_0,
              						"org.xtext.example.mydsl_sql.SQL.WindowingClauseOperandPreceding");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_2=(Token)match(input,AND,FOLLOW_95); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getWindowingClauseBetweenAccess().getANDKeyword_2());
              		
            }
            // InternalSQLParser.g:7237:3: ( (lv_wcoF_3_0= ruleWindowingClauseOperandFollowing ) )
            // InternalSQLParser.g:7238:4: (lv_wcoF_3_0= ruleWindowingClauseOperandFollowing )
            {
            // InternalSQLParser.g:7238:4: (lv_wcoF_3_0= ruleWindowingClauseOperandFollowing )
            // InternalSQLParser.g:7239:5: lv_wcoF_3_0= ruleWindowingClauseOperandFollowing
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getWindowingClauseBetweenAccess().getWcoFWindowingClauseOperandFollowingParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_wcoF_3_0=ruleWindowingClauseOperandFollowing();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getWindowingClauseBetweenRule());
              					}
              					set(
              						current,
              						"wcoF",
              						lv_wcoF_3_0,
              						"org.xtext.example.mydsl_sql.SQL.WindowingClauseOperandFollowing");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleWindowingClauseBetween"


    // $ANTLR start "entryRuleWindowingClauseOperandFollowing"
    // InternalSQLParser.g:7260:1: entryRuleWindowingClauseOperandFollowing returns [EObject current=null] : iv_ruleWindowingClauseOperandFollowing= ruleWindowingClauseOperandFollowing EOF ;
    public final EObject entryRuleWindowingClauseOperandFollowing() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleWindowingClauseOperandFollowing = null;


        try {
            // InternalSQLParser.g:7260:72: (iv_ruleWindowingClauseOperandFollowing= ruleWindowingClauseOperandFollowing EOF )
            // InternalSQLParser.g:7261:2: iv_ruleWindowingClauseOperandFollowing= ruleWindowingClauseOperandFollowing EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getWindowingClauseOperandFollowingRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleWindowingClauseOperandFollowing=ruleWindowingClauseOperandFollowing();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleWindowingClauseOperandFollowing; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleWindowingClauseOperandFollowing"


    // $ANTLR start "ruleWindowingClauseOperandFollowing"
    // InternalSQLParser.g:7267:1: ruleWindowingClauseOperandFollowing returns [EObject current=null] : ( () ( (otherlv_1= UNBOUNDED otherlv_2= KW_FOLLOWING ) | (otherlv_3= CURRENT otherlv_4= ROW ) | ( ( (lv_exp_5_0= ruleAnalyticExprArg ) ) (otherlv_6= PRECEDING | otherlv_7= KW_FOLLOWING ) ) ) ) ;
    public final EObject ruleWindowingClauseOperandFollowing() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        Token otherlv_7=null;
        EObject lv_exp_5_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:7273:2: ( ( () ( (otherlv_1= UNBOUNDED otherlv_2= KW_FOLLOWING ) | (otherlv_3= CURRENT otherlv_4= ROW ) | ( ( (lv_exp_5_0= ruleAnalyticExprArg ) ) (otherlv_6= PRECEDING | otherlv_7= KW_FOLLOWING ) ) ) ) )
            // InternalSQLParser.g:7274:2: ( () ( (otherlv_1= UNBOUNDED otherlv_2= KW_FOLLOWING ) | (otherlv_3= CURRENT otherlv_4= ROW ) | ( ( (lv_exp_5_0= ruleAnalyticExprArg ) ) (otherlv_6= PRECEDING | otherlv_7= KW_FOLLOWING ) ) ) )
            {
            // InternalSQLParser.g:7274:2: ( () ( (otherlv_1= UNBOUNDED otherlv_2= KW_FOLLOWING ) | (otherlv_3= CURRENT otherlv_4= ROW ) | ( ( (lv_exp_5_0= ruleAnalyticExprArg ) ) (otherlv_6= PRECEDING | otherlv_7= KW_FOLLOWING ) ) ) )
            // InternalSQLParser.g:7275:3: () ( (otherlv_1= UNBOUNDED otherlv_2= KW_FOLLOWING ) | (otherlv_3= CURRENT otherlv_4= ROW ) | ( ( (lv_exp_5_0= ruleAnalyticExprArg ) ) (otherlv_6= PRECEDING | otherlv_7= KW_FOLLOWING ) ) )
            {
            // InternalSQLParser.g:7275:3: ()
            // InternalSQLParser.g:7276:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getWindowingClauseOperandFollowingAccess().getWindowingClauseOperandFollowingAction_0(),
              					current);
              			
            }

            }

            // InternalSQLParser.g:7285:3: ( (otherlv_1= UNBOUNDED otherlv_2= KW_FOLLOWING ) | (otherlv_3= CURRENT otherlv_4= ROW ) | ( ( (lv_exp_5_0= ruleAnalyticExprArg ) ) (otherlv_6= PRECEDING | otherlv_7= KW_FOLLOWING ) ) )
            int alt124=3;
            switch ( input.LA(1) ) {
            case UNBOUNDED:
                {
                alt124=1;
                }
                break;
            case CURRENT:
                {
                alt124=2;
                }
                break;
            case EXTRACT:
            case CAST:
            case CASE:
            case LeftParenthesis:
            case RULE_JRPARAM:
            case RULE_JRNPARAM:
            case RULE_UNSIGNED:
            case RULE_INT:
            case RULE_SIGNED_DOUBLE:
            case RULE_STRING_:
            case RULE_STRING:
            case RULE_DBNAME:
            case RULE_ID:
                {
                alt124=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 124, 0, input);

                throw nvae;
            }

            switch (alt124) {
                case 1 :
                    // InternalSQLParser.g:7286:4: (otherlv_1= UNBOUNDED otherlv_2= KW_FOLLOWING )
                    {
                    // InternalSQLParser.g:7286:4: (otherlv_1= UNBOUNDED otherlv_2= KW_FOLLOWING )
                    // InternalSQLParser.g:7287:5: otherlv_1= UNBOUNDED otherlv_2= KW_FOLLOWING
                    {
                    otherlv_1=(Token)match(input,UNBOUNDED,FOLLOW_96); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_1, grammarAccess.getWindowingClauseOperandFollowingAccess().getUNBOUNDEDKeyword_1_0_0());
                      				
                    }
                    otherlv_2=(Token)match(input,KW_FOLLOWING,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_2, grammarAccess.getWindowingClauseOperandFollowingAccess().getFOLLOWINGKeyword_1_0_1());
                      				
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:7297:4: (otherlv_3= CURRENT otherlv_4= ROW )
                    {
                    // InternalSQLParser.g:7297:4: (otherlv_3= CURRENT otherlv_4= ROW )
                    // InternalSQLParser.g:7298:5: otherlv_3= CURRENT otherlv_4= ROW
                    {
                    otherlv_3=(Token)match(input,CURRENT,FOLLOW_97); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_3, grammarAccess.getWindowingClauseOperandFollowingAccess().getCURRENTKeyword_1_1_0());
                      				
                    }
                    otherlv_4=(Token)match(input,ROW,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_4, grammarAccess.getWindowingClauseOperandFollowingAccess().getROWKeyword_1_1_1());
                      				
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:7308:4: ( ( (lv_exp_5_0= ruleAnalyticExprArg ) ) (otherlv_6= PRECEDING | otherlv_7= KW_FOLLOWING ) )
                    {
                    // InternalSQLParser.g:7308:4: ( ( (lv_exp_5_0= ruleAnalyticExprArg ) ) (otherlv_6= PRECEDING | otherlv_7= KW_FOLLOWING ) )
                    // InternalSQLParser.g:7309:5: ( (lv_exp_5_0= ruleAnalyticExprArg ) ) (otherlv_6= PRECEDING | otherlv_7= KW_FOLLOWING )
                    {
                    // InternalSQLParser.g:7309:5: ( (lv_exp_5_0= ruleAnalyticExprArg ) )
                    // InternalSQLParser.g:7310:6: (lv_exp_5_0= ruleAnalyticExprArg )
                    {
                    // InternalSQLParser.g:7310:6: (lv_exp_5_0= ruleAnalyticExprArg )
                    // InternalSQLParser.g:7311:7: lv_exp_5_0= ruleAnalyticExprArg
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getWindowingClauseOperandFollowingAccess().getExpAnalyticExprArgParserRuleCall_1_2_0_0());
                      						
                    }
                    pushFollow(FOLLOW_98);
                    lv_exp_5_0=ruleAnalyticExprArg();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getWindowingClauseOperandFollowingRule());
                      							}
                      							set(
                      								current,
                      								"exp",
                      								lv_exp_5_0,
                      								"org.xtext.example.mydsl_sql.SQL.AnalyticExprArg");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }

                    // InternalSQLParser.g:7328:5: (otherlv_6= PRECEDING | otherlv_7= KW_FOLLOWING )
                    int alt123=2;
                    int LA123_0 = input.LA(1);

                    if ( (LA123_0==PRECEDING) ) {
                        alt123=1;
                    }
                    else if ( (LA123_0==KW_FOLLOWING) ) {
                        alt123=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 123, 0, input);

                        throw nvae;
                    }
                    switch (alt123) {
                        case 1 :
                            // InternalSQLParser.g:7329:6: otherlv_6= PRECEDING
                            {
                            otherlv_6=(Token)match(input,PRECEDING,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(otherlv_6, grammarAccess.getWindowingClauseOperandFollowingAccess().getPRECEDINGKeyword_1_2_1_0());
                              					
                            }

                            }
                            break;
                        case 2 :
                            // InternalSQLParser.g:7334:6: otherlv_7= KW_FOLLOWING
                            {
                            otherlv_7=(Token)match(input,KW_FOLLOWING,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(otherlv_7, grammarAccess.getWindowingClauseOperandFollowingAccess().getFOLLOWINGKeyword_1_2_1_1());
                              					
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleWindowingClauseOperandFollowing"


    // $ANTLR start "entryRuleWindowingClauseOperandPreceding"
    // InternalSQLParser.g:7345:1: entryRuleWindowingClauseOperandPreceding returns [EObject current=null] : iv_ruleWindowingClauseOperandPreceding= ruleWindowingClauseOperandPreceding EOF ;
    public final EObject entryRuleWindowingClauseOperandPreceding() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleWindowingClauseOperandPreceding = null;


        try {
            // InternalSQLParser.g:7345:72: (iv_ruleWindowingClauseOperandPreceding= ruleWindowingClauseOperandPreceding EOF )
            // InternalSQLParser.g:7346:2: iv_ruleWindowingClauseOperandPreceding= ruleWindowingClauseOperandPreceding EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getWindowingClauseOperandPrecedingRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleWindowingClauseOperandPreceding=ruleWindowingClauseOperandPreceding();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleWindowingClauseOperandPreceding; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleWindowingClauseOperandPreceding"


    // $ANTLR start "ruleWindowingClauseOperandPreceding"
    // InternalSQLParser.g:7352:1: ruleWindowingClauseOperandPreceding returns [EObject current=null] : ( () ( (otherlv_1= UNBOUNDED otherlv_2= PRECEDING ) | (otherlv_3= CURRENT otherlv_4= ROW ) | ( ( (lv_expr_5_0= ruleAnalyticExprArg ) ) (otherlv_6= PRECEDING | otherlv_7= KW_FOLLOWING ) ) ) ) ;
    public final EObject ruleWindowingClauseOperandPreceding() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        Token otherlv_7=null;
        EObject lv_expr_5_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:7358:2: ( ( () ( (otherlv_1= UNBOUNDED otherlv_2= PRECEDING ) | (otherlv_3= CURRENT otherlv_4= ROW ) | ( ( (lv_expr_5_0= ruleAnalyticExprArg ) ) (otherlv_6= PRECEDING | otherlv_7= KW_FOLLOWING ) ) ) ) )
            // InternalSQLParser.g:7359:2: ( () ( (otherlv_1= UNBOUNDED otherlv_2= PRECEDING ) | (otherlv_3= CURRENT otherlv_4= ROW ) | ( ( (lv_expr_5_0= ruleAnalyticExprArg ) ) (otherlv_6= PRECEDING | otherlv_7= KW_FOLLOWING ) ) ) )
            {
            // InternalSQLParser.g:7359:2: ( () ( (otherlv_1= UNBOUNDED otherlv_2= PRECEDING ) | (otherlv_3= CURRENT otherlv_4= ROW ) | ( ( (lv_expr_5_0= ruleAnalyticExprArg ) ) (otherlv_6= PRECEDING | otherlv_7= KW_FOLLOWING ) ) ) )
            // InternalSQLParser.g:7360:3: () ( (otherlv_1= UNBOUNDED otherlv_2= PRECEDING ) | (otherlv_3= CURRENT otherlv_4= ROW ) | ( ( (lv_expr_5_0= ruleAnalyticExprArg ) ) (otherlv_6= PRECEDING | otherlv_7= KW_FOLLOWING ) ) )
            {
            // InternalSQLParser.g:7360:3: ()
            // InternalSQLParser.g:7361:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getWindowingClauseOperandPrecedingAccess().getWindowingClauseOperandPrecedingAction_0(),
              					current);
              			
            }

            }

            // InternalSQLParser.g:7370:3: ( (otherlv_1= UNBOUNDED otherlv_2= PRECEDING ) | (otherlv_3= CURRENT otherlv_4= ROW ) | ( ( (lv_expr_5_0= ruleAnalyticExprArg ) ) (otherlv_6= PRECEDING | otherlv_7= KW_FOLLOWING ) ) )
            int alt126=3;
            switch ( input.LA(1) ) {
            case UNBOUNDED:
                {
                alt126=1;
                }
                break;
            case CURRENT:
                {
                alt126=2;
                }
                break;
            case EXTRACT:
            case CAST:
            case CASE:
            case LeftParenthesis:
            case RULE_JRPARAM:
            case RULE_JRNPARAM:
            case RULE_UNSIGNED:
            case RULE_INT:
            case RULE_SIGNED_DOUBLE:
            case RULE_STRING_:
            case RULE_STRING:
            case RULE_DBNAME:
            case RULE_ID:
                {
                alt126=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 126, 0, input);

                throw nvae;
            }

            switch (alt126) {
                case 1 :
                    // InternalSQLParser.g:7371:4: (otherlv_1= UNBOUNDED otherlv_2= PRECEDING )
                    {
                    // InternalSQLParser.g:7371:4: (otherlv_1= UNBOUNDED otherlv_2= PRECEDING )
                    // InternalSQLParser.g:7372:5: otherlv_1= UNBOUNDED otherlv_2= PRECEDING
                    {
                    otherlv_1=(Token)match(input,UNBOUNDED,FOLLOW_99); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_1, grammarAccess.getWindowingClauseOperandPrecedingAccess().getUNBOUNDEDKeyword_1_0_0());
                      				
                    }
                    otherlv_2=(Token)match(input,PRECEDING,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_2, grammarAccess.getWindowingClauseOperandPrecedingAccess().getPRECEDINGKeyword_1_0_1());
                      				
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:7382:4: (otherlv_3= CURRENT otherlv_4= ROW )
                    {
                    // InternalSQLParser.g:7382:4: (otherlv_3= CURRENT otherlv_4= ROW )
                    // InternalSQLParser.g:7383:5: otherlv_3= CURRENT otherlv_4= ROW
                    {
                    otherlv_3=(Token)match(input,CURRENT,FOLLOW_97); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_3, grammarAccess.getWindowingClauseOperandPrecedingAccess().getCURRENTKeyword_1_1_0());
                      				
                    }
                    otherlv_4=(Token)match(input,ROW,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_4, grammarAccess.getWindowingClauseOperandPrecedingAccess().getROWKeyword_1_1_1());
                      				
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:7393:4: ( ( (lv_expr_5_0= ruleAnalyticExprArg ) ) (otherlv_6= PRECEDING | otherlv_7= KW_FOLLOWING ) )
                    {
                    // InternalSQLParser.g:7393:4: ( ( (lv_expr_5_0= ruleAnalyticExprArg ) ) (otherlv_6= PRECEDING | otherlv_7= KW_FOLLOWING ) )
                    // InternalSQLParser.g:7394:5: ( (lv_expr_5_0= ruleAnalyticExprArg ) ) (otherlv_6= PRECEDING | otherlv_7= KW_FOLLOWING )
                    {
                    // InternalSQLParser.g:7394:5: ( (lv_expr_5_0= ruleAnalyticExprArg ) )
                    // InternalSQLParser.g:7395:6: (lv_expr_5_0= ruleAnalyticExprArg )
                    {
                    // InternalSQLParser.g:7395:6: (lv_expr_5_0= ruleAnalyticExprArg )
                    // InternalSQLParser.g:7396:7: lv_expr_5_0= ruleAnalyticExprArg
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getWindowingClauseOperandPrecedingAccess().getExprAnalyticExprArgParserRuleCall_1_2_0_0());
                      						
                    }
                    pushFollow(FOLLOW_98);
                    lv_expr_5_0=ruleAnalyticExprArg();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getWindowingClauseOperandPrecedingRule());
                      							}
                      							set(
                      								current,
                      								"expr",
                      								lv_expr_5_0,
                      								"org.xtext.example.mydsl_sql.SQL.AnalyticExprArg");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }

                    // InternalSQLParser.g:7413:5: (otherlv_6= PRECEDING | otherlv_7= KW_FOLLOWING )
                    int alt125=2;
                    int LA125_0 = input.LA(1);

                    if ( (LA125_0==PRECEDING) ) {
                        alt125=1;
                    }
                    else if ( (LA125_0==KW_FOLLOWING) ) {
                        alt125=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 125, 0, input);

                        throw nvae;
                    }
                    switch (alt125) {
                        case 1 :
                            // InternalSQLParser.g:7414:6: otherlv_6= PRECEDING
                            {
                            otherlv_6=(Token)match(input,PRECEDING,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(otherlv_6, grammarAccess.getWindowingClauseOperandPrecedingAccess().getPRECEDINGKeyword_1_2_1_0());
                              					
                            }

                            }
                            break;
                        case 2 :
                            // InternalSQLParser.g:7419:6: otherlv_7= KW_FOLLOWING
                            {
                            otherlv_7=(Token)match(input,KW_FOLLOWING,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(otherlv_7, grammarAccess.getWindowingClauseOperandPrecedingAccess().getFOLLOWINGKeyword_1_2_1_1());
                              					
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleWindowingClauseOperandPreceding"


    // $ANTLR start "entryRuleOrderByClause"
    // InternalSQLParser.g:7430:1: entryRuleOrderByClause returns [EObject current=null] : iv_ruleOrderByClause= ruleOrderByClause EOF ;
    public final EObject entryRuleOrderByClause() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOrderByClause = null;


        try {
            // InternalSQLParser.g:7430:54: (iv_ruleOrderByClause= ruleOrderByClause EOF )
            // InternalSQLParser.g:7431:2: iv_ruleOrderByClause= ruleOrderByClause EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOrderByClauseRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOrderByClause=ruleOrderByClause();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOrderByClause; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOrderByClause"


    // $ANTLR start "ruleOrderByClause"
    // InternalSQLParser.g:7437:1: ruleOrderByClause returns [EObject current=null] : ( ( (otherlv_0= ORDER otherlv_1= BY ) | (otherlv_2= ORDER otherlv_3= SIBLINGS otherlv_4= BY ) ) ( (lv_args_5_0= ruleOrderByClauseArgs ) ) ) ;
    public final EObject ruleOrderByClause() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        EObject lv_args_5_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:7443:2: ( ( ( (otherlv_0= ORDER otherlv_1= BY ) | (otherlv_2= ORDER otherlv_3= SIBLINGS otherlv_4= BY ) ) ( (lv_args_5_0= ruleOrderByClauseArgs ) ) ) )
            // InternalSQLParser.g:7444:2: ( ( (otherlv_0= ORDER otherlv_1= BY ) | (otherlv_2= ORDER otherlv_3= SIBLINGS otherlv_4= BY ) ) ( (lv_args_5_0= ruleOrderByClauseArgs ) ) )
            {
            // InternalSQLParser.g:7444:2: ( ( (otherlv_0= ORDER otherlv_1= BY ) | (otherlv_2= ORDER otherlv_3= SIBLINGS otherlv_4= BY ) ) ( (lv_args_5_0= ruleOrderByClauseArgs ) ) )
            // InternalSQLParser.g:7445:3: ( (otherlv_0= ORDER otherlv_1= BY ) | (otherlv_2= ORDER otherlv_3= SIBLINGS otherlv_4= BY ) ) ( (lv_args_5_0= ruleOrderByClauseArgs ) )
            {
            // InternalSQLParser.g:7445:3: ( (otherlv_0= ORDER otherlv_1= BY ) | (otherlv_2= ORDER otherlv_3= SIBLINGS otherlv_4= BY ) )
            int alt127=2;
            int LA127_0 = input.LA(1);

            if ( (LA127_0==ORDER) ) {
                int LA127_1 = input.LA(2);

                if ( (LA127_1==SIBLINGS) ) {
                    alt127=2;
                }
                else if ( (LA127_1==BY) ) {
                    alt127=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 127, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 127, 0, input);

                throw nvae;
            }
            switch (alt127) {
                case 1 :
                    // InternalSQLParser.g:7446:4: (otherlv_0= ORDER otherlv_1= BY )
                    {
                    // InternalSQLParser.g:7446:4: (otherlv_0= ORDER otherlv_1= BY )
                    // InternalSQLParser.g:7447:5: otherlv_0= ORDER otherlv_1= BY
                    {
                    otherlv_0=(Token)match(input,ORDER,FOLLOW_41); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_0, grammarAccess.getOrderByClauseAccess().getORDERKeyword_0_0_0());
                      				
                    }
                    otherlv_1=(Token)match(input,BY,FOLLOW_95); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_1, grammarAccess.getOrderByClauseAccess().getBYKeyword_0_0_1());
                      				
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:7457:4: (otherlv_2= ORDER otherlv_3= SIBLINGS otherlv_4= BY )
                    {
                    // InternalSQLParser.g:7457:4: (otherlv_2= ORDER otherlv_3= SIBLINGS otherlv_4= BY )
                    // InternalSQLParser.g:7458:5: otherlv_2= ORDER otherlv_3= SIBLINGS otherlv_4= BY
                    {
                    otherlv_2=(Token)match(input,ORDER,FOLLOW_100); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_2, grammarAccess.getOrderByClauseAccess().getORDERKeyword_0_1_0());
                      				
                    }
                    otherlv_3=(Token)match(input,SIBLINGS,FOLLOW_41); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_3, grammarAccess.getOrderByClauseAccess().getSIBLINGSKeyword_0_1_1());
                      				
                    }
                    otherlv_4=(Token)match(input,BY,FOLLOW_95); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_4, grammarAccess.getOrderByClauseAccess().getBYKeyword_0_1_2());
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalSQLParser.g:7472:3: ( (lv_args_5_0= ruleOrderByClauseArgs ) )
            // InternalSQLParser.g:7473:4: (lv_args_5_0= ruleOrderByClauseArgs )
            {
            // InternalSQLParser.g:7473:4: (lv_args_5_0= ruleOrderByClauseArgs )
            // InternalSQLParser.g:7474:5: lv_args_5_0= ruleOrderByClauseArgs
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getOrderByClauseAccess().getArgsOrderByClauseArgsParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_args_5_0=ruleOrderByClauseArgs();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getOrderByClauseRule());
              					}
              					set(
              						current,
              						"args",
              						lv_args_5_0,
              						"org.xtext.example.mydsl_sql.SQL.OrderByClauseArgs");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOrderByClause"


    // $ANTLR start "entryRuleOrderByClauseArgs"
    // InternalSQLParser.g:7495:1: entryRuleOrderByClauseArgs returns [EObject current=null] : iv_ruleOrderByClauseArgs= ruleOrderByClauseArgs EOF ;
    public final EObject entryRuleOrderByClauseArgs() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOrderByClauseArgs = null;


        try {
            // InternalSQLParser.g:7495:58: (iv_ruleOrderByClauseArgs= ruleOrderByClauseArgs EOF )
            // InternalSQLParser.g:7496:2: iv_ruleOrderByClauseArgs= ruleOrderByClauseArgs EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOrderByClauseArgsRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOrderByClauseArgs=ruleOrderByClauseArgs();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOrderByClauseArgs; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOrderByClauseArgs"


    // $ANTLR start "ruleOrderByClauseArgs"
    // InternalSQLParser.g:7502:1: ruleOrderByClauseArgs returns [EObject current=null] : (this_OrderByClauseArg_0= ruleOrderByClauseArg ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleOrderByClauseArg ) ) )+ )? ) ;
    public final EObject ruleOrderByClauseArgs() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_OrderByClauseArg_0 = null;

        EObject lv_entries_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:7508:2: ( (this_OrderByClauseArg_0= ruleOrderByClauseArg ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleOrderByClauseArg ) ) )+ )? ) )
            // InternalSQLParser.g:7509:2: (this_OrderByClauseArg_0= ruleOrderByClauseArg ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleOrderByClauseArg ) ) )+ )? )
            {
            // InternalSQLParser.g:7509:2: (this_OrderByClauseArg_0= ruleOrderByClauseArg ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleOrderByClauseArg ) ) )+ )? )
            // InternalSQLParser.g:7510:3: this_OrderByClauseArg_0= ruleOrderByClauseArg ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleOrderByClauseArg ) ) )+ )?
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getOrderByClauseArgsAccess().getOrderByClauseArgParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_11);
            this_OrderByClauseArg_0=ruleOrderByClauseArg();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_OrderByClauseArg_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:7521:3: ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleOrderByClauseArg ) ) )+ )?
            int alt129=2;
            int LA129_0 = input.LA(1);

            if ( (LA129_0==Comma) ) {
                alt129=1;
            }
            switch (alt129) {
                case 1 :
                    // InternalSQLParser.g:7522:4: () (otherlv_2= Comma ( (lv_entries_3_0= ruleOrderByClauseArg ) ) )+
                    {
                    // InternalSQLParser.g:7522:4: ()
                    // InternalSQLParser.g:7523:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getOrderByClauseArgsAccess().getOBCArgsEntriesAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalSQLParser.g:7532:4: (otherlv_2= Comma ( (lv_entries_3_0= ruleOrderByClauseArg ) ) )+
                    int cnt128=0;
                    loop128:
                    do {
                        int alt128=2;
                        int LA128_0 = input.LA(1);

                        if ( (LA128_0==Comma) ) {
                            alt128=1;
                        }


                        switch (alt128) {
                    	case 1 :
                    	    // InternalSQLParser.g:7533:5: otherlv_2= Comma ( (lv_entries_3_0= ruleOrderByClauseArg ) )
                    	    {
                    	    otherlv_2=(Token)match(input,Comma,FOLLOW_95); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_2, grammarAccess.getOrderByClauseArgsAccess().getCommaKeyword_1_1_0());
                    	      				
                    	    }
                    	    // InternalSQLParser.g:7537:5: ( (lv_entries_3_0= ruleOrderByClauseArg ) )
                    	    // InternalSQLParser.g:7538:6: (lv_entries_3_0= ruleOrderByClauseArg )
                    	    {
                    	    // InternalSQLParser.g:7538:6: (lv_entries_3_0= ruleOrderByClauseArg )
                    	    // InternalSQLParser.g:7539:7: lv_entries_3_0= ruleOrderByClauseArg
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getOrderByClauseArgsAccess().getEntriesOrderByClauseArgParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_11);
                    	    lv_entries_3_0=ruleOrderByClauseArg();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getOrderByClauseArgsRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"entries",
                    	      								lv_entries_3_0,
                    	      								"org.xtext.example.mydsl_sql.SQL.OrderByClauseArg");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt128 >= 1 ) break loop128;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(128, input);
                                throw eee;
                        }
                        cnt128++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOrderByClauseArgs"


    // $ANTLR start "entryRuleOrderByClauseArg"
    // InternalSQLParser.g:7562:1: entryRuleOrderByClauseArg returns [EObject current=null] : iv_ruleOrderByClauseArg= ruleOrderByClauseArg EOF ;
    public final EObject entryRuleOrderByClauseArg() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOrderByClauseArg = null;


        try {
            // InternalSQLParser.g:7562:57: (iv_ruleOrderByClauseArg= ruleOrderByClauseArg EOF )
            // InternalSQLParser.g:7563:2: iv_ruleOrderByClauseArg= ruleOrderByClauseArg EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOrderByClauseArgRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOrderByClauseArg=ruleOrderByClauseArg();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOrderByClauseArg; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOrderByClauseArg"


    // $ANTLR start "ruleOrderByClauseArg"
    // InternalSQLParser.g:7569:1: ruleOrderByClauseArg returns [EObject current=null] : ( ( (lv_col_0_0= ruleAnalyticExprArg ) ) (otherlv_1= ASC | otherlv_2= DESC )? (otherlv_3= NULLS (otherlv_4= FIRST | otherlv_5= LAST ) )? ) ;
    public final EObject ruleOrderByClauseArg() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        Token otherlv_5=null;
        EObject lv_col_0_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:7575:2: ( ( ( (lv_col_0_0= ruleAnalyticExprArg ) ) (otherlv_1= ASC | otherlv_2= DESC )? (otherlv_3= NULLS (otherlv_4= FIRST | otherlv_5= LAST ) )? ) )
            // InternalSQLParser.g:7576:2: ( ( (lv_col_0_0= ruleAnalyticExprArg ) ) (otherlv_1= ASC | otherlv_2= DESC )? (otherlv_3= NULLS (otherlv_4= FIRST | otherlv_5= LAST ) )? )
            {
            // InternalSQLParser.g:7576:2: ( ( (lv_col_0_0= ruleAnalyticExprArg ) ) (otherlv_1= ASC | otherlv_2= DESC )? (otherlv_3= NULLS (otherlv_4= FIRST | otherlv_5= LAST ) )? )
            // InternalSQLParser.g:7577:3: ( (lv_col_0_0= ruleAnalyticExprArg ) ) (otherlv_1= ASC | otherlv_2= DESC )? (otherlv_3= NULLS (otherlv_4= FIRST | otherlv_5= LAST ) )?
            {
            // InternalSQLParser.g:7577:3: ( (lv_col_0_0= ruleAnalyticExprArg ) )
            // InternalSQLParser.g:7578:4: (lv_col_0_0= ruleAnalyticExprArg )
            {
            // InternalSQLParser.g:7578:4: (lv_col_0_0= ruleAnalyticExprArg )
            // InternalSQLParser.g:7579:5: lv_col_0_0= ruleAnalyticExprArg
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getOrderByClauseArgAccess().getColAnalyticExprArgParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_101);
            lv_col_0_0=ruleAnalyticExprArg();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getOrderByClauseArgRule());
              					}
              					set(
              						current,
              						"col",
              						lv_col_0_0,
              						"org.xtext.example.mydsl_sql.SQL.AnalyticExprArg");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:7596:3: (otherlv_1= ASC | otherlv_2= DESC )?
            int alt130=3;
            int LA130_0 = input.LA(1);

            if ( (LA130_0==ASC) ) {
                alt130=1;
            }
            else if ( (LA130_0==DESC) ) {
                alt130=2;
            }
            switch (alt130) {
                case 1 :
                    // InternalSQLParser.g:7597:4: otherlv_1= ASC
                    {
                    otherlv_1=(Token)match(input,ASC,FOLLOW_102); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getOrderByClauseArgAccess().getASCKeyword_1_0());
                      			
                    }

                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:7602:4: otherlv_2= DESC
                    {
                    otherlv_2=(Token)match(input,DESC,FOLLOW_102); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getOrderByClauseArgAccess().getDESCKeyword_1_1());
                      			
                    }

                    }
                    break;

            }

            // InternalSQLParser.g:7607:3: (otherlv_3= NULLS (otherlv_4= FIRST | otherlv_5= LAST ) )?
            int alt132=2;
            int LA132_0 = input.LA(1);

            if ( (LA132_0==NULLS) ) {
                alt132=1;
            }
            switch (alt132) {
                case 1 :
                    // InternalSQLParser.g:7608:4: otherlv_3= NULLS (otherlv_4= FIRST | otherlv_5= LAST )
                    {
                    otherlv_3=(Token)match(input,NULLS,FOLLOW_103); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_3, grammarAccess.getOrderByClauseArgAccess().getNULLSKeyword_2_0());
                      			
                    }
                    // InternalSQLParser.g:7612:4: (otherlv_4= FIRST | otherlv_5= LAST )
                    int alt131=2;
                    int LA131_0 = input.LA(1);

                    if ( (LA131_0==FIRST) ) {
                        alt131=1;
                    }
                    else if ( (LA131_0==LAST) ) {
                        alt131=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 131, 0, input);

                        throw nvae;
                    }
                    switch (alt131) {
                        case 1 :
                            // InternalSQLParser.g:7613:5: otherlv_4= FIRST
                            {
                            otherlv_4=(Token)match(input,FIRST,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(otherlv_4, grammarAccess.getOrderByClauseArgAccess().getFIRSTKeyword_2_1_0());
                              				
                            }

                            }
                            break;
                        case 2 :
                            // InternalSQLParser.g:7618:5: otherlv_5= LAST
                            {
                            otherlv_5=(Token)match(input,LAST,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(otherlv_5, grammarAccess.getOrderByClauseArgAccess().getLASTKeyword_2_1_1());
                              				
                            }

                            }
                            break;

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOrderByClauseArg"


    // $ANTLR start "entryRuleQueryPartitionClause"
    // InternalSQLParser.g:7628:1: entryRuleQueryPartitionClause returns [EObject current=null] : iv_ruleQueryPartitionClause= ruleQueryPartitionClause EOF ;
    public final EObject entryRuleQueryPartitionClause() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleQueryPartitionClause = null;


        try {
            // InternalSQLParser.g:7628:61: (iv_ruleQueryPartitionClause= ruleQueryPartitionClause EOF )
            // InternalSQLParser.g:7629:2: iv_ruleQueryPartitionClause= ruleQueryPartitionClause EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getQueryPartitionClauseRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleQueryPartitionClause=ruleQueryPartitionClause();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleQueryPartitionClause; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleQueryPartitionClause"


    // $ANTLR start "ruleQueryPartitionClause"
    // InternalSQLParser.g:7635:1: ruleQueryPartitionClause returns [EObject current=null] : (otherlv_0= PARTITION otherlv_1= BY ( ( (lv_args_2_0= ruleAnalyticExprArgs ) ) | (otherlv_3= LeftParenthesis this_AnalyticExprArgs_4= ruleAnalyticExprArgs otherlv_5= RightParenthesis ) ) ) ;
    public final EObject ruleQueryPartitionClause() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_args_2_0 = null;

        EObject this_AnalyticExprArgs_4 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:7641:2: ( (otherlv_0= PARTITION otherlv_1= BY ( ( (lv_args_2_0= ruleAnalyticExprArgs ) ) | (otherlv_3= LeftParenthesis this_AnalyticExprArgs_4= ruleAnalyticExprArgs otherlv_5= RightParenthesis ) ) ) )
            // InternalSQLParser.g:7642:2: (otherlv_0= PARTITION otherlv_1= BY ( ( (lv_args_2_0= ruleAnalyticExprArgs ) ) | (otherlv_3= LeftParenthesis this_AnalyticExprArgs_4= ruleAnalyticExprArgs otherlv_5= RightParenthesis ) ) )
            {
            // InternalSQLParser.g:7642:2: (otherlv_0= PARTITION otherlv_1= BY ( ( (lv_args_2_0= ruleAnalyticExprArgs ) ) | (otherlv_3= LeftParenthesis this_AnalyticExprArgs_4= ruleAnalyticExprArgs otherlv_5= RightParenthesis ) ) )
            // InternalSQLParser.g:7643:3: otherlv_0= PARTITION otherlv_1= BY ( ( (lv_args_2_0= ruleAnalyticExprArgs ) ) | (otherlv_3= LeftParenthesis this_AnalyticExprArgs_4= ruleAnalyticExprArgs otherlv_5= RightParenthesis ) )
            {
            otherlv_0=(Token)match(input,PARTITION,FOLLOW_41); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getQueryPartitionClauseAccess().getPARTITIONKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,BY,FOLLOW_95); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getQueryPartitionClauseAccess().getBYKeyword_1());
              		
            }
            // InternalSQLParser.g:7651:3: ( ( (lv_args_2_0= ruleAnalyticExprArgs ) ) | (otherlv_3= LeftParenthesis this_AnalyticExprArgs_4= ruleAnalyticExprArgs otherlv_5= RightParenthesis ) )
            int alt133=2;
            int LA133_0 = input.LA(1);

            if ( (LA133_0==EXTRACT||LA133_0==CAST||LA133_0==CASE||(LA133_0>=RULE_JRPARAM && LA133_0<=RULE_JRNPARAM)||(LA133_0>=RULE_UNSIGNED && LA133_0<=RULE_SIGNED_DOUBLE)||(LA133_0>=RULE_STRING_ && LA133_0<=RULE_ID)) ) {
                alt133=1;
            }
            else if ( (LA133_0==LeftParenthesis) ) {
                int LA133_2 = input.LA(2);

                if ( (LA133_2==EXTRACT||LA133_2==CAST||LA133_2==CASE||LA133_2==LeftParenthesis||(LA133_2>=RULE_JRPARAM && LA133_2<=RULE_JRNPARAM)||(LA133_2>=RULE_UNSIGNED && LA133_2<=RULE_SIGNED_DOUBLE)||(LA133_2>=RULE_STRING_ && LA133_2<=RULE_ID)) ) {
                    alt133=2;
                }
                else if ( (LA133_2==SELECT) ) {
                    alt133=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 133, 2, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 133, 0, input);

                throw nvae;
            }
            switch (alt133) {
                case 1 :
                    // InternalSQLParser.g:7652:4: ( (lv_args_2_0= ruleAnalyticExprArgs ) )
                    {
                    // InternalSQLParser.g:7652:4: ( (lv_args_2_0= ruleAnalyticExprArgs ) )
                    // InternalSQLParser.g:7653:5: (lv_args_2_0= ruleAnalyticExprArgs )
                    {
                    // InternalSQLParser.g:7653:5: (lv_args_2_0= ruleAnalyticExprArgs )
                    // InternalSQLParser.g:7654:6: lv_args_2_0= ruleAnalyticExprArgs
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getQueryPartitionClauseAccess().getArgsAnalyticExprArgsParserRuleCall_2_0_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_args_2_0=ruleAnalyticExprArgs();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getQueryPartitionClauseRule());
                      						}
                      						set(
                      							current,
                      							"args",
                      							lv_args_2_0,
                      							"org.xtext.example.mydsl_sql.SQL.AnalyticExprArgs");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:7672:4: (otherlv_3= LeftParenthesis this_AnalyticExprArgs_4= ruleAnalyticExprArgs otherlv_5= RightParenthesis )
                    {
                    // InternalSQLParser.g:7672:4: (otherlv_3= LeftParenthesis this_AnalyticExprArgs_4= ruleAnalyticExprArgs otherlv_5= RightParenthesis )
                    // InternalSQLParser.g:7673:5: otherlv_3= LeftParenthesis this_AnalyticExprArgs_4= ruleAnalyticExprArgs otherlv_5= RightParenthesis
                    {
                    otherlv_3=(Token)match(input,LeftParenthesis,FOLLOW_95); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_3, grammarAccess.getQueryPartitionClauseAccess().getLeftParenthesisKeyword_2_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getQueryPartitionClauseAccess().getAnalyticExprArgsParserRuleCall_2_1_1());
                      				
                    }
                    pushFollow(FOLLOW_10);
                    this_AnalyticExprArgs_4=ruleAnalyticExprArgs();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_AnalyticExprArgs_4;
                      					afterParserOrEnumRuleCall();
                      				
                    }
                    otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_5, grammarAccess.getQueryPartitionClauseAccess().getRightParenthesisKeyword_2_1_2());
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleQueryPartitionClause"


    // $ANTLR start "entryRuleAnalyticExprArgs"
    // InternalSQLParser.g:7698:1: entryRuleAnalyticExprArgs returns [EObject current=null] : iv_ruleAnalyticExprArgs= ruleAnalyticExprArgs EOF ;
    public final EObject entryRuleAnalyticExprArgs() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAnalyticExprArgs = null;


        try {
            // InternalSQLParser.g:7698:57: (iv_ruleAnalyticExprArgs= ruleAnalyticExprArgs EOF )
            // InternalSQLParser.g:7699:2: iv_ruleAnalyticExprArgs= ruleAnalyticExprArgs EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnalyticExprArgsRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnalyticExprArgs=ruleAnalyticExprArgs();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnalyticExprArgs; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleAnalyticExprArgs"


    // $ANTLR start "ruleAnalyticExprArgs"
    // InternalSQLParser.g:7705:1: ruleAnalyticExprArgs returns [EObject current=null] : (this_AnalyticExprArg_0= ruleAnalyticExprArg ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleAnalyticExprArg ) ) )+ )? ) ;
    public final EObject ruleAnalyticExprArgs() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_AnalyticExprArg_0 = null;

        EObject lv_entries_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:7711:2: ( (this_AnalyticExprArg_0= ruleAnalyticExprArg ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleAnalyticExprArg ) ) )+ )? ) )
            // InternalSQLParser.g:7712:2: (this_AnalyticExprArg_0= ruleAnalyticExprArg ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleAnalyticExprArg ) ) )+ )? )
            {
            // InternalSQLParser.g:7712:2: (this_AnalyticExprArg_0= ruleAnalyticExprArg ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleAnalyticExprArg ) ) )+ )? )
            // InternalSQLParser.g:7713:3: this_AnalyticExprArg_0= ruleAnalyticExprArg ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleAnalyticExprArg ) ) )+ )?
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getAnalyticExprArgsAccess().getAnalyticExprArgParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_11);
            this_AnalyticExprArg_0=ruleAnalyticExprArg();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_AnalyticExprArg_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:7724:3: ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleAnalyticExprArg ) ) )+ )?
            int alt135=2;
            int LA135_0 = input.LA(1);

            if ( (LA135_0==Comma) ) {
                alt135=1;
            }
            switch (alt135) {
                case 1 :
                    // InternalSQLParser.g:7725:4: () (otherlv_2= Comma ( (lv_entries_3_0= ruleAnalyticExprArg ) ) )+
                    {
                    // InternalSQLParser.g:7725:4: ()
                    // InternalSQLParser.g:7726:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getAnalyticExprArgsAccess().getAExpArgsEntriesAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalSQLParser.g:7735:4: (otherlv_2= Comma ( (lv_entries_3_0= ruleAnalyticExprArg ) ) )+
                    int cnt134=0;
                    loop134:
                    do {
                        int alt134=2;
                        int LA134_0 = input.LA(1);

                        if ( (LA134_0==Comma) ) {
                            alt134=1;
                        }


                        switch (alt134) {
                    	case 1 :
                    	    // InternalSQLParser.g:7736:5: otherlv_2= Comma ( (lv_entries_3_0= ruleAnalyticExprArg ) )
                    	    {
                    	    otherlv_2=(Token)match(input,Comma,FOLLOW_95); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_2, grammarAccess.getAnalyticExprArgsAccess().getCommaKeyword_1_1_0());
                    	      				
                    	    }
                    	    // InternalSQLParser.g:7740:5: ( (lv_entries_3_0= ruleAnalyticExprArg ) )
                    	    // InternalSQLParser.g:7741:6: (lv_entries_3_0= ruleAnalyticExprArg )
                    	    {
                    	    // InternalSQLParser.g:7741:6: (lv_entries_3_0= ruleAnalyticExprArg )
                    	    // InternalSQLParser.g:7742:7: lv_entries_3_0= ruleAnalyticExprArg
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getAnalyticExprArgsAccess().getEntriesAnalyticExprArgParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_11);
                    	    lv_entries_3_0=ruleAnalyticExprArg();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getAnalyticExprArgsRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"entries",
                    	      								lv_entries_3_0,
                    	      								"org.xtext.example.mydsl_sql.SQL.AnalyticExprArg");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt134 >= 1 ) break loop134;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(134, input);
                                throw eee;
                        }
                        cnt134++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleAnalyticExprArgs"


    // $ANTLR start "entryRuleAnalyticExprArg"
    // InternalSQLParser.g:7765:1: entryRuleAnalyticExprArg returns [EObject current=null] : iv_ruleAnalyticExprArg= ruleAnalyticExprArg EOF ;
    public final EObject entryRuleAnalyticExprArg() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAnalyticExprArg = null;


        try {
            // InternalSQLParser.g:7765:56: (iv_ruleAnalyticExprArg= ruleAnalyticExprArg EOF )
            // InternalSQLParser.g:7766:2: iv_ruleAnalyticExprArg= ruleAnalyticExprArg EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnalyticExprArgRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnalyticExprArg=ruleAnalyticExprArg();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnalyticExprArg; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleAnalyticExprArg"


    // $ANTLR start "ruleAnalyticExprArg"
    // InternalSQLParser.g:7772:1: ruleAnalyticExprArg returns [EObject current=null] : ( ( (lv_ce_0_0= ruleOperand ) ) ( (lv_colAlias_1_0= ruleDbObjectName ) )? ) ;
    public final EObject ruleAnalyticExprArg() throws RecognitionException {
        EObject current = null;

        EObject lv_ce_0_0 = null;

        EObject lv_colAlias_1_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:7778:2: ( ( ( (lv_ce_0_0= ruleOperand ) ) ( (lv_colAlias_1_0= ruleDbObjectName ) )? ) )
            // InternalSQLParser.g:7779:2: ( ( (lv_ce_0_0= ruleOperand ) ) ( (lv_colAlias_1_0= ruleDbObjectName ) )? )
            {
            // InternalSQLParser.g:7779:2: ( ( (lv_ce_0_0= ruleOperand ) ) ( (lv_colAlias_1_0= ruleDbObjectName ) )? )
            // InternalSQLParser.g:7780:3: ( (lv_ce_0_0= ruleOperand ) ) ( (lv_colAlias_1_0= ruleDbObjectName ) )?
            {
            // InternalSQLParser.g:7780:3: ( (lv_ce_0_0= ruleOperand ) )
            // InternalSQLParser.g:7781:4: (lv_ce_0_0= ruleOperand )
            {
            // InternalSQLParser.g:7781:4: (lv_ce_0_0= ruleOperand )
            // InternalSQLParser.g:7782:5: lv_ce_0_0= ruleOperand
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getAnalyticExprArgAccess().getCeOperandParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_51);
            lv_ce_0_0=ruleOperand();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getAnalyticExprArgRule());
              					}
              					set(
              						current,
              						"ce",
              						lv_ce_0_0,
              						"org.xtext.example.mydsl_sql.SQL.Operand");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:7799:3: ( (lv_colAlias_1_0= ruleDbObjectName ) )?
            int alt136=2;
            int LA136_0 = input.LA(1);

            if ( ((LA136_0>=RULE_STRING && LA136_0<=RULE_ID)) ) {
                alt136=1;
            }
            switch (alt136) {
                case 1 :
                    // InternalSQLParser.g:7800:4: (lv_colAlias_1_0= ruleDbObjectName )
                    {
                    // InternalSQLParser.g:7800:4: (lv_colAlias_1_0= ruleDbObjectName )
                    // InternalSQLParser.g:7801:5: lv_colAlias_1_0= ruleDbObjectName
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getAnalyticExprArgAccess().getColAliasDbObjectNameParserRuleCall_1_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_colAlias_1_0=ruleDbObjectName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getAnalyticExprArgRule());
                      					}
                      					set(
                      						current,
                      						"colAlias",
                      						lv_colAlias_1_0,
                      						"org.xtext.example.mydsl_sql.SQL.DbObjectName");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleAnalyticExprArg"


    // $ANTLR start "entryRuleOpFunctionArg"
    // InternalSQLParser.g:7822:1: entryRuleOpFunctionArg returns [EObject current=null] : iv_ruleOpFunctionArg= ruleOpFunctionArg EOF ;
    public final EObject entryRuleOpFunctionArg() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOpFunctionArg = null;


        try {
            // InternalSQLParser.g:7822:54: (iv_ruleOpFunctionArg= ruleOpFunctionArg EOF )
            // InternalSQLParser.g:7823:2: iv_ruleOpFunctionArg= ruleOpFunctionArg EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOpFunctionArgRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOpFunctionArg=ruleOpFunctionArg();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOpFunctionArg; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOpFunctionArg"


    // $ANTLR start "ruleOpFunctionArg"
    // InternalSQLParser.g:7829:1: ruleOpFunctionArg returns [EObject current=null] : (this_OpFunctionArgOperand_0= ruleOpFunctionArgOperand ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleOpFunctionArgOperand ) ) )+ )? ) ;
    public final EObject ruleOpFunctionArg() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_OpFunctionArgOperand_0 = null;

        EObject lv_entries_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:7835:2: ( (this_OpFunctionArgOperand_0= ruleOpFunctionArgOperand ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleOpFunctionArgOperand ) ) )+ )? ) )
            // InternalSQLParser.g:7836:2: (this_OpFunctionArgOperand_0= ruleOpFunctionArgOperand ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleOpFunctionArgOperand ) ) )+ )? )
            {
            // InternalSQLParser.g:7836:2: (this_OpFunctionArgOperand_0= ruleOpFunctionArgOperand ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleOpFunctionArgOperand ) ) )+ )? )
            // InternalSQLParser.g:7837:3: this_OpFunctionArgOperand_0= ruleOpFunctionArgOperand ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleOpFunctionArgOperand ) ) )+ )?
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getOpFunctionArgAccess().getOpFunctionArgOperandParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_11);
            this_OpFunctionArgOperand_0=ruleOpFunctionArgOperand();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_OpFunctionArgOperand_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:7848:3: ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleOpFunctionArgOperand ) ) )+ )?
            int alt138=2;
            int LA138_0 = input.LA(1);

            if ( (LA138_0==Comma) ) {
                alt138=1;
            }
            switch (alt138) {
                case 1 :
                    // InternalSQLParser.g:7849:4: () (otherlv_2= Comma ( (lv_entries_3_0= ruleOpFunctionArgOperand ) ) )+
                    {
                    // InternalSQLParser.g:7849:4: ()
                    // InternalSQLParser.g:7850:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getOpFunctionArgAccess().getOpFListEntriesAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalSQLParser.g:7859:4: (otherlv_2= Comma ( (lv_entries_3_0= ruleOpFunctionArgOperand ) ) )+
                    int cnt137=0;
                    loop137:
                    do {
                        int alt137=2;
                        int LA137_0 = input.LA(1);

                        if ( (LA137_0==Comma) ) {
                            alt137=1;
                        }


                        switch (alt137) {
                    	case 1 :
                    	    // InternalSQLParser.g:7860:5: otherlv_2= Comma ( (lv_entries_3_0= ruleOpFunctionArgOperand ) )
                    	    {
                    	    otherlv_2=(Token)match(input,Comma,FOLLOW_104); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_2, grammarAccess.getOpFunctionArgAccess().getCommaKeyword_1_1_0());
                    	      				
                    	    }
                    	    // InternalSQLParser.g:7864:5: ( (lv_entries_3_0= ruleOpFunctionArgOperand ) )
                    	    // InternalSQLParser.g:7865:6: (lv_entries_3_0= ruleOpFunctionArgOperand )
                    	    {
                    	    // InternalSQLParser.g:7865:6: (lv_entries_3_0= ruleOpFunctionArgOperand )
                    	    // InternalSQLParser.g:7866:7: lv_entries_3_0= ruleOpFunctionArgOperand
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getOpFunctionArgAccess().getEntriesOpFunctionArgOperandParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_11);
                    	    lv_entries_3_0=ruleOpFunctionArgOperand();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getOpFunctionArgRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"entries",
                    	      								lv_entries_3_0,
                    	      								"org.xtext.example.mydsl_sql.SQL.OpFunctionArgOperand");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt137 >= 1 ) break loop137;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(137, input);
                                throw eee;
                        }
                        cnt137++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOpFunctionArg"


    // $ANTLR start "entryRuleOpFunctionArgOperand"
    // InternalSQLParser.g:7889:1: entryRuleOpFunctionArgOperand returns [EObject current=null] : iv_ruleOpFunctionArgOperand= ruleOpFunctionArgOperand EOF ;
    public final EObject entryRuleOpFunctionArgOperand() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOpFunctionArgOperand = null;


        try {
            // InternalSQLParser.g:7889:61: (iv_ruleOpFunctionArgOperand= ruleOpFunctionArgOperand EOF )
            // InternalSQLParser.g:7890:2: iv_ruleOpFunctionArgOperand= ruleOpFunctionArgOperand EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOpFunctionArgOperandRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOpFunctionArgOperand=ruleOpFunctionArgOperand();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOpFunctionArgOperand; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOpFunctionArgOperand"


    // $ANTLR start "ruleOpFunctionArgOperand"
    // InternalSQLParser.g:7896:1: ruleOpFunctionArgOperand returns [EObject current=null] : ( ( (lv_op_0_1= ruleOpFunctionArgAgregate | lv_op_0_2= ruleOperand ) ) ) ;
    public final EObject ruleOpFunctionArgOperand() throws RecognitionException {
        EObject current = null;

        EObject lv_op_0_1 = null;

        EObject lv_op_0_2 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:7902:2: ( ( ( (lv_op_0_1= ruleOpFunctionArgAgregate | lv_op_0_2= ruleOperand ) ) ) )
            // InternalSQLParser.g:7903:2: ( ( (lv_op_0_1= ruleOpFunctionArgAgregate | lv_op_0_2= ruleOperand ) ) )
            {
            // InternalSQLParser.g:7903:2: ( ( (lv_op_0_1= ruleOpFunctionArgAgregate | lv_op_0_2= ruleOperand ) ) )
            // InternalSQLParser.g:7904:3: ( (lv_op_0_1= ruleOpFunctionArgAgregate | lv_op_0_2= ruleOperand ) )
            {
            // InternalSQLParser.g:7904:3: ( (lv_op_0_1= ruleOpFunctionArgAgregate | lv_op_0_2= ruleOperand ) )
            // InternalSQLParser.g:7905:4: (lv_op_0_1= ruleOpFunctionArgAgregate | lv_op_0_2= ruleOperand )
            {
            // InternalSQLParser.g:7905:4: (lv_op_0_1= ruleOpFunctionArgAgregate | lv_op_0_2= ruleOperand )
            int alt139=2;
            int LA139_0 = input.LA(1);

            if ( (LA139_0==DISTINCT||LA139_0==ALL) ) {
                alt139=1;
            }
            else if ( (LA139_0==EXTRACT||LA139_0==CAST||LA139_0==CASE||LA139_0==LeftParenthesis||(LA139_0>=RULE_JRPARAM && LA139_0<=RULE_JRNPARAM)||(LA139_0>=RULE_UNSIGNED && LA139_0<=RULE_SIGNED_DOUBLE)||(LA139_0>=RULE_STRING_ && LA139_0<=RULE_ID)) ) {
                alt139=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 139, 0, input);

                throw nvae;
            }
            switch (alt139) {
                case 1 :
                    // InternalSQLParser.g:7906:5: lv_op_0_1= ruleOpFunctionArgAgregate
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getOpFunctionArgOperandAccess().getOpOpFunctionArgAgregateParserRuleCall_0_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_op_0_1=ruleOpFunctionArgAgregate();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getOpFunctionArgOperandRule());
                      					}
                      					set(
                      						current,
                      						"op",
                      						lv_op_0_1,
                      						"org.xtext.example.mydsl_sql.SQL.OpFunctionArgAgregate");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:7922:5: lv_op_0_2= ruleOperand
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getOpFunctionArgOperandAccess().getOpOperandParserRuleCall_0_1());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_op_0_2=ruleOperand();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getOpFunctionArgOperandRule());
                      					}
                      					set(
                      						current,
                      						"op",
                      						lv_op_0_2,
                      						"org.xtext.example.mydsl_sql.SQL.Operand");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }
                    break;

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOpFunctionArgOperand"


    // $ANTLR start "entryRuleOpFunctionCast"
    // InternalSQLParser.g:7943:1: entryRuleOpFunctionCast returns [EObject current=null] : iv_ruleOpFunctionCast= ruleOpFunctionCast EOF ;
    public final EObject entryRuleOpFunctionCast() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOpFunctionCast = null;


        try {
            // InternalSQLParser.g:7943:55: (iv_ruleOpFunctionCast= ruleOpFunctionCast EOF )
            // InternalSQLParser.g:7944:2: iv_ruleOpFunctionCast= ruleOpFunctionCast EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOpFunctionCastRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOpFunctionCast=ruleOpFunctionCast();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOpFunctionCast; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOpFunctionCast"


    // $ANTLR start "ruleOpFunctionCast"
    // InternalSQLParser.g:7950:1: ruleOpFunctionCast returns [EObject current=null] : (otherlv_0= CAST ( (lv_op_1_0= ruleOperandGroup ) ) otherlv_2= AS ( (lv_type_3_0= RULE_ID ) ) (otherlv_4= LeftParenthesis ( (lv_p_5_0= RULE_UNSIGNED ) ) (otherlv_6= Comma ( (lv_p2_7_0= RULE_UNSIGNED ) ) )? otherlv_8= RightParenthesis )? otherlv_9= RightParenthesis ) ;
    public final EObject ruleOpFunctionCast() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        Token lv_type_3_0=null;
        Token otherlv_4=null;
        Token lv_p_5_0=null;
        Token otherlv_6=null;
        Token lv_p2_7_0=null;
        Token otherlv_8=null;
        Token otherlv_9=null;
        EObject lv_op_1_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:7956:2: ( (otherlv_0= CAST ( (lv_op_1_0= ruleOperandGroup ) ) otherlv_2= AS ( (lv_type_3_0= RULE_ID ) ) (otherlv_4= LeftParenthesis ( (lv_p_5_0= RULE_UNSIGNED ) ) (otherlv_6= Comma ( (lv_p2_7_0= RULE_UNSIGNED ) ) )? otherlv_8= RightParenthesis )? otherlv_9= RightParenthesis ) )
            // InternalSQLParser.g:7957:2: (otherlv_0= CAST ( (lv_op_1_0= ruleOperandGroup ) ) otherlv_2= AS ( (lv_type_3_0= RULE_ID ) ) (otherlv_4= LeftParenthesis ( (lv_p_5_0= RULE_UNSIGNED ) ) (otherlv_6= Comma ( (lv_p2_7_0= RULE_UNSIGNED ) ) )? otherlv_8= RightParenthesis )? otherlv_9= RightParenthesis )
            {
            // InternalSQLParser.g:7957:2: (otherlv_0= CAST ( (lv_op_1_0= ruleOperandGroup ) ) otherlv_2= AS ( (lv_type_3_0= RULE_ID ) ) (otherlv_4= LeftParenthesis ( (lv_p_5_0= RULE_UNSIGNED ) ) (otherlv_6= Comma ( (lv_p2_7_0= RULE_UNSIGNED ) ) )? otherlv_8= RightParenthesis )? otherlv_9= RightParenthesis )
            // InternalSQLParser.g:7958:3: otherlv_0= CAST ( (lv_op_1_0= ruleOperandGroup ) ) otherlv_2= AS ( (lv_type_3_0= RULE_ID ) ) (otherlv_4= LeftParenthesis ( (lv_p_5_0= RULE_UNSIGNED ) ) (otherlv_6= Comma ( (lv_p2_7_0= RULE_UNSIGNED ) ) )? otherlv_8= RightParenthesis )? otherlv_9= RightParenthesis
            {
            otherlv_0=(Token)match(input,CAST,FOLLOW_74); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getOpFunctionCastAccess().getCASTKeyword_0());
              		
            }
            // InternalSQLParser.g:7962:3: ( (lv_op_1_0= ruleOperandGroup ) )
            // InternalSQLParser.g:7963:4: (lv_op_1_0= ruleOperandGroup )
            {
            // InternalSQLParser.g:7963:4: (lv_op_1_0= ruleOperandGroup )
            // InternalSQLParser.g:7964:5: lv_op_1_0= ruleOperandGroup
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getOpFunctionCastAccess().getOpOperandGroupParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_25);
            lv_op_1_0=ruleOperandGroup();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getOpFunctionCastRule());
              					}
              					set(
              						current,
              						"op",
              						lv_op_1_0,
              						"org.xtext.example.mydsl_sql.SQL.OperandGroup");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_2=(Token)match(input,AS,FOLLOW_14); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getOpFunctionCastAccess().getASKeyword_2());
              		
            }
            // InternalSQLParser.g:7985:3: ( (lv_type_3_0= RULE_ID ) )
            // InternalSQLParser.g:7986:4: (lv_type_3_0= RULE_ID )
            {
            // InternalSQLParser.g:7986:4: (lv_type_3_0= RULE_ID )
            // InternalSQLParser.g:7987:5: lv_type_3_0= RULE_ID
            {
            lv_type_3_0=(Token)match(input,RULE_ID,FOLLOW_105); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_type_3_0, grammarAccess.getOpFunctionCastAccess().getTypeIDTerminalRuleCall_3_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getOpFunctionCastRule());
              					}
              					setWithLastConsumed(
              						current,
              						"type",
              						lv_type_3_0,
              						"org.xtext.example.mydsl_sql.SQL.ID");
              				
            }

            }


            }

            // InternalSQLParser.g:8003:3: (otherlv_4= LeftParenthesis ( (lv_p_5_0= RULE_UNSIGNED ) ) (otherlv_6= Comma ( (lv_p2_7_0= RULE_UNSIGNED ) ) )? otherlv_8= RightParenthesis )?
            int alt141=2;
            int LA141_0 = input.LA(1);

            if ( (LA141_0==LeftParenthesis) ) {
                alt141=1;
            }
            switch (alt141) {
                case 1 :
                    // InternalSQLParser.g:8004:4: otherlv_4= LeftParenthesis ( (lv_p_5_0= RULE_UNSIGNED ) ) (otherlv_6= Comma ( (lv_p2_7_0= RULE_UNSIGNED ) ) )? otherlv_8= RightParenthesis
                    {
                    otherlv_4=(Token)match(input,LeftParenthesis,FOLLOW_28); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_4, grammarAccess.getOpFunctionCastAccess().getLeftParenthesisKeyword_4_0());
                      			
                    }
                    // InternalSQLParser.g:8008:4: ( (lv_p_5_0= RULE_UNSIGNED ) )
                    // InternalSQLParser.g:8009:5: (lv_p_5_0= RULE_UNSIGNED )
                    {
                    // InternalSQLParser.g:8009:5: (lv_p_5_0= RULE_UNSIGNED )
                    // InternalSQLParser.g:8010:6: lv_p_5_0= RULE_UNSIGNED
                    {
                    lv_p_5_0=(Token)match(input,RULE_UNSIGNED,FOLLOW_106); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_p_5_0, grammarAccess.getOpFunctionCastAccess().getPUNSIGNEDTerminalRuleCall_4_1_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getOpFunctionCastRule());
                      						}
                      						setWithLastConsumed(
                      							current,
                      							"p",
                      							lv_p_5_0,
                      							"org.xtext.example.mydsl_sql.SQL.UNSIGNED");
                      					
                    }

                    }


                    }

                    // InternalSQLParser.g:8026:4: (otherlv_6= Comma ( (lv_p2_7_0= RULE_UNSIGNED ) ) )?
                    int alt140=2;
                    int LA140_0 = input.LA(1);

                    if ( (LA140_0==Comma) ) {
                        alt140=1;
                    }
                    switch (alt140) {
                        case 1 :
                            // InternalSQLParser.g:8027:5: otherlv_6= Comma ( (lv_p2_7_0= RULE_UNSIGNED ) )
                            {
                            otherlv_6=(Token)match(input,Comma,FOLLOW_28); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(otherlv_6, grammarAccess.getOpFunctionCastAccess().getCommaKeyword_4_2_0());
                              				
                            }
                            // InternalSQLParser.g:8031:5: ( (lv_p2_7_0= RULE_UNSIGNED ) )
                            // InternalSQLParser.g:8032:6: (lv_p2_7_0= RULE_UNSIGNED )
                            {
                            // InternalSQLParser.g:8032:6: (lv_p2_7_0= RULE_UNSIGNED )
                            // InternalSQLParser.g:8033:7: lv_p2_7_0= RULE_UNSIGNED
                            {
                            lv_p2_7_0=(Token)match(input,RULE_UNSIGNED,FOLLOW_10); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(lv_p2_7_0, grammarAccess.getOpFunctionCastAccess().getP2UNSIGNEDTerminalRuleCall_4_2_1_0());
                              						
                            }
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getOpFunctionCastRule());
                              							}
                              							setWithLastConsumed(
                              								current,
                              								"p2",
                              								lv_p2_7_0,
                              								"org.xtext.example.mydsl_sql.SQL.UNSIGNED");
                              						
                            }

                            }


                            }


                            }
                            break;

                    }

                    otherlv_8=(Token)match(input,RightParenthesis,FOLLOW_10); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_8, grammarAccess.getOpFunctionCastAccess().getRightParenthesisKeyword_4_3());
                      			
                    }

                    }
                    break;

            }

            otherlv_9=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_9, grammarAccess.getOpFunctionCastAccess().getRightParenthesisKeyword_5());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOpFunctionCast"


    // $ANTLR start "entryRuleOpFunctionArgAgregate"
    // InternalSQLParser.g:8063:1: entryRuleOpFunctionArgAgregate returns [EObject current=null] : iv_ruleOpFunctionArgAgregate= ruleOpFunctionArgAgregate EOF ;
    public final EObject entryRuleOpFunctionArgAgregate() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOpFunctionArgAgregate = null;


        try {
            // InternalSQLParser.g:8063:62: (iv_ruleOpFunctionArgAgregate= ruleOpFunctionArgAgregate EOF )
            // InternalSQLParser.g:8064:2: iv_ruleOpFunctionArgAgregate= ruleOpFunctionArgAgregate EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOpFunctionArgAgregateRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOpFunctionArgAgregate=ruleOpFunctionArgAgregate();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOpFunctionArgAgregate; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOpFunctionArgAgregate"


    // $ANTLR start "ruleOpFunctionArgAgregate"
    // InternalSQLParser.g:8070:1: ruleOpFunctionArgAgregate returns [EObject current=null] : ( (otherlv_0= ALL | otherlv_1= DISTINCT ) this_Operand_2= ruleOperand ) ;
    public final EObject ruleOpFunctionArgAgregate() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        EObject this_Operand_2 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:8076:2: ( ( (otherlv_0= ALL | otherlv_1= DISTINCT ) this_Operand_2= ruleOperand ) )
            // InternalSQLParser.g:8077:2: ( (otherlv_0= ALL | otherlv_1= DISTINCT ) this_Operand_2= ruleOperand )
            {
            // InternalSQLParser.g:8077:2: ( (otherlv_0= ALL | otherlv_1= DISTINCT ) this_Operand_2= ruleOperand )
            // InternalSQLParser.g:8078:3: (otherlv_0= ALL | otherlv_1= DISTINCT ) this_Operand_2= ruleOperand
            {
            // InternalSQLParser.g:8078:3: (otherlv_0= ALL | otherlv_1= DISTINCT )
            int alt142=2;
            int LA142_0 = input.LA(1);

            if ( (LA142_0==ALL) ) {
                alt142=1;
            }
            else if ( (LA142_0==DISTINCT) ) {
                alt142=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 142, 0, input);

                throw nvae;
            }
            switch (alt142) {
                case 1 :
                    // InternalSQLParser.g:8079:4: otherlv_0= ALL
                    {
                    otherlv_0=(Token)match(input,ALL,FOLLOW_74); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_0, grammarAccess.getOpFunctionArgAgregateAccess().getALLKeyword_0_0());
                      			
                    }

                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:8084:4: otherlv_1= DISTINCT
                    {
                    otherlv_1=(Token)match(input,DISTINCT,FOLLOW_74); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getOpFunctionArgAgregateAccess().getDISTINCTKeyword_0_1());
                      			
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getOpFunctionArgAgregateAccess().getOperandParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_2);
            this_Operand_2=ruleOperand();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_Operand_2;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOpFunctionArgAgregate"


    // $ANTLR start "entryRuleXOperandFragment"
    // InternalSQLParser.g:8104:1: entryRuleXOperandFragment returns [EObject current=null] : iv_ruleXOperandFragment= ruleXOperandFragment EOF ;
    public final EObject entryRuleXOperandFragment() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleXOperandFragment = null;


        try {
            // InternalSQLParser.g:8104:57: (iv_ruleXOperandFragment= ruleXOperandFragment EOF )
            // InternalSQLParser.g:8105:2: iv_ruleXOperandFragment= ruleXOperandFragment EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getXOperandFragmentRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleXOperandFragment=ruleXOperandFragment();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleXOperandFragment; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleXOperandFragment"


    // $ANTLR start "ruleXOperandFragment"
    // InternalSQLParser.g:8111:1: ruleXOperandFragment returns [EObject current=null] : ( ( (lv_param_0_0= ruleParameterOperand ) ) | ( (lv_eparam_1_0= ruleExclamationParameterOperand ) ) | ( (lv_scalar_2_0= ruleScalarNumberOperand ) ) ) ;
    public final EObject ruleXOperandFragment() throws RecognitionException {
        EObject current = null;

        EObject lv_param_0_0 = null;

        EObject lv_eparam_1_0 = null;

        EObject lv_scalar_2_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:8117:2: ( ( ( (lv_param_0_0= ruleParameterOperand ) ) | ( (lv_eparam_1_0= ruleExclamationParameterOperand ) ) | ( (lv_scalar_2_0= ruleScalarNumberOperand ) ) ) )
            // InternalSQLParser.g:8118:2: ( ( (lv_param_0_0= ruleParameterOperand ) ) | ( (lv_eparam_1_0= ruleExclamationParameterOperand ) ) | ( (lv_scalar_2_0= ruleScalarNumberOperand ) ) )
            {
            // InternalSQLParser.g:8118:2: ( ( (lv_param_0_0= ruleParameterOperand ) ) | ( (lv_eparam_1_0= ruleExclamationParameterOperand ) ) | ( (lv_scalar_2_0= ruleScalarNumberOperand ) ) )
            int alt143=3;
            switch ( input.LA(1) ) {
            case RULE_JRPARAM:
                {
                alt143=1;
                }
                break;
            case RULE_JRNPARAM:
                {
                alt143=2;
                }
                break;
            case RULE_UNSIGNED:
            case RULE_INT:
            case RULE_SIGNED_DOUBLE:
            case RULE_STRING_:
                {
                alt143=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 143, 0, input);

                throw nvae;
            }

            switch (alt143) {
                case 1 :
                    // InternalSQLParser.g:8119:3: ( (lv_param_0_0= ruleParameterOperand ) )
                    {
                    // InternalSQLParser.g:8119:3: ( (lv_param_0_0= ruleParameterOperand ) )
                    // InternalSQLParser.g:8120:4: (lv_param_0_0= ruleParameterOperand )
                    {
                    // InternalSQLParser.g:8120:4: (lv_param_0_0= ruleParameterOperand )
                    // InternalSQLParser.g:8121:5: lv_param_0_0= ruleParameterOperand
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getXOperandFragmentAccess().getParamParameterOperandParserRuleCall_0_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_param_0_0=ruleParameterOperand();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getXOperandFragmentRule());
                      					}
                      					set(
                      						current,
                      						"param",
                      						lv_param_0_0,
                      						"org.xtext.example.mydsl_sql.SQL.ParameterOperand");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:8139:3: ( (lv_eparam_1_0= ruleExclamationParameterOperand ) )
                    {
                    // InternalSQLParser.g:8139:3: ( (lv_eparam_1_0= ruleExclamationParameterOperand ) )
                    // InternalSQLParser.g:8140:4: (lv_eparam_1_0= ruleExclamationParameterOperand )
                    {
                    // InternalSQLParser.g:8140:4: (lv_eparam_1_0= ruleExclamationParameterOperand )
                    // InternalSQLParser.g:8141:5: lv_eparam_1_0= ruleExclamationParameterOperand
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getXOperandFragmentAccess().getEparamExclamationParameterOperandParserRuleCall_1_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_eparam_1_0=ruleExclamationParameterOperand();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getXOperandFragmentRule());
                      					}
                      					set(
                      						current,
                      						"eparam",
                      						lv_eparam_1_0,
                      						"org.xtext.example.mydsl_sql.SQL.ExclamationParameterOperand");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:8159:3: ( (lv_scalar_2_0= ruleScalarNumberOperand ) )
                    {
                    // InternalSQLParser.g:8159:3: ( (lv_scalar_2_0= ruleScalarNumberOperand ) )
                    // InternalSQLParser.g:8160:4: (lv_scalar_2_0= ruleScalarNumberOperand )
                    {
                    // InternalSQLParser.g:8160:4: (lv_scalar_2_0= ruleScalarNumberOperand )
                    // InternalSQLParser.g:8161:5: lv_scalar_2_0= ruleScalarNumberOperand
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getXOperandFragmentAccess().getScalarScalarNumberOperandParserRuleCall_2_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_scalar_2_0=ruleScalarNumberOperand();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getXOperandFragmentRule());
                      					}
                      					set(
                      						current,
                      						"scalar",
                      						lv_scalar_2_0,
                      						"org.xtext.example.mydsl_sql.SQL.ScalarNumberOperand");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleXOperandFragment"


    // $ANTLR start "entryRuleParameterOperand"
    // InternalSQLParser.g:8182:1: entryRuleParameterOperand returns [EObject current=null] : iv_ruleParameterOperand= ruleParameterOperand EOF ;
    public final EObject entryRuleParameterOperand() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleParameterOperand = null;


        try {
            // InternalSQLParser.g:8182:57: (iv_ruleParameterOperand= ruleParameterOperand EOF )
            // InternalSQLParser.g:8183:2: iv_ruleParameterOperand= ruleParameterOperand EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getParameterOperandRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleParameterOperand=ruleParameterOperand();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleParameterOperand; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleParameterOperand"


    // $ANTLR start "ruleParameterOperand"
    // InternalSQLParser.g:8189:1: ruleParameterOperand returns [EObject current=null] : ( (lv_prm_0_0= RULE_JRPARAM ) ) ;
    public final EObject ruleParameterOperand() throws RecognitionException {
        EObject current = null;

        Token lv_prm_0_0=null;


        	enterRule();

        try {
            // InternalSQLParser.g:8195:2: ( ( (lv_prm_0_0= RULE_JRPARAM ) ) )
            // InternalSQLParser.g:8196:2: ( (lv_prm_0_0= RULE_JRPARAM ) )
            {
            // InternalSQLParser.g:8196:2: ( (lv_prm_0_0= RULE_JRPARAM ) )
            // InternalSQLParser.g:8197:3: (lv_prm_0_0= RULE_JRPARAM )
            {
            // InternalSQLParser.g:8197:3: (lv_prm_0_0= RULE_JRPARAM )
            // InternalSQLParser.g:8198:4: lv_prm_0_0= RULE_JRPARAM
            {
            lv_prm_0_0=(Token)match(input,RULE_JRPARAM,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(lv_prm_0_0, grammarAccess.getParameterOperandAccess().getPrmJRPARAMTerminalRuleCall_0());
              			
            }
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getParameterOperandRule());
              				}
              				setWithLastConsumed(
              					current,
              					"prm",
              					lv_prm_0_0,
              					"org.xtext.example.mydsl_sql.SQL.JRPARAM");
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleParameterOperand"


    // $ANTLR start "entryRuleExclamationParameterOperand"
    // InternalSQLParser.g:8217:1: entryRuleExclamationParameterOperand returns [EObject current=null] : iv_ruleExclamationParameterOperand= ruleExclamationParameterOperand EOF ;
    public final EObject entryRuleExclamationParameterOperand() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExclamationParameterOperand = null;


        try {
            // InternalSQLParser.g:8217:68: (iv_ruleExclamationParameterOperand= ruleExclamationParameterOperand EOF )
            // InternalSQLParser.g:8218:2: iv_ruleExclamationParameterOperand= ruleExclamationParameterOperand EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExclamationParameterOperandRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExclamationParameterOperand=ruleExclamationParameterOperand();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExclamationParameterOperand; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleExclamationParameterOperand"


    // $ANTLR start "ruleExclamationParameterOperand"
    // InternalSQLParser.g:8224:1: ruleExclamationParameterOperand returns [EObject current=null] : ( (lv_prm_0_0= RULE_JRNPARAM ) ) ;
    public final EObject ruleExclamationParameterOperand() throws RecognitionException {
        EObject current = null;

        Token lv_prm_0_0=null;


        	enterRule();

        try {
            // InternalSQLParser.g:8230:2: ( ( (lv_prm_0_0= RULE_JRNPARAM ) ) )
            // InternalSQLParser.g:8231:2: ( (lv_prm_0_0= RULE_JRNPARAM ) )
            {
            // InternalSQLParser.g:8231:2: ( (lv_prm_0_0= RULE_JRNPARAM ) )
            // InternalSQLParser.g:8232:3: (lv_prm_0_0= RULE_JRNPARAM )
            {
            // InternalSQLParser.g:8232:3: (lv_prm_0_0= RULE_JRNPARAM )
            // InternalSQLParser.g:8233:4: lv_prm_0_0= RULE_JRNPARAM
            {
            lv_prm_0_0=(Token)match(input,RULE_JRNPARAM,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(lv_prm_0_0, grammarAccess.getExclamationParameterOperandAccess().getPrmJRNPARAMTerminalRuleCall_0());
              			
            }
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getExclamationParameterOperandRule());
              				}
              				setWithLastConsumed(
              					current,
              					"prm",
              					lv_prm_0_0,
              					"org.xtext.example.mydsl_sql.SQL.JRNPARAM");
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleExclamationParameterOperand"


    // $ANTLR start "entryRuleColumnOperand"
    // InternalSQLParser.g:8252:1: entryRuleColumnOperand returns [EObject current=null] : iv_ruleColumnOperand= ruleColumnOperand EOF ;
    public final EObject entryRuleColumnOperand() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleColumnOperand = null;


        try {
            // InternalSQLParser.g:8252:54: (iv_ruleColumnOperand= ruleColumnOperand EOF )
            // InternalSQLParser.g:8253:2: iv_ruleColumnOperand= ruleColumnOperand EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getColumnOperandRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleColumnOperand=ruleColumnOperand();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleColumnOperand; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleColumnOperand"


    // $ANTLR start "ruleColumnOperand"
    // InternalSQLParser.g:8259:1: ruleColumnOperand returns [EObject current=null] : ( ( (lv_cfull_0_0= ruleColumnFull ) ) ( (lv_ora_1_0= LeftParenthesisPlusSignRightParenthesis ) )? ) ;
    public final EObject ruleColumnOperand() throws RecognitionException {
        EObject current = null;

        Token lv_ora_1_0=null;
        EObject lv_cfull_0_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:8265:2: ( ( ( (lv_cfull_0_0= ruleColumnFull ) ) ( (lv_ora_1_0= LeftParenthesisPlusSignRightParenthesis ) )? ) )
            // InternalSQLParser.g:8266:2: ( ( (lv_cfull_0_0= ruleColumnFull ) ) ( (lv_ora_1_0= LeftParenthesisPlusSignRightParenthesis ) )? )
            {
            // InternalSQLParser.g:8266:2: ( ( (lv_cfull_0_0= ruleColumnFull ) ) ( (lv_ora_1_0= LeftParenthesisPlusSignRightParenthesis ) )? )
            // InternalSQLParser.g:8267:3: ( (lv_cfull_0_0= ruleColumnFull ) ) ( (lv_ora_1_0= LeftParenthesisPlusSignRightParenthesis ) )?
            {
            // InternalSQLParser.g:8267:3: ( (lv_cfull_0_0= ruleColumnFull ) )
            // InternalSQLParser.g:8268:4: (lv_cfull_0_0= ruleColumnFull )
            {
            // InternalSQLParser.g:8268:4: (lv_cfull_0_0= ruleColumnFull )
            // InternalSQLParser.g:8269:5: lv_cfull_0_0= ruleColumnFull
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getColumnOperandAccess().getCfullColumnFullParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_107);
            lv_cfull_0_0=ruleColumnFull();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getColumnOperandRule());
              					}
              					set(
              						current,
              						"cfull",
              						lv_cfull_0_0,
              						"org.xtext.example.mydsl_sql.SQL.ColumnFull");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:8286:3: ( (lv_ora_1_0= LeftParenthesisPlusSignRightParenthesis ) )?
            int alt144=2;
            int LA144_0 = input.LA(1);

            if ( (LA144_0==LeftParenthesisPlusSignRightParenthesis) ) {
                alt144=1;
            }
            switch (alt144) {
                case 1 :
                    // InternalSQLParser.g:8287:4: (lv_ora_1_0= LeftParenthesisPlusSignRightParenthesis )
                    {
                    // InternalSQLParser.g:8287:4: (lv_ora_1_0= LeftParenthesisPlusSignRightParenthesis )
                    // InternalSQLParser.g:8288:5: lv_ora_1_0= LeftParenthesisPlusSignRightParenthesis
                    {
                    lv_ora_1_0=(Token)match(input,LeftParenthesisPlusSignRightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_ora_1_0, grammarAccess.getColumnOperandAccess().getOraLeftParenthesisPlusSignRightParenthesisKeyword_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getColumnOperandRule());
                      					}
                      					setWithLastConsumed(current, "ora", lv_ora_1_0, "(+)");
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleColumnOperand"


    // $ANTLR start "entryRuleSubQueryOperand"
    // InternalSQLParser.g:8304:1: entryRuleSubQueryOperand returns [EObject current=null] : iv_ruleSubQueryOperand= ruleSubQueryOperand EOF ;
    public final EObject entryRuleSubQueryOperand() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSubQueryOperand = null;


        try {
            // InternalSQLParser.g:8304:56: (iv_ruleSubQueryOperand= ruleSubQueryOperand EOF )
            // InternalSQLParser.g:8305:2: iv_ruleSubQueryOperand= ruleSubQueryOperand EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSubQueryOperandRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSubQueryOperand=ruleSubQueryOperand();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSubQueryOperand; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSubQueryOperand"


    // $ANTLR start "ruleSubQueryOperand"
    // InternalSQLParser.g:8311:1: ruleSubQueryOperand returns [EObject current=null] : ( () otherlv_1= LeftParenthesis ( (lv_sel_2_0= ruleSelectQuery ) ) otherlv_3= RightParenthesis ) ;
    public final EObject ruleSubQueryOperand() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_sel_2_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:8317:2: ( ( () otherlv_1= LeftParenthesis ( (lv_sel_2_0= ruleSelectQuery ) ) otherlv_3= RightParenthesis ) )
            // InternalSQLParser.g:8318:2: ( () otherlv_1= LeftParenthesis ( (lv_sel_2_0= ruleSelectQuery ) ) otherlv_3= RightParenthesis )
            {
            // InternalSQLParser.g:8318:2: ( () otherlv_1= LeftParenthesis ( (lv_sel_2_0= ruleSelectQuery ) ) otherlv_3= RightParenthesis )
            // InternalSQLParser.g:8319:3: () otherlv_1= LeftParenthesis ( (lv_sel_2_0= ruleSelectQuery ) ) otherlv_3= RightParenthesis
            {
            // InternalSQLParser.g:8319:3: ()
            // InternalSQLParser.g:8320:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getSubQueryOperandAccess().getSubQueryOperandAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_3); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getSubQueryOperandAccess().getLeftParenthesisKeyword_1());
              		
            }
            // InternalSQLParser.g:8333:3: ( (lv_sel_2_0= ruleSelectQuery ) )
            // InternalSQLParser.g:8334:4: (lv_sel_2_0= ruleSelectQuery )
            {
            // InternalSQLParser.g:8334:4: (lv_sel_2_0= ruleSelectQuery )
            // InternalSQLParser.g:8335:5: lv_sel_2_0= ruleSelectQuery
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getSubQueryOperandAccess().getSelSelectQueryParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_10);
            lv_sel_2_0=ruleSelectQuery();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getSubQueryOperandRule());
              					}
              					set(
              						current,
              						"sel",
              						lv_sel_2_0,
              						"org.xtext.example.mydsl_sql.SQL.SelectQuery");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getSubQueryOperandAccess().getRightParenthesisKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSubQueryOperand"


    // $ANTLR start "entryRuleScalarOperand"
    // InternalSQLParser.g:8360:1: entryRuleScalarOperand returns [EObject current=null] : iv_ruleScalarOperand= ruleScalarOperand EOF ;
    public final EObject entryRuleScalarOperand() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleScalarOperand = null;


        try {
            // InternalSQLParser.g:8360:54: (iv_ruleScalarOperand= ruleScalarOperand EOF )
            // InternalSQLParser.g:8361:2: iv_ruleScalarOperand= ruleScalarOperand EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getScalarOperandRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleScalarOperand=ruleScalarOperand();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleScalarOperand; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleScalarOperand"


    // $ANTLR start "ruleScalarOperand"
    // InternalSQLParser.g:8367:1: ruleScalarOperand returns [EObject current=null] : ( ( (lv_sostr_0_0= ruleStringOperand ) ) | ( (lv_sodbl_1_0= RULE_SIGNED_DOUBLE ) ) | ( (lv_sodate_2_0= RULE_DATE ) ) | ( (lv_sotime_3_0= RULE_TIME ) ) | ( (lv_sodt_4_0= RULE_TIMESTAMP ) ) ) ;
    public final EObject ruleScalarOperand() throws RecognitionException {
        EObject current = null;

        Token lv_sodbl_1_0=null;
        Token lv_sodate_2_0=null;
        Token lv_sotime_3_0=null;
        Token lv_sodt_4_0=null;
        AntlrDatatypeRuleToken lv_sostr_0_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:8373:2: ( ( ( (lv_sostr_0_0= ruleStringOperand ) ) | ( (lv_sodbl_1_0= RULE_SIGNED_DOUBLE ) ) | ( (lv_sodate_2_0= RULE_DATE ) ) | ( (lv_sotime_3_0= RULE_TIME ) ) | ( (lv_sodt_4_0= RULE_TIMESTAMP ) ) ) )
            // InternalSQLParser.g:8374:2: ( ( (lv_sostr_0_0= ruleStringOperand ) ) | ( (lv_sodbl_1_0= RULE_SIGNED_DOUBLE ) ) | ( (lv_sodate_2_0= RULE_DATE ) ) | ( (lv_sotime_3_0= RULE_TIME ) ) | ( (lv_sodt_4_0= RULE_TIMESTAMP ) ) )
            {
            // InternalSQLParser.g:8374:2: ( ( (lv_sostr_0_0= ruleStringOperand ) ) | ( (lv_sodbl_1_0= RULE_SIGNED_DOUBLE ) ) | ( (lv_sodate_2_0= RULE_DATE ) ) | ( (lv_sotime_3_0= RULE_TIME ) ) | ( (lv_sodt_4_0= RULE_TIMESTAMP ) ) )
            int alt145=5;
            switch ( input.LA(1) ) {
            case RULE_STRING_:
                {
                alt145=1;
                }
                break;
            case RULE_SIGNED_DOUBLE:
                {
                alt145=2;
                }
                break;
            case RULE_DATE:
                {
                alt145=3;
                }
                break;
            case RULE_TIME:
                {
                alt145=4;
                }
                break;
            case RULE_TIMESTAMP:
                {
                alt145=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 145, 0, input);

                throw nvae;
            }

            switch (alt145) {
                case 1 :
                    // InternalSQLParser.g:8375:3: ( (lv_sostr_0_0= ruleStringOperand ) )
                    {
                    // InternalSQLParser.g:8375:3: ( (lv_sostr_0_0= ruleStringOperand ) )
                    // InternalSQLParser.g:8376:4: (lv_sostr_0_0= ruleStringOperand )
                    {
                    // InternalSQLParser.g:8376:4: (lv_sostr_0_0= ruleStringOperand )
                    // InternalSQLParser.g:8377:5: lv_sostr_0_0= ruleStringOperand
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getScalarOperandAccess().getSostrStringOperandParserRuleCall_0_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_sostr_0_0=ruleStringOperand();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getScalarOperandRule());
                      					}
                      					set(
                      						current,
                      						"sostr",
                      						lv_sostr_0_0,
                      						"org.xtext.example.mydsl_sql.SQL.StringOperand");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:8395:3: ( (lv_sodbl_1_0= RULE_SIGNED_DOUBLE ) )
                    {
                    // InternalSQLParser.g:8395:3: ( (lv_sodbl_1_0= RULE_SIGNED_DOUBLE ) )
                    // InternalSQLParser.g:8396:4: (lv_sodbl_1_0= RULE_SIGNED_DOUBLE )
                    {
                    // InternalSQLParser.g:8396:4: (lv_sodbl_1_0= RULE_SIGNED_DOUBLE )
                    // InternalSQLParser.g:8397:5: lv_sodbl_1_0= RULE_SIGNED_DOUBLE
                    {
                    lv_sodbl_1_0=(Token)match(input,RULE_SIGNED_DOUBLE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_sodbl_1_0, grammarAccess.getScalarOperandAccess().getSodblSIGNED_DOUBLETerminalRuleCall_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getScalarOperandRule());
                      					}
                      					setWithLastConsumed(
                      						current,
                      						"sodbl",
                      						lv_sodbl_1_0,
                      						"org.xtext.example.mydsl_sql.SQL.SIGNED_DOUBLE");
                      				
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:8414:3: ( (lv_sodate_2_0= RULE_DATE ) )
                    {
                    // InternalSQLParser.g:8414:3: ( (lv_sodate_2_0= RULE_DATE ) )
                    // InternalSQLParser.g:8415:4: (lv_sodate_2_0= RULE_DATE )
                    {
                    // InternalSQLParser.g:8415:4: (lv_sodate_2_0= RULE_DATE )
                    // InternalSQLParser.g:8416:5: lv_sodate_2_0= RULE_DATE
                    {
                    lv_sodate_2_0=(Token)match(input,RULE_DATE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_sodate_2_0, grammarAccess.getScalarOperandAccess().getSodateDATETerminalRuleCall_2_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getScalarOperandRule());
                      					}
                      					setWithLastConsumed(
                      						current,
                      						"sodate",
                      						lv_sodate_2_0,
                      						"org.xtext.example.mydsl_sql.SQL.DATE");
                      				
                    }

                    }


                    }


                    }
                    break;
                case 4 :
                    // InternalSQLParser.g:8433:3: ( (lv_sotime_3_0= RULE_TIME ) )
                    {
                    // InternalSQLParser.g:8433:3: ( (lv_sotime_3_0= RULE_TIME ) )
                    // InternalSQLParser.g:8434:4: (lv_sotime_3_0= RULE_TIME )
                    {
                    // InternalSQLParser.g:8434:4: (lv_sotime_3_0= RULE_TIME )
                    // InternalSQLParser.g:8435:5: lv_sotime_3_0= RULE_TIME
                    {
                    lv_sotime_3_0=(Token)match(input,RULE_TIME,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_sotime_3_0, grammarAccess.getScalarOperandAccess().getSotimeTIMETerminalRuleCall_3_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getScalarOperandRule());
                      					}
                      					setWithLastConsumed(
                      						current,
                      						"sotime",
                      						lv_sotime_3_0,
                      						"org.xtext.example.mydsl_sql.SQL.TIME");
                      				
                    }

                    }


                    }


                    }
                    break;
                case 5 :
                    // InternalSQLParser.g:8452:3: ( (lv_sodt_4_0= RULE_TIMESTAMP ) )
                    {
                    // InternalSQLParser.g:8452:3: ( (lv_sodt_4_0= RULE_TIMESTAMP ) )
                    // InternalSQLParser.g:8453:4: (lv_sodt_4_0= RULE_TIMESTAMP )
                    {
                    // InternalSQLParser.g:8453:4: (lv_sodt_4_0= RULE_TIMESTAMP )
                    // InternalSQLParser.g:8454:5: lv_sodt_4_0= RULE_TIMESTAMP
                    {
                    lv_sodt_4_0=(Token)match(input,RULE_TIMESTAMP,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_sodt_4_0, grammarAccess.getScalarOperandAccess().getSodtTIMESTAMPTerminalRuleCall_4_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getScalarOperandRule());
                      					}
                      					setWithLastConsumed(
                      						current,
                      						"sodt",
                      						lv_sodt_4_0,
                      						"org.xtext.example.mydsl_sql.SQL.TIMESTAMP");
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleScalarOperand"


    // $ANTLR start "entryRuleScalarNumberOperand"
    // InternalSQLParser.g:8474:1: entryRuleScalarNumberOperand returns [EObject current=null] : iv_ruleScalarNumberOperand= ruleScalarNumberOperand EOF ;
    public final EObject entryRuleScalarNumberOperand() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleScalarNumberOperand = null;


        try {
            // InternalSQLParser.g:8474:60: (iv_ruleScalarNumberOperand= ruleScalarNumberOperand EOF )
            // InternalSQLParser.g:8475:2: iv_ruleScalarNumberOperand= ruleScalarNumberOperand EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getScalarNumberOperandRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleScalarNumberOperand=ruleScalarNumberOperand();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleScalarNumberOperand; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleScalarNumberOperand"


    // $ANTLR start "ruleScalarNumberOperand"
    // InternalSQLParser.g:8481:1: ruleScalarNumberOperand returns [EObject current=null] : ( ( (lv_soUInt_0_0= RULE_UNSIGNED ) ) | ( (lv_soint_1_0= RULE_INT ) ) | ( (lv_sodbl_2_0= RULE_SIGNED_DOUBLE ) ) | ( (lv_sostr_3_0= ruleStringOperand ) ) ) ;
    public final EObject ruleScalarNumberOperand() throws RecognitionException {
        EObject current = null;

        Token lv_soUInt_0_0=null;
        Token lv_soint_1_0=null;
        Token lv_sodbl_2_0=null;
        AntlrDatatypeRuleToken lv_sostr_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:8487:2: ( ( ( (lv_soUInt_0_0= RULE_UNSIGNED ) ) | ( (lv_soint_1_0= RULE_INT ) ) | ( (lv_sodbl_2_0= RULE_SIGNED_DOUBLE ) ) | ( (lv_sostr_3_0= ruleStringOperand ) ) ) )
            // InternalSQLParser.g:8488:2: ( ( (lv_soUInt_0_0= RULE_UNSIGNED ) ) | ( (lv_soint_1_0= RULE_INT ) ) | ( (lv_sodbl_2_0= RULE_SIGNED_DOUBLE ) ) | ( (lv_sostr_3_0= ruleStringOperand ) ) )
            {
            // InternalSQLParser.g:8488:2: ( ( (lv_soUInt_0_0= RULE_UNSIGNED ) ) | ( (lv_soint_1_0= RULE_INT ) ) | ( (lv_sodbl_2_0= RULE_SIGNED_DOUBLE ) ) | ( (lv_sostr_3_0= ruleStringOperand ) ) )
            int alt146=4;
            switch ( input.LA(1) ) {
            case RULE_UNSIGNED:
                {
                alt146=1;
                }
                break;
            case RULE_INT:
                {
                alt146=2;
                }
                break;
            case RULE_SIGNED_DOUBLE:
                {
                alt146=3;
                }
                break;
            case RULE_STRING_:
                {
                alt146=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 146, 0, input);

                throw nvae;
            }

            switch (alt146) {
                case 1 :
                    // InternalSQLParser.g:8489:3: ( (lv_soUInt_0_0= RULE_UNSIGNED ) )
                    {
                    // InternalSQLParser.g:8489:3: ( (lv_soUInt_0_0= RULE_UNSIGNED ) )
                    // InternalSQLParser.g:8490:4: (lv_soUInt_0_0= RULE_UNSIGNED )
                    {
                    // InternalSQLParser.g:8490:4: (lv_soUInt_0_0= RULE_UNSIGNED )
                    // InternalSQLParser.g:8491:5: lv_soUInt_0_0= RULE_UNSIGNED
                    {
                    lv_soUInt_0_0=(Token)match(input,RULE_UNSIGNED,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_soUInt_0_0, grammarAccess.getScalarNumberOperandAccess().getSoUIntUNSIGNEDTerminalRuleCall_0_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getScalarNumberOperandRule());
                      					}
                      					setWithLastConsumed(
                      						current,
                      						"soUInt",
                      						lv_soUInt_0_0,
                      						"org.xtext.example.mydsl_sql.SQL.UNSIGNED");
                      				
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:8508:3: ( (lv_soint_1_0= RULE_INT ) )
                    {
                    // InternalSQLParser.g:8508:3: ( (lv_soint_1_0= RULE_INT ) )
                    // InternalSQLParser.g:8509:4: (lv_soint_1_0= RULE_INT )
                    {
                    // InternalSQLParser.g:8509:4: (lv_soint_1_0= RULE_INT )
                    // InternalSQLParser.g:8510:5: lv_soint_1_0= RULE_INT
                    {
                    lv_soint_1_0=(Token)match(input,RULE_INT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_soint_1_0, grammarAccess.getScalarNumberOperandAccess().getSointINTTerminalRuleCall_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getScalarNumberOperandRule());
                      					}
                      					setWithLastConsumed(
                      						current,
                      						"soint",
                      						lv_soint_1_0,
                      						"org.xtext.example.mydsl_sql.SQL.INT");
                      				
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:8527:3: ( (lv_sodbl_2_0= RULE_SIGNED_DOUBLE ) )
                    {
                    // InternalSQLParser.g:8527:3: ( (lv_sodbl_2_0= RULE_SIGNED_DOUBLE ) )
                    // InternalSQLParser.g:8528:4: (lv_sodbl_2_0= RULE_SIGNED_DOUBLE )
                    {
                    // InternalSQLParser.g:8528:4: (lv_sodbl_2_0= RULE_SIGNED_DOUBLE )
                    // InternalSQLParser.g:8529:5: lv_sodbl_2_0= RULE_SIGNED_DOUBLE
                    {
                    lv_sodbl_2_0=(Token)match(input,RULE_SIGNED_DOUBLE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_sodbl_2_0, grammarAccess.getScalarNumberOperandAccess().getSodblSIGNED_DOUBLETerminalRuleCall_2_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getScalarNumberOperandRule());
                      					}
                      					setWithLastConsumed(
                      						current,
                      						"sodbl",
                      						lv_sodbl_2_0,
                      						"org.xtext.example.mydsl_sql.SQL.SIGNED_DOUBLE");
                      				
                    }

                    }


                    }


                    }
                    break;
                case 4 :
                    // InternalSQLParser.g:8546:3: ( (lv_sostr_3_0= ruleStringOperand ) )
                    {
                    // InternalSQLParser.g:8546:3: ( (lv_sostr_3_0= ruleStringOperand ) )
                    // InternalSQLParser.g:8547:4: (lv_sostr_3_0= ruleStringOperand )
                    {
                    // InternalSQLParser.g:8547:4: (lv_sostr_3_0= ruleStringOperand )
                    // InternalSQLParser.g:8548:5: lv_sostr_3_0= ruleStringOperand
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getScalarNumberOperandAccess().getSostrStringOperandParserRuleCall_3_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_sostr_3_0=ruleStringOperand();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getScalarNumberOperandRule());
                      					}
                      					set(
                      						current,
                      						"sostr",
                      						lv_sostr_3_0,
                      						"org.xtext.example.mydsl_sql.SQL.StringOperand");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleScalarNumberOperand"


    // $ANTLR start "entryRuleSQLCASE"
    // InternalSQLParser.g:8569:1: entryRuleSQLCASE returns [EObject current=null] : iv_ruleSQLCASE= ruleSQLCASE EOF ;
    public final EObject entryRuleSQLCASE() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSQLCASE = null;


        try {
            // InternalSQLParser.g:8569:48: (iv_ruleSQLCASE= ruleSQLCASE EOF )
            // InternalSQLParser.g:8570:2: iv_ruleSQLCASE= ruleSQLCASE EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSQLCASERule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSQLCASE=ruleSQLCASE();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSQLCASE; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSQLCASE"


    // $ANTLR start "ruleSQLCASE"
    // InternalSQLParser.g:8576:1: ruleSQLCASE returns [EObject current=null] : (otherlv_0= CASE ( ( (lv_wop_1_0= ruleOperandGroup ) ) | ( (lv_expr_2_0= ruleFullExpression ) ) )? ( (lv_when_3_0= ruleSQLCaseWhens ) ) otherlv_4= END ) ;
    public final EObject ruleSQLCASE() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_4=null;
        EObject lv_wop_1_0 = null;

        EObject lv_expr_2_0 = null;

        EObject lv_when_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:8582:2: ( (otherlv_0= CASE ( ( (lv_wop_1_0= ruleOperandGroup ) ) | ( (lv_expr_2_0= ruleFullExpression ) ) )? ( (lv_when_3_0= ruleSQLCaseWhens ) ) otherlv_4= END ) )
            // InternalSQLParser.g:8583:2: (otherlv_0= CASE ( ( (lv_wop_1_0= ruleOperandGroup ) ) | ( (lv_expr_2_0= ruleFullExpression ) ) )? ( (lv_when_3_0= ruleSQLCaseWhens ) ) otherlv_4= END )
            {
            // InternalSQLParser.g:8583:2: (otherlv_0= CASE ( ( (lv_wop_1_0= ruleOperandGroup ) ) | ( (lv_expr_2_0= ruleFullExpression ) ) )? ( (lv_when_3_0= ruleSQLCaseWhens ) ) otherlv_4= END )
            // InternalSQLParser.g:8584:3: otherlv_0= CASE ( ( (lv_wop_1_0= ruleOperandGroup ) ) | ( (lv_expr_2_0= ruleFullExpression ) ) )? ( (lv_when_3_0= ruleSQLCaseWhens ) ) otherlv_4= END
            {
            otherlv_0=(Token)match(input,CASE,FOLLOW_108); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getSQLCASEAccess().getCASEKeyword_0());
              		
            }
            // InternalSQLParser.g:8588:3: ( ( (lv_wop_1_0= ruleOperandGroup ) ) | ( (lv_expr_2_0= ruleFullExpression ) ) )?
            int alt147=3;
            alt147 = dfa147.predict(input);
            switch (alt147) {
                case 1 :
                    // InternalSQLParser.g:8589:4: ( (lv_wop_1_0= ruleOperandGroup ) )
                    {
                    // InternalSQLParser.g:8589:4: ( (lv_wop_1_0= ruleOperandGroup ) )
                    // InternalSQLParser.g:8590:5: (lv_wop_1_0= ruleOperandGroup )
                    {
                    // InternalSQLParser.g:8590:5: (lv_wop_1_0= ruleOperandGroup )
                    // InternalSQLParser.g:8591:6: lv_wop_1_0= ruleOperandGroup
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getSQLCASEAccess().getWopOperandGroupParserRuleCall_1_0_0());
                      					
                    }
                    pushFollow(FOLLOW_108);
                    lv_wop_1_0=ruleOperandGroup();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSQLCASERule());
                      						}
                      						set(
                      							current,
                      							"wop",
                      							lv_wop_1_0,
                      							"org.xtext.example.mydsl_sql.SQL.OperandGroup");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:8609:4: ( (lv_expr_2_0= ruleFullExpression ) )
                    {
                    // InternalSQLParser.g:8609:4: ( (lv_expr_2_0= ruleFullExpression ) )
                    // InternalSQLParser.g:8610:5: (lv_expr_2_0= ruleFullExpression )
                    {
                    // InternalSQLParser.g:8610:5: (lv_expr_2_0= ruleFullExpression )
                    // InternalSQLParser.g:8611:6: lv_expr_2_0= ruleFullExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getSQLCASEAccess().getExprFullExpressionParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_108);
                    lv_expr_2_0=ruleFullExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSQLCASERule());
                      						}
                      						set(
                      							current,
                      							"expr",
                      							lv_expr_2_0,
                      							"org.xtext.example.mydsl_sql.SQL.FullExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            // InternalSQLParser.g:8629:3: ( (lv_when_3_0= ruleSQLCaseWhens ) )
            // InternalSQLParser.g:8630:4: (lv_when_3_0= ruleSQLCaseWhens )
            {
            // InternalSQLParser.g:8630:4: (lv_when_3_0= ruleSQLCaseWhens )
            // InternalSQLParser.g:8631:5: lv_when_3_0= ruleSQLCaseWhens
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getSQLCASEAccess().getWhenSQLCaseWhensParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_109);
            lv_when_3_0=ruleSQLCaseWhens();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getSQLCASERule());
              					}
              					set(
              						current,
              						"when",
              						lv_when_3_0,
              						"org.xtext.example.mydsl_sql.SQL.SQLCaseWhens");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_4=(Token)match(input,END,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getSQLCASEAccess().getENDKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSQLCASE"


    // $ANTLR start "entryRuleSQLCaseWhens"
    // InternalSQLParser.g:8656:1: entryRuleSQLCaseWhens returns [EObject current=null] : iv_ruleSQLCaseWhens= ruleSQLCaseWhens EOF ;
    public final EObject entryRuleSQLCaseWhens() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSQLCaseWhens = null;


        try {
            // InternalSQLParser.g:8656:53: (iv_ruleSQLCaseWhens= ruleSQLCaseWhens EOF )
            // InternalSQLParser.g:8657:2: iv_ruleSQLCaseWhens= ruleSQLCaseWhens EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSQLCaseWhensRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSQLCaseWhens=ruleSQLCaseWhens();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSQLCaseWhens; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSQLCaseWhens"


    // $ANTLR start "ruleSQLCaseWhens"
    // InternalSQLParser.g:8663:1: ruleSQLCaseWhens returns [EObject current=null] : (this_SqlCaseWhen_0= ruleSqlCaseWhen ( () ( (lv_entries_2_0= ruleSqlCaseWhen ) )+ )? ) ;
    public final EObject ruleSQLCaseWhens() throws RecognitionException {
        EObject current = null;

        EObject this_SqlCaseWhen_0 = null;

        EObject lv_entries_2_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:8669:2: ( (this_SqlCaseWhen_0= ruleSqlCaseWhen ( () ( (lv_entries_2_0= ruleSqlCaseWhen ) )+ )? ) )
            // InternalSQLParser.g:8670:2: (this_SqlCaseWhen_0= ruleSqlCaseWhen ( () ( (lv_entries_2_0= ruleSqlCaseWhen ) )+ )? )
            {
            // InternalSQLParser.g:8670:2: (this_SqlCaseWhen_0= ruleSqlCaseWhen ( () ( (lv_entries_2_0= ruleSqlCaseWhen ) )+ )? )
            // InternalSQLParser.g:8671:3: this_SqlCaseWhen_0= ruleSqlCaseWhen ( () ( (lv_entries_2_0= ruleSqlCaseWhen ) )+ )?
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getSQLCaseWhensAccess().getSqlCaseWhenParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_110);
            this_SqlCaseWhen_0=ruleSqlCaseWhen();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_SqlCaseWhen_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:8682:3: ( () ( (lv_entries_2_0= ruleSqlCaseWhen ) )+ )?
            int alt149=2;
            int LA149_0 = input.LA(1);

            if ( (LA149_0==WHEN) ) {
                alt149=1;
            }
            switch (alt149) {
                case 1 :
                    // InternalSQLParser.g:8683:4: () ( (lv_entries_2_0= ruleSqlCaseWhen ) )+
                    {
                    // InternalSQLParser.g:8683:4: ()
                    // InternalSQLParser.g:8684:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getSQLCaseWhensAccess().getWhenListEntriesAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalSQLParser.g:8693:4: ( (lv_entries_2_0= ruleSqlCaseWhen ) )+
                    int cnt148=0;
                    loop148:
                    do {
                        int alt148=2;
                        int LA148_0 = input.LA(1);

                        if ( (LA148_0==WHEN) ) {
                            alt148=1;
                        }


                        switch (alt148) {
                    	case 1 :
                    	    // InternalSQLParser.g:8694:5: (lv_entries_2_0= ruleSqlCaseWhen )
                    	    {
                    	    // InternalSQLParser.g:8694:5: (lv_entries_2_0= ruleSqlCaseWhen )
                    	    // InternalSQLParser.g:8695:6: lv_entries_2_0= ruleSqlCaseWhen
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      						newCompositeNode(grammarAccess.getSQLCaseWhensAccess().getEntriesSqlCaseWhenParserRuleCall_1_1_0());
                    	      					
                    	    }
                    	    pushFollow(FOLLOW_110);
                    	    lv_entries_2_0=ruleSqlCaseWhen();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						if (current==null) {
                    	      							current = createModelElementForParent(grammarAccess.getSQLCaseWhensRule());
                    	      						}
                    	      						add(
                    	      							current,
                    	      							"entries",
                    	      							lv_entries_2_0,
                    	      							"org.xtext.example.mydsl_sql.SQL.SqlCaseWhen");
                    	      						afterParserOrEnumRuleCall();
                    	      					
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt148 >= 1 ) break loop148;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(148, input);
                                throw eee;
                        }
                        cnt148++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSQLCaseWhens"


    // $ANTLR start "entryRuleSqlCaseWhen"
    // InternalSQLParser.g:8717:1: entryRuleSqlCaseWhen returns [EObject current=null] : iv_ruleSqlCaseWhen= ruleSqlCaseWhen EOF ;
    public final EObject entryRuleSqlCaseWhen() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSqlCaseWhen = null;


        try {
            // InternalSQLParser.g:8717:52: (iv_ruleSqlCaseWhen= ruleSqlCaseWhen EOF )
            // InternalSQLParser.g:8718:2: iv_ruleSqlCaseWhen= ruleSqlCaseWhen EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSqlCaseWhenRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSqlCaseWhen=ruleSqlCaseWhen();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSqlCaseWhen; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSqlCaseWhen"


    // $ANTLR start "ruleSqlCaseWhen"
    // InternalSQLParser.g:8724:1: ruleSqlCaseWhen returns [EObject current=null] : (otherlv_0= WHEN ( ( (lv_wop_1_0= ruleOperandGroup ) ) | ( (lv_expr_2_0= ruleFullExpression ) ) ) otherlv_3= THEN ( (lv_texp_4_0= ruleOperandGroup ) ) (otherlv_5= ELSE ( (lv_eexp_6_0= ruleOperandGroup ) ) )? ) ;
    public final EObject ruleSqlCaseWhen() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_wop_1_0 = null;

        EObject lv_expr_2_0 = null;

        EObject lv_texp_4_0 = null;

        EObject lv_eexp_6_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:8730:2: ( (otherlv_0= WHEN ( ( (lv_wop_1_0= ruleOperandGroup ) ) | ( (lv_expr_2_0= ruleFullExpression ) ) ) otherlv_3= THEN ( (lv_texp_4_0= ruleOperandGroup ) ) (otherlv_5= ELSE ( (lv_eexp_6_0= ruleOperandGroup ) ) )? ) )
            // InternalSQLParser.g:8731:2: (otherlv_0= WHEN ( ( (lv_wop_1_0= ruleOperandGroup ) ) | ( (lv_expr_2_0= ruleFullExpression ) ) ) otherlv_3= THEN ( (lv_texp_4_0= ruleOperandGroup ) ) (otherlv_5= ELSE ( (lv_eexp_6_0= ruleOperandGroup ) ) )? )
            {
            // InternalSQLParser.g:8731:2: (otherlv_0= WHEN ( ( (lv_wop_1_0= ruleOperandGroup ) ) | ( (lv_expr_2_0= ruleFullExpression ) ) ) otherlv_3= THEN ( (lv_texp_4_0= ruleOperandGroup ) ) (otherlv_5= ELSE ( (lv_eexp_6_0= ruleOperandGroup ) ) )? )
            // InternalSQLParser.g:8732:3: otherlv_0= WHEN ( ( (lv_wop_1_0= ruleOperandGroup ) ) | ( (lv_expr_2_0= ruleFullExpression ) ) ) otherlv_3= THEN ( (lv_texp_4_0= ruleOperandGroup ) ) (otherlv_5= ELSE ( (lv_eexp_6_0= ruleOperandGroup ) ) )?
            {
            otherlv_0=(Token)match(input,WHEN,FOLLOW_39); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getSqlCaseWhenAccess().getWHENKeyword_0());
              		
            }
            // InternalSQLParser.g:8736:3: ( ( (lv_wop_1_0= ruleOperandGroup ) ) | ( (lv_expr_2_0= ruleFullExpression ) ) )
            int alt150=2;
            alt150 = dfa150.predict(input);
            switch (alt150) {
                case 1 :
                    // InternalSQLParser.g:8737:4: ( (lv_wop_1_0= ruleOperandGroup ) )
                    {
                    // InternalSQLParser.g:8737:4: ( (lv_wop_1_0= ruleOperandGroup ) )
                    // InternalSQLParser.g:8738:5: (lv_wop_1_0= ruleOperandGroup )
                    {
                    // InternalSQLParser.g:8738:5: (lv_wop_1_0= ruleOperandGroup )
                    // InternalSQLParser.g:8739:6: lv_wop_1_0= ruleOperandGroup
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getSqlCaseWhenAccess().getWopOperandGroupParserRuleCall_1_0_0());
                      					
                    }
                    pushFollow(FOLLOW_111);
                    lv_wop_1_0=ruleOperandGroup();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSqlCaseWhenRule());
                      						}
                      						set(
                      							current,
                      							"wop",
                      							lv_wop_1_0,
                      							"org.xtext.example.mydsl_sql.SQL.OperandGroup");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:8757:4: ( (lv_expr_2_0= ruleFullExpression ) )
                    {
                    // InternalSQLParser.g:8757:4: ( (lv_expr_2_0= ruleFullExpression ) )
                    // InternalSQLParser.g:8758:5: (lv_expr_2_0= ruleFullExpression )
                    {
                    // InternalSQLParser.g:8758:5: (lv_expr_2_0= ruleFullExpression )
                    // InternalSQLParser.g:8759:6: lv_expr_2_0= ruleFullExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getSqlCaseWhenAccess().getExprFullExpressionParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_111);
                    lv_expr_2_0=ruleFullExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSqlCaseWhenRule());
                      						}
                      						set(
                      							current,
                      							"expr",
                      							lv_expr_2_0,
                      							"org.xtext.example.mydsl_sql.SQL.FullExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            otherlv_3=(Token)match(input,THEN,FOLLOW_74); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getSqlCaseWhenAccess().getTHENKeyword_2());
              		
            }
            // InternalSQLParser.g:8781:3: ( (lv_texp_4_0= ruleOperandGroup ) )
            // InternalSQLParser.g:8782:4: (lv_texp_4_0= ruleOperandGroup )
            {
            // InternalSQLParser.g:8782:4: (lv_texp_4_0= ruleOperandGroup )
            // InternalSQLParser.g:8783:5: lv_texp_4_0= ruleOperandGroup
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getSqlCaseWhenAccess().getTexpOperandGroupParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_112);
            lv_texp_4_0=ruleOperandGroup();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getSqlCaseWhenRule());
              					}
              					set(
              						current,
              						"texp",
              						lv_texp_4_0,
              						"org.xtext.example.mydsl_sql.SQL.OperandGroup");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:8800:3: (otherlv_5= ELSE ( (lv_eexp_6_0= ruleOperandGroup ) ) )?
            int alt151=2;
            int LA151_0 = input.LA(1);

            if ( (LA151_0==ELSE) ) {
                alt151=1;
            }
            switch (alt151) {
                case 1 :
                    // InternalSQLParser.g:8801:4: otherlv_5= ELSE ( (lv_eexp_6_0= ruleOperandGroup ) )
                    {
                    otherlv_5=(Token)match(input,ELSE,FOLLOW_74); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_5, grammarAccess.getSqlCaseWhenAccess().getELSEKeyword_4_0());
                      			
                    }
                    // InternalSQLParser.g:8805:4: ( (lv_eexp_6_0= ruleOperandGroup ) )
                    // InternalSQLParser.g:8806:5: (lv_eexp_6_0= ruleOperandGroup )
                    {
                    // InternalSQLParser.g:8806:5: (lv_eexp_6_0= ruleOperandGroup )
                    // InternalSQLParser.g:8807:6: lv_eexp_6_0= ruleOperandGroup
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getSqlCaseWhenAccess().getEexpOperandGroupParserRuleCall_4_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_eexp_6_0=ruleOperandGroup();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSqlCaseWhenRule());
                      						}
                      						set(
                      							current,
                      							"eexp",
                      							lv_eexp_6_0,
                      							"org.xtext.example.mydsl_sql.SQL.OperandGroup");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSqlCaseWhen"


    // $ANTLR start "entryRuleJoinType"
    // InternalSQLParser.g:8829:1: entryRuleJoinType returns [String current=null] : iv_ruleJoinType= ruleJoinType EOF ;
    public final String entryRuleJoinType() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleJoinType = null;


        try {
            // InternalSQLParser.g:8829:48: (iv_ruleJoinType= ruleJoinType EOF )
            // InternalSQLParser.g:8830:2: iv_ruleJoinType= ruleJoinType EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getJoinTypeRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleJoinType=ruleJoinType();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleJoinType.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleJoinType"


    // $ANTLR start "ruleJoinType"
    // InternalSQLParser.g:8836:1: ruleJoinType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : ( (kw= NATURAL )? (kw= INNER | ( (kw= LEFT | kw= RIGHT | kw= FULL ) (kw= OUTER )? ) | kw= CROSS | kw= STRAIGHT_JOIN )? kw= JOIN ) ;
    public final AntlrDatatypeRuleToken ruleJoinType() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            // InternalSQLParser.g:8842:2: ( ( (kw= NATURAL )? (kw= INNER | ( (kw= LEFT | kw= RIGHT | kw= FULL ) (kw= OUTER )? ) | kw= CROSS | kw= STRAIGHT_JOIN )? kw= JOIN ) )
            // InternalSQLParser.g:8843:2: ( (kw= NATURAL )? (kw= INNER | ( (kw= LEFT | kw= RIGHT | kw= FULL ) (kw= OUTER )? ) | kw= CROSS | kw= STRAIGHT_JOIN )? kw= JOIN )
            {
            // InternalSQLParser.g:8843:2: ( (kw= NATURAL )? (kw= INNER | ( (kw= LEFT | kw= RIGHT | kw= FULL ) (kw= OUTER )? ) | kw= CROSS | kw= STRAIGHT_JOIN )? kw= JOIN )
            // InternalSQLParser.g:8844:3: (kw= NATURAL )? (kw= INNER | ( (kw= LEFT | kw= RIGHT | kw= FULL ) (kw= OUTER )? ) | kw= CROSS | kw= STRAIGHT_JOIN )? kw= JOIN
            {
            // InternalSQLParser.g:8844:3: (kw= NATURAL )?
            int alt152=2;
            int LA152_0 = input.LA(1);

            if ( (LA152_0==NATURAL) ) {
                alt152=1;
            }
            switch (alt152) {
                case 1 :
                    // InternalSQLParser.g:8845:4: kw= NATURAL
                    {
                    kw=(Token)match(input,NATURAL,FOLLOW_113); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getJoinTypeAccess().getNATURALKeyword_0());
                      			
                    }

                    }
                    break;

            }

            // InternalSQLParser.g:8851:3: (kw= INNER | ( (kw= LEFT | kw= RIGHT | kw= FULL ) (kw= OUTER )? ) | kw= CROSS | kw= STRAIGHT_JOIN )?
            int alt155=5;
            switch ( input.LA(1) ) {
                case INNER:
                    {
                    alt155=1;
                    }
                    break;
                case RIGHT:
                case FULL:
                case LEFT:
                    {
                    alt155=2;
                    }
                    break;
                case CROSS:
                    {
                    alt155=3;
                    }
                    break;
                case STRAIGHT_JOIN:
                    {
                    alt155=4;
                    }
                    break;
            }

            switch (alt155) {
                case 1 :
                    // InternalSQLParser.g:8852:4: kw= INNER
                    {
                    kw=(Token)match(input,INNER,FOLLOW_114); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getJoinTypeAccess().getINNERKeyword_1_0());
                      			
                    }

                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:8858:4: ( (kw= LEFT | kw= RIGHT | kw= FULL ) (kw= OUTER )? )
                    {
                    // InternalSQLParser.g:8858:4: ( (kw= LEFT | kw= RIGHT | kw= FULL ) (kw= OUTER )? )
                    // InternalSQLParser.g:8859:5: (kw= LEFT | kw= RIGHT | kw= FULL ) (kw= OUTER )?
                    {
                    // InternalSQLParser.g:8859:5: (kw= LEFT | kw= RIGHT | kw= FULL )
                    int alt153=3;
                    switch ( input.LA(1) ) {
                    case LEFT:
                        {
                        alt153=1;
                        }
                        break;
                    case RIGHT:
                        {
                        alt153=2;
                        }
                        break;
                    case FULL:
                        {
                        alt153=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 153, 0, input);

                        throw nvae;
                    }

                    switch (alt153) {
                        case 1 :
                            // InternalSQLParser.g:8860:6: kw= LEFT
                            {
                            kw=(Token)match(input,LEFT,FOLLOW_115); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						current.merge(kw);
                              						newLeafNode(kw, grammarAccess.getJoinTypeAccess().getLEFTKeyword_1_1_0_0());
                              					
                            }

                            }
                            break;
                        case 2 :
                            // InternalSQLParser.g:8866:6: kw= RIGHT
                            {
                            kw=(Token)match(input,RIGHT,FOLLOW_115); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						current.merge(kw);
                              						newLeafNode(kw, grammarAccess.getJoinTypeAccess().getRIGHTKeyword_1_1_0_1());
                              					
                            }

                            }
                            break;
                        case 3 :
                            // InternalSQLParser.g:8872:6: kw= FULL
                            {
                            kw=(Token)match(input,FULL,FOLLOW_115); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						current.merge(kw);
                              						newLeafNode(kw, grammarAccess.getJoinTypeAccess().getFULLKeyword_1_1_0_2());
                              					
                            }

                            }
                            break;

                    }

                    // InternalSQLParser.g:8878:5: (kw= OUTER )?
                    int alt154=2;
                    int LA154_0 = input.LA(1);

                    if ( (LA154_0==OUTER) ) {
                        alt154=1;
                    }
                    switch (alt154) {
                        case 1 :
                            // InternalSQLParser.g:8879:6: kw= OUTER
                            {
                            kw=(Token)match(input,OUTER,FOLLOW_114); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						current.merge(kw);
                              						newLeafNode(kw, grammarAccess.getJoinTypeAccess().getOUTERKeyword_1_1_1());
                              					
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:8887:4: kw= CROSS
                    {
                    kw=(Token)match(input,CROSS,FOLLOW_114); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getJoinTypeAccess().getCROSSKeyword_1_2());
                      			
                    }

                    }
                    break;
                case 4 :
                    // InternalSQLParser.g:8893:4: kw= STRAIGHT_JOIN
                    {
                    kw=(Token)match(input,STRAIGHT_JOIN,FOLLOW_114); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getJoinTypeAccess().getSTRAIGHT_JOINKeyword_1_3());
                      			
                    }

                    }
                    break;

            }

            kw=(Token)match(input,JOIN,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(kw);
              			newLeafNode(kw, grammarAccess.getJoinTypeAccess().getJOINKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleJoinType"


    // $ANTLR start "entryRuleDBID"
    // InternalSQLParser.g:8908:1: entryRuleDBID returns [String current=null] : iv_ruleDBID= ruleDBID EOF ;
    public final String entryRuleDBID() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleDBID = null;


        try {
            // InternalSQLParser.g:8908:44: (iv_ruleDBID= ruleDBID EOF )
            // InternalSQLParser.g:8909:2: iv_ruleDBID= ruleDBID EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDBIDRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDBID=ruleDBID();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDBID.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleDBID"


    // $ANTLR start "ruleDBID"
    // InternalSQLParser.g:8915:1: ruleDBID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_ID_0= RULE_ID | this_DBNAME_1= RULE_DBNAME | this_STRING_2= RULE_STRING ) ;
    public final AntlrDatatypeRuleToken ruleDBID() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_ID_0=null;
        Token this_DBNAME_1=null;
        Token this_STRING_2=null;


        	enterRule();

        try {
            // InternalSQLParser.g:8921:2: ( (this_ID_0= RULE_ID | this_DBNAME_1= RULE_DBNAME | this_STRING_2= RULE_STRING ) )
            // InternalSQLParser.g:8922:2: (this_ID_0= RULE_ID | this_DBNAME_1= RULE_DBNAME | this_STRING_2= RULE_STRING )
            {
            // InternalSQLParser.g:8922:2: (this_ID_0= RULE_ID | this_DBNAME_1= RULE_DBNAME | this_STRING_2= RULE_STRING )
            int alt156=3;
            switch ( input.LA(1) ) {
            case RULE_ID:
                {
                alt156=1;
                }
                break;
            case RULE_DBNAME:
                {
                alt156=2;
                }
                break;
            case RULE_STRING:
                {
                alt156=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 156, 0, input);

                throw nvae;
            }

            switch (alt156) {
                case 1 :
                    // InternalSQLParser.g:8923:3: this_ID_0= RULE_ID
                    {
                    this_ID_0=(Token)match(input,RULE_ID,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_ID_0);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_ID_0, grammarAccess.getDBIDAccess().getIDTerminalRuleCall_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:8931:3: this_DBNAME_1= RULE_DBNAME
                    {
                    this_DBNAME_1=(Token)match(input,RULE_DBNAME,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_DBNAME_1);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_DBNAME_1, grammarAccess.getDBIDAccess().getDBNAMETerminalRuleCall_1());
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:8939:3: this_STRING_2= RULE_STRING
                    {
                    this_STRING_2=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_STRING_2);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_STRING_2, grammarAccess.getDBIDAccess().getSTRINGTerminalRuleCall_2());
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleDBID"


    // $ANTLR start "entryRuleSignedLiteral"
    // InternalSQLParser.g:8950:1: entryRuleSignedLiteral returns [String current=null] : iv_ruleSignedLiteral= ruleSignedLiteral EOF ;
    public final String entryRuleSignedLiteral() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleSignedLiteral = null;


        try {
            // InternalSQLParser.g:8950:53: (iv_ruleSignedLiteral= ruleSignedLiteral EOF )
            // InternalSQLParser.g:8951:2: iv_ruleSignedLiteral= ruleSignedLiteral EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSignedLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSignedLiteral=ruleSignedLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSignedLiteral.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSignedLiteral"


    // $ANTLR start "ruleSignedLiteral"
    // InternalSQLParser.g:8957:1: ruleSignedLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_Literal_0= ruleLiteral | (kw= PlusSign this_NumLiteral_2= ruleNumLiteral ) | (kw= HyphenMinus this_NumLiteral_4= ruleNumLiteral ) ) ;
    public final AntlrDatatypeRuleToken ruleSignedLiteral() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;
        AntlrDatatypeRuleToken this_Literal_0 = null;

        AntlrDatatypeRuleToken this_NumLiteral_2 = null;

        AntlrDatatypeRuleToken this_NumLiteral_4 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:8963:2: ( (this_Literal_0= ruleLiteral | (kw= PlusSign this_NumLiteral_2= ruleNumLiteral ) | (kw= HyphenMinus this_NumLiteral_4= ruleNumLiteral ) ) )
            // InternalSQLParser.g:8964:2: (this_Literal_0= ruleLiteral | (kw= PlusSign this_NumLiteral_2= ruleNumLiteral ) | (kw= HyphenMinus this_NumLiteral_4= ruleNumLiteral ) )
            {
            // InternalSQLParser.g:8964:2: (this_Literal_0= ruleLiteral | (kw= PlusSign this_NumLiteral_2= ruleNumLiteral ) | (kw= HyphenMinus this_NumLiteral_4= ruleNumLiteral ) )
            int alt157=3;
            switch ( input.LA(1) ) {
            case TIMESTAMP:
            case FALSE:
            case DATE:
            case NULL:
            case TIME:
            case TRUE:
            case RULE_INT:
            case RULE_STRING_:
                {
                alt157=1;
                }
                break;
            case PlusSign:
                {
                alt157=2;
                }
                break;
            case HyphenMinus:
                {
                alt157=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 157, 0, input);

                throw nvae;
            }

            switch (alt157) {
                case 1 :
                    // InternalSQLParser.g:8965:3: this_Literal_0= ruleLiteral
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getSignedLiteralAccess().getLiteralParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Literal_0=ruleLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_Literal_0);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:8976:3: (kw= PlusSign this_NumLiteral_2= ruleNumLiteral )
                    {
                    // InternalSQLParser.g:8976:3: (kw= PlusSign this_NumLiteral_2= ruleNumLiteral )
                    // InternalSQLParser.g:8977:4: kw= PlusSign this_NumLiteral_2= ruleNumLiteral
                    {
                    kw=(Token)match(input,PlusSign,FOLLOW_19); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getSignedLiteralAccess().getPlusSignKeyword_1_0());
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getSignedLiteralAccess().getNumLiteralParserRuleCall_1_1());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_NumLiteral_2=ruleNumLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(this_NumLiteral_2);
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:8994:3: (kw= HyphenMinus this_NumLiteral_4= ruleNumLiteral )
                    {
                    // InternalSQLParser.g:8994:3: (kw= HyphenMinus this_NumLiteral_4= ruleNumLiteral )
                    // InternalSQLParser.g:8995:4: kw= HyphenMinus this_NumLiteral_4= ruleNumLiteral
                    {
                    kw=(Token)match(input,HyphenMinus,FOLLOW_19); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getSignedLiteralAccess().getHyphenMinusKeyword_2_0());
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getSignedLiteralAccess().getNumLiteralParserRuleCall_2_1());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_NumLiteral_4=ruleNumLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(this_NumLiteral_4);
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSignedLiteral"


    // $ANTLR start "entryRuleLiteral"
    // InternalSQLParser.g:9015:1: entryRuleLiteral returns [String current=null] : iv_ruleLiteral= ruleLiteral EOF ;
    public final String entryRuleLiteral() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleLiteral = null;


        try {
            // InternalSQLParser.g:9015:47: (iv_ruleLiteral= ruleLiteral EOF )
            // InternalSQLParser.g:9016:2: iv_ruleLiteral= ruleLiteral EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLiteral=ruleLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLiteral.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleLiteral"


    // $ANTLR start "ruleLiteral"
    // InternalSQLParser.g:9022:1: ruleLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_TextLiteral_0= ruleTextLiteral | this_NumLiteral_1= ruleNumLiteral | this_TemporalLiteral_2= ruleTemporalLiteral | kw= NULL | this_BoolLiteral_4= ruleBoolLiteral ) ;
    public final AntlrDatatypeRuleToken ruleLiteral() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;
        AntlrDatatypeRuleToken this_TextLiteral_0 = null;

        AntlrDatatypeRuleToken this_NumLiteral_1 = null;

        AntlrDatatypeRuleToken this_TemporalLiteral_2 = null;

        AntlrDatatypeRuleToken this_BoolLiteral_4 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:9028:2: ( (this_TextLiteral_0= ruleTextLiteral | this_NumLiteral_1= ruleNumLiteral | this_TemporalLiteral_2= ruleTemporalLiteral | kw= NULL | this_BoolLiteral_4= ruleBoolLiteral ) )
            // InternalSQLParser.g:9029:2: (this_TextLiteral_0= ruleTextLiteral | this_NumLiteral_1= ruleNumLiteral | this_TemporalLiteral_2= ruleTemporalLiteral | kw= NULL | this_BoolLiteral_4= ruleBoolLiteral )
            {
            // InternalSQLParser.g:9029:2: (this_TextLiteral_0= ruleTextLiteral | this_NumLiteral_1= ruleNumLiteral | this_TemporalLiteral_2= ruleTemporalLiteral | kw= NULL | this_BoolLiteral_4= ruleBoolLiteral )
            int alt158=5;
            switch ( input.LA(1) ) {
            case RULE_STRING_:
                {
                alt158=1;
                }
                break;
            case RULE_INT:
                {
                alt158=2;
                }
                break;
            case TIMESTAMP:
            case DATE:
            case TIME:
                {
                alt158=3;
                }
                break;
            case NULL:
                {
                alt158=4;
                }
                break;
            case FALSE:
            case TRUE:
                {
                alt158=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 158, 0, input);

                throw nvae;
            }

            switch (alt158) {
                case 1 :
                    // InternalSQLParser.g:9030:3: this_TextLiteral_0= ruleTextLiteral
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getLiteralAccess().getTextLiteralParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_TextLiteral_0=ruleTextLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_TextLiteral_0);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:9041:3: this_NumLiteral_1= ruleNumLiteral
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getLiteralAccess().getNumLiteralParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_NumLiteral_1=ruleNumLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_NumLiteral_1);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:9052:3: this_TemporalLiteral_2= ruleTemporalLiteral
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getLiteralAccess().getTemporalLiteralParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_TemporalLiteral_2=ruleTemporalLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_TemporalLiteral_2);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 4 :
                    // InternalSQLParser.g:9063:3: kw= NULL
                    {
                    kw=(Token)match(input,NULL,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getLiteralAccess().getNULLKeyword_3());
                      		
                    }

                    }
                    break;
                case 5 :
                    // InternalSQLParser.g:9069:3: this_BoolLiteral_4= ruleBoolLiteral
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getLiteralAccess().getBoolLiteralParserRuleCall_4());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_BoolLiteral_4=ruleBoolLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_BoolLiteral_4);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleLiteral"


    // $ANTLR start "entryRuleTextLiteral"
    // InternalSQLParser.g:9083:1: entryRuleTextLiteral returns [String current=null] : iv_ruleTextLiteral= ruleTextLiteral EOF ;
    public final String entryRuleTextLiteral() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleTextLiteral = null;


        try {
            // InternalSQLParser.g:9083:51: (iv_ruleTextLiteral= ruleTextLiteral EOF )
            // InternalSQLParser.g:9084:2: iv_ruleTextLiteral= ruleTextLiteral EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTextLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTextLiteral=ruleTextLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTextLiteral.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTextLiteral"


    // $ANTLR start "ruleTextLiteral"
    // InternalSQLParser.g:9090:1: ruleTextLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : this_STRING__0= RULE_STRING_ ;
    public final AntlrDatatypeRuleToken ruleTextLiteral() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_STRING__0=null;


        	enterRule();

        try {
            // InternalSQLParser.g:9096:2: (this_STRING__0= RULE_STRING_ )
            // InternalSQLParser.g:9097:2: this_STRING__0= RULE_STRING_
            {
            this_STRING__0=(Token)match(input,RULE_STRING_,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current.merge(this_STRING__0);
              	
            }
            if ( state.backtracking==0 ) {

              		newLeafNode(this_STRING__0, grammarAccess.getTextLiteralAccess().getSTRING_TerminalRuleCall());
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTextLiteral"


    // $ANTLR start "entryRuleNumLiteral"
    // InternalSQLParser.g:9107:1: entryRuleNumLiteral returns [String current=null] : iv_ruleNumLiteral= ruleNumLiteral EOF ;
    public final String entryRuleNumLiteral() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleNumLiteral = null;


        try {
            // InternalSQLParser.g:9107:50: (iv_ruleNumLiteral= ruleNumLiteral EOF )
            // InternalSQLParser.g:9108:2: iv_ruleNumLiteral= ruleNumLiteral EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNumLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNumLiteral=ruleNumLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNumLiteral.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleNumLiteral"


    // $ANTLR start "ruleNumLiteral"
    // InternalSQLParser.g:9114:1: ruleNumLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : this_INT_0= RULE_INT ;
    public final AntlrDatatypeRuleToken ruleNumLiteral() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_INT_0=null;


        	enterRule();

        try {
            // InternalSQLParser.g:9120:2: (this_INT_0= RULE_INT )
            // InternalSQLParser.g:9121:2: this_INT_0= RULE_INT
            {
            this_INT_0=(Token)match(input,RULE_INT,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current.merge(this_INT_0);
              	
            }
            if ( state.backtracking==0 ) {

              		newLeafNode(this_INT_0, grammarAccess.getNumLiteralAccess().getINTTerminalRuleCall());
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleNumLiteral"


    // $ANTLR start "entryRuleTemporalLiteral"
    // InternalSQLParser.g:9131:1: entryRuleTemporalLiteral returns [String current=null] : iv_ruleTemporalLiteral= ruleTemporalLiteral EOF ;
    public final String entryRuleTemporalLiteral() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleTemporalLiteral = null;


        try {
            // InternalSQLParser.g:9131:55: (iv_ruleTemporalLiteral= ruleTemporalLiteral EOF )
            // InternalSQLParser.g:9132:2: iv_ruleTemporalLiteral= ruleTemporalLiteral EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTemporalLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTemporalLiteral=ruleTemporalLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTemporalLiteral.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTemporalLiteral"


    // $ANTLR start "ruleTemporalLiteral"
    // InternalSQLParser.g:9138:1: ruleTemporalLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : ( (kw= DATE this_STRING__1= RULE_STRING_ ) | (kw= TIME this_STRING__3= RULE_STRING_ ) | (kw= TIMESTAMP this_STRING__5= RULE_STRING_ ) ) ;
    public final AntlrDatatypeRuleToken ruleTemporalLiteral() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;
        Token this_STRING__1=null;
        Token this_STRING__3=null;
        Token this_STRING__5=null;


        	enterRule();

        try {
            // InternalSQLParser.g:9144:2: ( ( (kw= DATE this_STRING__1= RULE_STRING_ ) | (kw= TIME this_STRING__3= RULE_STRING_ ) | (kw= TIMESTAMP this_STRING__5= RULE_STRING_ ) ) )
            // InternalSQLParser.g:9145:2: ( (kw= DATE this_STRING__1= RULE_STRING_ ) | (kw= TIME this_STRING__3= RULE_STRING_ ) | (kw= TIMESTAMP this_STRING__5= RULE_STRING_ ) )
            {
            // InternalSQLParser.g:9145:2: ( (kw= DATE this_STRING__1= RULE_STRING_ ) | (kw= TIME this_STRING__3= RULE_STRING_ ) | (kw= TIMESTAMP this_STRING__5= RULE_STRING_ ) )
            int alt159=3;
            switch ( input.LA(1) ) {
            case DATE:
                {
                alt159=1;
                }
                break;
            case TIME:
                {
                alt159=2;
                }
                break;
            case TIMESTAMP:
                {
                alt159=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 159, 0, input);

                throw nvae;
            }

            switch (alt159) {
                case 1 :
                    // InternalSQLParser.g:9146:3: (kw= DATE this_STRING__1= RULE_STRING_ )
                    {
                    // InternalSQLParser.g:9146:3: (kw= DATE this_STRING__1= RULE_STRING_ )
                    // InternalSQLParser.g:9147:4: kw= DATE this_STRING__1= RULE_STRING_
                    {
                    kw=(Token)match(input,DATE,FOLLOW_22); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getTemporalLiteralAccess().getDATEKeyword_0_0());
                      			
                    }
                    this_STRING__1=(Token)match(input,RULE_STRING_,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(this_STRING__1);
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_STRING__1, grammarAccess.getTemporalLiteralAccess().getSTRING_TerminalRuleCall_0_1());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:9161:3: (kw= TIME this_STRING__3= RULE_STRING_ )
                    {
                    // InternalSQLParser.g:9161:3: (kw= TIME this_STRING__3= RULE_STRING_ )
                    // InternalSQLParser.g:9162:4: kw= TIME this_STRING__3= RULE_STRING_
                    {
                    kw=(Token)match(input,TIME,FOLLOW_22); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getTemporalLiteralAccess().getTIMEKeyword_1_0());
                      			
                    }
                    this_STRING__3=(Token)match(input,RULE_STRING_,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(this_STRING__3);
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_STRING__3, grammarAccess.getTemporalLiteralAccess().getSTRING_TerminalRuleCall_1_1());
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:9176:3: (kw= TIMESTAMP this_STRING__5= RULE_STRING_ )
                    {
                    // InternalSQLParser.g:9176:3: (kw= TIMESTAMP this_STRING__5= RULE_STRING_ )
                    // InternalSQLParser.g:9177:4: kw= TIMESTAMP this_STRING__5= RULE_STRING_
                    {
                    kw=(Token)match(input,TIMESTAMP,FOLLOW_22); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getTemporalLiteralAccess().getTIMESTAMPKeyword_2_0());
                      			
                    }
                    this_STRING__5=(Token)match(input,RULE_STRING_,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(this_STRING__5);
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_STRING__5, grammarAccess.getTemporalLiteralAccess().getSTRING_TerminalRuleCall_2_1());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTemporalLiteral"


    // $ANTLR start "entryRuleBoolLiteral"
    // InternalSQLParser.g:9194:1: entryRuleBoolLiteral returns [String current=null] : iv_ruleBoolLiteral= ruleBoolLiteral EOF ;
    public final String entryRuleBoolLiteral() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleBoolLiteral = null;


        try {
            // InternalSQLParser.g:9194:51: (iv_ruleBoolLiteral= ruleBoolLiteral EOF )
            // InternalSQLParser.g:9195:2: iv_ruleBoolLiteral= ruleBoolLiteral EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBoolLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBoolLiteral=ruleBoolLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBoolLiteral.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleBoolLiteral"


    // $ANTLR start "ruleBoolLiteral"
    // InternalSQLParser.g:9201:1: ruleBoolLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= TRUE | kw= FALSE ) ;
    public final AntlrDatatypeRuleToken ruleBoolLiteral() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            // InternalSQLParser.g:9207:2: ( (kw= TRUE | kw= FALSE ) )
            // InternalSQLParser.g:9208:2: (kw= TRUE | kw= FALSE )
            {
            // InternalSQLParser.g:9208:2: (kw= TRUE | kw= FALSE )
            int alt160=2;
            int LA160_0 = input.LA(1);

            if ( (LA160_0==TRUE) ) {
                alt160=1;
            }
            else if ( (LA160_0==FALSE) ) {
                alt160=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 160, 0, input);

                throw nvae;
            }
            switch (alt160) {
                case 1 :
                    // InternalSQLParser.g:9209:3: kw= TRUE
                    {
                    kw=(Token)match(input,TRUE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getBoolLiteralAccess().getTRUEKeyword_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:9215:3: kw= FALSE
                    {
                    kw=(Token)match(input,FALSE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getBoolLiteralAccess().getFALSEKeyword_1());
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleBoolLiteral"


    // $ANTLR start "entryRuleStringOperand"
    // InternalSQLParser.g:9224:1: entryRuleStringOperand returns [String current=null] : iv_ruleStringOperand= ruleStringOperand EOF ;
    public final String entryRuleStringOperand() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleStringOperand = null;


        try {
            // InternalSQLParser.g:9224:53: (iv_ruleStringOperand= ruleStringOperand EOF )
            // InternalSQLParser.g:9225:2: iv_ruleStringOperand= ruleStringOperand EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getStringOperandRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleStringOperand=ruleStringOperand();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleStringOperand.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleStringOperand"


    // $ANTLR start "ruleStringOperand"
    // InternalSQLParser.g:9231:1: ruleStringOperand returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : this_STRING__0= RULE_STRING_ ;
    public final AntlrDatatypeRuleToken ruleStringOperand() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_STRING__0=null;


        	enterRule();

        try {
            // InternalSQLParser.g:9237:2: (this_STRING__0= RULE_STRING_ )
            // InternalSQLParser.g:9238:2: this_STRING__0= RULE_STRING_
            {
            this_STRING__0=(Token)match(input,RULE_STRING_,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current.merge(this_STRING__0);
              	
            }
            if ( state.backtracking==0 ) {

              		newLeafNode(this_STRING__0, grammarAccess.getStringOperandAccess().getSTRING_TerminalRuleCall());
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleStringOperand"


    // $ANTLR start "entryRuleFNAME"
    // InternalSQLParser.g:9248:1: entryRuleFNAME returns [String current=null] : iv_ruleFNAME= ruleFNAME EOF ;
    public final String entryRuleFNAME() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleFNAME = null;


        try {
            // InternalSQLParser.g:9248:45: (iv_ruleFNAME= ruleFNAME EOF )
            // InternalSQLParser.g:9249:2: iv_ruleFNAME= ruleFNAME EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFNAMERule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFNAME=ruleFNAME();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFNAME.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFNAME"


    // $ANTLR start "ruleFNAME"
    // InternalSQLParser.g:9255:1: ruleFNAME returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_ID_0= RULE_ID kw= LeftParenthesis ) ;
    public final AntlrDatatypeRuleToken ruleFNAME() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_ID_0=null;
        Token kw=null;


        	enterRule();

        try {
            // InternalSQLParser.g:9261:2: ( (this_ID_0= RULE_ID kw= LeftParenthesis ) )
            // InternalSQLParser.g:9262:2: (this_ID_0= RULE_ID kw= LeftParenthesis )
            {
            // InternalSQLParser.g:9262:2: (this_ID_0= RULE_ID kw= LeftParenthesis )
            // InternalSQLParser.g:9263:3: this_ID_0= RULE_ID kw= LeftParenthesis
            {
            this_ID_0=(Token)match(input,RULE_ID,FOLLOW_8); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(this_ID_0);
              		
            }
            if ( state.backtracking==0 ) {

              			newLeafNode(this_ID_0, grammarAccess.getFNAMEAccess().getIDTerminalRuleCall_0());
              		
            }
            kw=(Token)match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(kw);
              			newLeafNode(kw, grammarAccess.getFNAMEAccess().getLeftParenthesisKeyword_1());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFNAME"


    // $ANTLR start "entryRuleUnsignedValue"
    // InternalSQLParser.g:9279:1: entryRuleUnsignedValue returns [EObject current=null] : iv_ruleUnsignedValue= ruleUnsignedValue EOF ;
    public final EObject entryRuleUnsignedValue() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleUnsignedValue = null;


        try {
            // InternalSQLParser.g:9279:54: (iv_ruleUnsignedValue= ruleUnsignedValue EOF )
            // InternalSQLParser.g:9280:2: iv_ruleUnsignedValue= ruleUnsignedValue EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getUnsignedValueRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleUnsignedValue=ruleUnsignedValue();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleUnsignedValue; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleUnsignedValue"


    // $ANTLR start "ruleUnsignedValue"
    // InternalSQLParser.g:9286:1: ruleUnsignedValue returns [EObject current=null] : ( (lv_integer_0_0= RULE_UNSIGNED ) ) ;
    public final EObject ruleUnsignedValue() throws RecognitionException {
        EObject current = null;

        Token lv_integer_0_0=null;


        	enterRule();

        try {
            // InternalSQLParser.g:9292:2: ( ( (lv_integer_0_0= RULE_UNSIGNED ) ) )
            // InternalSQLParser.g:9293:2: ( (lv_integer_0_0= RULE_UNSIGNED ) )
            {
            // InternalSQLParser.g:9293:2: ( (lv_integer_0_0= RULE_UNSIGNED ) )
            // InternalSQLParser.g:9294:3: (lv_integer_0_0= RULE_UNSIGNED )
            {
            // InternalSQLParser.g:9294:3: (lv_integer_0_0= RULE_UNSIGNED )
            // InternalSQLParser.g:9295:4: lv_integer_0_0= RULE_UNSIGNED
            {
            lv_integer_0_0=(Token)match(input,RULE_UNSIGNED,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(lv_integer_0_0, grammarAccess.getUnsignedValueAccess().getIntegerUNSIGNEDTerminalRuleCall_0());
              			
            }
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getUnsignedValueRule());
              				}
              				setWithLastConsumed(
              					current,
              					"integer",
              					lv_integer_0_0,
              					"org.xtext.example.mydsl_sql.SQL.UNSIGNED");
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleUnsignedValue"


    // $ANTLR start "ruleXFunction"
    // InternalSQLParser.g:9314:1: ruleXFunction returns [Enumerator current=null] : ( (enumLiteral_0= IN_1 ) | (enumLiteral_1= NOTIN ) | (enumLiteral_2= EQUAL ) | (enumLiteral_3= NOTEQUAL ) | (enumLiteral_4= LESS ) | (enumLiteral_5= LESS_1 ) | (enumLiteral_6= GREATER_1 ) | (enumLiteral_7= GREATER ) | (enumLiteral_8= BETWEEN_1 ) | (enumLiteral_9= BETWEEN_4 ) | (enumLiteral_10= BETWEEN_3 ) | (enumLiteral_11= BETWEEN_2 ) ) ;
    public final Enumerator ruleXFunction() throws RecognitionException {
        Enumerator current = null;

        Token enumLiteral_0=null;
        Token enumLiteral_1=null;
        Token enumLiteral_2=null;
        Token enumLiteral_3=null;
        Token enumLiteral_4=null;
        Token enumLiteral_5=null;
        Token enumLiteral_6=null;
        Token enumLiteral_7=null;
        Token enumLiteral_8=null;
        Token enumLiteral_9=null;
        Token enumLiteral_10=null;
        Token enumLiteral_11=null;


        	enterRule();

        try {
            // InternalSQLParser.g:9320:2: ( ( (enumLiteral_0= IN_1 ) | (enumLiteral_1= NOTIN ) | (enumLiteral_2= EQUAL ) | (enumLiteral_3= NOTEQUAL ) | (enumLiteral_4= LESS ) | (enumLiteral_5= LESS_1 ) | (enumLiteral_6= GREATER_1 ) | (enumLiteral_7= GREATER ) | (enumLiteral_8= BETWEEN_1 ) | (enumLiteral_9= BETWEEN_4 ) | (enumLiteral_10= BETWEEN_3 ) | (enumLiteral_11= BETWEEN_2 ) ) )
            // InternalSQLParser.g:9321:2: ( (enumLiteral_0= IN_1 ) | (enumLiteral_1= NOTIN ) | (enumLiteral_2= EQUAL ) | (enumLiteral_3= NOTEQUAL ) | (enumLiteral_4= LESS ) | (enumLiteral_5= LESS_1 ) | (enumLiteral_6= GREATER_1 ) | (enumLiteral_7= GREATER ) | (enumLiteral_8= BETWEEN_1 ) | (enumLiteral_9= BETWEEN_4 ) | (enumLiteral_10= BETWEEN_3 ) | (enumLiteral_11= BETWEEN_2 ) )
            {
            // InternalSQLParser.g:9321:2: ( (enumLiteral_0= IN_1 ) | (enumLiteral_1= NOTIN ) | (enumLiteral_2= EQUAL ) | (enumLiteral_3= NOTEQUAL ) | (enumLiteral_4= LESS ) | (enumLiteral_5= LESS_1 ) | (enumLiteral_6= GREATER_1 ) | (enumLiteral_7= GREATER ) | (enumLiteral_8= BETWEEN_1 ) | (enumLiteral_9= BETWEEN_4 ) | (enumLiteral_10= BETWEEN_3 ) | (enumLiteral_11= BETWEEN_2 ) )
            int alt161=12;
            switch ( input.LA(1) ) {
            case IN_1:
                {
                alt161=1;
                }
                break;
            case NOTIN:
                {
                alt161=2;
                }
                break;
            case EQUAL:
                {
                alt161=3;
                }
                break;
            case NOTEQUAL:
                {
                alt161=4;
                }
                break;
            case LESS:
                {
                alt161=5;
                }
                break;
            case LESS_1:
                {
                alt161=6;
                }
                break;
            case GREATER_1:
                {
                alt161=7;
                }
                break;
            case GREATER:
                {
                alt161=8;
                }
                break;
            case BETWEEN_1:
                {
                alt161=9;
                }
                break;
            case BETWEEN_4:
                {
                alt161=10;
                }
                break;
            case BETWEEN_3:
                {
                alt161=11;
                }
                break;
            case BETWEEN_2:
                {
                alt161=12;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 161, 0, input);

                throw nvae;
            }

            switch (alt161) {
                case 1 :
                    // InternalSQLParser.g:9322:3: (enumLiteral_0= IN_1 )
                    {
                    // InternalSQLParser.g:9322:3: (enumLiteral_0= IN_1 )
                    // InternalSQLParser.g:9323:4: enumLiteral_0= IN_1
                    {
                    enumLiteral_0=(Token)match(input,IN_1,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getXFunctionAccess().getXinEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getXFunctionAccess().getXinEnumLiteralDeclaration_0());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:9330:3: (enumLiteral_1= NOTIN )
                    {
                    // InternalSQLParser.g:9330:3: (enumLiteral_1= NOTIN )
                    // InternalSQLParser.g:9331:4: enumLiteral_1= NOTIN
                    {
                    enumLiteral_1=(Token)match(input,NOTIN,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getXFunctionAccess().getXnotinEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getXFunctionAccess().getXnotinEnumLiteralDeclaration_1());
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:9338:3: (enumLiteral_2= EQUAL )
                    {
                    // InternalSQLParser.g:9338:3: (enumLiteral_2= EQUAL )
                    // InternalSQLParser.g:9339:4: enumLiteral_2= EQUAL
                    {
                    enumLiteral_2=(Token)match(input,EQUAL,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getXFunctionAccess().getXeqEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_2, grammarAccess.getXFunctionAccess().getXeqEnumLiteralDeclaration_2());
                      			
                    }

                    }


                    }
                    break;
                case 4 :
                    // InternalSQLParser.g:9346:3: (enumLiteral_3= NOTEQUAL )
                    {
                    // InternalSQLParser.g:9346:3: (enumLiteral_3= NOTEQUAL )
                    // InternalSQLParser.g:9347:4: enumLiteral_3= NOTEQUAL
                    {
                    enumLiteral_3=(Token)match(input,NOTEQUAL,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getXFunctionAccess().getXnoteqEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_3, grammarAccess.getXFunctionAccess().getXnoteqEnumLiteralDeclaration_3());
                      			
                    }

                    }


                    }
                    break;
                case 5 :
                    // InternalSQLParser.g:9354:3: (enumLiteral_4= LESS )
                    {
                    // InternalSQLParser.g:9354:3: (enumLiteral_4= LESS )
                    // InternalSQLParser.g:9355:4: enumLiteral_4= LESS
                    {
                    enumLiteral_4=(Token)match(input,LESS,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getXFunctionAccess().getXlsEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_4, grammarAccess.getXFunctionAccess().getXlsEnumLiteralDeclaration_4());
                      			
                    }

                    }


                    }
                    break;
                case 6 :
                    // InternalSQLParser.g:9362:3: (enumLiteral_5= LESS_1 )
                    {
                    // InternalSQLParser.g:9362:3: (enumLiteral_5= LESS_1 )
                    // InternalSQLParser.g:9363:4: enumLiteral_5= LESS_1
                    {
                    enumLiteral_5=(Token)match(input,LESS_1,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getXFunctionAccess().getXlsrEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_5, grammarAccess.getXFunctionAccess().getXlsrEnumLiteralDeclaration_5());
                      			
                    }

                    }


                    }
                    break;
                case 7 :
                    // InternalSQLParser.g:9370:3: (enumLiteral_6= GREATER_1 )
                    {
                    // InternalSQLParser.g:9370:3: (enumLiteral_6= GREATER_1 )
                    // InternalSQLParser.g:9371:4: enumLiteral_6= GREATER_1
                    {
                    enumLiteral_6=(Token)match(input,GREATER_1,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getXFunctionAccess().getXgtlEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_6, grammarAccess.getXFunctionAccess().getXgtlEnumLiteralDeclaration_6());
                      			
                    }

                    }


                    }
                    break;
                case 8 :
                    // InternalSQLParser.g:9378:3: (enumLiteral_7= GREATER )
                    {
                    // InternalSQLParser.g:9378:3: (enumLiteral_7= GREATER )
                    // InternalSQLParser.g:9379:4: enumLiteral_7= GREATER
                    {
                    enumLiteral_7=(Token)match(input,GREATER,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getXFunctionAccess().getXgtEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_7, grammarAccess.getXFunctionAccess().getXgtEnumLiteralDeclaration_7());
                      			
                    }

                    }


                    }
                    break;
                case 9 :
                    // InternalSQLParser.g:9386:3: (enumLiteral_8= BETWEEN_1 )
                    {
                    // InternalSQLParser.g:9386:3: (enumLiteral_8= BETWEEN_1 )
                    // InternalSQLParser.g:9387:4: enumLiteral_8= BETWEEN_1
                    {
                    enumLiteral_8=(Token)match(input,BETWEEN_1,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getXFunctionAccess().getXbwnEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_8, grammarAccess.getXFunctionAccess().getXbwnEnumLiteralDeclaration_8());
                      			
                    }

                    }


                    }
                    break;
                case 10 :
                    // InternalSQLParser.g:9394:3: (enumLiteral_9= BETWEEN_4 )
                    {
                    // InternalSQLParser.g:9394:3: (enumLiteral_9= BETWEEN_4 )
                    // InternalSQLParser.g:9395:4: enumLiteral_9= BETWEEN_4
                    {
                    enumLiteral_9=(Token)match(input,BETWEEN_4,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getXFunctionAccess().getXbwncEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_9, grammarAccess.getXFunctionAccess().getXbwncEnumLiteralDeclaration_9());
                      			
                    }

                    }


                    }
                    break;
                case 11 :
                    // InternalSQLParser.g:9402:3: (enumLiteral_10= BETWEEN_3 )
                    {
                    // InternalSQLParser.g:9402:3: (enumLiteral_10= BETWEEN_3 )
                    // InternalSQLParser.g:9403:4: enumLiteral_10= BETWEEN_3
                    {
                    enumLiteral_10=(Token)match(input,BETWEEN_3,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getXFunctionAccess().getXbwnlEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_10, grammarAccess.getXFunctionAccess().getXbwnlEnumLiteralDeclaration_10());
                      			
                    }

                    }


                    }
                    break;
                case 12 :
                    // InternalSQLParser.g:9410:3: (enumLiteral_11= BETWEEN_2 )
                    {
                    // InternalSQLParser.g:9410:3: (enumLiteral_11= BETWEEN_2 )
                    // InternalSQLParser.g:9411:4: enumLiteral_11= BETWEEN_2
                    {
                    enumLiteral_11=(Token)match(input,BETWEEN_2,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getXFunctionAccess().getXbwnrEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_11, grammarAccess.getXFunctionAccess().getXbwnrEnumLiteralDeclaration_11());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleXFunction"


    // $ANTLR start "ruleEXTRACT_VALUES"
    // InternalSQLParser.g:9421:1: ruleEXTRACT_VALUES returns [Enumerator current=null] : ( (enumLiteral_0= MICROSECOND ) | (enumLiteral_1= SECOND ) | (enumLiteral_2= MINUTE ) | (enumLiteral_3= HOUR ) | (enumLiteral_4= DAY ) | (enumLiteral_5= WEEK ) | (enumLiteral_6= MONTH ) | (enumLiteral_7= QUARTER ) | (enumLiteral_8= YEAR ) | (enumLiteral_9= SECOND_MICROSECOND ) | (enumLiteral_10= MINUTE_MICROSECOND ) | (enumLiteral_11= MINUTE_SECOND ) | (enumLiteral_12= HOUR_MICROSECOND ) | (enumLiteral_13= HOUR_SECOND ) | (enumLiteral_14= HOUR_MINUTE ) | (enumLiteral_15= DAY_MICROSECOND ) | (enumLiteral_16= DAY_SECOND ) | (enumLiteral_17= DAY_MINUTE ) | (enumLiteral_18= DAY_HOUR ) | (enumLiteral_19= YEAR_MONTH ) ) ;
    public final Enumerator ruleEXTRACT_VALUES() throws RecognitionException {
        Enumerator current = null;

        Token enumLiteral_0=null;
        Token enumLiteral_1=null;
        Token enumLiteral_2=null;
        Token enumLiteral_3=null;
        Token enumLiteral_4=null;
        Token enumLiteral_5=null;
        Token enumLiteral_6=null;
        Token enumLiteral_7=null;
        Token enumLiteral_8=null;
        Token enumLiteral_9=null;
        Token enumLiteral_10=null;
        Token enumLiteral_11=null;
        Token enumLiteral_12=null;
        Token enumLiteral_13=null;
        Token enumLiteral_14=null;
        Token enumLiteral_15=null;
        Token enumLiteral_16=null;
        Token enumLiteral_17=null;
        Token enumLiteral_18=null;
        Token enumLiteral_19=null;


        	enterRule();

        try {
            // InternalSQLParser.g:9427:2: ( ( (enumLiteral_0= MICROSECOND ) | (enumLiteral_1= SECOND ) | (enumLiteral_2= MINUTE ) | (enumLiteral_3= HOUR ) | (enumLiteral_4= DAY ) | (enumLiteral_5= WEEK ) | (enumLiteral_6= MONTH ) | (enumLiteral_7= QUARTER ) | (enumLiteral_8= YEAR ) | (enumLiteral_9= SECOND_MICROSECOND ) | (enumLiteral_10= MINUTE_MICROSECOND ) | (enumLiteral_11= MINUTE_SECOND ) | (enumLiteral_12= HOUR_MICROSECOND ) | (enumLiteral_13= HOUR_SECOND ) | (enumLiteral_14= HOUR_MINUTE ) | (enumLiteral_15= DAY_MICROSECOND ) | (enumLiteral_16= DAY_SECOND ) | (enumLiteral_17= DAY_MINUTE ) | (enumLiteral_18= DAY_HOUR ) | (enumLiteral_19= YEAR_MONTH ) ) )
            // InternalSQLParser.g:9428:2: ( (enumLiteral_0= MICROSECOND ) | (enumLiteral_1= SECOND ) | (enumLiteral_2= MINUTE ) | (enumLiteral_3= HOUR ) | (enumLiteral_4= DAY ) | (enumLiteral_5= WEEK ) | (enumLiteral_6= MONTH ) | (enumLiteral_7= QUARTER ) | (enumLiteral_8= YEAR ) | (enumLiteral_9= SECOND_MICROSECOND ) | (enumLiteral_10= MINUTE_MICROSECOND ) | (enumLiteral_11= MINUTE_SECOND ) | (enumLiteral_12= HOUR_MICROSECOND ) | (enumLiteral_13= HOUR_SECOND ) | (enumLiteral_14= HOUR_MINUTE ) | (enumLiteral_15= DAY_MICROSECOND ) | (enumLiteral_16= DAY_SECOND ) | (enumLiteral_17= DAY_MINUTE ) | (enumLiteral_18= DAY_HOUR ) | (enumLiteral_19= YEAR_MONTH ) )
            {
            // InternalSQLParser.g:9428:2: ( (enumLiteral_0= MICROSECOND ) | (enumLiteral_1= SECOND ) | (enumLiteral_2= MINUTE ) | (enumLiteral_3= HOUR ) | (enumLiteral_4= DAY ) | (enumLiteral_5= WEEK ) | (enumLiteral_6= MONTH ) | (enumLiteral_7= QUARTER ) | (enumLiteral_8= YEAR ) | (enumLiteral_9= SECOND_MICROSECOND ) | (enumLiteral_10= MINUTE_MICROSECOND ) | (enumLiteral_11= MINUTE_SECOND ) | (enumLiteral_12= HOUR_MICROSECOND ) | (enumLiteral_13= HOUR_SECOND ) | (enumLiteral_14= HOUR_MINUTE ) | (enumLiteral_15= DAY_MICROSECOND ) | (enumLiteral_16= DAY_SECOND ) | (enumLiteral_17= DAY_MINUTE ) | (enumLiteral_18= DAY_HOUR ) | (enumLiteral_19= YEAR_MONTH ) )
            int alt162=20;
            switch ( input.LA(1) ) {
            case MICROSECOND:
                {
                alt162=1;
                }
                break;
            case SECOND:
                {
                alt162=2;
                }
                break;
            case MINUTE:
                {
                alt162=3;
                }
                break;
            case HOUR:
                {
                alt162=4;
                }
                break;
            case DAY:
                {
                alt162=5;
                }
                break;
            case WEEK:
                {
                alt162=6;
                }
                break;
            case MONTH:
                {
                alt162=7;
                }
                break;
            case QUARTER:
                {
                alt162=8;
                }
                break;
            case YEAR:
                {
                alt162=9;
                }
                break;
            case SECOND_MICROSECOND:
                {
                alt162=10;
                }
                break;
            case MINUTE_MICROSECOND:
                {
                alt162=11;
                }
                break;
            case MINUTE_SECOND:
                {
                alt162=12;
                }
                break;
            case HOUR_MICROSECOND:
                {
                alt162=13;
                }
                break;
            case HOUR_SECOND:
                {
                alt162=14;
                }
                break;
            case HOUR_MINUTE:
                {
                alt162=15;
                }
                break;
            case DAY_MICROSECOND:
                {
                alt162=16;
                }
                break;
            case DAY_SECOND:
                {
                alt162=17;
                }
                break;
            case DAY_MINUTE:
                {
                alt162=18;
                }
                break;
            case DAY_HOUR:
                {
                alt162=19;
                }
                break;
            case YEAR_MONTH:
                {
                alt162=20;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 162, 0, input);

                throw nvae;
            }

            switch (alt162) {
                case 1 :
                    // InternalSQLParser.g:9429:3: (enumLiteral_0= MICROSECOND )
                    {
                    // InternalSQLParser.g:9429:3: (enumLiteral_0= MICROSECOND )
                    // InternalSQLParser.g:9430:4: enumLiteral_0= MICROSECOND
                    {
                    enumLiteral_0=(Token)match(input,MICROSECOND,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEXTRACT_VALUESAccess().getMsEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getEXTRACT_VALUESAccess().getMsEnumLiteralDeclaration_0());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:9437:3: (enumLiteral_1= SECOND )
                    {
                    // InternalSQLParser.g:9437:3: (enumLiteral_1= SECOND )
                    // InternalSQLParser.g:9438:4: enumLiteral_1= SECOND
                    {
                    enumLiteral_1=(Token)match(input,SECOND,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEXTRACT_VALUESAccess().getSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getEXTRACT_VALUESAccess().getSEnumLiteralDeclaration_1());
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:9445:3: (enumLiteral_2= MINUTE )
                    {
                    // InternalSQLParser.g:9445:3: (enumLiteral_2= MINUTE )
                    // InternalSQLParser.g:9446:4: enumLiteral_2= MINUTE
                    {
                    enumLiteral_2=(Token)match(input,MINUTE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEXTRACT_VALUESAccess().getMEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_2, grammarAccess.getEXTRACT_VALUESAccess().getMEnumLiteralDeclaration_2());
                      			
                    }

                    }


                    }
                    break;
                case 4 :
                    // InternalSQLParser.g:9453:3: (enumLiteral_3= HOUR )
                    {
                    // InternalSQLParser.g:9453:3: (enumLiteral_3= HOUR )
                    // InternalSQLParser.g:9454:4: enumLiteral_3= HOUR
                    {
                    enumLiteral_3=(Token)match(input,HOUR,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEXTRACT_VALUESAccess().getHEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_3, grammarAccess.getEXTRACT_VALUESAccess().getHEnumLiteralDeclaration_3());
                      			
                    }

                    }


                    }
                    break;
                case 5 :
                    // InternalSQLParser.g:9461:3: (enumLiteral_4= DAY )
                    {
                    // InternalSQLParser.g:9461:3: (enumLiteral_4= DAY )
                    // InternalSQLParser.g:9462:4: enumLiteral_4= DAY
                    {
                    enumLiteral_4=(Token)match(input,DAY,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEXTRACT_VALUESAccess().getDayEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_4, grammarAccess.getEXTRACT_VALUESAccess().getDayEnumLiteralDeclaration_4());
                      			
                    }

                    }


                    }
                    break;
                case 6 :
                    // InternalSQLParser.g:9469:3: (enumLiteral_5= WEEK )
                    {
                    // InternalSQLParser.g:9469:3: (enumLiteral_5= WEEK )
                    // InternalSQLParser.g:9470:4: enumLiteral_5= WEEK
                    {
                    enumLiteral_5=(Token)match(input,WEEK,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEXTRACT_VALUESAccess().getWeekEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_5, grammarAccess.getEXTRACT_VALUESAccess().getWeekEnumLiteralDeclaration_5());
                      			
                    }

                    }


                    }
                    break;
                case 7 :
                    // InternalSQLParser.g:9477:3: (enumLiteral_6= MONTH )
                    {
                    // InternalSQLParser.g:9477:3: (enumLiteral_6= MONTH )
                    // InternalSQLParser.g:9478:4: enumLiteral_6= MONTH
                    {
                    enumLiteral_6=(Token)match(input,MONTH,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEXTRACT_VALUESAccess().getMonthEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_6, grammarAccess.getEXTRACT_VALUESAccess().getMonthEnumLiteralDeclaration_6());
                      			
                    }

                    }


                    }
                    break;
                case 8 :
                    // InternalSQLParser.g:9485:3: (enumLiteral_7= QUARTER )
                    {
                    // InternalSQLParser.g:9485:3: (enumLiteral_7= QUARTER )
                    // InternalSQLParser.g:9486:4: enumLiteral_7= QUARTER
                    {
                    enumLiteral_7=(Token)match(input,QUARTER,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEXTRACT_VALUESAccess().getQuartEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_7, grammarAccess.getEXTRACT_VALUESAccess().getQuartEnumLiteralDeclaration_7());
                      			
                    }

                    }


                    }
                    break;
                case 9 :
                    // InternalSQLParser.g:9493:3: (enumLiteral_8= YEAR )
                    {
                    // InternalSQLParser.g:9493:3: (enumLiteral_8= YEAR )
                    // InternalSQLParser.g:9494:4: enumLiteral_8= YEAR
                    {
                    enumLiteral_8=(Token)match(input,YEAR,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEXTRACT_VALUESAccess().getYearEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_8, grammarAccess.getEXTRACT_VALUESAccess().getYearEnumLiteralDeclaration_8());
                      			
                    }

                    }


                    }
                    break;
                case 10 :
                    // InternalSQLParser.g:9501:3: (enumLiteral_9= SECOND_MICROSECOND )
                    {
                    // InternalSQLParser.g:9501:3: (enumLiteral_9= SECOND_MICROSECOND )
                    // InternalSQLParser.g:9502:4: enumLiteral_9= SECOND_MICROSECOND
                    {
                    enumLiteral_9=(Token)match(input,SECOND_MICROSECOND,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEXTRACT_VALUESAccess().getMicrosEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_9, grammarAccess.getEXTRACT_VALUESAccess().getMicrosEnumLiteralDeclaration_9());
                      			
                    }

                    }


                    }
                    break;
                case 11 :
                    // InternalSQLParser.g:9509:3: (enumLiteral_10= MINUTE_MICROSECOND )
                    {
                    // InternalSQLParser.g:9509:3: (enumLiteral_10= MINUTE_MICROSECOND )
                    // InternalSQLParser.g:9510:4: enumLiteral_10= MINUTE_MICROSECOND
                    {
                    enumLiteral_10=(Token)match(input,MINUTE_MICROSECOND,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEXTRACT_VALUESAccess().getMinMicroEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_10, grammarAccess.getEXTRACT_VALUESAccess().getMinMicroEnumLiteralDeclaration_10());
                      			
                    }

                    }


                    }
                    break;
                case 12 :
                    // InternalSQLParser.g:9517:3: (enumLiteral_11= MINUTE_SECOND )
                    {
                    // InternalSQLParser.g:9517:3: (enumLiteral_11= MINUTE_SECOND )
                    // InternalSQLParser.g:9518:4: enumLiteral_11= MINUTE_SECOND
                    {
                    enumLiteral_11=(Token)match(input,MINUTE_SECOND,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEXTRACT_VALUESAccess().getMinSecEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_11, grammarAccess.getEXTRACT_VALUESAccess().getMinSecEnumLiteralDeclaration_11());
                      			
                    }

                    }


                    }
                    break;
                case 13 :
                    // InternalSQLParser.g:9525:3: (enumLiteral_12= HOUR_MICROSECOND )
                    {
                    // InternalSQLParser.g:9525:3: (enumLiteral_12= HOUR_MICROSECOND )
                    // InternalSQLParser.g:9526:4: enumLiteral_12= HOUR_MICROSECOND
                    {
                    enumLiteral_12=(Token)match(input,HOUR_MICROSECOND,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEXTRACT_VALUESAccess().getHmsEnumLiteralDeclaration_12().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_12, grammarAccess.getEXTRACT_VALUESAccess().getHmsEnumLiteralDeclaration_12());
                      			
                    }

                    }


                    }
                    break;
                case 14 :
                    // InternalSQLParser.g:9533:3: (enumLiteral_13= HOUR_SECOND )
                    {
                    // InternalSQLParser.g:9533:3: (enumLiteral_13= HOUR_SECOND )
                    // InternalSQLParser.g:9534:4: enumLiteral_13= HOUR_SECOND
                    {
                    enumLiteral_13=(Token)match(input,HOUR_SECOND,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEXTRACT_VALUESAccess().getHsEnumLiteralDeclaration_13().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_13, grammarAccess.getEXTRACT_VALUESAccess().getHsEnumLiteralDeclaration_13());
                      			
                    }

                    }


                    }
                    break;
                case 15 :
                    // InternalSQLParser.g:9541:3: (enumLiteral_14= HOUR_MINUTE )
                    {
                    // InternalSQLParser.g:9541:3: (enumLiteral_14= HOUR_MINUTE )
                    // InternalSQLParser.g:9542:4: enumLiteral_14= HOUR_MINUTE
                    {
                    enumLiteral_14=(Token)match(input,HOUR_MINUTE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEXTRACT_VALUESAccess().getHminEnumLiteralDeclaration_14().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_14, grammarAccess.getEXTRACT_VALUESAccess().getHminEnumLiteralDeclaration_14());
                      			
                    }

                    }


                    }
                    break;
                case 16 :
                    // InternalSQLParser.g:9549:3: (enumLiteral_15= DAY_MICROSECOND )
                    {
                    // InternalSQLParser.g:9549:3: (enumLiteral_15= DAY_MICROSECOND )
                    // InternalSQLParser.g:9550:4: enumLiteral_15= DAY_MICROSECOND
                    {
                    enumLiteral_15=(Token)match(input,DAY_MICROSECOND,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEXTRACT_VALUESAccess().getDmsEnumLiteralDeclaration_15().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_15, grammarAccess.getEXTRACT_VALUESAccess().getDmsEnumLiteralDeclaration_15());
                      			
                    }

                    }


                    }
                    break;
                case 17 :
                    // InternalSQLParser.g:9557:3: (enumLiteral_16= DAY_SECOND )
                    {
                    // InternalSQLParser.g:9557:3: (enumLiteral_16= DAY_SECOND )
                    // InternalSQLParser.g:9558:4: enumLiteral_16= DAY_SECOND
                    {
                    enumLiteral_16=(Token)match(input,DAY_SECOND,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEXTRACT_VALUESAccess().getDsEnumLiteralDeclaration_16().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_16, grammarAccess.getEXTRACT_VALUESAccess().getDsEnumLiteralDeclaration_16());
                      			
                    }

                    }


                    }
                    break;
                case 18 :
                    // InternalSQLParser.g:9565:3: (enumLiteral_17= DAY_MINUTE )
                    {
                    // InternalSQLParser.g:9565:3: (enumLiteral_17= DAY_MINUTE )
                    // InternalSQLParser.g:9566:4: enumLiteral_17= DAY_MINUTE
                    {
                    enumLiteral_17=(Token)match(input,DAY_MINUTE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEXTRACT_VALUESAccess().getDayminEnumLiteralDeclaration_17().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_17, grammarAccess.getEXTRACT_VALUESAccess().getDayminEnumLiteralDeclaration_17());
                      			
                    }

                    }


                    }
                    break;
                case 19 :
                    // InternalSQLParser.g:9573:3: (enumLiteral_18= DAY_HOUR )
                    {
                    // InternalSQLParser.g:9573:3: (enumLiteral_18= DAY_HOUR )
                    // InternalSQLParser.g:9574:4: enumLiteral_18= DAY_HOUR
                    {
                    enumLiteral_18=(Token)match(input,DAY_HOUR,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEXTRACT_VALUESAccess().getDayhEnumLiteralDeclaration_18().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_18, grammarAccess.getEXTRACT_VALUESAccess().getDayhEnumLiteralDeclaration_18());
                      			
                    }

                    }


                    }
                    break;
                case 20 :
                    // InternalSQLParser.g:9581:3: (enumLiteral_19= YEAR_MONTH )
                    {
                    // InternalSQLParser.g:9581:3: (enumLiteral_19= YEAR_MONTH )
                    // InternalSQLParser.g:9582:4: enumLiteral_19= YEAR_MONTH
                    {
                    enumLiteral_19=(Token)match(input,YEAR_MONTH,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEXTRACT_VALUESAccess().getYearMonthEnumLiteralDeclaration_19().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_19, grammarAccess.getEXTRACT_VALUESAccess().getYearMonthEnumLiteralDeclaration_19());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleEXTRACT_VALUES"

    // $ANTLR start synpred85_InternalSQLParser
    public final void synpred85_InternalSQLParser_fragment() throws RecognitionException {   
        EObject lv_tblAlias_6_0 = null;


        // InternalSQLParser.g:2996:4: ( (lv_tblAlias_6_0= ruleDbObjectName ) )
        // InternalSQLParser.g:2996:4: (lv_tblAlias_6_0= ruleDbObjectName )
        {
        // InternalSQLParser.g:2996:4: (lv_tblAlias_6_0= ruleDbObjectName )
        // InternalSQLParser.g:2997:5: lv_tblAlias_6_0= ruleDbObjectName
        {
        if ( state.backtracking==0 ) {

          					newCompositeNode(grammarAccess.getTableOrAliasAccess().getTblAliasDbObjectNameParserRuleCall_3_0());
          				
        }
        pushFollow(FOLLOW_2);
        lv_tblAlias_6_0=ruleDbObjectName();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred85_InternalSQLParser

    // $ANTLR start synpred86_InternalSQLParser
    public final void synpred86_InternalSQLParser_fragment() throws RecognitionException {   
        EObject lv_c_1_0 = null;


        // InternalSQLParser.g:3053:4: ( (lv_c_1_0= ruleFromValuesColumns ) )
        // InternalSQLParser.g:3053:4: (lv_c_1_0= ruleFromValuesColumns )
        {
        // InternalSQLParser.g:3053:4: (lv_c_1_0= ruleFromValuesColumns )
        // InternalSQLParser.g:3054:5: lv_c_1_0= ruleFromValuesColumns
        {
        if ( state.backtracking==0 ) {

          					newCompositeNode(grammarAccess.getFromValuesAccess().getCFromValuesColumnsParserRuleCall_1_0());
          				
        }
        pushFollow(FOLLOW_2);
        lv_c_1_0=ruleFromValuesColumns();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred86_InternalSQLParser

    // $ANTLR start synpred120_InternalSQLParser
    public final void synpred120_InternalSQLParser_fragment() throws RecognitionException {   
        EObject lv_entries_2_0 = null;


        // InternalSQLParser.g:4792:5: ( (lv_entries_2_0= ruleExpressionFragmentSecond ) )
        // InternalSQLParser.g:4792:5: (lv_entries_2_0= ruleExpressionFragmentSecond )
        {
        // InternalSQLParser.g:4792:5: (lv_entries_2_0= ruleExpressionFragmentSecond )
        // InternalSQLParser.g:4793:6: lv_entries_2_0= ruleExpressionFragmentSecond
        {
        if ( state.backtracking==0 ) {

          						newCompositeNode(grammarAccess.getFullExpressionAccess().getEntriesExpressionFragmentSecondParserRuleCall_1_1_0());
          					
        }
        pushFollow(FOLLOW_2);
        lv_entries_2_0=ruleExpressionFragmentSecond();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred120_InternalSQLParser

    // $ANTLR start synpred121_InternalSQLParser
    public final void synpred121_InternalSQLParser_fragment() throws RecognitionException {   
        EObject lv_entries_2_0 = null;


        // InternalSQLParser.g:4781:4: ( () ( (lv_entries_2_0= ruleExpressionFragmentSecond ) )+ )
        // InternalSQLParser.g:4781:4: () ( (lv_entries_2_0= ruleExpressionFragmentSecond ) )+
        {
        // InternalSQLParser.g:4781:4: ()
        // InternalSQLParser.g:4782:5: 
        {
        if ( state.backtracking==0 ) {

          					/* */
          				
        }

        }

        // InternalSQLParser.g:4791:4: ( (lv_entries_2_0= ruleExpressionFragmentSecond ) )+
        int cnt184=0;
        loop184:
        do {
            int alt184=2;
            int LA184_0 = input.LA(1);

            if ( (LA184_0==AND||LA184_0==OR||LA184_0==RULE_JRNPARAM) ) {
                alt184=1;
            }


            switch (alt184) {
        	case 1 :
        	    // InternalSQLParser.g:4792:5: (lv_entries_2_0= ruleExpressionFragmentSecond )
        	    {
        	    // InternalSQLParser.g:4792:5: (lv_entries_2_0= ruleExpressionFragmentSecond )
        	    // InternalSQLParser.g:4793:6: lv_entries_2_0= ruleExpressionFragmentSecond
        	    {
        	    if ( state.backtracking==0 ) {

        	      						newCompositeNode(grammarAccess.getFullExpressionAccess().getEntriesExpressionFragmentSecondParserRuleCall_1_1_0());
        	      					
        	    }
        	    pushFollow(FOLLOW_71);
        	    lv_entries_2_0=ruleExpressionFragmentSecond();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt184 >= 1 ) break loop184;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(184, input);
                    throw eee;
            }
            cnt184++;
        } while (true);


        }
    }
    // $ANTLR end synpred121_InternalSQLParser

    // $ANTLR start synpred169_InternalSQLParser
    public final void synpred169_InternalSQLParser_fragment() throws RecognitionException {   
        EObject lv_column_0_0 = null;


        // InternalSQLParser.g:6675:3: ( ( (lv_column_0_0= ruleColumnOperand ) ) )
        // InternalSQLParser.g:6675:3: ( (lv_column_0_0= ruleColumnOperand ) )
        {
        // InternalSQLParser.g:6675:3: ( (lv_column_0_0= ruleColumnOperand ) )
        // InternalSQLParser.g:6676:4: (lv_column_0_0= ruleColumnOperand )
        {
        // InternalSQLParser.g:6676:4: (lv_column_0_0= ruleColumnOperand )
        // InternalSQLParser.g:6677:5: lv_column_0_0= ruleColumnOperand
        {
        if ( state.backtracking==0 ) {

          					newCompositeNode(grammarAccess.getOperandFragmentAccess().getColumnColumnOperandParserRuleCall_0_0());
          				
        }
        pushFollow(FOLLOW_2);
        lv_column_0_0=ruleColumnOperand();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    // $ANTLR end synpred169_InternalSQLParser

    // $ANTLR start synpred174_InternalSQLParser
    public final void synpred174_InternalSQLParser_fragment() throws RecognitionException {   
        EObject lv_func_5_0 = null;


        // InternalSQLParser.g:6775:3: ( ( (lv_func_5_0= ruleOperandFunction ) ) )
        // InternalSQLParser.g:6775:3: ( (lv_func_5_0= ruleOperandFunction ) )
        {
        // InternalSQLParser.g:6775:3: ( (lv_func_5_0= ruleOperandFunction ) )
        // InternalSQLParser.g:6776:4: (lv_func_5_0= ruleOperandFunction )
        {
        // InternalSQLParser.g:6776:4: (lv_func_5_0= ruleOperandFunction )
        // InternalSQLParser.g:6777:5: lv_func_5_0= ruleOperandFunction
        {
        if ( state.backtracking==0 ) {

          					newCompositeNode(grammarAccess.getOperandFragmentAccess().getFuncOperandFunctionParserRuleCall_5_0());
          				
        }
        pushFollow(FOLLOW_2);
        lv_func_5_0=ruleOperandFunction();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    // $ANTLR end synpred174_InternalSQLParser

    // $ANTLR start synpred216_InternalSQLParser
    public final void synpred216_InternalSQLParser_fragment() throws RecognitionException {   
        EObject lv_wop_1_0 = null;


        // InternalSQLParser.g:8589:4: ( ( (lv_wop_1_0= ruleOperandGroup ) ) )
        // InternalSQLParser.g:8589:4: ( (lv_wop_1_0= ruleOperandGroup ) )
        {
        // InternalSQLParser.g:8589:4: ( (lv_wop_1_0= ruleOperandGroup ) )
        // InternalSQLParser.g:8590:5: (lv_wop_1_0= ruleOperandGroup )
        {
        // InternalSQLParser.g:8590:5: (lv_wop_1_0= ruleOperandGroup )
        // InternalSQLParser.g:8591:6: lv_wop_1_0= ruleOperandGroup
        {
        if ( state.backtracking==0 ) {

          						newCompositeNode(grammarAccess.getSQLCASEAccess().getWopOperandGroupParserRuleCall_1_0_0());
          					
        }
        pushFollow(FOLLOW_2);
        lv_wop_1_0=ruleOperandGroup();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    // $ANTLR end synpred216_InternalSQLParser

    // $ANTLR start synpred217_InternalSQLParser
    public final void synpred217_InternalSQLParser_fragment() throws RecognitionException {   
        EObject lv_expr_2_0 = null;


        // InternalSQLParser.g:8609:4: ( ( (lv_expr_2_0= ruleFullExpression ) ) )
        // InternalSQLParser.g:8609:4: ( (lv_expr_2_0= ruleFullExpression ) )
        {
        // InternalSQLParser.g:8609:4: ( (lv_expr_2_0= ruleFullExpression ) )
        // InternalSQLParser.g:8610:5: (lv_expr_2_0= ruleFullExpression )
        {
        // InternalSQLParser.g:8610:5: (lv_expr_2_0= ruleFullExpression )
        // InternalSQLParser.g:8611:6: lv_expr_2_0= ruleFullExpression
        {
        if ( state.backtracking==0 ) {

          						newCompositeNode(grammarAccess.getSQLCASEAccess().getExprFullExpressionParserRuleCall_1_1_0());
          					
        }
        pushFollow(FOLLOW_2);
        lv_expr_2_0=ruleFullExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    // $ANTLR end synpred217_InternalSQLParser

    // $ANTLR start synpred220_InternalSQLParser
    public final void synpred220_InternalSQLParser_fragment() throws RecognitionException {   
        EObject lv_wop_1_0 = null;


        // InternalSQLParser.g:8737:4: ( ( (lv_wop_1_0= ruleOperandGroup ) ) )
        // InternalSQLParser.g:8737:4: ( (lv_wop_1_0= ruleOperandGroup ) )
        {
        // InternalSQLParser.g:8737:4: ( (lv_wop_1_0= ruleOperandGroup ) )
        // InternalSQLParser.g:8738:5: (lv_wop_1_0= ruleOperandGroup )
        {
        // InternalSQLParser.g:8738:5: (lv_wop_1_0= ruleOperandGroup )
        // InternalSQLParser.g:8739:6: lv_wop_1_0= ruleOperandGroup
        {
        if ( state.backtracking==0 ) {

          						newCompositeNode(grammarAccess.getSqlCaseWhenAccess().getWopOperandGroupParserRuleCall_1_0_0());
          					
        }
        pushFollow(FOLLOW_2);
        lv_wop_1_0=ruleOperandGroup();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    // $ANTLR end synpred220_InternalSQLParser

    // Delegated rules

    public final boolean synpred120_InternalSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred120_InternalSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred169_InternalSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred169_InternalSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred86_InternalSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred86_InternalSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred216_InternalSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred216_InternalSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred217_InternalSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred217_InternalSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred85_InternalSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred85_InternalSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred220_InternalSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred220_InternalSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred121_InternalSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred121_InternalSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred174_InternalSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred174_InternalSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA53 dfa53 = new DFA53(this);
    protected DFA54 dfa54 = new DFA54(this);
    protected DFA87 dfa87 = new DFA87(this);
    protected DFA86 dfa86 = new DFA86(this);
    protected DFA91 dfa91 = new DFA91(this);
    protected DFA90 dfa90 = new DFA90(this);
    protected DFA115 dfa115 = new DFA115(this);
    protected DFA147 dfa147 = new DFA147(this);
    protected DFA150 dfa150 = new DFA150(this);
    static final String dfa_1s = "\50\uffff";
    static final String dfa_2s = "\1\4\47\uffff";
    static final String dfa_3s = "\1\12\3\0\44\uffff";
    static final String dfa_4s = "\1\u00b7\3\0\44\uffff";
    static final String dfa_5s = "\4\uffff\1\2\42\uffff\1\1";
    static final String dfa_6s = "\1\uffff\1\0\1\1\1\2\44\uffff}>";
    static final String[] dfa_7s = {
            "\1\4\11\uffff\1\4\31\uffff\1\4\2\uffff\1\4\13\uffff\1\4\1\uffff\1\4\2\uffff\1\4\10\uffff\2\4\1\uffff\1\4\2\uffff\4\4\3\uffff\1\4\3\uffff\1\4\1\uffff\3\4\3\uffff\1\4\5\uffff\1\4\2\uffff\1\4\1\uffff\1\4\52\uffff\1\4\3\uffff\2\4\1\uffff\1\4\10\uffff\6\4\4\uffff\1\4\1\3\1\2\1\1",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_1 = DFA.unpackEncodedString(dfa_1s);
    static final short[] dfa_2 = DFA.unpackEncodedString(dfa_2s);
    static final char[] dfa_3 = DFA.unpackEncodedStringToUnsignedChars(dfa_3s);
    static final char[] dfa_4 = DFA.unpackEncodedStringToUnsignedChars(dfa_4s);
    static final short[] dfa_5 = DFA.unpackEncodedString(dfa_5s);
    static final short[] dfa_6 = DFA.unpackEncodedString(dfa_6s);
    static final short[][] dfa_7 = unpackEncodedStringArray(dfa_7s);

    class DFA53 extends DFA {

        public DFA53(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 53;
            this.eot = dfa_1;
            this.eof = dfa_2;
            this.min = dfa_3;
            this.max = dfa_4;
            this.accept = dfa_5;
            this.special = dfa_6;
            this.transition = dfa_7;
        }
        public String getDescription() {
            return "2995:3: ( (lv_tblAlias_6_0= ruleDbObjectName ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA53_1 = input.LA(1);

                         
                        int index53_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred85_InternalSQLParser()) ) {s = 39;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index53_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA53_2 = input.LA(1);

                         
                        int index53_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred85_InternalSQLParser()) ) {s = 39;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index53_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA53_3 = input.LA(1);

                         
                        int index53_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred85_InternalSQLParser()) ) {s = 39;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index53_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 53, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_8s = "\53\uffff";
    static final String dfa_9s = "\1\2\52\uffff";
    static final String dfa_10s = "\1\12\1\0\51\uffff";
    static final String dfa_11s = "\1\u00b7\1\0\51\uffff";
    static final String dfa_12s = "\2\uffff\1\2\47\uffff\1\1";
    static final String dfa_13s = "\1\uffff\1\0\51\uffff}>";
    static final String[] dfa_14s = {
            "\1\2\11\uffff\1\2\31\uffff\1\2\2\uffff\1\2\5\uffff\1\2\5\uffff\1\2\1\uffff\1\2\2\uffff\1\2\10\uffff\2\2\1\uffff\1\2\2\uffff\4\2\3\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\3\2\3\uffff\1\2\5\uffff\1\2\2\uffff\1\2\1\uffff\1\2\46\uffff\1\2\3\uffff\1\2\3\uffff\2\2\1\uffff\1\2\10\uffff\6\2\4\uffff\3\2\1\1",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_8 = DFA.unpackEncodedString(dfa_8s);
    static final short[] dfa_9 = DFA.unpackEncodedString(dfa_9s);
    static final char[] dfa_10 = DFA.unpackEncodedStringToUnsignedChars(dfa_10s);
    static final char[] dfa_11 = DFA.unpackEncodedStringToUnsignedChars(dfa_11s);
    static final short[] dfa_12 = DFA.unpackEncodedString(dfa_12s);
    static final short[] dfa_13 = DFA.unpackEncodedString(dfa_13s);
    static final short[][] dfa_14 = unpackEncodedStringArray(dfa_14s);

    class DFA54 extends DFA {

        public DFA54(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 54;
            this.eot = dfa_8;
            this.eof = dfa_9;
            this.min = dfa_10;
            this.max = dfa_11;
            this.accept = dfa_12;
            this.special = dfa_13;
            this.transition = dfa_14;
        }
        public String getDescription() {
            return "3052:3: ( (lv_c_1_0= ruleFromValuesColumns ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA54_1 = input.LA(1);

                         
                        int index54_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred86_InternalSQLParser()) ) {s = 42;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index54_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 54, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_15s = "\51\uffff";
    static final String dfa_16s = "\1\4\50\uffff";
    static final String dfa_17s = "\1\12\2\uffff\1\0\45\uffff";
    static final String dfa_18s = "\1\u00b7\2\uffff\1\0\45\uffff";
    static final String dfa_19s = "\1\uffff\1\1\2\uffff\1\2\44\uffff";
    static final String dfa_20s = "\3\uffff\1\0\45\uffff}>";
    static final String[] dfa_21s = {
            "\1\4\11\uffff\1\4\31\uffff\1\4\2\uffff\1\4\13\uffff\1\4\1\uffff\1\4\2\uffff\1\4\10\uffff\2\4\1\uffff\1\4\2\uffff\4\4\3\uffff\1\4\3\uffff\1\4\1\uffff\1\4\1\uffff\1\4\3\uffff\1\4\5\uffff\1\4\2\uffff\1\4\1\uffff\1\4\11\uffff\1\4\4\uffff\1\4\4\uffff\1\1\27\uffff\1\1\2\uffff\2\4\1\uffff\1\4\10\uffff\1\4\1\3\4\4\4\uffff\4\4",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_15 = DFA.unpackEncodedString(dfa_15s);
    static final short[] dfa_16 = DFA.unpackEncodedString(dfa_16s);
    static final char[] dfa_17 = DFA.unpackEncodedStringToUnsignedChars(dfa_17s);
    static final char[] dfa_18 = DFA.unpackEncodedStringToUnsignedChars(dfa_18s);
    static final short[] dfa_19 = DFA.unpackEncodedString(dfa_19s);
    static final short[] dfa_20 = DFA.unpackEncodedString(dfa_20s);
    static final short[][] dfa_21 = unpackEncodedStringArray(dfa_21s);

    class DFA87 extends DFA {

        public DFA87(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 87;
            this.eot = dfa_15;
            this.eof = dfa_16;
            this.min = dfa_17;
            this.max = dfa_18;
            this.accept = dfa_19;
            this.special = dfa_20;
            this.transition = dfa_21;
        }
        public String getDescription() {
            return "4780:3: ( () ( (lv_entries_2_0= ruleExpressionFragmentSecond ) )+ )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA87_3 = input.LA(1);

                         
                        int index87_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred121_InternalSQLParser()) ) {s = 1;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index87_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 87, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_22s = "\1\1\50\uffff";
    static final String dfa_23s = "\1\12\21\uffff\1\0\26\uffff";
    static final String dfa_24s = "\1\u00b7\21\uffff\1\0\26\uffff";
    static final String dfa_25s = "\1\uffff\1\2\45\uffff\1\1\1\uffff";
    static final String dfa_26s = "\22\uffff\1\0\26\uffff}>";
    static final String[] dfa_27s = {
            "\1\1\11\uffff\1\1\31\uffff\1\1\2\uffff\1\1\13\uffff\1\1\1\uffff\1\1\2\uffff\1\1\10\uffff\2\1\1\uffff\1\1\2\uffff\4\1\3\uffff\1\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\5\uffff\1\1\2\uffff\1\1\1\uffff\1\1\11\uffff\1\1\4\uffff\1\1\4\uffff\1\47\27\uffff\1\47\2\uffff\2\1\1\uffff\1\1\10\uffff\1\1\1\22\4\1\4\uffff\4\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_22 = DFA.unpackEncodedString(dfa_22s);
    static final char[] dfa_23 = DFA.unpackEncodedStringToUnsignedChars(dfa_23s);
    static final char[] dfa_24 = DFA.unpackEncodedStringToUnsignedChars(dfa_24s);
    static final short[] dfa_25 = DFA.unpackEncodedString(dfa_25s);
    static final short[] dfa_26 = DFA.unpackEncodedString(dfa_26s);
    static final short[][] dfa_27 = unpackEncodedStringArray(dfa_27s);

    class DFA86 extends DFA {

        public DFA86(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 86;
            this.eot = dfa_15;
            this.eof = dfa_22;
            this.min = dfa_23;
            this.max = dfa_24;
            this.accept = dfa_25;
            this.special = dfa_26;
            this.transition = dfa_27;
        }
        public String getDescription() {
            return "()+ loopback of 4791:4: ( (lv_entries_2_0= ruleExpressionFragmentSecond ) )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA86_18 = input.LA(1);

                         
                        int index86_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_InternalSQLParser()) ) {s = 39;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index86_18);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 86, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_28s = "\14\uffff";
    static final String dfa_29s = "\5\uffff\1\12\6\uffff";
    static final String dfa_30s = "\1\56\1\76\1\uffff\1\56\1\uffff\1\12\3\uffff\1\56\1\uffff\1\104";
    static final String dfa_31s = "\1\u00b7\1\u009e\1\uffff\1\u00b7\1\uffff\1\u00b7\3\uffff\1\u00b7\1\uffff\1\107";
    static final String dfa_32s = "\2\uffff\1\1\1\uffff\1\2\1\uffff\1\3\1\5\1\6\1\uffff\1\4\1\uffff";
    static final String dfa_33s = "\14\uffff}>";
    static final String[] dfa_34s = {
            "\1\4\17\uffff\1\10\14\uffff\1\4\30\uffff\1\4\14\uffff\1\2\32\uffff\1\1\5\uffff\1\6\5\uffff\1\7\5\uffff\1\3\13\uffff\1\4\1\5\1\uffff\3\4\4\uffff\4\4",
            "\1\10\131\uffff\1\7\5\uffff\1\2",
            "",
            "\1\2\17\uffff\1\2\5\uffff\1\4\6\uffff\1\2\30\uffff\1\2\14\uffff\1\2\32\uffff\1\2\5\uffff\1\2\5\uffff\1\2\5\uffff\1\2\13\uffff\2\2\1\uffff\3\2\4\uffff\4\2",
            "",
            "\1\12\11\uffff\1\12\23\uffff\1\4\5\uffff\1\12\2\uffff\1\12\13\uffff\1\12\1\4\1\12\2\uffff\1\12\10\uffff\2\12\1\uffff\1\12\2\uffff\4\12\3\uffff\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\3\uffff\1\12\5\uffff\1\12\2\uffff\1\12\1\uffff\1\12\1\4\10\uffff\1\12\4\uffff\1\12\4\uffff\1\12\10\uffff\1\4\4\uffff\1\4\1\uffff\3\4\2\uffff\2\4\1\uffff\1\12\2\4\2\12\1\4\1\12\1\4\1\uffff\4\4\2\uffff\2\12\1\11\3\12\4\uffff\4\12",
            "",
            "",
            "",
            "\1\4\34\uffff\1\4\30\uffff\1\4\71\uffff\1\13\2\uffff\1\12\10\uffff\2\4\1\uffff\3\4\4\uffff\4\4",
            "",
            "\1\4\2\uffff\1\12"
    };

    static final short[] dfa_28 = DFA.unpackEncodedString(dfa_28s);
    static final short[] dfa_29 = DFA.unpackEncodedString(dfa_29s);
    static final char[] dfa_30 = DFA.unpackEncodedStringToUnsignedChars(dfa_30s);
    static final char[] dfa_31 = DFA.unpackEncodedStringToUnsignedChars(dfa_31s);
    static final short[] dfa_32 = DFA.unpackEncodedString(dfa_32s);
    static final short[] dfa_33 = DFA.unpackEncodedString(dfa_33s);
    static final short[][] dfa_34 = unpackEncodedStringArray(dfa_34s);

    class DFA91 extends DFA {

        public DFA91(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 91;
            this.eot = dfa_28;
            this.eof = dfa_29;
            this.min = dfa_30;
            this.max = dfa_31;
            this.accept = dfa_32;
            this.special = dfa_33;
            this.transition = dfa_34;
        }
        public String getDescription() {
            return "4915:2: ( ( (lv_expgroup_0_0= ruleExpressionGroup ) ) | ( (lv_exp_1_0= ruleExpression ) ) | ( ( (lv_xexp_2_1= ruleXExpression | lv_xexp_2_2= ruleXExpression_ ) ) ) | ( (lv_notPrm_3_0= RULE_JRNPARAM ) ) | ( (lv_in_4_0= ruleInOperator ) ) | ( (lv_exists_5_0= ruleExistsOperator ) ) )";
        }
    }
    static final String dfa_35s = "\20\uffff";
    static final String dfa_36s = "\1\u0092\1\22\14\u00a1\2\uffff";
    static final String dfa_37s = "\1\u0092\1\u0090\14\u00a8\2\uffff";
    static final String dfa_38s = "\16\uffff\1\1\1\2";
    static final String dfa_39s = "\20\uffff}>";
    static final String[] dfa_40s = {
            "\1\1",
            "\1\13\10\uffff\1\15\1\5\1\14\1\10\7\uffff\1\12\1\11\40\uffff\1\4\1\7\1\3\26\uffff\1\6\56\uffff\1\2",
            "\1\16\6\uffff\1\17",
            "\1\16\6\uffff\1\17",
            "\1\16\6\uffff\1\17",
            "\1\16\6\uffff\1\17",
            "\1\16\6\uffff\1\17",
            "\1\16\6\uffff\1\17",
            "\1\16\6\uffff\1\17",
            "\1\16\6\uffff\1\17",
            "\1\16\6\uffff\1\17",
            "\1\16\6\uffff\1\17",
            "\1\16\6\uffff\1\17",
            "\1\16\6\uffff\1\17",
            "",
            ""
    };

    static final short[] dfa_35 = DFA.unpackEncodedString(dfa_35s);
    static final char[] dfa_36 = DFA.unpackEncodedStringToUnsignedChars(dfa_36s);
    static final char[] dfa_37 = DFA.unpackEncodedStringToUnsignedChars(dfa_37s);
    static final short[] dfa_38 = DFA.unpackEncodedString(dfa_38s);
    static final short[] dfa_39 = DFA.unpackEncodedString(dfa_39s);
    static final short[][] dfa_40 = unpackEncodedStringArray(dfa_40s);

    class DFA90 extends DFA {

        public DFA90(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 90;
            this.eot = dfa_35;
            this.eof = dfa_35;
            this.min = dfa_36;
            this.max = dfa_37;
            this.accept = dfa_38;
            this.special = dfa_39;
            this.transition = dfa_40;
        }
        public String getDescription() {
            return "4958:5: (lv_xexp_2_1= ruleXExpression | lv_xexp_2_2= ruleXExpression_ )";
        }
    }
    static final String dfa_41s = "\17\uffff";
    static final String dfa_42s = "\1\56\1\0\15\uffff";
    static final String dfa_43s = "\1\u00b7\1\0\15\uffff";
    static final String dfa_44s = "\2\uffff\1\1\1\uffff\1\2\5\uffff\1\3\1\4\1\5\1\7\1\6";
    static final String dfa_45s = "\1\uffff\1\0\15\uffff}>";
    static final String[] dfa_46s = {
            "\1\14\34\uffff\1\13\30\uffff\1\15\71\uffff\1\12\13\uffff\2\4\1\uffff\3\4\4\uffff\1\4\2\2\1\1",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_41 = DFA.unpackEncodedString(dfa_41s);
    static final char[] dfa_42 = DFA.unpackEncodedStringToUnsignedChars(dfa_42s);
    static final char[] dfa_43 = DFA.unpackEncodedStringToUnsignedChars(dfa_43s);
    static final short[] dfa_44 = DFA.unpackEncodedString(dfa_44s);
    static final short[] dfa_45 = DFA.unpackEncodedString(dfa_45s);
    static final short[][] dfa_46 = unpackEncodedStringArray(dfa_46s);

    class DFA115 extends DFA {

        public DFA115(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 115;
            this.eot = dfa_41;
            this.eof = dfa_41;
            this.min = dfa_42;
            this.max = dfa_43;
            this.accept = dfa_44;
            this.special = dfa_45;
            this.transition = dfa_46;
        }
        public String getDescription() {
            return "6674:2: ( ( (lv_column_0_0= ruleColumnOperand ) ) | ( (lv_xop_1_0= ruleXOperandFragment ) ) | ( (lv_subq_2_0= ruleSubQueryOperand ) ) | ( (lv_fcast_3_0= ruleOpFunctionCast ) ) | ( (lv_fext_4_0= ruleFunctionExtract ) ) | ( (lv_func_5_0= ruleOperandFunction ) ) | ( (lv_sqlcase_6_0= ruleSQLCASE ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA115_1 = input.LA(1);

                         
                        int index115_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred169_InternalSQLParser()) ) {s = 2;}

                        else if ( (synpred174_InternalSQLParser()) ) {s = 14;}

                         
                        input.seek(index115_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 115, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_47s = "\25\uffff";
    static final String dfa_48s = "\1\56\15\0\7\uffff";
    static final String dfa_49s = "\1\u00b7\15\0\7\uffff";
    static final String dfa_50s = "\16\uffff\1\2\4\uffff\1\3\1\1";
    static final String dfa_51s = "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\7\uffff}>";
    static final String[] dfa_52s = {
            "\1\14\17\uffff\1\16\14\uffff\1\13\30\uffff\1\15\14\uffff\1\16\14\uffff\1\23\15\uffff\1\16\5\uffff\1\16\5\uffff\1\16\5\uffff\1\12\13\uffff\1\4\1\5\1\uffff\1\6\1\7\1\10\4\uffff\1\11\1\3\1\2\1\1",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_47 = DFA.unpackEncodedString(dfa_47s);
    static final char[] dfa_48 = DFA.unpackEncodedStringToUnsignedChars(dfa_48s);
    static final char[] dfa_49 = DFA.unpackEncodedStringToUnsignedChars(dfa_49s);
    static final short[] dfa_50 = DFA.unpackEncodedString(dfa_50s);
    static final short[] dfa_51 = DFA.unpackEncodedString(dfa_51s);
    static final short[][] dfa_52 = unpackEncodedStringArray(dfa_52s);

    class DFA147 extends DFA {

        public DFA147(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 147;
            this.eot = dfa_47;
            this.eof = dfa_47;
            this.min = dfa_48;
            this.max = dfa_49;
            this.accept = dfa_50;
            this.special = dfa_51;
            this.transition = dfa_52;
        }
        public String getDescription() {
            return "8588:3: ( ( (lv_wop_1_0= ruleOperandGroup ) ) | ( (lv_expr_2_0= ruleFullExpression ) ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA147_1 = input.LA(1);

                         
                        int index147_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred216_InternalSQLParser()) ) {s = 20;}

                        else if ( (synpred217_InternalSQLParser()) ) {s = 14;}

                         
                        input.seek(index147_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA147_2 = input.LA(1);

                         
                        int index147_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred216_InternalSQLParser()) ) {s = 20;}

                        else if ( (synpred217_InternalSQLParser()) ) {s = 14;}

                         
                        input.seek(index147_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA147_3 = input.LA(1);

                         
                        int index147_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred216_InternalSQLParser()) ) {s = 20;}

                        else if ( (synpred217_InternalSQLParser()) ) {s = 14;}

                         
                        input.seek(index147_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA147_4 = input.LA(1);

                         
                        int index147_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred216_InternalSQLParser()) ) {s = 20;}

                        else if ( (synpred217_InternalSQLParser()) ) {s = 14;}

                         
                        input.seek(index147_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA147_5 = input.LA(1);

                         
                        int index147_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred216_InternalSQLParser()) ) {s = 20;}

                        else if ( (synpred217_InternalSQLParser()) ) {s = 14;}

                         
                        input.seek(index147_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA147_6 = input.LA(1);

                         
                        int index147_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred216_InternalSQLParser()) ) {s = 20;}

                        else if ( (synpred217_InternalSQLParser()) ) {s = 14;}

                         
                        input.seek(index147_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA147_7 = input.LA(1);

                         
                        int index147_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred216_InternalSQLParser()) ) {s = 20;}

                        else if ( (synpred217_InternalSQLParser()) ) {s = 14;}

                         
                        input.seek(index147_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA147_8 = input.LA(1);

                         
                        int index147_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred216_InternalSQLParser()) ) {s = 20;}

                        else if ( (synpred217_InternalSQLParser()) ) {s = 14;}

                         
                        input.seek(index147_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA147_9 = input.LA(1);

                         
                        int index147_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred216_InternalSQLParser()) ) {s = 20;}

                        else if ( (synpred217_InternalSQLParser()) ) {s = 14;}

                         
                        input.seek(index147_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA147_10 = input.LA(1);

                         
                        int index147_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred216_InternalSQLParser()) ) {s = 20;}

                        else if ( (synpred217_InternalSQLParser()) ) {s = 14;}

                         
                        input.seek(index147_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA147_11 = input.LA(1);

                         
                        int index147_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred216_InternalSQLParser()) ) {s = 20;}

                        else if ( (synpred217_InternalSQLParser()) ) {s = 14;}

                         
                        input.seek(index147_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA147_12 = input.LA(1);

                         
                        int index147_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred216_InternalSQLParser()) ) {s = 20;}

                        else if ( (synpred217_InternalSQLParser()) ) {s = 14;}

                         
                        input.seek(index147_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA147_13 = input.LA(1);

                         
                        int index147_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred216_InternalSQLParser()) ) {s = 20;}

                        else if ( (synpred217_InternalSQLParser()) ) {s = 14;}

                         
                        input.seek(index147_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 147, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_53s = "\24\uffff";
    static final String dfa_54s = "\1\56\15\0\6\uffff";
    static final String dfa_55s = "\1\u00b7\15\0\6\uffff";
    static final String dfa_56s = "\16\uffff\1\2\4\uffff\1\1";
    static final String dfa_57s = "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\6\uffff}>";
    static final String[] dfa_58s = {
            "\1\14\17\uffff\1\16\14\uffff\1\13\30\uffff\1\15\14\uffff\1\16\32\uffff\1\16\5\uffff\1\16\5\uffff\1\16\5\uffff\1\12\13\uffff\1\4\1\5\1\uffff\1\6\1\7\1\10\4\uffff\1\11\1\3\1\2\1\1",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_53 = DFA.unpackEncodedString(dfa_53s);
    static final char[] dfa_54 = DFA.unpackEncodedStringToUnsignedChars(dfa_54s);
    static final char[] dfa_55 = DFA.unpackEncodedStringToUnsignedChars(dfa_55s);
    static final short[] dfa_56 = DFA.unpackEncodedString(dfa_56s);
    static final short[] dfa_57 = DFA.unpackEncodedString(dfa_57s);
    static final short[][] dfa_58 = unpackEncodedStringArray(dfa_58s);

    class DFA150 extends DFA {

        public DFA150(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 150;
            this.eot = dfa_53;
            this.eof = dfa_53;
            this.min = dfa_54;
            this.max = dfa_55;
            this.accept = dfa_56;
            this.special = dfa_57;
            this.transition = dfa_58;
        }
        public String getDescription() {
            return "8736:3: ( ( (lv_wop_1_0= ruleOperandGroup ) ) | ( (lv_expr_2_0= ruleFullExpression ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA150_1 = input.LA(1);

                         
                        int index150_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred220_InternalSQLParser()) ) {s = 19;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index150_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA150_2 = input.LA(1);

                         
                        int index150_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred220_InternalSQLParser()) ) {s = 19;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index150_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA150_3 = input.LA(1);

                         
                        int index150_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred220_InternalSQLParser()) ) {s = 19;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index150_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA150_4 = input.LA(1);

                         
                        int index150_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred220_InternalSQLParser()) ) {s = 19;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index150_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA150_5 = input.LA(1);

                         
                        int index150_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred220_InternalSQLParser()) ) {s = 19;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index150_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA150_6 = input.LA(1);

                         
                        int index150_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred220_InternalSQLParser()) ) {s = 19;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index150_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA150_7 = input.LA(1);

                         
                        int index150_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred220_InternalSQLParser()) ) {s = 19;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index150_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA150_8 = input.LA(1);

                         
                        int index150_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred220_InternalSQLParser()) ) {s = 19;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index150_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA150_9 = input.LA(1);

                         
                        int index150_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred220_InternalSQLParser()) ) {s = 19;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index150_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA150_10 = input.LA(1);

                         
                        int index150_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred220_InternalSQLParser()) ) {s = 19;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index150_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA150_11 = input.LA(1);

                         
                        int index150_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred220_InternalSQLParser()) ) {s = 19;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index150_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA150_12 = input.LA(1);

                         
                        int index150_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred220_InternalSQLParser()) ) {s = 19;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index150_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA150_13 = input.LA(1);

                         
                        int index150_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred220_InternalSQLParser()) ) {s = 19;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index150_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 150, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_1 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_2 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_3 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000010L});
    public static final BitSet FOLLOW_4 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_5 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00E0000040000000L});
    public static final BitSet FOLLOW_6 = new BitSet(new long[]{0x0000400000000000L,0x0000001000000800L,0x00F0FC0040000000L});
    public static final BitSet FOLLOW_7 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_8 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_9 = new BitSet(new long[]{0x0010800000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_10 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_11 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_12 = new BitSet(new long[]{0x1744080885200000L,0x0920006C00010000L,0x0000000000000440L});
    public static final BitSet FOLLOW_13 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_14 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_15 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_16 = new BitSet(new long[]{0x0010120000000102L,0x0004000000000040L,0x0000000000001000L});
    public static final BitSet FOLLOW_17 = new BitSet(new long[]{0x0000003000000002L,0x0000000000000020L,0x0000000040000000L});
    public static final BitSet FOLLOW_18 = new BitSet(new long[]{0x0000003000000002L,0x0000000000000020L});
    public static final BitSet FOLLOW_19 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_20 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_21 = new BitSet(new long[]{0x0000000001000000L,0x1804004000402000L,0x0010400500000000L});
    public static final BitSet FOLLOW_22 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_23 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00E0000000000000L});
    public static final BitSet FOLLOW_24 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040400000L});
    public static final BitSet FOLLOW_25 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_26 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_27 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_28 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_29 = new BitSet(new long[]{0x2000000000100002L,0x0000000040100000L});
    public static final BitSet FOLLOW_30 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000010L,0x0000000000000004L});
    public static final BitSet FOLLOW_31 = new BitSet(new long[]{0x0000400200000000L,0x0000001000000800L,0x00F0FC0040004000L});
    public static final BitSet FOLLOW_32 = new BitSet(new long[]{0x0000400000000000L,0x0000001000000800L,0x00F0FC0040004000L});
    public static final BitSet FOLLOW_33 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000C00000000000L});
    public static final BitSet FOLLOW_34 = new BitSet(new long[]{0x0008400000000000L,0x8000001000000800L,0x00F0FC0040000000L});
    public static final BitSet FOLLOW_35 = new BitSet(new long[]{0x0000400000000000L,0x8000001000000800L,0x00F0FC0040000000L});
    public static final BitSet FOLLOW_36 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_37 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_38 = new BitSet(new long[]{0x8000000000000002L,0x00000001010A4004L});
    public static final BitSet FOLLOW_39 = new BitSet(new long[]{0x4000400000000000L,0x0002001000000800L,0x00F0EC0041041000L});
    public static final BitSet FOLLOW_40 = new BitSet(new long[]{0x8000000000000002L,0x00000000010A4004L});
    public static final BitSet FOLLOW_41 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_42 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00E0200000000000L});
    public static final BitSet FOLLOW_43 = new BitSet(new long[]{0x8000000000000002L,0x0000000001084004L});
    public static final BitSet FOLLOW_44 = new BitSet(new long[]{0x0000000000000002L,0x0000000001084004L});
    public static final BitSet FOLLOW_45 = new BitSet(new long[]{0x0000000000000002L,0x0000000000084004L});
    public static final BitSet FOLLOW_46 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000004L});
    public static final BitSet FOLLOW_47 = new BitSet(new long[]{0x0000000000000002L,0x0000000000004004L});
    public static final BitSet FOLLOW_48 = new BitSet(new long[]{0x0000000000000002L,0x0000000000004000L});
    public static final BitSet FOLLOW_49 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_50 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00E0000000400000L});
    public static final BitSet FOLLOW_51 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00E0000000000000L});
    public static final BitSet FOLLOW_52 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_53 = new BitSet(new long[]{0x0002000000000402L,0x0000A40010041000L});
    public static final BitSet FOLLOW_54 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_55 = new BitSet(new long[]{0x0080000000000002L,0x0000000004000000L,0x00E0000000400000L});
    public static final BitSet FOLLOW_56 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_57 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_58 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_59 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L,0x0010EC0000000000L});
    public static final BitSet FOLLOW_60 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040008000L});
    public static final BitSet FOLLOW_61 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_62 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_63 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00E0000040000010L});
    public static final BitSet FOLLOW_64 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_65 = new BitSet(new long[]{0x0001200000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_66 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_67 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_68 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_69 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_70 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_71 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000080008000008L});
    public static final BitSet FOLLOW_72 = new BitSet(new long[]{0x000000C078040000L,0x0000000200000700L,0x0000000000010000L});
    public static final BitSet FOLLOW_73 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_74 = new BitSet(new long[]{0x0000400000000000L,0x0000001000000800L,0x00F0EC0040000000L});
    public static final BitSet FOLLOW_75 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020200000000L});
    public static final BitSet FOLLOW_76 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_77 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_78 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000030000000000L});
    public static final BitSet FOLLOW_79 = new BitSet(new long[]{0x4000410000000000L,0x0003001000000800L,0x00F0ECE0533E1000L});
    public static final BitSet FOLLOW_80 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_81 = new BitSet(new long[]{0x0000400000000000L,0x0080001000000800L,0x00F0EC0040000014L});
    public static final BitSet FOLLOW_82 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L,0x0090EC0000000000L});
    public static final BitSet FOLLOW_83 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_84 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_85 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_86 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_87 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0017EC0000000000L});
    public static final BitSet FOLLOW_88 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000101520000000L});
    public static final BitSet FOLLOW_89 = new BitSet(new long[]{0x0000400200000000L,0x0000001000000800L,0x00F0FC00C0000004L});
    public static final BitSet FOLLOW_90 = new BitSet(new long[]{0x0000000000000002L,0x0010000000000000L});
    public static final BitSet FOLLOW_91 = new BitSet(new long[]{0x002000010002FAF0L,0x200008000020000AL,0x0000000000000081L});
    public static final BitSet FOLLOW_92 = new BitSet(new long[]{0x0000000000400000L,0x0000000001000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_93 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_94 = new BitSet(new long[]{0x0000000000000002L,0x0040000008000000L});
    public static final BitSet FOLLOW_95 = new BitSet(new long[]{0x0000450002000000L,0x0000001000000800L,0x00F0EC0040000000L});
    public static final BitSet FOLLOW_96 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_97 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_98 = new BitSet(new long[]{0x0000000000880000L});
    public static final BitSet FOLLOW_99 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_100 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_101 = new BitSet(new long[]{0x0000000000000002L,0x0000008000800000L,0x0000000000000020L});
    public static final BitSet FOLLOW_102 = new BitSet(new long[]{0x0000000000000002L,0x0000000000800000L});
    public static final BitSet FOLLOW_103 = new BitSet(new long[]{0x0000000000000000L,0x0000400000008000L});
    public static final BitSet FOLLOW_104 = new BitSet(new long[]{0x0000400200000000L,0x0000001000000800L,0x00F0EC0040000004L});
    public static final BitSet FOLLOW_105 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00000000C0000000L});
    public static final BitSet FOLLOW_106 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000280000000L});
    public static final BitSet FOLLOW_107 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_108 = new BitSet(new long[]{0x4000400000000000L,0x4002001000000800L,0x00F0EC0041041000L});
    public static final BitSet FOLLOW_109 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_110 = new BitSet(new long[]{0x4000400000000002L,0x4002001000000800L,0x00F0EC0041041000L});
    public static final BitSet FOLLOW_111 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_112 = new BitSet(new long[]{0x0000000000000002L,0x0000010000000000L});
    public static final BitSet FOLLOW_113 = new BitSet(new long[]{0x0000000000000400L,0x0000A40010041000L});
    public static final BitSet FOLLOW_114 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_115 = new BitSet(new long[]{0x0000000000000000L,0x0000200002000000L});

}