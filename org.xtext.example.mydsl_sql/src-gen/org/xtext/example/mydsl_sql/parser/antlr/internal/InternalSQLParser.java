package org.xtext.example.mydsl_sql.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl_sql.services.SQLGrammarAccess;



import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
@SuppressWarnings("all")
public class InternalSQLParser extends AbstractInternalAntlrParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "MINUTE_MICROSECOND", "SECOND_MICROSECOND", "HOUR_MICROSECOND", "DAY_MICROSECOND", "MINUTE_SECOND", "STRAIGHT_JOIN", "HOUR_MINUTE", "HOUR_SECOND", "MICROSECOND", "DAY_MINUTE", "DAY_SECOND", "YEAR_MONTH", "BETWEEN_4", "KW_FOLLOWING", "INTERSECT", "PARTITION", "PRECEDING", "UNBOUNDED", "BETWEEN_2", "NOTEQUAL", "BETWEEN_3", "GREATER_1", "DAY_HOUR", "DISTINCT", "SIBLINGS", "BETWEEN_1", "GREATER", "BETWEEN", "BOOLEAN", "CURRENT", "EXCLUDE", "EXTRACT", "INCLUDE", "INTEGER", "NATURAL", "PERCENT", "PRIMARY", "QUARTER", "REGIONS", "UNPIVOT", "CREATE", "DOUBLE", "EXCEPT", "EXISTS", "HAVING", "INSERT", "MINUTE", "NUMBER", "OFFSET", "SECOND", "SELECT", "STRING", "VALUES", "EQUAL", "LESS_1", "NOTIN", "CAST", "CROSS", "FETCH", "FIRST", "FLOAT", "GROUP", "HOURS", "INNER", "LIMIT", "MINUS", "MONTH", "NULLS", "ORDER", "OUTER", "PIVOT", "RANGE", "RIGHT", "SHARD", "TABLE", "UNION", "USING", "WHERE", "LESS", "CASE", "DAYS", "DESC", "ELSE", "FROM", "FULL", "HOUR", "INTO", "JOIN", "JSON", "LAST", "LEFT", "LIKE", "LONG", "NOT_1", "NULL", "ONLY", "OVER", "ROWS", "SOME", "THEN", "TIES", "WEEK", "WHEN", "WITH", "YEAR", "LeftParenthesisPlusSignRightParenthesis", "ALL", "AND", "ANY", "ASC", "DAY", "END", "FOR", "KEY", "NOT", "ROW", "TOP", "TTL", "XML", "IN_1", "ExclamationMarkEqualsSign", "X", "LessThanSignEqualsSign", "LessThanSignGreaterThanSign", "GreaterThanSignEqualsSign", "AS", "BY", "IF", "IN", "IS", "ON", "OR", "CircumflexAccentEqualsSign", "VerticalLineVerticalLine", "LeftParenthesis", "RightParenthesis", "PlusSign", "Comma", "HyphenMinus", "FullStop", "Solidus", "LessThanSign", "EqualsSign", "GreaterThanSign", "VerticalLine", "RightCurlyBracket", "RULE_JRPARAM", "RULE_JRNPARAM", "RULE_STAR", "RULE_UNSIGNED", "RULE_INT", "RULE_SIGNED_DOUBLE", "RULE_DATE", "RULE_TIME", "RULE_TIMESTAMP", "RULE_STRING_CORE", "RULE_STRING_", "RULE_STRING", "RULE_DBNAME", "RULE_ID", "RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS", "RULE_ANY_OTHER"
    };
    public static final int LessThanSignGreaterThanSign=127;
    public static final int MONTH=70;
    public static final int CREATE=44;
    public static final int JOIN=91;
    public static final int BETWEEN=31;
    public static final int SHARD=77;
    public static final int LessThanSign=145;
    public static final int MINUS=69;
    public static final int LeftParenthesisPlusSignRightParenthesis=109;
    public static final int TABLE=78;
    public static final int WHEN=106;
    public static final int QUARTER=41;
    public static final int LeftParenthesis=138;
    public static final int YEAR=108;
    public static final int ELSE=86;
    public static final int RULE_TIME=157;
    public static final int HOUR_MINUTE=10;
    public static final int PARTITION=19;
    public static final int INCLUDE=36;
    public static final int IF=131;
    public static final int DAY_MINUTE=13;
    public static final int INNER=67;
    public static final int CAST=60;
    public static final int GreaterThanSign=147;
    public static final int LEFT=94;
    public static final int RULE_ID=163;
    public static final int IN=132;
    public static final int DISTINCT=27;
    public static final int IS=133;
    public static final int WHERE=81;
    public static final int CASE=83;
    public static final int GreaterThanSignEqualsSign=128;
    public static final int AS=129;
    public static final int RULE_DATE=156;
    public static final int TOP=120;
    public static final int VerticalLine=148;
    public static final int PlusSign=140;
    public static final int RULE_INT=154;
    public static final int RULE_ML_COMMENT=164;
    public static final int THEN=103;
    public static final int UNPIVOT=43;
    public static final int KEY=117;
    public static final int INTO=90;
    public static final int RULE_JRPARAM=150;
    public static final int MICROSECOND=12;
    public static final int VerticalLineVerticalLine=137;
    public static final int DAY_HOUR=26;
    public static final int DAYS=84;
    public static final int RULE_DBNAME=162;
    public static final int GROUP=65;
    public static final int ORDER=72;
    public static final int ASC=113;
    public static final int Comma=141;
    public static final int HyphenMinus=142;
    public static final int STRAIGHT_JOIN=9;
    public static final int REGIONS=42;
    public static final int BY=130;
    public static final int X=125;
    public static final int OFFSET=52;
    public static final int RIGHT=76;
    public static final int VALUES=56;
    public static final int DOUBLE=45;
    public static final int LessThanSignEqualsSign=126;
    public static final int Solidus=144;
    public static final int RightCurlyBracket=149;
    public static final int LONG=96;
    public static final int RULE_SIGNED_DOUBLE=155;
    public static final int FETCH=62;
    public static final int FullStop=143;
    public static final int RULE_UNSIGNED=153;
    public static final int SIBLINGS=28;
    public static final int GREATER=30;
    public static final int NOTIN=59;
    public static final int SECOND_MICROSECOND=5;
    public static final int FIRST=63;
    public static final int RULE_STRING_=160;
    public static final int SELECT=54;
    public static final int PRECEDING=20;
    public static final int RULE_JRNPARAM=151;
    public static final int PERCENT=39;
    public static final int STRING=55;
    public static final int ExclamationMarkEqualsSign=124;
    public static final int UNION=79;
    public static final int DAY=114;
    public static final int ALL=110;
    public static final int ONLY=99;
    public static final int FROM=87;
    public static final int DESC=85;
    public static final int MINUTE_MICROSECOND=4;
    public static final int UNBOUNDED=21;
    public static final int KW_FOLLOWING=17;
    public static final int MINUTE=50;
    public static final int RULE_STAR=152;
    public static final int HOUR_MICROSECOND=6;
    public static final int EXTRACT=35;
    public static final int INTEGER=37;
    public static final int NUMBER=51;
    public static final int NULL=98;
    public static final int DAY_MICROSECOND=7;
    public static final int LESS_1=58;
    public static final int FOR=116;
    public static final int RightParenthesis=139;
    public static final int PIVOT=74;
    public static final int EXCEPT=46;
    public static final int BOOLEAN=32;
    public static final int CURRENT=33;
    public static final int FULL=88;
    public static final int NOTEQUAL=23;
    public static final int USING=80;
    public static final int NOT=118;
    public static final int LIKE=95;
    public static final int LAST=93;
    public static final int IN_1=123;
    public static final int EXCLUDE=34;
    public static final int AND=111;
    public static final int CircumflexAccentEqualsSign=136;
    public static final int MINUTE_SECOND=8;
    public static final int YEAR_MONTH=15;
    public static final int INSERT=49;
    public static final int LESS=82;
    public static final int END=115;
    public static final int ROW=119;
    public static final int HAVING=48;
    public static final int DAY_SECOND=14;
    public static final int RANGE=75;
    public static final int FLOAT=64;
    public static final int TIES=104;
    public static final int HOUR=89;
    public static final int LIMIT=68;
    public static final int JSON=92;
    public static final int RULE_STRING=161;
    public static final int ANY=112;
    public static final int TTL=121;
    public static final int RULE_SL_COMMENT=165;
    public static final int NATURAL=38;
    public static final int EqualsSign=146;
    public static final int SOME=102;
    public static final int NOT_1=97;
    public static final int BETWEEN_2=22;
    public static final int GREATER_1=25;
    public static final int BETWEEN_1=29;
    public static final int OUTER=73;
    public static final int WEEK=105;
    public static final int EOF=-1;
    public static final int BETWEEN_4=16;
    public static final int NULLS=71;
    public static final int BETWEEN_3=24;
    public static final int ON=134;
    public static final int OR=135;
    public static final int EXISTS=47;
    public static final int RULE_WS=166;
    public static final int EQUAL=57;
    public static final int PRIMARY=40;
    public static final int RULE_ANY_OTHER=167;
    public static final int INTERSECT=18;
    public static final int WITH=107;
    public static final int OVER=100;
    public static final int HOURS=66;
    public static final int CROSS=61;
    public static final int XML=122;
    public static final int SECOND=53;
    public static final int RULE_STRING_CORE=159;
    public static final int HOUR_SECOND=11;
    public static final int RULE_TIMESTAMP=158;
    public static final int ROWS=101;

    // delegates
    // delegators


        public InternalSQLParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public InternalSQLParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        

    public String[] getTokenNames() { return InternalSQLParser.tokenNames; }
    public String getGrammarFileName() { return "InternalSQLParser.g"; }



    /*
      This grammar contains a lot of empty actions to work around a bug in ANTLR.
      Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
    */

     	private SQLGrammarAccess grammarAccess;

        public InternalSQLParser(TokenStream input, SQLGrammarAccess grammarAccess) {
            this(input);
            this.grammarAccess = grammarAccess;
            registerRules(grammarAccess.getGrammar());
        }

        @Override
        protected String getFirstRuleName() {
        	return "Model";
       	}

       	@Override
       	protected SQLGrammarAccess getGrammarAccess() {
       		return grammarAccess;
       	}




    // $ANTLR start "entryRuleModel"
    // InternalSQLParser.g:64:1: entryRuleModel returns [EObject current=null] : iv_ruleModel= ruleModel EOF ;
    public final EObject entryRuleModel() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleModel = null;


        try {
            // InternalSQLParser.g:64:46: (iv_ruleModel= ruleModel EOF )
            // InternalSQLParser.g:65:2: iv_ruleModel= ruleModel EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getModelRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleModel=ruleModel();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleModel; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleModel"


    // $ANTLR start "ruleModel"
    // InternalSQLParser.g:71:1: ruleModel returns [EObject current=null] : ( (this_JRNPARAM_0= RULE_JRNPARAM )? ( (lv_wq_1_0= ruleWithQuery ) )? ( ( (lv_query_2_0= ruleSelectQuery ) ) | ( (lv_insert_3_0= ruleInsertStatement ) ) | ( (lv_create_4_0= ruleCreateTableStatement ) ) ) ) ;
    public final EObject ruleModel() throws RecognitionException {
        EObject current = null;

        Token this_JRNPARAM_0=null;
        EObject lv_wq_1_0 = null;

        EObject lv_query_2_0 = null;

        EObject lv_insert_3_0 = null;

        EObject lv_create_4_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:77:2: ( ( (this_JRNPARAM_0= RULE_JRNPARAM )? ( (lv_wq_1_0= ruleWithQuery ) )? ( ( (lv_query_2_0= ruleSelectQuery ) ) | ( (lv_insert_3_0= ruleInsertStatement ) ) | ( (lv_create_4_0= ruleCreateTableStatement ) ) ) ) )
            // InternalSQLParser.g:78:2: ( (this_JRNPARAM_0= RULE_JRNPARAM )? ( (lv_wq_1_0= ruleWithQuery ) )? ( ( (lv_query_2_0= ruleSelectQuery ) ) | ( (lv_insert_3_0= ruleInsertStatement ) ) | ( (lv_create_4_0= ruleCreateTableStatement ) ) ) )
            {
            // InternalSQLParser.g:78:2: ( (this_JRNPARAM_0= RULE_JRNPARAM )? ( (lv_wq_1_0= ruleWithQuery ) )? ( ( (lv_query_2_0= ruleSelectQuery ) ) | ( (lv_insert_3_0= ruleInsertStatement ) ) | ( (lv_create_4_0= ruleCreateTableStatement ) ) ) )
            // InternalSQLParser.g:79:3: (this_JRNPARAM_0= RULE_JRNPARAM )? ( (lv_wq_1_0= ruleWithQuery ) )? ( ( (lv_query_2_0= ruleSelectQuery ) ) | ( (lv_insert_3_0= ruleInsertStatement ) ) | ( (lv_create_4_0= ruleCreateTableStatement ) ) )
            {
            // InternalSQLParser.g:79:3: (this_JRNPARAM_0= RULE_JRNPARAM )?
            int alt1=2;
            int LA1_0 = input.LA(1);

            if ( (LA1_0==RULE_JRNPARAM) ) {
                alt1=1;
            }
            switch (alt1) {
                case 1 :
                    // InternalSQLParser.g:80:4: this_JRNPARAM_0= RULE_JRNPARAM
                    {
                    this_JRNPARAM_0=(Token)match(input,RULE_JRNPARAM,FOLLOW_3); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_JRNPARAM_0, grammarAccess.getModelAccess().getJRNPARAMTerminalRuleCall_0());
                      			
                    }

                    }
                    break;

            }

            // InternalSQLParser.g:85:3: ( (lv_wq_1_0= ruleWithQuery ) )?
            int alt2=2;
            int LA2_0 = input.LA(1);

            if ( (LA2_0==WITH) ) {
                alt2=1;
            }
            switch (alt2) {
                case 1 :
                    // InternalSQLParser.g:86:4: (lv_wq_1_0= ruleWithQuery )
                    {
                    // InternalSQLParser.g:86:4: (lv_wq_1_0= ruleWithQuery )
                    // InternalSQLParser.g:87:5: lv_wq_1_0= ruleWithQuery
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getModelAccess().getWqWithQueryParserRuleCall_1_0());
                      				
                    }
                    pushFollow(FOLLOW_3);
                    lv_wq_1_0=ruleWithQuery();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getModelRule());
                      					}
                      					set(
                      						current,
                      						"wq",
                      						lv_wq_1_0,
                      						"org.xtext.example.mydsl_sql.SQL.WithQuery");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalSQLParser.g:104:3: ( ( (lv_query_2_0= ruleSelectQuery ) ) | ( (lv_insert_3_0= ruleInsertStatement ) ) | ( (lv_create_4_0= ruleCreateTableStatement ) ) )
            int alt3=3;
            switch ( input.LA(1) ) {
            case SELECT:
                {
                alt3=1;
                }
                break;
            case INSERT:
                {
                alt3=2;
                }
                break;
            case CREATE:
                {
                alt3=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 3, 0, input);

                throw nvae;
            }

            switch (alt3) {
                case 1 :
                    // InternalSQLParser.g:105:4: ( (lv_query_2_0= ruleSelectQuery ) )
                    {
                    // InternalSQLParser.g:105:4: ( (lv_query_2_0= ruleSelectQuery ) )
                    // InternalSQLParser.g:106:5: (lv_query_2_0= ruleSelectQuery )
                    {
                    // InternalSQLParser.g:106:5: (lv_query_2_0= ruleSelectQuery )
                    // InternalSQLParser.g:107:6: lv_query_2_0= ruleSelectQuery
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getModelAccess().getQuerySelectQueryParserRuleCall_2_0_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_query_2_0=ruleSelectQuery();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getModelRule());
                      						}
                      						set(
                      							current,
                      							"query",
                      							lv_query_2_0,
                      							"org.xtext.example.mydsl_sql.SQL.SelectQuery");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:125:4: ( (lv_insert_3_0= ruleInsertStatement ) )
                    {
                    // InternalSQLParser.g:125:4: ( (lv_insert_3_0= ruleInsertStatement ) )
                    // InternalSQLParser.g:126:5: (lv_insert_3_0= ruleInsertStatement )
                    {
                    // InternalSQLParser.g:126:5: (lv_insert_3_0= ruleInsertStatement )
                    // InternalSQLParser.g:127:6: lv_insert_3_0= ruleInsertStatement
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getModelAccess().getInsertInsertStatementParserRuleCall_2_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_insert_3_0=ruleInsertStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getModelRule());
                      						}
                      						set(
                      							current,
                      							"insert",
                      							lv_insert_3_0,
                      							"org.xtext.example.mydsl_sql.SQL.InsertStatement");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:145:4: ( (lv_create_4_0= ruleCreateTableStatement ) )
                    {
                    // InternalSQLParser.g:145:4: ( (lv_create_4_0= ruleCreateTableStatement ) )
                    // InternalSQLParser.g:146:5: (lv_create_4_0= ruleCreateTableStatement )
                    {
                    // InternalSQLParser.g:146:5: (lv_create_4_0= ruleCreateTableStatement )
                    // InternalSQLParser.g:147:6: lv_create_4_0= ruleCreateTableStatement
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getModelAccess().getCreateCreateTableStatementParserRuleCall_2_2_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_create_4_0=ruleCreateTableStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getModelRule());
                      						}
                      						set(
                      							current,
                      							"create",
                      							lv_create_4_0,
                      							"org.xtext.example.mydsl_sql.SQL.CreateTableStatement");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleModel"


    // $ANTLR start "entryRuleInsertStatement"
    // InternalSQLParser.g:169:1: entryRuleInsertStatement returns [EObject current=null] : iv_ruleInsertStatement= ruleInsertStatement EOF ;
    public final EObject entryRuleInsertStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleInsertStatement = null;


        try {
            // InternalSQLParser.g:169:56: (iv_ruleInsertStatement= ruleInsertStatement EOF )
            // InternalSQLParser.g:170:2: iv_ruleInsertStatement= ruleInsertStatement EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getInsertStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleInsertStatement=ruleInsertStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleInsertStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleInsertStatement"


    // $ANTLR start "ruleInsertStatement"
    // InternalSQLParser.g:176:1: ruleInsertStatement returns [EObject current=null] : (otherlv_0= INSERT otherlv_1= INTO ( (lv_tbl_2_0= ruleTables ) ) ( (lv_cols_3_0= ruleColumns ) ) ( (lv_vals_4_0= ruleValues ) ) ) ;
    public final EObject ruleInsertStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        EObject lv_tbl_2_0 = null;

        EObject lv_cols_3_0 = null;

        EObject lv_vals_4_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:182:2: ( (otherlv_0= INSERT otherlv_1= INTO ( (lv_tbl_2_0= ruleTables ) ) ( (lv_cols_3_0= ruleColumns ) ) ( (lv_vals_4_0= ruleValues ) ) ) )
            // InternalSQLParser.g:183:2: (otherlv_0= INSERT otherlv_1= INTO ( (lv_tbl_2_0= ruleTables ) ) ( (lv_cols_3_0= ruleColumns ) ) ( (lv_vals_4_0= ruleValues ) ) )
            {
            // InternalSQLParser.g:183:2: (otherlv_0= INSERT otherlv_1= INTO ( (lv_tbl_2_0= ruleTables ) ) ( (lv_cols_3_0= ruleColumns ) ) ( (lv_vals_4_0= ruleValues ) ) )
            // InternalSQLParser.g:184:3: otherlv_0= INSERT otherlv_1= INTO ( (lv_tbl_2_0= ruleTables ) ) ( (lv_cols_3_0= ruleColumns ) ) ( (lv_vals_4_0= ruleValues ) )
            {
            otherlv_0=(Token)match(input,INSERT,FOLLOW_4); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getInsertStatementAccess().getINSERTKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,INTO,FOLLOW_5); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getInsertStatementAccess().getINTOKeyword_1());
              		
            }
            // InternalSQLParser.g:192:3: ( (lv_tbl_2_0= ruleTables ) )
            // InternalSQLParser.g:193:4: (lv_tbl_2_0= ruleTables )
            {
            // InternalSQLParser.g:193:4: (lv_tbl_2_0= ruleTables )
            // InternalSQLParser.g:194:5: lv_tbl_2_0= ruleTables
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getInsertStatementAccess().getTblTablesParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_6);
            lv_tbl_2_0=ruleTables();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getInsertStatementRule());
              					}
              					set(
              						current,
              						"tbl",
              						lv_tbl_2_0,
              						"org.xtext.example.mydsl_sql.SQL.Tables");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:211:3: ( (lv_cols_3_0= ruleColumns ) )
            // InternalSQLParser.g:212:4: (lv_cols_3_0= ruleColumns )
            {
            // InternalSQLParser.g:212:4: (lv_cols_3_0= ruleColumns )
            // InternalSQLParser.g:213:5: lv_cols_3_0= ruleColumns
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getInsertStatementAccess().getColsColumnsParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_5);
            lv_cols_3_0=ruleColumns();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getInsertStatementRule());
              					}
              					set(
              						current,
              						"cols",
              						lv_cols_3_0,
              						"org.xtext.example.mydsl_sql.SQL.Columns");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:230:3: ( (lv_vals_4_0= ruleValues ) )
            // InternalSQLParser.g:231:4: (lv_vals_4_0= ruleValues )
            {
            // InternalSQLParser.g:231:4: (lv_vals_4_0= ruleValues )
            // InternalSQLParser.g:232:5: lv_vals_4_0= ruleValues
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getInsertStatementAccess().getValsValuesParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_vals_4_0=ruleValues();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getInsertStatementRule());
              					}
              					set(
              						current,
              						"vals",
              						lv_vals_4_0,
              						"org.xtext.example.mydsl_sql.SQL.Values");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleInsertStatement"


    // $ANTLR start "entryRuleCreateTableStatement"
    // InternalSQLParser.g:253:1: entryRuleCreateTableStatement returns [EObject current=null] : iv_ruleCreateTableStatement= ruleCreateTableStatement EOF ;
    public final EObject entryRuleCreateTableStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleCreateTableStatement = null;


        try {
            // InternalSQLParser.g:253:61: (iv_ruleCreateTableStatement= ruleCreateTableStatement EOF )
            // InternalSQLParser.g:254:2: iv_ruleCreateTableStatement= ruleCreateTableStatement EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCreateTableStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCreateTableStatement=ruleCreateTableStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCreateTableStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleCreateTableStatement"


    // $ANTLR start "ruleCreateTableStatement"
    // InternalSQLParser.g:260:1: ruleCreateTableStatement returns [EObject current=null] : (otherlv_0= CREATE otherlv_1= TABLE (otherlv_2= IF otherlv_3= NOT otherlv_4= EXISTS )? ( (lv_tbl_5_0= ruleTables ) ) otherlv_6= LeftParenthesis ( (lv_table_definition_7_0= ruleTableDefinition ) ) otherlv_8= RightParenthesis ( (lv_ttl_definition_9_0= ruleTtlDefinition ) )? ) ;
    public final EObject ruleCreateTableStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        Token otherlv_8=null;
        EObject lv_tbl_5_0 = null;

        EObject lv_table_definition_7_0 = null;

        EObject lv_ttl_definition_9_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:266:2: ( (otherlv_0= CREATE otherlv_1= TABLE (otherlv_2= IF otherlv_3= NOT otherlv_4= EXISTS )? ( (lv_tbl_5_0= ruleTables ) ) otherlv_6= LeftParenthesis ( (lv_table_definition_7_0= ruleTableDefinition ) ) otherlv_8= RightParenthesis ( (lv_ttl_definition_9_0= ruleTtlDefinition ) )? ) )
            // InternalSQLParser.g:267:2: (otherlv_0= CREATE otherlv_1= TABLE (otherlv_2= IF otherlv_3= NOT otherlv_4= EXISTS )? ( (lv_tbl_5_0= ruleTables ) ) otherlv_6= LeftParenthesis ( (lv_table_definition_7_0= ruleTableDefinition ) ) otherlv_8= RightParenthesis ( (lv_ttl_definition_9_0= ruleTtlDefinition ) )? )
            {
            // InternalSQLParser.g:267:2: (otherlv_0= CREATE otherlv_1= TABLE (otherlv_2= IF otherlv_3= NOT otherlv_4= EXISTS )? ( (lv_tbl_5_0= ruleTables ) ) otherlv_6= LeftParenthesis ( (lv_table_definition_7_0= ruleTableDefinition ) ) otherlv_8= RightParenthesis ( (lv_ttl_definition_9_0= ruleTtlDefinition ) )? )
            // InternalSQLParser.g:268:3: otherlv_0= CREATE otherlv_1= TABLE (otherlv_2= IF otherlv_3= NOT otherlv_4= EXISTS )? ( (lv_tbl_5_0= ruleTables ) ) otherlv_6= LeftParenthesis ( (lv_table_definition_7_0= ruleTableDefinition ) ) otherlv_8= RightParenthesis ( (lv_ttl_definition_9_0= ruleTtlDefinition ) )?
            {
            otherlv_0=(Token)match(input,CREATE,FOLLOW_7); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getCreateTableStatementAccess().getCREATEKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,TABLE,FOLLOW_8); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getCreateTableStatementAccess().getTABLEKeyword_1());
              		
            }
            // InternalSQLParser.g:276:3: (otherlv_2= IF otherlv_3= NOT otherlv_4= EXISTS )?
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==IF) ) {
                alt4=1;
            }
            switch (alt4) {
                case 1 :
                    // InternalSQLParser.g:277:4: otherlv_2= IF otherlv_3= NOT otherlv_4= EXISTS
                    {
                    otherlv_2=(Token)match(input,IF,FOLLOW_9); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getCreateTableStatementAccess().getIFKeyword_2_0());
                      			
                    }
                    otherlv_3=(Token)match(input,NOT,FOLLOW_10); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_3, grammarAccess.getCreateTableStatementAccess().getNOTKeyword_2_1());
                      			
                    }
                    otherlv_4=(Token)match(input,EXISTS,FOLLOW_5); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_4, grammarAccess.getCreateTableStatementAccess().getEXISTSKeyword_2_2());
                      			
                    }

                    }
                    break;

            }

            // InternalSQLParser.g:290:3: ( (lv_tbl_5_0= ruleTables ) )
            // InternalSQLParser.g:291:4: (lv_tbl_5_0= ruleTables )
            {
            // InternalSQLParser.g:291:4: (lv_tbl_5_0= ruleTables )
            // InternalSQLParser.g:292:5: lv_tbl_5_0= ruleTables
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getCreateTableStatementAccess().getTblTablesParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_11);
            lv_tbl_5_0=ruleTables();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getCreateTableStatementRule());
              					}
              					set(
              						current,
              						"tbl",
              						lv_tbl_5_0,
              						"org.xtext.example.mydsl_sql.SQL.Tables");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_6=(Token)match(input,LeftParenthesis,FOLLOW_12); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_6, grammarAccess.getCreateTableStatementAccess().getLeftParenthesisKeyword_4());
              		
            }
            // InternalSQLParser.g:313:3: ( (lv_table_definition_7_0= ruleTableDefinition ) )
            // InternalSQLParser.g:314:4: (lv_table_definition_7_0= ruleTableDefinition )
            {
            // InternalSQLParser.g:314:4: (lv_table_definition_7_0= ruleTableDefinition )
            // InternalSQLParser.g:315:5: lv_table_definition_7_0= ruleTableDefinition
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getCreateTableStatementAccess().getTable_definitionTableDefinitionParserRuleCall_5_0());
              				
            }
            pushFollow(FOLLOW_13);
            lv_table_definition_7_0=ruleTableDefinition();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getCreateTableStatementRule());
              					}
              					set(
              						current,
              						"table_definition",
              						lv_table_definition_7_0,
              						"org.xtext.example.mydsl_sql.SQL.TableDefinition");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_8=(Token)match(input,RightParenthesis,FOLLOW_14); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_8, grammarAccess.getCreateTableStatementAccess().getRightParenthesisKeyword_6());
              		
            }
            // InternalSQLParser.g:336:3: ( (lv_ttl_definition_9_0= ruleTtlDefinition ) )?
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==USING) ) {
                alt5=1;
            }
            switch (alt5) {
                case 1 :
                    // InternalSQLParser.g:337:4: (lv_ttl_definition_9_0= ruleTtlDefinition )
                    {
                    // InternalSQLParser.g:337:4: (lv_ttl_definition_9_0= ruleTtlDefinition )
                    // InternalSQLParser.g:338:5: lv_ttl_definition_9_0= ruleTtlDefinition
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getCreateTableStatementAccess().getTtl_definitionTtlDefinitionParserRuleCall_7_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_ttl_definition_9_0=ruleTtlDefinition();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getCreateTableStatementRule());
                      					}
                      					set(
                      						current,
                      						"ttl_definition",
                      						lv_ttl_definition_9_0,
                      						"org.xtext.example.mydsl_sql.SQL.TtlDefinition");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleCreateTableStatement"


    // $ANTLR start "entryRuleTableDefinition"
    // InternalSQLParser.g:359:1: entryRuleTableDefinition returns [EObject current=null] : iv_ruleTableDefinition= ruleTableDefinition EOF ;
    public final EObject entryRuleTableDefinition() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTableDefinition = null;


        try {
            // InternalSQLParser.g:359:56: (iv_ruleTableDefinition= ruleTableDefinition EOF )
            // InternalSQLParser.g:360:2: iv_ruleTableDefinition= ruleTableDefinition EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTableDefinitionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTableDefinition=ruleTableDefinition();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTableDefinition; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTableDefinition"


    // $ANTLR start "ruleTableDefinition"
    // InternalSQLParser.g:366:1: ruleTableDefinition returns [EObject current=null] : ( ( ( (lv_column_definition_0_0= ruleColumnDefinition ) ) | ( (lv_key_definition_1_0= ruleKeyDefinition ) ) ) (otherlv_2= Comma ( ( (lv_column_definition_3_0= ruleColumnDefinition ) ) | ( (lv_key_definition_4_0= ruleKeyDefinition ) ) ) )* ) ;
    public final EObject ruleTableDefinition() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject lv_column_definition_0_0 = null;

        EObject lv_key_definition_1_0 = null;

        EObject lv_column_definition_3_0 = null;

        EObject lv_key_definition_4_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:372:2: ( ( ( ( (lv_column_definition_0_0= ruleColumnDefinition ) ) | ( (lv_key_definition_1_0= ruleKeyDefinition ) ) ) (otherlv_2= Comma ( ( (lv_column_definition_3_0= ruleColumnDefinition ) ) | ( (lv_key_definition_4_0= ruleKeyDefinition ) ) ) )* ) )
            // InternalSQLParser.g:373:2: ( ( ( (lv_column_definition_0_0= ruleColumnDefinition ) ) | ( (lv_key_definition_1_0= ruleKeyDefinition ) ) ) (otherlv_2= Comma ( ( (lv_column_definition_3_0= ruleColumnDefinition ) ) | ( (lv_key_definition_4_0= ruleKeyDefinition ) ) ) )* )
            {
            // InternalSQLParser.g:373:2: ( ( ( (lv_column_definition_0_0= ruleColumnDefinition ) ) | ( (lv_key_definition_1_0= ruleKeyDefinition ) ) ) (otherlv_2= Comma ( ( (lv_column_definition_3_0= ruleColumnDefinition ) ) | ( (lv_key_definition_4_0= ruleKeyDefinition ) ) ) )* )
            // InternalSQLParser.g:374:3: ( ( (lv_column_definition_0_0= ruleColumnDefinition ) ) | ( (lv_key_definition_1_0= ruleKeyDefinition ) ) ) (otherlv_2= Comma ( ( (lv_column_definition_3_0= ruleColumnDefinition ) ) | ( (lv_key_definition_4_0= ruleKeyDefinition ) ) ) )*
            {
            // InternalSQLParser.g:374:3: ( ( (lv_column_definition_0_0= ruleColumnDefinition ) ) | ( (lv_key_definition_1_0= ruleKeyDefinition ) ) )
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==RULE_ID) ) {
                alt6=1;
            }
            else if ( (LA6_0==PRIMARY) ) {
                alt6=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 6, 0, input);

                throw nvae;
            }
            switch (alt6) {
                case 1 :
                    // InternalSQLParser.g:375:4: ( (lv_column_definition_0_0= ruleColumnDefinition ) )
                    {
                    // InternalSQLParser.g:375:4: ( (lv_column_definition_0_0= ruleColumnDefinition ) )
                    // InternalSQLParser.g:376:5: (lv_column_definition_0_0= ruleColumnDefinition )
                    {
                    // InternalSQLParser.g:376:5: (lv_column_definition_0_0= ruleColumnDefinition )
                    // InternalSQLParser.g:377:6: lv_column_definition_0_0= ruleColumnDefinition
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTableDefinitionAccess().getColumn_definitionColumnDefinitionParserRuleCall_0_0_0());
                      					
                    }
                    pushFollow(FOLLOW_15);
                    lv_column_definition_0_0=ruleColumnDefinition();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTableDefinitionRule());
                      						}
                      						add(
                      							current,
                      							"column_definition",
                      							lv_column_definition_0_0,
                      							"org.xtext.example.mydsl_sql.SQL.ColumnDefinition");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:395:4: ( (lv_key_definition_1_0= ruleKeyDefinition ) )
                    {
                    // InternalSQLParser.g:395:4: ( (lv_key_definition_1_0= ruleKeyDefinition ) )
                    // InternalSQLParser.g:396:5: (lv_key_definition_1_0= ruleKeyDefinition )
                    {
                    // InternalSQLParser.g:396:5: (lv_key_definition_1_0= ruleKeyDefinition )
                    // InternalSQLParser.g:397:6: lv_key_definition_1_0= ruleKeyDefinition
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTableDefinitionAccess().getKey_definitionKeyDefinitionParserRuleCall_0_1_0());
                      					
                    }
                    pushFollow(FOLLOW_15);
                    lv_key_definition_1_0=ruleKeyDefinition();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTableDefinitionRule());
                      						}
                      						add(
                      							current,
                      							"key_definition",
                      							lv_key_definition_1_0,
                      							"org.xtext.example.mydsl_sql.SQL.KeyDefinition");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            // InternalSQLParser.g:415:3: (otherlv_2= Comma ( ( (lv_column_definition_3_0= ruleColumnDefinition ) ) | ( (lv_key_definition_4_0= ruleKeyDefinition ) ) ) )*
            loop8:
            do {
                int alt8=2;
                int LA8_0 = input.LA(1);

                if ( (LA8_0==Comma) ) {
                    alt8=1;
                }


                switch (alt8) {
            	case 1 :
            	    // InternalSQLParser.g:416:4: otherlv_2= Comma ( ( (lv_column_definition_3_0= ruleColumnDefinition ) ) | ( (lv_key_definition_4_0= ruleKeyDefinition ) ) )
            	    {
            	    otherlv_2=(Token)match(input,Comma,FOLLOW_12); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_2, grammarAccess.getTableDefinitionAccess().getCommaKeyword_1_0());
            	      			
            	    }
            	    // InternalSQLParser.g:420:4: ( ( (lv_column_definition_3_0= ruleColumnDefinition ) ) | ( (lv_key_definition_4_0= ruleKeyDefinition ) ) )
            	    int alt7=2;
            	    int LA7_0 = input.LA(1);

            	    if ( (LA7_0==RULE_ID) ) {
            	        alt7=1;
            	    }
            	    else if ( (LA7_0==PRIMARY) ) {
            	        alt7=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 7, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt7) {
            	        case 1 :
            	            // InternalSQLParser.g:421:5: ( (lv_column_definition_3_0= ruleColumnDefinition ) )
            	            {
            	            // InternalSQLParser.g:421:5: ( (lv_column_definition_3_0= ruleColumnDefinition ) )
            	            // InternalSQLParser.g:422:6: (lv_column_definition_3_0= ruleColumnDefinition )
            	            {
            	            // InternalSQLParser.g:422:6: (lv_column_definition_3_0= ruleColumnDefinition )
            	            // InternalSQLParser.g:423:7: lv_column_definition_3_0= ruleColumnDefinition
            	            {
            	            if ( state.backtracking==0 ) {

            	              							newCompositeNode(grammarAccess.getTableDefinitionAccess().getColumn_definitionColumnDefinitionParserRuleCall_1_1_0_0());
            	              						
            	            }
            	            pushFollow(FOLLOW_15);
            	            lv_column_definition_3_0=ruleColumnDefinition();

            	            state._fsp--;
            	            if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              							if (current==null) {
            	              								current = createModelElementForParent(grammarAccess.getTableDefinitionRule());
            	              							}
            	              							add(
            	              								current,
            	              								"column_definition",
            	              								lv_column_definition_3_0,
            	              								"org.xtext.example.mydsl_sql.SQL.ColumnDefinition");
            	              							afterParserOrEnumRuleCall();
            	              						
            	            }

            	            }


            	            }


            	            }
            	            break;
            	        case 2 :
            	            // InternalSQLParser.g:441:5: ( (lv_key_definition_4_0= ruleKeyDefinition ) )
            	            {
            	            // InternalSQLParser.g:441:5: ( (lv_key_definition_4_0= ruleKeyDefinition ) )
            	            // InternalSQLParser.g:442:6: (lv_key_definition_4_0= ruleKeyDefinition )
            	            {
            	            // InternalSQLParser.g:442:6: (lv_key_definition_4_0= ruleKeyDefinition )
            	            // InternalSQLParser.g:443:7: lv_key_definition_4_0= ruleKeyDefinition
            	            {
            	            if ( state.backtracking==0 ) {

            	              							newCompositeNode(grammarAccess.getTableDefinitionAccess().getKey_definitionKeyDefinitionParserRuleCall_1_1_1_0());
            	              						
            	            }
            	            pushFollow(FOLLOW_15);
            	            lv_key_definition_4_0=ruleKeyDefinition();

            	            state._fsp--;
            	            if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              							if (current==null) {
            	              								current = createModelElementForParent(grammarAccess.getTableDefinitionRule());
            	              							}
            	              							add(
            	              								current,
            	              								"key_definition",
            	              								lv_key_definition_4_0,
            	              								"org.xtext.example.mydsl_sql.SQL.KeyDefinition");
            	              							afterParserOrEnumRuleCall();
            	              						
            	            }

            	            }


            	            }


            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop8;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTableDefinition"


    // $ANTLR start "entryRuleColumnDefinition"
    // InternalSQLParser.g:466:1: entryRuleColumnDefinition returns [EObject current=null] : iv_ruleColumnDefinition= ruleColumnDefinition EOF ;
    public final EObject entryRuleColumnDefinition() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleColumnDefinition = null;


        try {
            // InternalSQLParser.g:466:57: (iv_ruleColumnDefinition= ruleColumnDefinition EOF )
            // InternalSQLParser.g:467:2: iv_ruleColumnDefinition= ruleColumnDefinition EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getColumnDefinitionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleColumnDefinition=ruleColumnDefinition();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleColumnDefinition; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleColumnDefinition"


    // $ANTLR start "ruleColumnDefinition"
    // InternalSQLParser.g:473:1: ruleColumnDefinition returns [EObject current=null] : ( ( (lv_id_0_0= RULE_ID ) ) ( (lv_type_definition_1_0= ruleTypeDefinition ) ) ) ;
    public final EObject ruleColumnDefinition() throws RecognitionException {
        EObject current = null;

        Token lv_id_0_0=null;
        AntlrDatatypeRuleToken lv_type_definition_1_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:479:2: ( ( ( (lv_id_0_0= RULE_ID ) ) ( (lv_type_definition_1_0= ruleTypeDefinition ) ) ) )
            // InternalSQLParser.g:480:2: ( ( (lv_id_0_0= RULE_ID ) ) ( (lv_type_definition_1_0= ruleTypeDefinition ) ) )
            {
            // InternalSQLParser.g:480:2: ( ( (lv_id_0_0= RULE_ID ) ) ( (lv_type_definition_1_0= ruleTypeDefinition ) ) )
            // InternalSQLParser.g:481:3: ( (lv_id_0_0= RULE_ID ) ) ( (lv_type_definition_1_0= ruleTypeDefinition ) )
            {
            // InternalSQLParser.g:481:3: ( (lv_id_0_0= RULE_ID ) )
            // InternalSQLParser.g:482:4: (lv_id_0_0= RULE_ID )
            {
            // InternalSQLParser.g:482:4: (lv_id_0_0= RULE_ID )
            // InternalSQLParser.g:483:5: lv_id_0_0= RULE_ID
            {
            lv_id_0_0=(Token)match(input,RULE_ID,FOLLOW_16); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_id_0_0, grammarAccess.getColumnDefinitionAccess().getIdIDTerminalRuleCall_0_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getColumnDefinitionRule());
              					}
              					setWithLastConsumed(
              						current,
              						"id",
              						lv_id_0_0,
              						"org.xtext.example.mydsl_sql.SQL.ID");
              				
            }

            }


            }

            // InternalSQLParser.g:499:3: ( (lv_type_definition_1_0= ruleTypeDefinition ) )
            // InternalSQLParser.g:500:4: (lv_type_definition_1_0= ruleTypeDefinition )
            {
            // InternalSQLParser.g:500:4: (lv_type_definition_1_0= ruleTypeDefinition )
            // InternalSQLParser.g:501:5: lv_type_definition_1_0= ruleTypeDefinition
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getColumnDefinitionAccess().getType_definitionTypeDefinitionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_type_definition_1_0=ruleTypeDefinition();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getColumnDefinitionRule());
              					}
              					set(
              						current,
              						"type_definition",
              						lv_type_definition_1_0,
              						"org.xtext.example.mydsl_sql.SQL.TypeDefinition");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleColumnDefinition"


    // $ANTLR start "entryRuleKeyDefinition"
    // InternalSQLParser.g:522:1: entryRuleKeyDefinition returns [EObject current=null] : iv_ruleKeyDefinition= ruleKeyDefinition EOF ;
    public final EObject entryRuleKeyDefinition() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleKeyDefinition = null;


        try {
            // InternalSQLParser.g:522:54: (iv_ruleKeyDefinition= ruleKeyDefinition EOF )
            // InternalSQLParser.g:523:2: iv_ruleKeyDefinition= ruleKeyDefinition EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getKeyDefinitionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleKeyDefinition=ruleKeyDefinition();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleKeyDefinition; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleKeyDefinition"


    // $ANTLR start "ruleKeyDefinition"
    // InternalSQLParser.g:529:1: ruleKeyDefinition returns [EObject current=null] : ( () otherlv_1= PRIMARY otherlv_2= KEY otherlv_3= LeftParenthesis ( ( (lv_shard_key_definition_4_0= ruleShardKeyDefinition ) ) (otherlv_5= Comma )? )? ( (lv_id_list_with_size_6_0= ruleIDListWithSize ) )? otherlv_7= RightParenthesis ( (lv_ttl_definition_8_0= ruleTtlDefinition ) )? ) ;
    public final EObject ruleKeyDefinition() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Token otherlv_7=null;
        EObject lv_shard_key_definition_4_0 = null;

        EObject lv_id_list_with_size_6_0 = null;

        EObject lv_ttl_definition_8_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:535:2: ( ( () otherlv_1= PRIMARY otherlv_2= KEY otherlv_3= LeftParenthesis ( ( (lv_shard_key_definition_4_0= ruleShardKeyDefinition ) ) (otherlv_5= Comma )? )? ( (lv_id_list_with_size_6_0= ruleIDListWithSize ) )? otherlv_7= RightParenthesis ( (lv_ttl_definition_8_0= ruleTtlDefinition ) )? ) )
            // InternalSQLParser.g:536:2: ( () otherlv_1= PRIMARY otherlv_2= KEY otherlv_3= LeftParenthesis ( ( (lv_shard_key_definition_4_0= ruleShardKeyDefinition ) ) (otherlv_5= Comma )? )? ( (lv_id_list_with_size_6_0= ruleIDListWithSize ) )? otherlv_7= RightParenthesis ( (lv_ttl_definition_8_0= ruleTtlDefinition ) )? )
            {
            // InternalSQLParser.g:536:2: ( () otherlv_1= PRIMARY otherlv_2= KEY otherlv_3= LeftParenthesis ( ( (lv_shard_key_definition_4_0= ruleShardKeyDefinition ) ) (otherlv_5= Comma )? )? ( (lv_id_list_with_size_6_0= ruleIDListWithSize ) )? otherlv_7= RightParenthesis ( (lv_ttl_definition_8_0= ruleTtlDefinition ) )? )
            // InternalSQLParser.g:537:3: () otherlv_1= PRIMARY otherlv_2= KEY otherlv_3= LeftParenthesis ( ( (lv_shard_key_definition_4_0= ruleShardKeyDefinition ) ) (otherlv_5= Comma )? )? ( (lv_id_list_with_size_6_0= ruleIDListWithSize ) )? otherlv_7= RightParenthesis ( (lv_ttl_definition_8_0= ruleTtlDefinition ) )?
            {
            // InternalSQLParser.g:537:3: ()
            // InternalSQLParser.g:538:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getKeyDefinitionAccess().getKeyDefinitionAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,PRIMARY,FOLLOW_17); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getKeyDefinitionAccess().getPRIMARYKeyword_1());
              		
            }
            otherlv_2=(Token)match(input,KEY,FOLLOW_11); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getKeyDefinitionAccess().getKEYKeyword_2());
              		
            }
            otherlv_3=(Token)match(input,LeftParenthesis,FOLLOW_18); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getKeyDefinitionAccess().getLeftParenthesisKeyword_3());
              		
            }
            // InternalSQLParser.g:559:3: ( ( (lv_shard_key_definition_4_0= ruleShardKeyDefinition ) ) (otherlv_5= Comma )? )?
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==SHARD) ) {
                alt10=1;
            }
            switch (alt10) {
                case 1 :
                    // InternalSQLParser.g:560:4: ( (lv_shard_key_definition_4_0= ruleShardKeyDefinition ) ) (otherlv_5= Comma )?
                    {
                    // InternalSQLParser.g:560:4: ( (lv_shard_key_definition_4_0= ruleShardKeyDefinition ) )
                    // InternalSQLParser.g:561:5: (lv_shard_key_definition_4_0= ruleShardKeyDefinition )
                    {
                    // InternalSQLParser.g:561:5: (lv_shard_key_definition_4_0= ruleShardKeyDefinition )
                    // InternalSQLParser.g:562:6: lv_shard_key_definition_4_0= ruleShardKeyDefinition
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getKeyDefinitionAccess().getShard_key_definitionShardKeyDefinitionParserRuleCall_4_0_0());
                      					
                    }
                    pushFollow(FOLLOW_19);
                    lv_shard_key_definition_4_0=ruleShardKeyDefinition();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getKeyDefinitionRule());
                      						}
                      						set(
                      							current,
                      							"shard_key_definition",
                      							lv_shard_key_definition_4_0,
                      							"org.xtext.example.mydsl_sql.SQL.ShardKeyDefinition");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalSQLParser.g:579:4: (otherlv_5= Comma )?
                    int alt9=2;
                    int LA9_0 = input.LA(1);

                    if ( (LA9_0==Comma) ) {
                        alt9=1;
                    }
                    switch (alt9) {
                        case 1 :
                            // InternalSQLParser.g:580:5: otherlv_5= Comma
                            {
                            otherlv_5=(Token)match(input,Comma,FOLLOW_20); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(otherlv_5, grammarAccess.getKeyDefinitionAccess().getCommaKeyword_4_1());
                              				
                            }

                            }
                            break;

                    }


                    }
                    break;

            }

            // InternalSQLParser.g:586:3: ( (lv_id_list_with_size_6_0= ruleIDListWithSize ) )?
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( (LA11_0==RULE_ID) ) {
                alt11=1;
            }
            switch (alt11) {
                case 1 :
                    // InternalSQLParser.g:587:4: (lv_id_list_with_size_6_0= ruleIDListWithSize )
                    {
                    // InternalSQLParser.g:587:4: (lv_id_list_with_size_6_0= ruleIDListWithSize )
                    // InternalSQLParser.g:588:5: lv_id_list_with_size_6_0= ruleIDListWithSize
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getKeyDefinitionAccess().getId_list_with_sizeIDListWithSizeParserRuleCall_5_0());
                      				
                    }
                    pushFollow(FOLLOW_13);
                    lv_id_list_with_size_6_0=ruleIDListWithSize();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getKeyDefinitionRule());
                      					}
                      					set(
                      						current,
                      						"id_list_with_size",
                      						lv_id_list_with_size_6_0,
                      						"org.xtext.example.mydsl_sql.SQL.IDListWithSize");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_7=(Token)match(input,RightParenthesis,FOLLOW_14); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_7, grammarAccess.getKeyDefinitionAccess().getRightParenthesisKeyword_6());
              		
            }
            // InternalSQLParser.g:609:3: ( (lv_ttl_definition_8_0= ruleTtlDefinition ) )?
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==USING) ) {
                alt12=1;
            }
            switch (alt12) {
                case 1 :
                    // InternalSQLParser.g:610:4: (lv_ttl_definition_8_0= ruleTtlDefinition )
                    {
                    // InternalSQLParser.g:610:4: (lv_ttl_definition_8_0= ruleTtlDefinition )
                    // InternalSQLParser.g:611:5: lv_ttl_definition_8_0= ruleTtlDefinition
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getKeyDefinitionAccess().getTtl_definitionTtlDefinitionParserRuleCall_7_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_ttl_definition_8_0=ruleTtlDefinition();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getKeyDefinitionRule());
                      					}
                      					set(
                      						current,
                      						"ttl_definition",
                      						lv_ttl_definition_8_0,
                      						"org.xtext.example.mydsl_sql.SQL.TtlDefinition");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleKeyDefinition"


    // $ANTLR start "entryRuleIDListWithSize"
    // InternalSQLParser.g:632:1: entryRuleIDListWithSize returns [EObject current=null] : iv_ruleIDListWithSize= ruleIDListWithSize EOF ;
    public final EObject entryRuleIDListWithSize() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleIDListWithSize = null;


        try {
            // InternalSQLParser.g:632:55: (iv_ruleIDListWithSize= ruleIDListWithSize EOF )
            // InternalSQLParser.g:633:2: iv_ruleIDListWithSize= ruleIDListWithSize EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIDListWithSizeRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIDListWithSize=ruleIDListWithSize();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIDListWithSize; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleIDListWithSize"


    // $ANTLR start "ruleIDListWithSize"
    // InternalSQLParser.g:639:1: ruleIDListWithSize returns [EObject current=null] : ( ( (lv_id_with_size_0_0= ruleIDWithSize ) ) (otherlv_1= Comma ( (lv_id_with_size_2_0= ruleIDWithSize ) ) )* ) ;
    public final EObject ruleIDListWithSize() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_id_with_size_0_0 = null;

        EObject lv_id_with_size_2_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:645:2: ( ( ( (lv_id_with_size_0_0= ruleIDWithSize ) ) (otherlv_1= Comma ( (lv_id_with_size_2_0= ruleIDWithSize ) ) )* ) )
            // InternalSQLParser.g:646:2: ( ( (lv_id_with_size_0_0= ruleIDWithSize ) ) (otherlv_1= Comma ( (lv_id_with_size_2_0= ruleIDWithSize ) ) )* )
            {
            // InternalSQLParser.g:646:2: ( ( (lv_id_with_size_0_0= ruleIDWithSize ) ) (otherlv_1= Comma ( (lv_id_with_size_2_0= ruleIDWithSize ) ) )* )
            // InternalSQLParser.g:647:3: ( (lv_id_with_size_0_0= ruleIDWithSize ) ) (otherlv_1= Comma ( (lv_id_with_size_2_0= ruleIDWithSize ) ) )*
            {
            // InternalSQLParser.g:647:3: ( (lv_id_with_size_0_0= ruleIDWithSize ) )
            // InternalSQLParser.g:648:4: (lv_id_with_size_0_0= ruleIDWithSize )
            {
            // InternalSQLParser.g:648:4: (lv_id_with_size_0_0= ruleIDWithSize )
            // InternalSQLParser.g:649:5: lv_id_with_size_0_0= ruleIDWithSize
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getIDListWithSizeAccess().getId_with_sizeIDWithSizeParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_15);
            lv_id_with_size_0_0=ruleIDWithSize();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getIDListWithSizeRule());
              					}
              					add(
              						current,
              						"id_with_size",
              						lv_id_with_size_0_0,
              						"org.xtext.example.mydsl_sql.SQL.IDWithSize");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:666:3: (otherlv_1= Comma ( (lv_id_with_size_2_0= ruleIDWithSize ) ) )*
            loop13:
            do {
                int alt13=2;
                int LA13_0 = input.LA(1);

                if ( (LA13_0==Comma) ) {
                    alt13=1;
                }


                switch (alt13) {
            	case 1 :
            	    // InternalSQLParser.g:667:4: otherlv_1= Comma ( (lv_id_with_size_2_0= ruleIDWithSize ) )
            	    {
            	    otherlv_1=(Token)match(input,Comma,FOLLOW_21); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_1, grammarAccess.getIDListWithSizeAccess().getCommaKeyword_1_0());
            	      			
            	    }
            	    // InternalSQLParser.g:671:4: ( (lv_id_with_size_2_0= ruleIDWithSize ) )
            	    // InternalSQLParser.g:672:5: (lv_id_with_size_2_0= ruleIDWithSize )
            	    {
            	    // InternalSQLParser.g:672:5: (lv_id_with_size_2_0= ruleIDWithSize )
            	    // InternalSQLParser.g:673:6: lv_id_with_size_2_0= ruleIDWithSize
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getIDListWithSizeAccess().getId_with_sizeIDWithSizeParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_15);
            	    lv_id_with_size_2_0=ruleIDWithSize();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getIDListWithSizeRule());
            	      						}
            	      						add(
            	      							current,
            	      							"id_with_size",
            	      							lv_id_with_size_2_0,
            	      							"org.xtext.example.mydsl_sql.SQL.IDWithSize");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop13;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleIDListWithSize"


    // $ANTLR start "entryRuleIDWithSize"
    // InternalSQLParser.g:695:1: entryRuleIDWithSize returns [EObject current=null] : iv_ruleIDWithSize= ruleIDWithSize EOF ;
    public final EObject entryRuleIDWithSize() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleIDWithSize = null;


        try {
            // InternalSQLParser.g:695:51: (iv_ruleIDWithSize= ruleIDWithSize EOF )
            // InternalSQLParser.g:696:2: iv_ruleIDWithSize= ruleIDWithSize EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIDWithSizeRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIDWithSize=ruleIDWithSize();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIDWithSize; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleIDWithSize"


    // $ANTLR start "ruleIDWithSize"
    // InternalSQLParser.g:702:1: ruleIDWithSize returns [EObject current=null] : ( ( (lv_id_0_0= RULE_ID ) ) ( (lv_storage_size_1_0= ruleStorageSize ) )? ) ;
    public final EObject ruleIDWithSize() throws RecognitionException {
        EObject current = null;

        Token lv_id_0_0=null;
        EObject lv_storage_size_1_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:708:2: ( ( ( (lv_id_0_0= RULE_ID ) ) ( (lv_storage_size_1_0= ruleStorageSize ) )? ) )
            // InternalSQLParser.g:709:2: ( ( (lv_id_0_0= RULE_ID ) ) ( (lv_storage_size_1_0= ruleStorageSize ) )? )
            {
            // InternalSQLParser.g:709:2: ( ( (lv_id_0_0= RULE_ID ) ) ( (lv_storage_size_1_0= ruleStorageSize ) )? )
            // InternalSQLParser.g:710:3: ( (lv_id_0_0= RULE_ID ) ) ( (lv_storage_size_1_0= ruleStorageSize ) )?
            {
            // InternalSQLParser.g:710:3: ( (lv_id_0_0= RULE_ID ) )
            // InternalSQLParser.g:711:4: (lv_id_0_0= RULE_ID )
            {
            // InternalSQLParser.g:711:4: (lv_id_0_0= RULE_ID )
            // InternalSQLParser.g:712:5: lv_id_0_0= RULE_ID
            {
            lv_id_0_0=(Token)match(input,RULE_ID,FOLLOW_22); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_id_0_0, grammarAccess.getIDWithSizeAccess().getIdIDTerminalRuleCall_0_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getIDWithSizeRule());
              					}
              					setWithLastConsumed(
              						current,
              						"id",
              						lv_id_0_0,
              						"org.xtext.example.mydsl_sql.SQL.ID");
              				
            }

            }


            }

            // InternalSQLParser.g:728:3: ( (lv_storage_size_1_0= ruleStorageSize ) )?
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==LeftParenthesis) ) {
                alt14=1;
            }
            switch (alt14) {
                case 1 :
                    // InternalSQLParser.g:729:4: (lv_storage_size_1_0= ruleStorageSize )
                    {
                    // InternalSQLParser.g:729:4: (lv_storage_size_1_0= ruleStorageSize )
                    // InternalSQLParser.g:730:5: lv_storage_size_1_0= ruleStorageSize
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getIDWithSizeAccess().getStorage_sizeStorageSizeParserRuleCall_1_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_storage_size_1_0=ruleStorageSize();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getIDWithSizeRule());
                      					}
                      					set(
                      						current,
                      						"storage_size",
                      						lv_storage_size_1_0,
                      						"org.xtext.example.mydsl_sql.SQL.StorageSize");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleIDWithSize"


    // $ANTLR start "entryRuleStorageSize"
    // InternalSQLParser.g:751:1: entryRuleStorageSize returns [EObject current=null] : iv_ruleStorageSize= ruleStorageSize EOF ;
    public final EObject entryRuleStorageSize() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleStorageSize = null;


        try {
            // InternalSQLParser.g:751:52: (iv_ruleStorageSize= ruleStorageSize EOF )
            // InternalSQLParser.g:752:2: iv_ruleStorageSize= ruleStorageSize EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getStorageSizeRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleStorageSize=ruleStorageSize();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleStorageSize; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleStorageSize"


    // $ANTLR start "ruleStorageSize"
    // InternalSQLParser.g:758:1: ruleStorageSize returns [EObject current=null] : (otherlv_0= LeftParenthesis this_IntegerValue_1= ruleIntegerValue otherlv_2= RightParenthesis ) ;
    public final EObject ruleStorageSize() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject this_IntegerValue_1 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:764:2: ( (otherlv_0= LeftParenthesis this_IntegerValue_1= ruleIntegerValue otherlv_2= RightParenthesis ) )
            // InternalSQLParser.g:765:2: (otherlv_0= LeftParenthesis this_IntegerValue_1= ruleIntegerValue otherlv_2= RightParenthesis )
            {
            // InternalSQLParser.g:765:2: (otherlv_0= LeftParenthesis this_IntegerValue_1= ruleIntegerValue otherlv_2= RightParenthesis )
            // InternalSQLParser.g:766:3: otherlv_0= LeftParenthesis this_IntegerValue_1= ruleIntegerValue otherlv_2= RightParenthesis
            {
            otherlv_0=(Token)match(input,LeftParenthesis,FOLLOW_23); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getStorageSizeAccess().getLeftParenthesisKeyword_0());
              		
            }
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getStorageSizeAccess().getIntegerValueParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_13);
            this_IntegerValue_1=ruleIntegerValue();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_IntegerValue_1;
              			afterParserOrEnumRuleCall();
              		
            }
            otherlv_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getStorageSizeAccess().getRightParenthesisKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleStorageSize"


    // $ANTLR start "entryRuleShardKeyDefinition"
    // InternalSQLParser.g:789:1: entryRuleShardKeyDefinition returns [EObject current=null] : iv_ruleShardKeyDefinition= ruleShardKeyDefinition EOF ;
    public final EObject entryRuleShardKeyDefinition() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleShardKeyDefinition = null;


        try {
            // InternalSQLParser.g:789:59: (iv_ruleShardKeyDefinition= ruleShardKeyDefinition EOF )
            // InternalSQLParser.g:790:2: iv_ruleShardKeyDefinition= ruleShardKeyDefinition EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getShardKeyDefinitionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleShardKeyDefinition=ruleShardKeyDefinition();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleShardKeyDefinition; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleShardKeyDefinition"


    // $ANTLR start "ruleShardKeyDefinition"
    // InternalSQLParser.g:796:1: ruleShardKeyDefinition returns [EObject current=null] : (otherlv_0= SHARD otherlv_1= LeftParenthesis ( (lv_id_list_with_size_2_0= ruleIDListWithSize ) ) otherlv_3= RightParenthesis ) ;
    public final EObject ruleShardKeyDefinition() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_id_list_with_size_2_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:802:2: ( (otherlv_0= SHARD otherlv_1= LeftParenthesis ( (lv_id_list_with_size_2_0= ruleIDListWithSize ) ) otherlv_3= RightParenthesis ) )
            // InternalSQLParser.g:803:2: (otherlv_0= SHARD otherlv_1= LeftParenthesis ( (lv_id_list_with_size_2_0= ruleIDListWithSize ) ) otherlv_3= RightParenthesis )
            {
            // InternalSQLParser.g:803:2: (otherlv_0= SHARD otherlv_1= LeftParenthesis ( (lv_id_list_with_size_2_0= ruleIDListWithSize ) ) otherlv_3= RightParenthesis )
            // InternalSQLParser.g:804:3: otherlv_0= SHARD otherlv_1= LeftParenthesis ( (lv_id_list_with_size_2_0= ruleIDListWithSize ) ) otherlv_3= RightParenthesis
            {
            otherlv_0=(Token)match(input,SHARD,FOLLOW_11); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getShardKeyDefinitionAccess().getSHARDKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_21); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getShardKeyDefinitionAccess().getLeftParenthesisKeyword_1());
              		
            }
            // InternalSQLParser.g:812:3: ( (lv_id_list_with_size_2_0= ruleIDListWithSize ) )
            // InternalSQLParser.g:813:4: (lv_id_list_with_size_2_0= ruleIDListWithSize )
            {
            // InternalSQLParser.g:813:4: (lv_id_list_with_size_2_0= ruleIDListWithSize )
            // InternalSQLParser.g:814:5: lv_id_list_with_size_2_0= ruleIDListWithSize
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getShardKeyDefinitionAccess().getId_list_with_sizeIDListWithSizeParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_13);
            lv_id_list_with_size_2_0=ruleIDListWithSize();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getShardKeyDefinitionRule());
              					}
              					set(
              						current,
              						"id_list_with_size",
              						lv_id_list_with_size_2_0,
              						"org.xtext.example.mydsl_sql.SQL.IDListWithSize");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getShardKeyDefinitionAccess().getRightParenthesisKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleShardKeyDefinition"


    // $ANTLR start "entryRuleTtlDefinition"
    // InternalSQLParser.g:839:1: entryRuleTtlDefinition returns [EObject current=null] : iv_ruleTtlDefinition= ruleTtlDefinition EOF ;
    public final EObject entryRuleTtlDefinition() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTtlDefinition = null;


        try {
            // InternalSQLParser.g:839:54: (iv_ruleTtlDefinition= ruleTtlDefinition EOF )
            // InternalSQLParser.g:840:2: iv_ruleTtlDefinition= ruleTtlDefinition EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTtlDefinitionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTtlDefinition=ruleTtlDefinition();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTtlDefinition; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTtlDefinition"


    // $ANTLR start "ruleTtlDefinition"
    // InternalSQLParser.g:846:1: ruleTtlDefinition returns [EObject current=null] : (otherlv_0= USING otherlv_1= TTL this_IntegerValue_2= ruleIntegerValue (otherlv_3= HOURS | otherlv_4= DAYS ) ) ;
    public final EObject ruleTtlDefinition() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        EObject this_IntegerValue_2 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:852:2: ( (otherlv_0= USING otherlv_1= TTL this_IntegerValue_2= ruleIntegerValue (otherlv_3= HOURS | otherlv_4= DAYS ) ) )
            // InternalSQLParser.g:853:2: (otherlv_0= USING otherlv_1= TTL this_IntegerValue_2= ruleIntegerValue (otherlv_3= HOURS | otherlv_4= DAYS ) )
            {
            // InternalSQLParser.g:853:2: (otherlv_0= USING otherlv_1= TTL this_IntegerValue_2= ruleIntegerValue (otherlv_3= HOURS | otherlv_4= DAYS ) )
            // InternalSQLParser.g:854:3: otherlv_0= USING otherlv_1= TTL this_IntegerValue_2= ruleIntegerValue (otherlv_3= HOURS | otherlv_4= DAYS )
            {
            otherlv_0=(Token)match(input,USING,FOLLOW_24); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getTtlDefinitionAccess().getUSINGKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,TTL,FOLLOW_23); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getTtlDefinitionAccess().getTTLKeyword_1());
              		
            }
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getTtlDefinitionAccess().getIntegerValueParserRuleCall_2());
              		
            }
            pushFollow(FOLLOW_25);
            this_IntegerValue_2=ruleIntegerValue();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_IntegerValue_2;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:873:3: (otherlv_3= HOURS | otherlv_4= DAYS )
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==HOURS) ) {
                alt15=1;
            }
            else if ( (LA15_0==DAYS) ) {
                alt15=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 15, 0, input);

                throw nvae;
            }
            switch (alt15) {
                case 1 :
                    // InternalSQLParser.g:874:4: otherlv_3= HOURS
                    {
                    otherlv_3=(Token)match(input,HOURS,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_3, grammarAccess.getTtlDefinitionAccess().getHOURSKeyword_3_0());
                      			
                    }

                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:879:4: otherlv_4= DAYS
                    {
                    otherlv_4=(Token)match(input,DAYS,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_4, grammarAccess.getTtlDefinitionAccess().getDAYSKeyword_3_1());
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTtlDefinition"


    // $ANTLR start "entryRuleTypeDefinition"
    // InternalSQLParser.g:888:1: entryRuleTypeDefinition returns [String current=null] : iv_ruleTypeDefinition= ruleTypeDefinition EOF ;
    public final String entryRuleTypeDefinition() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleTypeDefinition = null;


        try {
            // InternalSQLParser.g:888:54: (iv_ruleTypeDefinition= ruleTypeDefinition EOF )
            // InternalSQLParser.g:889:2: iv_ruleTypeDefinition= ruleTypeDefinition EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeDefinitionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeDefinition=ruleTypeDefinition();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeDefinition.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTypeDefinition"


    // $ANTLR start "ruleTypeDefinition"
    // InternalSQLParser.g:895:1: ruleTypeDefinition returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= INTEGER | kw= LONG | kw= FLOAT | kw= DOUBLE | kw= NUMBER | kw= STRING | kw= BOOLEAN | kw= ANY | kw= JSON ) ;
    public final AntlrDatatypeRuleToken ruleTypeDefinition() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            // InternalSQLParser.g:901:2: ( (kw= INTEGER | kw= LONG | kw= FLOAT | kw= DOUBLE | kw= NUMBER | kw= STRING | kw= BOOLEAN | kw= ANY | kw= JSON ) )
            // InternalSQLParser.g:902:2: (kw= INTEGER | kw= LONG | kw= FLOAT | kw= DOUBLE | kw= NUMBER | kw= STRING | kw= BOOLEAN | kw= ANY | kw= JSON )
            {
            // InternalSQLParser.g:902:2: (kw= INTEGER | kw= LONG | kw= FLOAT | kw= DOUBLE | kw= NUMBER | kw= STRING | kw= BOOLEAN | kw= ANY | kw= JSON )
            int alt16=9;
            switch ( input.LA(1) ) {
            case INTEGER:
                {
                alt16=1;
                }
                break;
            case LONG:
                {
                alt16=2;
                }
                break;
            case FLOAT:
                {
                alt16=3;
                }
                break;
            case DOUBLE:
                {
                alt16=4;
                }
                break;
            case NUMBER:
                {
                alt16=5;
                }
                break;
            case STRING:
                {
                alt16=6;
                }
                break;
            case BOOLEAN:
                {
                alt16=7;
                }
                break;
            case ANY:
                {
                alt16=8;
                }
                break;
            case JSON:
                {
                alt16=9;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 16, 0, input);

                throw nvae;
            }

            switch (alt16) {
                case 1 :
                    // InternalSQLParser.g:903:3: kw= INTEGER
                    {
                    kw=(Token)match(input,INTEGER,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getTypeDefinitionAccess().getINTEGERKeyword_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:909:3: kw= LONG
                    {
                    kw=(Token)match(input,LONG,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getTypeDefinitionAccess().getLONGKeyword_1());
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:915:3: kw= FLOAT
                    {
                    kw=(Token)match(input,FLOAT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getTypeDefinitionAccess().getFLOATKeyword_2());
                      		
                    }

                    }
                    break;
                case 4 :
                    // InternalSQLParser.g:921:3: kw= DOUBLE
                    {
                    kw=(Token)match(input,DOUBLE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getTypeDefinitionAccess().getDOUBLEKeyword_3());
                      		
                    }

                    }
                    break;
                case 5 :
                    // InternalSQLParser.g:927:3: kw= NUMBER
                    {
                    kw=(Token)match(input,NUMBER,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getTypeDefinitionAccess().getNUMBERKeyword_4());
                      		
                    }

                    }
                    break;
                case 6 :
                    // InternalSQLParser.g:933:3: kw= STRING
                    {
                    kw=(Token)match(input,STRING,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getTypeDefinitionAccess().getSTRINGKeyword_5());
                      		
                    }

                    }
                    break;
                case 7 :
                    // InternalSQLParser.g:939:3: kw= BOOLEAN
                    {
                    kw=(Token)match(input,BOOLEAN,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getTypeDefinitionAccess().getBOOLEANKeyword_6());
                      		
                    }

                    }
                    break;
                case 8 :
                    // InternalSQLParser.g:945:3: kw= ANY
                    {
                    kw=(Token)match(input,ANY,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getTypeDefinitionAccess().getANYKeyword_7());
                      		
                    }

                    }
                    break;
                case 9 :
                    // InternalSQLParser.g:951:3: kw= JSON
                    {
                    kw=(Token)match(input,JSON,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getTypeDefinitionAccess().getJSONKeyword_8());
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTypeDefinition"


    // $ANTLR start "entryRuleWithQuery"
    // InternalSQLParser.g:960:1: entryRuleWithQuery returns [EObject current=null] : iv_ruleWithQuery= ruleWithQuery EOF ;
    public final EObject entryRuleWithQuery() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleWithQuery = null;


        try {
            // InternalSQLParser.g:960:50: (iv_ruleWithQuery= ruleWithQuery EOF )
            // InternalSQLParser.g:961:2: iv_ruleWithQuery= ruleWithQuery EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getWithQueryRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleWithQuery=ruleWithQuery();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleWithQuery; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleWithQuery"


    // $ANTLR start "ruleWithQuery"
    // InternalSQLParser.g:967:1: ruleWithQuery returns [EObject current=null] : ( ( (lv_w_0_0= WITH ) ) ( (lv_wname_1_0= ruleDbObjectName ) ) ( (lv_withCols_2_0= ruleWithColumns ) )? otherlv_3= AS otherlv_4= LeftParenthesis ( (lv_query_5_0= ruleSelectQuery ) ) otherlv_6= RightParenthesis (otherlv_7= Comma ( (lv_additionalWname_8_0= ruleDbObjectName ) ) ( (lv_additionalWithCols_9_0= ruleWithColumns ) )? otherlv_10= AS otherlv_11= LeftParenthesis ( (lv_additionalQueries_12_0= ruleSelectQuery ) ) otherlv_13= RightParenthesis )* ) ;
    public final EObject ruleWithQuery() throws RecognitionException {
        EObject current = null;

        Token lv_w_0_0=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        Token otherlv_7=null;
        Token otherlv_10=null;
        Token otherlv_11=null;
        Token otherlv_13=null;
        EObject lv_wname_1_0 = null;

        EObject lv_withCols_2_0 = null;

        EObject lv_query_5_0 = null;

        EObject lv_additionalWname_8_0 = null;

        EObject lv_additionalWithCols_9_0 = null;

        EObject lv_additionalQueries_12_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:973:2: ( ( ( (lv_w_0_0= WITH ) ) ( (lv_wname_1_0= ruleDbObjectName ) ) ( (lv_withCols_2_0= ruleWithColumns ) )? otherlv_3= AS otherlv_4= LeftParenthesis ( (lv_query_5_0= ruleSelectQuery ) ) otherlv_6= RightParenthesis (otherlv_7= Comma ( (lv_additionalWname_8_0= ruleDbObjectName ) ) ( (lv_additionalWithCols_9_0= ruleWithColumns ) )? otherlv_10= AS otherlv_11= LeftParenthesis ( (lv_additionalQueries_12_0= ruleSelectQuery ) ) otherlv_13= RightParenthesis )* ) )
            // InternalSQLParser.g:974:2: ( ( (lv_w_0_0= WITH ) ) ( (lv_wname_1_0= ruleDbObjectName ) ) ( (lv_withCols_2_0= ruleWithColumns ) )? otherlv_3= AS otherlv_4= LeftParenthesis ( (lv_query_5_0= ruleSelectQuery ) ) otherlv_6= RightParenthesis (otherlv_7= Comma ( (lv_additionalWname_8_0= ruleDbObjectName ) ) ( (lv_additionalWithCols_9_0= ruleWithColumns ) )? otherlv_10= AS otherlv_11= LeftParenthesis ( (lv_additionalQueries_12_0= ruleSelectQuery ) ) otherlv_13= RightParenthesis )* )
            {
            // InternalSQLParser.g:974:2: ( ( (lv_w_0_0= WITH ) ) ( (lv_wname_1_0= ruleDbObjectName ) ) ( (lv_withCols_2_0= ruleWithColumns ) )? otherlv_3= AS otherlv_4= LeftParenthesis ( (lv_query_5_0= ruleSelectQuery ) ) otherlv_6= RightParenthesis (otherlv_7= Comma ( (lv_additionalWname_8_0= ruleDbObjectName ) ) ( (lv_additionalWithCols_9_0= ruleWithColumns ) )? otherlv_10= AS otherlv_11= LeftParenthesis ( (lv_additionalQueries_12_0= ruleSelectQuery ) ) otherlv_13= RightParenthesis )* )
            // InternalSQLParser.g:975:3: ( (lv_w_0_0= WITH ) ) ( (lv_wname_1_0= ruleDbObjectName ) ) ( (lv_withCols_2_0= ruleWithColumns ) )? otherlv_3= AS otherlv_4= LeftParenthesis ( (lv_query_5_0= ruleSelectQuery ) ) otherlv_6= RightParenthesis (otherlv_7= Comma ( (lv_additionalWname_8_0= ruleDbObjectName ) ) ( (lv_additionalWithCols_9_0= ruleWithColumns ) )? otherlv_10= AS otherlv_11= LeftParenthesis ( (lv_additionalQueries_12_0= ruleSelectQuery ) ) otherlv_13= RightParenthesis )*
            {
            // InternalSQLParser.g:975:3: ( (lv_w_0_0= WITH ) )
            // InternalSQLParser.g:976:4: (lv_w_0_0= WITH )
            {
            // InternalSQLParser.g:976:4: (lv_w_0_0= WITH )
            // InternalSQLParser.g:977:5: lv_w_0_0= WITH
            {
            lv_w_0_0=(Token)match(input,WITH,FOLLOW_26); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_w_0_0, grammarAccess.getWithQueryAccess().getWWITHKeyword_0_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getWithQueryRule());
              					}
              					setWithLastConsumed(current, "w", lv_w_0_0, "WITH");
              				
            }

            }


            }

            // InternalSQLParser.g:989:3: ( (lv_wname_1_0= ruleDbObjectName ) )
            // InternalSQLParser.g:990:4: (lv_wname_1_0= ruleDbObjectName )
            {
            // InternalSQLParser.g:990:4: (lv_wname_1_0= ruleDbObjectName )
            // InternalSQLParser.g:991:5: lv_wname_1_0= ruleDbObjectName
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getWithQueryAccess().getWnameDbObjectNameParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_27);
            lv_wname_1_0=ruleDbObjectName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getWithQueryRule());
              					}
              					set(
              						current,
              						"wname",
              						lv_wname_1_0,
              						"org.xtext.example.mydsl_sql.SQL.DbObjectName");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:1008:3: ( (lv_withCols_2_0= ruleWithColumns ) )?
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==LeftParenthesis) ) {
                alt17=1;
            }
            switch (alt17) {
                case 1 :
                    // InternalSQLParser.g:1009:4: (lv_withCols_2_0= ruleWithColumns )
                    {
                    // InternalSQLParser.g:1009:4: (lv_withCols_2_0= ruleWithColumns )
                    // InternalSQLParser.g:1010:5: lv_withCols_2_0= ruleWithColumns
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getWithQueryAccess().getWithColsWithColumnsParserRuleCall_2_0());
                      				
                    }
                    pushFollow(FOLLOW_28);
                    lv_withCols_2_0=ruleWithColumns();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getWithQueryRule());
                      					}
                      					set(
                      						current,
                      						"withCols",
                      						lv_withCols_2_0,
                      						"org.xtext.example.mydsl_sql.SQL.WithColumns");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_3=(Token)match(input,AS,FOLLOW_11); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getWithQueryAccess().getASKeyword_3());
              		
            }
            otherlv_4=(Token)match(input,LeftParenthesis,FOLLOW_29); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getWithQueryAccess().getLeftParenthesisKeyword_4());
              		
            }
            // InternalSQLParser.g:1035:3: ( (lv_query_5_0= ruleSelectQuery ) )
            // InternalSQLParser.g:1036:4: (lv_query_5_0= ruleSelectQuery )
            {
            // InternalSQLParser.g:1036:4: (lv_query_5_0= ruleSelectQuery )
            // InternalSQLParser.g:1037:5: lv_query_5_0= ruleSelectQuery
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getWithQueryAccess().getQuerySelectQueryParserRuleCall_5_0());
              				
            }
            pushFollow(FOLLOW_13);
            lv_query_5_0=ruleSelectQuery();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getWithQueryRule());
              					}
              					set(
              						current,
              						"query",
              						lv_query_5_0,
              						"org.xtext.example.mydsl_sql.SQL.SelectQuery");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_6=(Token)match(input,RightParenthesis,FOLLOW_15); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_6, grammarAccess.getWithQueryAccess().getRightParenthesisKeyword_6());
              		
            }
            // InternalSQLParser.g:1058:3: (otherlv_7= Comma ( (lv_additionalWname_8_0= ruleDbObjectName ) ) ( (lv_additionalWithCols_9_0= ruleWithColumns ) )? otherlv_10= AS otherlv_11= LeftParenthesis ( (lv_additionalQueries_12_0= ruleSelectQuery ) ) otherlv_13= RightParenthesis )*
            loop19:
            do {
                int alt19=2;
                int LA19_0 = input.LA(1);

                if ( (LA19_0==Comma) ) {
                    alt19=1;
                }


                switch (alt19) {
            	case 1 :
            	    // InternalSQLParser.g:1059:4: otherlv_7= Comma ( (lv_additionalWname_8_0= ruleDbObjectName ) ) ( (lv_additionalWithCols_9_0= ruleWithColumns ) )? otherlv_10= AS otherlv_11= LeftParenthesis ( (lv_additionalQueries_12_0= ruleSelectQuery ) ) otherlv_13= RightParenthesis
            	    {
            	    otherlv_7=(Token)match(input,Comma,FOLLOW_26); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_7, grammarAccess.getWithQueryAccess().getCommaKeyword_7_0());
            	      			
            	    }
            	    // InternalSQLParser.g:1063:4: ( (lv_additionalWname_8_0= ruleDbObjectName ) )
            	    // InternalSQLParser.g:1064:5: (lv_additionalWname_8_0= ruleDbObjectName )
            	    {
            	    // InternalSQLParser.g:1064:5: (lv_additionalWname_8_0= ruleDbObjectName )
            	    // InternalSQLParser.g:1065:6: lv_additionalWname_8_0= ruleDbObjectName
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getWithQueryAccess().getAdditionalWnameDbObjectNameParserRuleCall_7_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_27);
            	    lv_additionalWname_8_0=ruleDbObjectName();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getWithQueryRule());
            	      						}
            	      						add(
            	      							current,
            	      							"additionalWname",
            	      							lv_additionalWname_8_0,
            	      							"org.xtext.example.mydsl_sql.SQL.DbObjectName");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }

            	    // InternalSQLParser.g:1082:4: ( (lv_additionalWithCols_9_0= ruleWithColumns ) )?
            	    int alt18=2;
            	    int LA18_0 = input.LA(1);

            	    if ( (LA18_0==LeftParenthesis) ) {
            	        alt18=1;
            	    }
            	    switch (alt18) {
            	        case 1 :
            	            // InternalSQLParser.g:1083:5: (lv_additionalWithCols_9_0= ruleWithColumns )
            	            {
            	            // InternalSQLParser.g:1083:5: (lv_additionalWithCols_9_0= ruleWithColumns )
            	            // InternalSQLParser.g:1084:6: lv_additionalWithCols_9_0= ruleWithColumns
            	            {
            	            if ( state.backtracking==0 ) {

            	              						newCompositeNode(grammarAccess.getWithQueryAccess().getAdditionalWithColsWithColumnsParserRuleCall_7_2_0());
            	              					
            	            }
            	            pushFollow(FOLLOW_28);
            	            lv_additionalWithCols_9_0=ruleWithColumns();

            	            state._fsp--;
            	            if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              						if (current==null) {
            	              							current = createModelElementForParent(grammarAccess.getWithQueryRule());
            	              						}
            	              						add(
            	              							current,
            	              							"additionalWithCols",
            	              							lv_additionalWithCols_9_0,
            	              							"org.xtext.example.mydsl_sql.SQL.WithColumns");
            	              						afterParserOrEnumRuleCall();
            	              					
            	            }

            	            }


            	            }
            	            break;

            	    }

            	    otherlv_10=(Token)match(input,AS,FOLLOW_11); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_10, grammarAccess.getWithQueryAccess().getASKeyword_7_3());
            	      			
            	    }
            	    otherlv_11=(Token)match(input,LeftParenthesis,FOLLOW_29); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_11, grammarAccess.getWithQueryAccess().getLeftParenthesisKeyword_7_4());
            	      			
            	    }
            	    // InternalSQLParser.g:1109:4: ( (lv_additionalQueries_12_0= ruleSelectQuery ) )
            	    // InternalSQLParser.g:1110:5: (lv_additionalQueries_12_0= ruleSelectQuery )
            	    {
            	    // InternalSQLParser.g:1110:5: (lv_additionalQueries_12_0= ruleSelectQuery )
            	    // InternalSQLParser.g:1111:6: lv_additionalQueries_12_0= ruleSelectQuery
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getWithQueryAccess().getAdditionalQueriesSelectQueryParserRuleCall_7_5_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_13);
            	    lv_additionalQueries_12_0=ruleSelectQuery();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getWithQueryRule());
            	      						}
            	      						add(
            	      							current,
            	      							"additionalQueries",
            	      							lv_additionalQueries_12_0,
            	      							"org.xtext.example.mydsl_sql.SQL.SelectQuery");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }

            	    otherlv_13=(Token)match(input,RightParenthesis,FOLLOW_15); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_13, grammarAccess.getWithQueryAccess().getRightParenthesisKeyword_7_6());
            	      			
            	    }

            	    }
            	    break;

            	default :
            	    break loop19;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleWithQuery"


    // $ANTLR start "entryRuleWithColumns"
    // InternalSQLParser.g:1137:1: entryRuleWithColumns returns [EObject current=null] : iv_ruleWithColumns= ruleWithColumns EOF ;
    public final EObject entryRuleWithColumns() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleWithColumns = null;


        try {
            // InternalSQLParser.g:1137:52: (iv_ruleWithColumns= ruleWithColumns EOF )
            // InternalSQLParser.g:1138:2: iv_ruleWithColumns= ruleWithColumns EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getWithColumnsRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleWithColumns=ruleWithColumns();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleWithColumns; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleWithColumns"


    // $ANTLR start "ruleWithColumns"
    // InternalSQLParser.g:1144:1: ruleWithColumns returns [EObject current=null] : (otherlv_0= LeftParenthesis this_UsingCols_1= ruleUsingCols otherlv_2= RightParenthesis ) ;
    public final EObject ruleWithColumns() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject this_UsingCols_1 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:1150:2: ( (otherlv_0= LeftParenthesis this_UsingCols_1= ruleUsingCols otherlv_2= RightParenthesis ) )
            // InternalSQLParser.g:1151:2: (otherlv_0= LeftParenthesis this_UsingCols_1= ruleUsingCols otherlv_2= RightParenthesis )
            {
            // InternalSQLParser.g:1151:2: (otherlv_0= LeftParenthesis this_UsingCols_1= ruleUsingCols otherlv_2= RightParenthesis )
            // InternalSQLParser.g:1152:3: otherlv_0= LeftParenthesis this_UsingCols_1= ruleUsingCols otherlv_2= RightParenthesis
            {
            otherlv_0=(Token)match(input,LeftParenthesis,FOLLOW_26); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getWithColumnsAccess().getLeftParenthesisKeyword_0());
              		
            }
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getWithColumnsAccess().getUsingColsParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_13);
            this_UsingCols_1=ruleUsingCols();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_UsingCols_1;
              			afterParserOrEnumRuleCall();
              		
            }
            otherlv_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getWithColumnsAccess().getRightParenthesisKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleWithColumns"


    // $ANTLR start "entryRuleFetchFirst"
    // InternalSQLParser.g:1175:1: entryRuleFetchFirst returns [EObject current=null] : iv_ruleFetchFirst= ruleFetchFirst EOF ;
    public final EObject entryRuleFetchFirst() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFetchFirst = null;


        try {
            // InternalSQLParser.g:1175:51: (iv_ruleFetchFirst= ruleFetchFirst EOF )
            // InternalSQLParser.g:1176:2: iv_ruleFetchFirst= ruleFetchFirst EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFetchFirstRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFetchFirst=ruleFetchFirst();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFetchFirst; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFetchFirst"


    // $ANTLR start "ruleFetchFirst"
    // InternalSQLParser.g:1182:1: ruleFetchFirst returns [EObject current=null] : ( ( (lv_fetchFirst_0_0= ruleUnsignedValue ) ) ( ( (lv_row_1_1= ROW | lv_row_1_2= ROWS ) ) ) otherlv_2= ONLY ) ;
    public final EObject ruleFetchFirst() throws RecognitionException {
        EObject current = null;

        Token lv_row_1_1=null;
        Token lv_row_1_2=null;
        Token otherlv_2=null;
        EObject lv_fetchFirst_0_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:1188:2: ( ( ( (lv_fetchFirst_0_0= ruleUnsignedValue ) ) ( ( (lv_row_1_1= ROW | lv_row_1_2= ROWS ) ) ) otherlv_2= ONLY ) )
            // InternalSQLParser.g:1189:2: ( ( (lv_fetchFirst_0_0= ruleUnsignedValue ) ) ( ( (lv_row_1_1= ROW | lv_row_1_2= ROWS ) ) ) otherlv_2= ONLY )
            {
            // InternalSQLParser.g:1189:2: ( ( (lv_fetchFirst_0_0= ruleUnsignedValue ) ) ( ( (lv_row_1_1= ROW | lv_row_1_2= ROWS ) ) ) otherlv_2= ONLY )
            // InternalSQLParser.g:1190:3: ( (lv_fetchFirst_0_0= ruleUnsignedValue ) ) ( ( (lv_row_1_1= ROW | lv_row_1_2= ROWS ) ) ) otherlv_2= ONLY
            {
            // InternalSQLParser.g:1190:3: ( (lv_fetchFirst_0_0= ruleUnsignedValue ) )
            // InternalSQLParser.g:1191:4: (lv_fetchFirst_0_0= ruleUnsignedValue )
            {
            // InternalSQLParser.g:1191:4: (lv_fetchFirst_0_0= ruleUnsignedValue )
            // InternalSQLParser.g:1192:5: lv_fetchFirst_0_0= ruleUnsignedValue
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getFetchFirstAccess().getFetchFirstUnsignedValueParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_30);
            lv_fetchFirst_0_0=ruleUnsignedValue();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getFetchFirstRule());
              					}
              					set(
              						current,
              						"fetchFirst",
              						lv_fetchFirst_0_0,
              						"org.xtext.example.mydsl_sql.SQL.UnsignedValue");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:1209:3: ( ( (lv_row_1_1= ROW | lv_row_1_2= ROWS ) ) )
            // InternalSQLParser.g:1210:4: ( (lv_row_1_1= ROW | lv_row_1_2= ROWS ) )
            {
            // InternalSQLParser.g:1210:4: ( (lv_row_1_1= ROW | lv_row_1_2= ROWS ) )
            // InternalSQLParser.g:1211:5: (lv_row_1_1= ROW | lv_row_1_2= ROWS )
            {
            // InternalSQLParser.g:1211:5: (lv_row_1_1= ROW | lv_row_1_2= ROWS )
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==ROW) ) {
                alt20=1;
            }
            else if ( (LA20_0==ROWS) ) {
                alt20=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 20, 0, input);

                throw nvae;
            }
            switch (alt20) {
                case 1 :
                    // InternalSQLParser.g:1212:6: lv_row_1_1= ROW
                    {
                    lv_row_1_1=(Token)match(input,ROW,FOLLOW_31); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_row_1_1, grammarAccess.getFetchFirstAccess().getRowROWKeyword_1_0_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getFetchFirstRule());
                      						}
                      						setWithLastConsumed(current, "row", lv_row_1_1, null);
                      					
                    }

                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:1223:6: lv_row_1_2= ROWS
                    {
                    lv_row_1_2=(Token)match(input,ROWS,FOLLOW_31); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_row_1_2, grammarAccess.getFetchFirstAccess().getRowROWSKeyword_1_0_1());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getFetchFirstRule());
                      						}
                      						setWithLastConsumed(current, "row", lv_row_1_2, null);
                      					
                    }

                    }
                    break;

            }


            }


            }

            otherlv_2=(Token)match(input,ONLY,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getFetchFirstAccess().getONLYKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFetchFirst"


    // $ANTLR start "entryRuleOffset"
    // InternalSQLParser.g:1244:1: entryRuleOffset returns [EObject current=null] : iv_ruleOffset= ruleOffset EOF ;
    public final EObject entryRuleOffset() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOffset = null;


        try {
            // InternalSQLParser.g:1244:47: (iv_ruleOffset= ruleOffset EOF )
            // InternalSQLParser.g:1245:2: iv_ruleOffset= ruleOffset EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOffsetRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOffset=ruleOffset();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOffset; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOffset"


    // $ANTLR start "ruleOffset"
    // InternalSQLParser.g:1251:1: ruleOffset returns [EObject current=null] : ( (lv_offset_0_0= RULE_INT ) ) ;
    public final EObject ruleOffset() throws RecognitionException {
        EObject current = null;

        Token lv_offset_0_0=null;


        	enterRule();

        try {
            // InternalSQLParser.g:1257:2: ( ( (lv_offset_0_0= RULE_INT ) ) )
            // InternalSQLParser.g:1258:2: ( (lv_offset_0_0= RULE_INT ) )
            {
            // InternalSQLParser.g:1258:2: ( (lv_offset_0_0= RULE_INT ) )
            // InternalSQLParser.g:1259:3: (lv_offset_0_0= RULE_INT )
            {
            // InternalSQLParser.g:1259:3: (lv_offset_0_0= RULE_INT )
            // InternalSQLParser.g:1260:4: lv_offset_0_0= RULE_INT
            {
            lv_offset_0_0=(Token)match(input,RULE_INT,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(lv_offset_0_0, grammarAccess.getOffsetAccess().getOffsetINTTerminalRuleCall_0());
              			
            }
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getOffsetRule());
              				}
              				setWithLastConsumed(
              					current,
              					"offset",
              					lv_offset_0_0,
              					"org.xtext.example.mydsl_sql.SQL.INT");
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOffset"


    // $ANTLR start "entryRuleLimit"
    // InternalSQLParser.g:1279:1: entryRuleLimit returns [EObject current=null] : iv_ruleLimit= ruleLimit EOF ;
    public final EObject entryRuleLimit() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleLimit = null;


        try {
            // InternalSQLParser.g:1279:46: (iv_ruleLimit= ruleLimit EOF )
            // InternalSQLParser.g:1280:2: iv_ruleLimit= ruleLimit EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLimitRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLimit=ruleLimit();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLimit; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleLimit"


    // $ANTLR start "ruleLimit"
    // InternalSQLParser.g:1286:1: ruleLimit returns [EObject current=null] : ( ( () otherlv_1= ALL ) | ( ( (lv_l1_2_0= RULE_UNSIGNED ) ) (otherlv_3= Comma ( (lv_l2_4_0= RULE_UNSIGNED ) ) )? ) ) ;
    public final EObject ruleLimit() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token lv_l1_2_0=null;
        Token otherlv_3=null;
        Token lv_l2_4_0=null;


        	enterRule();

        try {
            // InternalSQLParser.g:1292:2: ( ( ( () otherlv_1= ALL ) | ( ( (lv_l1_2_0= RULE_UNSIGNED ) ) (otherlv_3= Comma ( (lv_l2_4_0= RULE_UNSIGNED ) ) )? ) ) )
            // InternalSQLParser.g:1293:2: ( ( () otherlv_1= ALL ) | ( ( (lv_l1_2_0= RULE_UNSIGNED ) ) (otherlv_3= Comma ( (lv_l2_4_0= RULE_UNSIGNED ) ) )? ) )
            {
            // InternalSQLParser.g:1293:2: ( ( () otherlv_1= ALL ) | ( ( (lv_l1_2_0= RULE_UNSIGNED ) ) (otherlv_3= Comma ( (lv_l2_4_0= RULE_UNSIGNED ) ) )? ) )
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==ALL) ) {
                alt22=1;
            }
            else if ( (LA22_0==RULE_UNSIGNED) ) {
                alt22=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 22, 0, input);

                throw nvae;
            }
            switch (alt22) {
                case 1 :
                    // InternalSQLParser.g:1294:3: ( () otherlv_1= ALL )
                    {
                    // InternalSQLParser.g:1294:3: ( () otherlv_1= ALL )
                    // InternalSQLParser.g:1295:4: () otherlv_1= ALL
                    {
                    // InternalSQLParser.g:1295:4: ()
                    // InternalSQLParser.g:1296:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getLimitAccess().getLimitAction_0_0(),
                      						current);
                      				
                    }

                    }

                    otherlv_1=(Token)match(input,ALL,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getLimitAccess().getALLKeyword_0_1());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:1311:3: ( ( (lv_l1_2_0= RULE_UNSIGNED ) ) (otherlv_3= Comma ( (lv_l2_4_0= RULE_UNSIGNED ) ) )? )
                    {
                    // InternalSQLParser.g:1311:3: ( ( (lv_l1_2_0= RULE_UNSIGNED ) ) (otherlv_3= Comma ( (lv_l2_4_0= RULE_UNSIGNED ) ) )? )
                    // InternalSQLParser.g:1312:4: ( (lv_l1_2_0= RULE_UNSIGNED ) ) (otherlv_3= Comma ( (lv_l2_4_0= RULE_UNSIGNED ) ) )?
                    {
                    // InternalSQLParser.g:1312:4: ( (lv_l1_2_0= RULE_UNSIGNED ) )
                    // InternalSQLParser.g:1313:5: (lv_l1_2_0= RULE_UNSIGNED )
                    {
                    // InternalSQLParser.g:1313:5: (lv_l1_2_0= RULE_UNSIGNED )
                    // InternalSQLParser.g:1314:6: lv_l1_2_0= RULE_UNSIGNED
                    {
                    lv_l1_2_0=(Token)match(input,RULE_UNSIGNED,FOLLOW_15); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_l1_2_0, grammarAccess.getLimitAccess().getL1UNSIGNEDTerminalRuleCall_1_0_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getLimitRule());
                      						}
                      						setWithLastConsumed(
                      							current,
                      							"l1",
                      							lv_l1_2_0,
                      							"org.xtext.example.mydsl_sql.SQL.UNSIGNED");
                      					
                    }

                    }


                    }

                    // InternalSQLParser.g:1330:4: (otherlv_3= Comma ( (lv_l2_4_0= RULE_UNSIGNED ) ) )?
                    int alt21=2;
                    int LA21_0 = input.LA(1);

                    if ( (LA21_0==Comma) ) {
                        alt21=1;
                    }
                    switch (alt21) {
                        case 1 :
                            // InternalSQLParser.g:1331:5: otherlv_3= Comma ( (lv_l2_4_0= RULE_UNSIGNED ) )
                            {
                            otherlv_3=(Token)match(input,Comma,FOLLOW_32); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(otherlv_3, grammarAccess.getLimitAccess().getCommaKeyword_1_1_0());
                              				
                            }
                            // InternalSQLParser.g:1335:5: ( (lv_l2_4_0= RULE_UNSIGNED ) )
                            // InternalSQLParser.g:1336:6: (lv_l2_4_0= RULE_UNSIGNED )
                            {
                            // InternalSQLParser.g:1336:6: (lv_l2_4_0= RULE_UNSIGNED )
                            // InternalSQLParser.g:1337:7: lv_l2_4_0= RULE_UNSIGNED
                            {
                            lv_l2_4_0=(Token)match(input,RULE_UNSIGNED,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(lv_l2_4_0, grammarAccess.getLimitAccess().getL2UNSIGNEDTerminalRuleCall_1_1_1_0());
                              						
                            }
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getLimitRule());
                              							}
                              							setWithLastConsumed(
                              								current,
                              								"l2",
                              								lv_l2_4_0,
                              								"org.xtext.example.mydsl_sql.SQL.UNSIGNED");
                              						
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleLimit"


    // $ANTLR start "entryRuleSelectQuery"
    // InternalSQLParser.g:1359:1: entryRuleSelectQuery returns [EObject current=null] : iv_ruleSelectQuery= ruleSelectQuery EOF ;
    public final EObject entryRuleSelectQuery() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSelectQuery = null;


        try {
            // InternalSQLParser.g:1359:52: (iv_ruleSelectQuery= ruleSelectQuery EOF )
            // InternalSQLParser.g:1360:2: iv_ruleSelectQuery= ruleSelectQuery EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSelectQueryRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSelectQuery=ruleSelectQuery();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSelectQuery; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSelectQuery"


    // $ANTLR start "ruleSelectQuery"
    // InternalSQLParser.g:1366:1: ruleSelectQuery returns [EObject current=null] : (this_Select_0= ruleSelect ( (lv_op_1_0= ruleSelectSubSet ) )* ) ;
    public final EObject ruleSelectQuery() throws RecognitionException {
        EObject current = null;

        EObject this_Select_0 = null;

        EObject lv_op_1_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:1372:2: ( (this_Select_0= ruleSelect ( (lv_op_1_0= ruleSelectSubSet ) )* ) )
            // InternalSQLParser.g:1373:2: (this_Select_0= ruleSelect ( (lv_op_1_0= ruleSelectSubSet ) )* )
            {
            // InternalSQLParser.g:1373:2: (this_Select_0= ruleSelect ( (lv_op_1_0= ruleSelectSubSet ) )* )
            // InternalSQLParser.g:1374:3: this_Select_0= ruleSelect ( (lv_op_1_0= ruleSelectSubSet ) )*
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getSelectQueryAccess().getSelectParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_33);
            this_Select_0=ruleSelect();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_Select_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:1385:3: ( (lv_op_1_0= ruleSelectSubSet ) )*
            loop23:
            do {
                int alt23=2;
                int LA23_0 = input.LA(1);

                if ( (LA23_0==INTERSECT||LA23_0==EXCEPT||LA23_0==MINUS||LA23_0==UNION) ) {
                    alt23=1;
                }


                switch (alt23) {
            	case 1 :
            	    // InternalSQLParser.g:1386:4: (lv_op_1_0= ruleSelectSubSet )
            	    {
            	    // InternalSQLParser.g:1386:4: (lv_op_1_0= ruleSelectSubSet )
            	    // InternalSQLParser.g:1387:5: lv_op_1_0= ruleSelectSubSet
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getSelectQueryAccess().getOpSelectSubSetParserRuleCall_1_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_33);
            	    lv_op_1_0=ruleSelectSubSet();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getSelectQueryRule());
            	      					}
            	      					add(
            	      						current,
            	      						"op",
            	      						lv_op_1_0,
            	      						"org.xtext.example.mydsl_sql.SQL.SelectSubSet");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop23;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSelectQuery"


    // $ANTLR start "entryRuleSelectSubSet"
    // InternalSQLParser.g:1408:1: entryRuleSelectSubSet returns [EObject current=null] : iv_ruleSelectSubSet= ruleSelectSubSet EOF ;
    public final EObject entryRuleSelectSubSet() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSelectSubSet = null;


        try {
            // InternalSQLParser.g:1408:53: (iv_ruleSelectSubSet= ruleSelectSubSet EOF )
            // InternalSQLParser.g:1409:2: iv_ruleSelectSubSet= ruleSelectSubSet EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSelectSubSetRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSelectSubSet=ruleSelectSubSet();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSelectSubSet; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSelectSubSet"


    // $ANTLR start "ruleSelectSubSet"
    // InternalSQLParser.g:1415:1: ruleSelectSubSet returns [EObject current=null] : ( ( ( (lv_op_0_1= UNION | lv_op_0_2= INTERSECT | lv_op_0_3= MINUS | lv_op_0_4= EXCEPT ) ) ) ( (lv_all_1_0= ALL ) )? ( (lv_query_2_0= ruleSelect ) ) ) ;
    public final EObject ruleSelectSubSet() throws RecognitionException {
        EObject current = null;

        Token lv_op_0_1=null;
        Token lv_op_0_2=null;
        Token lv_op_0_3=null;
        Token lv_op_0_4=null;
        Token lv_all_1_0=null;
        EObject lv_query_2_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:1421:2: ( ( ( ( (lv_op_0_1= UNION | lv_op_0_2= INTERSECT | lv_op_0_3= MINUS | lv_op_0_4= EXCEPT ) ) ) ( (lv_all_1_0= ALL ) )? ( (lv_query_2_0= ruleSelect ) ) ) )
            // InternalSQLParser.g:1422:2: ( ( ( (lv_op_0_1= UNION | lv_op_0_2= INTERSECT | lv_op_0_3= MINUS | lv_op_0_4= EXCEPT ) ) ) ( (lv_all_1_0= ALL ) )? ( (lv_query_2_0= ruleSelect ) ) )
            {
            // InternalSQLParser.g:1422:2: ( ( ( (lv_op_0_1= UNION | lv_op_0_2= INTERSECT | lv_op_0_3= MINUS | lv_op_0_4= EXCEPT ) ) ) ( (lv_all_1_0= ALL ) )? ( (lv_query_2_0= ruleSelect ) ) )
            // InternalSQLParser.g:1423:3: ( ( (lv_op_0_1= UNION | lv_op_0_2= INTERSECT | lv_op_0_3= MINUS | lv_op_0_4= EXCEPT ) ) ) ( (lv_all_1_0= ALL ) )? ( (lv_query_2_0= ruleSelect ) )
            {
            // InternalSQLParser.g:1423:3: ( ( (lv_op_0_1= UNION | lv_op_0_2= INTERSECT | lv_op_0_3= MINUS | lv_op_0_4= EXCEPT ) ) )
            // InternalSQLParser.g:1424:4: ( (lv_op_0_1= UNION | lv_op_0_2= INTERSECT | lv_op_0_3= MINUS | lv_op_0_4= EXCEPT ) )
            {
            // InternalSQLParser.g:1424:4: ( (lv_op_0_1= UNION | lv_op_0_2= INTERSECT | lv_op_0_3= MINUS | lv_op_0_4= EXCEPT ) )
            // InternalSQLParser.g:1425:5: (lv_op_0_1= UNION | lv_op_0_2= INTERSECT | lv_op_0_3= MINUS | lv_op_0_4= EXCEPT )
            {
            // InternalSQLParser.g:1425:5: (lv_op_0_1= UNION | lv_op_0_2= INTERSECT | lv_op_0_3= MINUS | lv_op_0_4= EXCEPT )
            int alt24=4;
            switch ( input.LA(1) ) {
            case UNION:
                {
                alt24=1;
                }
                break;
            case INTERSECT:
                {
                alt24=2;
                }
                break;
            case MINUS:
                {
                alt24=3;
                }
                break;
            case EXCEPT:
                {
                alt24=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 24, 0, input);

                throw nvae;
            }

            switch (alt24) {
                case 1 :
                    // InternalSQLParser.g:1426:6: lv_op_0_1= UNION
                    {
                    lv_op_0_1=(Token)match(input,UNION,FOLLOW_34); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_op_0_1, grammarAccess.getSelectSubSetAccess().getOpUNIONKeyword_0_0_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getSelectSubSetRule());
                      						}
                      						setWithLastConsumed(current, "op", lv_op_0_1, null);
                      					
                    }

                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:1437:6: lv_op_0_2= INTERSECT
                    {
                    lv_op_0_2=(Token)match(input,INTERSECT,FOLLOW_34); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_op_0_2, grammarAccess.getSelectSubSetAccess().getOpINTERSECTKeyword_0_0_1());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getSelectSubSetRule());
                      						}
                      						setWithLastConsumed(current, "op", lv_op_0_2, null);
                      					
                    }

                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:1448:6: lv_op_0_3= MINUS
                    {
                    lv_op_0_3=(Token)match(input,MINUS,FOLLOW_34); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_op_0_3, grammarAccess.getSelectSubSetAccess().getOpMINUSKeyword_0_0_2());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getSelectSubSetRule());
                      						}
                      						setWithLastConsumed(current, "op", lv_op_0_3, null);
                      					
                    }

                    }
                    break;
                case 4 :
                    // InternalSQLParser.g:1459:6: lv_op_0_4= EXCEPT
                    {
                    lv_op_0_4=(Token)match(input,EXCEPT,FOLLOW_34); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_op_0_4, grammarAccess.getSelectSubSetAccess().getOpEXCEPTKeyword_0_0_3());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getSelectSubSetRule());
                      						}
                      						setWithLastConsumed(current, "op", lv_op_0_4, null);
                      					
                    }

                    }
                    break;

            }


            }


            }

            // InternalSQLParser.g:1472:3: ( (lv_all_1_0= ALL ) )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==ALL) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    // InternalSQLParser.g:1473:4: (lv_all_1_0= ALL )
                    {
                    // InternalSQLParser.g:1473:4: (lv_all_1_0= ALL )
                    // InternalSQLParser.g:1474:5: lv_all_1_0= ALL
                    {
                    lv_all_1_0=(Token)match(input,ALL,FOLLOW_29); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_all_1_0, grammarAccess.getSelectSubSetAccess().getAllALLKeyword_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getSelectSubSetRule());
                      					}
                      					setWithLastConsumed(current, "all", lv_all_1_0, "ALL");
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalSQLParser.g:1486:3: ( (lv_query_2_0= ruleSelect ) )
            // InternalSQLParser.g:1487:4: (lv_query_2_0= ruleSelect )
            {
            // InternalSQLParser.g:1487:4: (lv_query_2_0= ruleSelect )
            // InternalSQLParser.g:1488:5: lv_query_2_0= ruleSelect
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getSelectSubSetAccess().getQuerySelectParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_query_2_0=ruleSelect();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getSelectSubSetRule());
              					}
              					set(
              						current,
              						"query",
              						lv_query_2_0,
              						"org.xtext.example.mydsl_sql.SQL.Select");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSelectSubSet"


    // $ANTLR start "entryRuleSelect"
    // InternalSQLParser.g:1509:1: entryRuleSelect returns [EObject current=null] : iv_ruleSelect= ruleSelect EOF ;
    public final EObject entryRuleSelect() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSelect = null;


        try {
            // InternalSQLParser.g:1509:47: (iv_ruleSelect= ruleSelect EOF )
            // InternalSQLParser.g:1510:2: iv_ruleSelect= ruleSelect EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSelectRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSelect=ruleSelect();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSelect; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSelect"


    // $ANTLR start "ruleSelect"
    // InternalSQLParser.g:1516:1: ruleSelect returns [EObject current=null] : ( ( (lv_select_0_0= SELECT ) ) (otherlv_1= DISTINCT )? (otherlv_2= TOP (this_INT_3= RULE_INT | this_SIGNED_DOUBLE_4= RULE_SIGNED_DOUBLE ) (otherlv_5= PERCENT )? (otherlv_6= WITH otherlv_7= TIES )? )? ( (lv_cols_8_0= ruleColumns ) ) otherlv_9= FROM ( (lv_tbl_10_0= ruleTables ) ) (otherlv_11= WHERE ( (lv_whereExpression_12_0= ruleFullExpression ) ) )? (otherlv_13= GROUP otherlv_14= BY ( (lv_groupByEntry_15_0= ruleGroupByColumns ) ) )? (otherlv_16= HAVING ( (lv_havingEntry_17_0= ruleFullExpression ) ) )? (otherlv_18= ORDER otherlv_19= BY ( (lv_orderByEntry_20_0= ruleOrderByColumns ) ) )? (otherlv_21= LIMIT ( (lv_lim_22_0= ruleLimit ) ) )? (otherlv_23= OFFSET ( (lv_offset_24_0= ruleOffset ) ) )? (otherlv_25= FETCH otherlv_26= FIRST ( (lv_fetchFirst_27_0= ruleFetchFirst ) ) )? ) ;
    public final EObject ruleSelect() throws RecognitionException {
        EObject current = null;

        Token lv_select_0_0=null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        Token this_INT_3=null;
        Token this_SIGNED_DOUBLE_4=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        Token otherlv_7=null;
        Token otherlv_9=null;
        Token otherlv_11=null;
        Token otherlv_13=null;
        Token otherlv_14=null;
        Token otherlv_16=null;
        Token otherlv_18=null;
        Token otherlv_19=null;
        Token otherlv_21=null;
        Token otherlv_23=null;
        Token otherlv_25=null;
        Token otherlv_26=null;
        EObject lv_cols_8_0 = null;

        EObject lv_tbl_10_0 = null;

        EObject lv_whereExpression_12_0 = null;

        EObject lv_groupByEntry_15_0 = null;

        EObject lv_havingEntry_17_0 = null;

        EObject lv_orderByEntry_20_0 = null;

        EObject lv_lim_22_0 = null;

        EObject lv_offset_24_0 = null;

        EObject lv_fetchFirst_27_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:1522:2: ( ( ( (lv_select_0_0= SELECT ) ) (otherlv_1= DISTINCT )? (otherlv_2= TOP (this_INT_3= RULE_INT | this_SIGNED_DOUBLE_4= RULE_SIGNED_DOUBLE ) (otherlv_5= PERCENT )? (otherlv_6= WITH otherlv_7= TIES )? )? ( (lv_cols_8_0= ruleColumns ) ) otherlv_9= FROM ( (lv_tbl_10_0= ruleTables ) ) (otherlv_11= WHERE ( (lv_whereExpression_12_0= ruleFullExpression ) ) )? (otherlv_13= GROUP otherlv_14= BY ( (lv_groupByEntry_15_0= ruleGroupByColumns ) ) )? (otherlv_16= HAVING ( (lv_havingEntry_17_0= ruleFullExpression ) ) )? (otherlv_18= ORDER otherlv_19= BY ( (lv_orderByEntry_20_0= ruleOrderByColumns ) ) )? (otherlv_21= LIMIT ( (lv_lim_22_0= ruleLimit ) ) )? (otherlv_23= OFFSET ( (lv_offset_24_0= ruleOffset ) ) )? (otherlv_25= FETCH otherlv_26= FIRST ( (lv_fetchFirst_27_0= ruleFetchFirst ) ) )? ) )
            // InternalSQLParser.g:1523:2: ( ( (lv_select_0_0= SELECT ) ) (otherlv_1= DISTINCT )? (otherlv_2= TOP (this_INT_3= RULE_INT | this_SIGNED_DOUBLE_4= RULE_SIGNED_DOUBLE ) (otherlv_5= PERCENT )? (otherlv_6= WITH otherlv_7= TIES )? )? ( (lv_cols_8_0= ruleColumns ) ) otherlv_9= FROM ( (lv_tbl_10_0= ruleTables ) ) (otherlv_11= WHERE ( (lv_whereExpression_12_0= ruleFullExpression ) ) )? (otherlv_13= GROUP otherlv_14= BY ( (lv_groupByEntry_15_0= ruleGroupByColumns ) ) )? (otherlv_16= HAVING ( (lv_havingEntry_17_0= ruleFullExpression ) ) )? (otherlv_18= ORDER otherlv_19= BY ( (lv_orderByEntry_20_0= ruleOrderByColumns ) ) )? (otherlv_21= LIMIT ( (lv_lim_22_0= ruleLimit ) ) )? (otherlv_23= OFFSET ( (lv_offset_24_0= ruleOffset ) ) )? (otherlv_25= FETCH otherlv_26= FIRST ( (lv_fetchFirst_27_0= ruleFetchFirst ) ) )? )
            {
            // InternalSQLParser.g:1523:2: ( ( (lv_select_0_0= SELECT ) ) (otherlv_1= DISTINCT )? (otherlv_2= TOP (this_INT_3= RULE_INT | this_SIGNED_DOUBLE_4= RULE_SIGNED_DOUBLE ) (otherlv_5= PERCENT )? (otherlv_6= WITH otherlv_7= TIES )? )? ( (lv_cols_8_0= ruleColumns ) ) otherlv_9= FROM ( (lv_tbl_10_0= ruleTables ) ) (otherlv_11= WHERE ( (lv_whereExpression_12_0= ruleFullExpression ) ) )? (otherlv_13= GROUP otherlv_14= BY ( (lv_groupByEntry_15_0= ruleGroupByColumns ) ) )? (otherlv_16= HAVING ( (lv_havingEntry_17_0= ruleFullExpression ) ) )? (otherlv_18= ORDER otherlv_19= BY ( (lv_orderByEntry_20_0= ruleOrderByColumns ) ) )? (otherlv_21= LIMIT ( (lv_lim_22_0= ruleLimit ) ) )? (otherlv_23= OFFSET ( (lv_offset_24_0= ruleOffset ) ) )? (otherlv_25= FETCH otherlv_26= FIRST ( (lv_fetchFirst_27_0= ruleFetchFirst ) ) )? )
            // InternalSQLParser.g:1524:3: ( (lv_select_0_0= SELECT ) ) (otherlv_1= DISTINCT )? (otherlv_2= TOP (this_INT_3= RULE_INT | this_SIGNED_DOUBLE_4= RULE_SIGNED_DOUBLE ) (otherlv_5= PERCENT )? (otherlv_6= WITH otherlv_7= TIES )? )? ( (lv_cols_8_0= ruleColumns ) ) otherlv_9= FROM ( (lv_tbl_10_0= ruleTables ) ) (otherlv_11= WHERE ( (lv_whereExpression_12_0= ruleFullExpression ) ) )? (otherlv_13= GROUP otherlv_14= BY ( (lv_groupByEntry_15_0= ruleGroupByColumns ) ) )? (otherlv_16= HAVING ( (lv_havingEntry_17_0= ruleFullExpression ) ) )? (otherlv_18= ORDER otherlv_19= BY ( (lv_orderByEntry_20_0= ruleOrderByColumns ) ) )? (otherlv_21= LIMIT ( (lv_lim_22_0= ruleLimit ) ) )? (otherlv_23= OFFSET ( (lv_offset_24_0= ruleOffset ) ) )? (otherlv_25= FETCH otherlv_26= FIRST ( (lv_fetchFirst_27_0= ruleFetchFirst ) ) )?
            {
            // InternalSQLParser.g:1524:3: ( (lv_select_0_0= SELECT ) )
            // InternalSQLParser.g:1525:4: (lv_select_0_0= SELECT )
            {
            // InternalSQLParser.g:1525:4: (lv_select_0_0= SELECT )
            // InternalSQLParser.g:1526:5: lv_select_0_0= SELECT
            {
            lv_select_0_0=(Token)match(input,SELECT,FOLLOW_35); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_select_0_0, grammarAccess.getSelectAccess().getSelectSELECTKeyword_0_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getSelectRule());
              					}
              					setWithLastConsumed(current, "select", lv_select_0_0, "SELECT");
              				
            }

            }


            }

            // InternalSQLParser.g:1538:3: (otherlv_1= DISTINCT )?
            int alt26=2;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==DISTINCT) ) {
                alt26=1;
            }
            switch (alt26) {
                case 1 :
                    // InternalSQLParser.g:1539:4: otherlv_1= DISTINCT
                    {
                    otherlv_1=(Token)match(input,DISTINCT,FOLLOW_36); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getSelectAccess().getDISTINCTKeyword_1());
                      			
                    }

                    }
                    break;

            }

            // InternalSQLParser.g:1544:3: (otherlv_2= TOP (this_INT_3= RULE_INT | this_SIGNED_DOUBLE_4= RULE_SIGNED_DOUBLE ) (otherlv_5= PERCENT )? (otherlv_6= WITH otherlv_7= TIES )? )?
            int alt30=2;
            int LA30_0 = input.LA(1);

            if ( (LA30_0==TOP) ) {
                alt30=1;
            }
            switch (alt30) {
                case 1 :
                    // InternalSQLParser.g:1545:4: otherlv_2= TOP (this_INT_3= RULE_INT | this_SIGNED_DOUBLE_4= RULE_SIGNED_DOUBLE ) (otherlv_5= PERCENT )? (otherlv_6= WITH otherlv_7= TIES )?
                    {
                    otherlv_2=(Token)match(input,TOP,FOLLOW_37); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getSelectAccess().getTOPKeyword_2_0());
                      			
                    }
                    // InternalSQLParser.g:1549:4: (this_INT_3= RULE_INT | this_SIGNED_DOUBLE_4= RULE_SIGNED_DOUBLE )
                    int alt27=2;
                    int LA27_0 = input.LA(1);

                    if ( (LA27_0==RULE_INT) ) {
                        alt27=1;
                    }
                    else if ( (LA27_0==RULE_SIGNED_DOUBLE) ) {
                        alt27=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 27, 0, input);

                        throw nvae;
                    }
                    switch (alt27) {
                        case 1 :
                            // InternalSQLParser.g:1550:5: this_INT_3= RULE_INT
                            {
                            this_INT_3=(Token)match(input,RULE_INT,FOLLOW_38); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(this_INT_3, grammarAccess.getSelectAccess().getINTTerminalRuleCall_2_1_0());
                              				
                            }

                            }
                            break;
                        case 2 :
                            // InternalSQLParser.g:1555:5: this_SIGNED_DOUBLE_4= RULE_SIGNED_DOUBLE
                            {
                            this_SIGNED_DOUBLE_4=(Token)match(input,RULE_SIGNED_DOUBLE,FOLLOW_38); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(this_SIGNED_DOUBLE_4, grammarAccess.getSelectAccess().getSIGNED_DOUBLETerminalRuleCall_2_1_1());
                              				
                            }

                            }
                            break;

                    }

                    // InternalSQLParser.g:1560:4: (otherlv_5= PERCENT )?
                    int alt28=2;
                    int LA28_0 = input.LA(1);

                    if ( (LA28_0==PERCENT) ) {
                        alt28=1;
                    }
                    switch (alt28) {
                        case 1 :
                            // InternalSQLParser.g:1561:5: otherlv_5= PERCENT
                            {
                            otherlv_5=(Token)match(input,PERCENT,FOLLOW_39); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(otherlv_5, grammarAccess.getSelectAccess().getPERCENTKeyword_2_2());
                              				
                            }

                            }
                            break;

                    }

                    // InternalSQLParser.g:1566:4: (otherlv_6= WITH otherlv_7= TIES )?
                    int alt29=2;
                    int LA29_0 = input.LA(1);

                    if ( (LA29_0==WITH) ) {
                        alt29=1;
                    }
                    switch (alt29) {
                        case 1 :
                            // InternalSQLParser.g:1567:5: otherlv_6= WITH otherlv_7= TIES
                            {
                            otherlv_6=(Token)match(input,WITH,FOLLOW_40); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(otherlv_6, grammarAccess.getSelectAccess().getWITHKeyword_2_3_0());
                              				
                            }
                            otherlv_7=(Token)match(input,TIES,FOLLOW_6); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(otherlv_7, grammarAccess.getSelectAccess().getTIESKeyword_2_3_1());
                              				
                            }

                            }
                            break;

                    }


                    }
                    break;

            }

            // InternalSQLParser.g:1577:3: ( (lv_cols_8_0= ruleColumns ) )
            // InternalSQLParser.g:1578:4: (lv_cols_8_0= ruleColumns )
            {
            // InternalSQLParser.g:1578:4: (lv_cols_8_0= ruleColumns )
            // InternalSQLParser.g:1579:5: lv_cols_8_0= ruleColumns
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getSelectAccess().getColsColumnsParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_41);
            lv_cols_8_0=ruleColumns();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getSelectRule());
              					}
              					set(
              						current,
              						"cols",
              						lv_cols_8_0,
              						"org.xtext.example.mydsl_sql.SQL.Columns");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_9=(Token)match(input,FROM,FOLLOW_5); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_9, grammarAccess.getSelectAccess().getFROMKeyword_4());
              		
            }
            // InternalSQLParser.g:1600:3: ( (lv_tbl_10_0= ruleTables ) )
            // InternalSQLParser.g:1601:4: (lv_tbl_10_0= ruleTables )
            {
            // InternalSQLParser.g:1601:4: (lv_tbl_10_0= ruleTables )
            // InternalSQLParser.g:1602:5: lv_tbl_10_0= ruleTables
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getSelectAccess().getTblTablesParserRuleCall_5_0());
              				
            }
            pushFollow(FOLLOW_42);
            lv_tbl_10_0=ruleTables();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getSelectRule());
              					}
              					set(
              						current,
              						"tbl",
              						lv_tbl_10_0,
              						"org.xtext.example.mydsl_sql.SQL.Tables");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:1619:3: (otherlv_11= WHERE ( (lv_whereExpression_12_0= ruleFullExpression ) ) )?
            int alt31=2;
            int LA31_0 = input.LA(1);

            if ( (LA31_0==WHERE) ) {
                alt31=1;
            }
            switch (alt31) {
                case 1 :
                    // InternalSQLParser.g:1620:4: otherlv_11= WHERE ( (lv_whereExpression_12_0= ruleFullExpression ) )
                    {
                    otherlv_11=(Token)match(input,WHERE,FOLLOW_43); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_11, grammarAccess.getSelectAccess().getWHEREKeyword_6_0());
                      			
                    }
                    // InternalSQLParser.g:1624:4: ( (lv_whereExpression_12_0= ruleFullExpression ) )
                    // InternalSQLParser.g:1625:5: (lv_whereExpression_12_0= ruleFullExpression )
                    {
                    // InternalSQLParser.g:1625:5: (lv_whereExpression_12_0= ruleFullExpression )
                    // InternalSQLParser.g:1626:6: lv_whereExpression_12_0= ruleFullExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getSelectAccess().getWhereExpressionFullExpressionParserRuleCall_6_1_0());
                      					
                    }
                    pushFollow(FOLLOW_44);
                    lv_whereExpression_12_0=ruleFullExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSelectRule());
                      						}
                      						set(
                      							current,
                      							"whereExpression",
                      							lv_whereExpression_12_0,
                      							"org.xtext.example.mydsl_sql.SQL.FullExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            // InternalSQLParser.g:1644:3: (otherlv_13= GROUP otherlv_14= BY ( (lv_groupByEntry_15_0= ruleGroupByColumns ) ) )?
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==GROUP) ) {
                alt32=1;
            }
            switch (alt32) {
                case 1 :
                    // InternalSQLParser.g:1645:4: otherlv_13= GROUP otherlv_14= BY ( (lv_groupByEntry_15_0= ruleGroupByColumns ) )
                    {
                    otherlv_13=(Token)match(input,GROUP,FOLLOW_45); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_13, grammarAccess.getSelectAccess().getGROUPKeyword_7_0());
                      			
                    }
                    otherlv_14=(Token)match(input,BY,FOLLOW_46); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_14, grammarAccess.getSelectAccess().getBYKeyword_7_1());
                      			
                    }
                    // InternalSQLParser.g:1653:4: ( (lv_groupByEntry_15_0= ruleGroupByColumns ) )
                    // InternalSQLParser.g:1654:5: (lv_groupByEntry_15_0= ruleGroupByColumns )
                    {
                    // InternalSQLParser.g:1654:5: (lv_groupByEntry_15_0= ruleGroupByColumns )
                    // InternalSQLParser.g:1655:6: lv_groupByEntry_15_0= ruleGroupByColumns
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getSelectAccess().getGroupByEntryGroupByColumnsParserRuleCall_7_2_0());
                      					
                    }
                    pushFollow(FOLLOW_47);
                    lv_groupByEntry_15_0=ruleGroupByColumns();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSelectRule());
                      						}
                      						set(
                      							current,
                      							"groupByEntry",
                      							lv_groupByEntry_15_0,
                      							"org.xtext.example.mydsl_sql.SQL.GroupByColumns");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            // InternalSQLParser.g:1673:3: (otherlv_16= HAVING ( (lv_havingEntry_17_0= ruleFullExpression ) ) )?
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==HAVING) ) {
                alt33=1;
            }
            switch (alt33) {
                case 1 :
                    // InternalSQLParser.g:1674:4: otherlv_16= HAVING ( (lv_havingEntry_17_0= ruleFullExpression ) )
                    {
                    otherlv_16=(Token)match(input,HAVING,FOLLOW_43); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_16, grammarAccess.getSelectAccess().getHAVINGKeyword_8_0());
                      			
                    }
                    // InternalSQLParser.g:1678:4: ( (lv_havingEntry_17_0= ruleFullExpression ) )
                    // InternalSQLParser.g:1679:5: (lv_havingEntry_17_0= ruleFullExpression )
                    {
                    // InternalSQLParser.g:1679:5: (lv_havingEntry_17_0= ruleFullExpression )
                    // InternalSQLParser.g:1680:6: lv_havingEntry_17_0= ruleFullExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getSelectAccess().getHavingEntryFullExpressionParserRuleCall_8_1_0());
                      					
                    }
                    pushFollow(FOLLOW_48);
                    lv_havingEntry_17_0=ruleFullExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSelectRule());
                      						}
                      						set(
                      							current,
                      							"havingEntry",
                      							lv_havingEntry_17_0,
                      							"org.xtext.example.mydsl_sql.SQL.FullExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            // InternalSQLParser.g:1698:3: (otherlv_18= ORDER otherlv_19= BY ( (lv_orderByEntry_20_0= ruleOrderByColumns ) ) )?
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==ORDER) ) {
                alt34=1;
            }
            switch (alt34) {
                case 1 :
                    // InternalSQLParser.g:1699:4: otherlv_18= ORDER otherlv_19= BY ( (lv_orderByEntry_20_0= ruleOrderByColumns ) )
                    {
                    otherlv_18=(Token)match(input,ORDER,FOLLOW_45); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_18, grammarAccess.getSelectAccess().getORDERKeyword_9_0());
                      			
                    }
                    otherlv_19=(Token)match(input,BY,FOLLOW_46); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_19, grammarAccess.getSelectAccess().getBYKeyword_9_1());
                      			
                    }
                    // InternalSQLParser.g:1707:4: ( (lv_orderByEntry_20_0= ruleOrderByColumns ) )
                    // InternalSQLParser.g:1708:5: (lv_orderByEntry_20_0= ruleOrderByColumns )
                    {
                    // InternalSQLParser.g:1708:5: (lv_orderByEntry_20_0= ruleOrderByColumns )
                    // InternalSQLParser.g:1709:6: lv_orderByEntry_20_0= ruleOrderByColumns
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getSelectAccess().getOrderByEntryOrderByColumnsParserRuleCall_9_2_0());
                      					
                    }
                    pushFollow(FOLLOW_49);
                    lv_orderByEntry_20_0=ruleOrderByColumns();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSelectRule());
                      						}
                      						set(
                      							current,
                      							"orderByEntry",
                      							lv_orderByEntry_20_0,
                      							"org.xtext.example.mydsl_sql.SQL.OrderByColumns");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            // InternalSQLParser.g:1727:3: (otherlv_21= LIMIT ( (lv_lim_22_0= ruleLimit ) ) )?
            int alt35=2;
            int LA35_0 = input.LA(1);

            if ( (LA35_0==LIMIT) ) {
                alt35=1;
            }
            switch (alt35) {
                case 1 :
                    // InternalSQLParser.g:1728:4: otherlv_21= LIMIT ( (lv_lim_22_0= ruleLimit ) )
                    {
                    otherlv_21=(Token)match(input,LIMIT,FOLLOW_50); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_21, grammarAccess.getSelectAccess().getLIMITKeyword_10_0());
                      			
                    }
                    // InternalSQLParser.g:1732:4: ( (lv_lim_22_0= ruleLimit ) )
                    // InternalSQLParser.g:1733:5: (lv_lim_22_0= ruleLimit )
                    {
                    // InternalSQLParser.g:1733:5: (lv_lim_22_0= ruleLimit )
                    // InternalSQLParser.g:1734:6: lv_lim_22_0= ruleLimit
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getSelectAccess().getLimLimitParserRuleCall_10_1_0());
                      					
                    }
                    pushFollow(FOLLOW_51);
                    lv_lim_22_0=ruleLimit();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSelectRule());
                      						}
                      						set(
                      							current,
                      							"lim",
                      							lv_lim_22_0,
                      							"org.xtext.example.mydsl_sql.SQL.Limit");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            // InternalSQLParser.g:1752:3: (otherlv_23= OFFSET ( (lv_offset_24_0= ruleOffset ) ) )?
            int alt36=2;
            int LA36_0 = input.LA(1);

            if ( (LA36_0==OFFSET) ) {
                alt36=1;
            }
            switch (alt36) {
                case 1 :
                    // InternalSQLParser.g:1753:4: otherlv_23= OFFSET ( (lv_offset_24_0= ruleOffset ) )
                    {
                    otherlv_23=(Token)match(input,OFFSET,FOLLOW_23); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_23, grammarAccess.getSelectAccess().getOFFSETKeyword_11_0());
                      			
                    }
                    // InternalSQLParser.g:1757:4: ( (lv_offset_24_0= ruleOffset ) )
                    // InternalSQLParser.g:1758:5: (lv_offset_24_0= ruleOffset )
                    {
                    // InternalSQLParser.g:1758:5: (lv_offset_24_0= ruleOffset )
                    // InternalSQLParser.g:1759:6: lv_offset_24_0= ruleOffset
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getSelectAccess().getOffsetOffsetParserRuleCall_11_1_0());
                      					
                    }
                    pushFollow(FOLLOW_52);
                    lv_offset_24_0=ruleOffset();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSelectRule());
                      						}
                      						set(
                      							current,
                      							"offset",
                      							lv_offset_24_0,
                      							"org.xtext.example.mydsl_sql.SQL.Offset");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            // InternalSQLParser.g:1777:3: (otherlv_25= FETCH otherlv_26= FIRST ( (lv_fetchFirst_27_0= ruleFetchFirst ) ) )?
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==FETCH) ) {
                alt37=1;
            }
            switch (alt37) {
                case 1 :
                    // InternalSQLParser.g:1778:4: otherlv_25= FETCH otherlv_26= FIRST ( (lv_fetchFirst_27_0= ruleFetchFirst ) )
                    {
                    otherlv_25=(Token)match(input,FETCH,FOLLOW_53); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_25, grammarAccess.getSelectAccess().getFETCHKeyword_12_0());
                      			
                    }
                    otherlv_26=(Token)match(input,FIRST,FOLLOW_32); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_26, grammarAccess.getSelectAccess().getFIRSTKeyword_12_1());
                      			
                    }
                    // InternalSQLParser.g:1786:4: ( (lv_fetchFirst_27_0= ruleFetchFirst ) )
                    // InternalSQLParser.g:1787:5: (lv_fetchFirst_27_0= ruleFetchFirst )
                    {
                    // InternalSQLParser.g:1787:5: (lv_fetchFirst_27_0= ruleFetchFirst )
                    // InternalSQLParser.g:1788:6: lv_fetchFirst_27_0= ruleFetchFirst
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getSelectAccess().getFetchFirstFetchFirstParserRuleCall_12_2_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_fetchFirst_27_0=ruleFetchFirst();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSelectRule());
                      						}
                      						set(
                      							current,
                      							"fetchFirst",
                      							lv_fetchFirst_27_0,
                      							"org.xtext.example.mydsl_sql.SQL.FetchFirst");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSelect"


    // $ANTLR start "entryRuleColumns"
    // InternalSQLParser.g:1810:1: entryRuleColumns returns [EObject current=null] : iv_ruleColumns= ruleColumns EOF ;
    public final EObject entryRuleColumns() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleColumns = null;


        try {
            // InternalSQLParser.g:1810:48: (iv_ruleColumns= ruleColumns EOF )
            // InternalSQLParser.g:1811:2: iv_ruleColumns= ruleColumns EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getColumnsRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleColumns=ruleColumns();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleColumns; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleColumns"


    // $ANTLR start "ruleColumns"
    // InternalSQLParser.g:1817:1: ruleColumns returns [EObject current=null] : (this_ColumnOrAlias_0= ruleColumnOrAlias ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleColumnOrAlias ) ) )+ )? ) ;
    public final EObject ruleColumns() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_ColumnOrAlias_0 = null;

        EObject lv_entries_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:1823:2: ( (this_ColumnOrAlias_0= ruleColumnOrAlias ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleColumnOrAlias ) ) )+ )? ) )
            // InternalSQLParser.g:1824:2: (this_ColumnOrAlias_0= ruleColumnOrAlias ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleColumnOrAlias ) ) )+ )? )
            {
            // InternalSQLParser.g:1824:2: (this_ColumnOrAlias_0= ruleColumnOrAlias ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleColumnOrAlias ) ) )+ )? )
            // InternalSQLParser.g:1825:3: this_ColumnOrAlias_0= ruleColumnOrAlias ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleColumnOrAlias ) ) )+ )?
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getColumnsAccess().getColumnOrAliasParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_15);
            this_ColumnOrAlias_0=ruleColumnOrAlias();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ColumnOrAlias_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:1836:3: ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleColumnOrAlias ) ) )+ )?
            int alt39=2;
            int LA39_0 = input.LA(1);

            if ( (LA39_0==Comma) ) {
                alt39=1;
            }
            switch (alt39) {
                case 1 :
                    // InternalSQLParser.g:1837:4: () (otherlv_2= Comma ( (lv_entries_3_0= ruleColumnOrAlias ) ) )+
                    {
                    // InternalSQLParser.g:1837:4: ()
                    // InternalSQLParser.g:1838:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getColumnsAccess().getOrColumnEntriesAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalSQLParser.g:1847:4: (otherlv_2= Comma ( (lv_entries_3_0= ruleColumnOrAlias ) ) )+
                    int cnt38=0;
                    loop38:
                    do {
                        int alt38=2;
                        int LA38_0 = input.LA(1);

                        if ( (LA38_0==Comma) ) {
                            alt38=1;
                        }


                        switch (alt38) {
                    	case 1 :
                    	    // InternalSQLParser.g:1848:5: otherlv_2= Comma ( (lv_entries_3_0= ruleColumnOrAlias ) )
                    	    {
                    	    otherlv_2=(Token)match(input,Comma,FOLLOW_6); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_2, grammarAccess.getColumnsAccess().getCommaKeyword_1_1_0());
                    	      				
                    	    }
                    	    // InternalSQLParser.g:1852:5: ( (lv_entries_3_0= ruleColumnOrAlias ) )
                    	    // InternalSQLParser.g:1853:6: (lv_entries_3_0= ruleColumnOrAlias )
                    	    {
                    	    // InternalSQLParser.g:1853:6: (lv_entries_3_0= ruleColumnOrAlias )
                    	    // InternalSQLParser.g:1854:7: lv_entries_3_0= ruleColumnOrAlias
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getColumnsAccess().getEntriesColumnOrAliasParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_15);
                    	    lv_entries_3_0=ruleColumnOrAlias();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getColumnsRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"entries",
                    	      								lv_entries_3_0,
                    	      								"org.xtext.example.mydsl_sql.SQL.ColumnOrAlias");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt38 >= 1 ) break loop38;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(38, input);
                                throw eee;
                        }
                        cnt38++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleColumns"


    // $ANTLR start "entryRuleColumnOrAlias"
    // InternalSQLParser.g:1877:1: entryRuleColumnOrAlias returns [EObject current=null] : iv_ruleColumnOrAlias= ruleColumnOrAlias EOF ;
    public final EObject entryRuleColumnOrAlias() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleColumnOrAlias = null;


        try {
            // InternalSQLParser.g:1877:54: (iv_ruleColumnOrAlias= ruleColumnOrAlias EOF )
            // InternalSQLParser.g:1878:2: iv_ruleColumnOrAlias= ruleColumnOrAlias EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getColumnOrAliasRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleColumnOrAlias=ruleColumnOrAlias();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleColumnOrAlias; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleColumnOrAlias"


    // $ANTLR start "ruleColumnOrAlias"
    // InternalSQLParser.g:1884:1: ruleColumnOrAlias returns [EObject current=null] : ( ( ( (lv_ce_0_0= ruleOperandGroup ) ) ( (lv_alias_1_0= AS ) )? ( (lv_colAlias_2_0= ruleDbObjectName ) )? ) | ( (lv_allCols_3_0= RULE_STAR ) ) | ( (lv_dbAllCols_4_0= ruleDbObjectNameAll ) ) ) ;
    public final EObject ruleColumnOrAlias() throws RecognitionException {
        EObject current = null;

        Token lv_alias_1_0=null;
        Token lv_allCols_3_0=null;
        EObject lv_ce_0_0 = null;

        EObject lv_colAlias_2_0 = null;

        EObject lv_dbAllCols_4_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:1890:2: ( ( ( ( (lv_ce_0_0= ruleOperandGroup ) ) ( (lv_alias_1_0= AS ) )? ( (lv_colAlias_2_0= ruleDbObjectName ) )? ) | ( (lv_allCols_3_0= RULE_STAR ) ) | ( (lv_dbAllCols_4_0= ruleDbObjectNameAll ) ) ) )
            // InternalSQLParser.g:1891:2: ( ( ( (lv_ce_0_0= ruleOperandGroup ) ) ( (lv_alias_1_0= AS ) )? ( (lv_colAlias_2_0= ruleDbObjectName ) )? ) | ( (lv_allCols_3_0= RULE_STAR ) ) | ( (lv_dbAllCols_4_0= ruleDbObjectNameAll ) ) )
            {
            // InternalSQLParser.g:1891:2: ( ( ( (lv_ce_0_0= ruleOperandGroup ) ) ( (lv_alias_1_0= AS ) )? ( (lv_colAlias_2_0= ruleDbObjectName ) )? ) | ( (lv_allCols_3_0= RULE_STAR ) ) | ( (lv_dbAllCols_4_0= ruleDbObjectNameAll ) ) )
            int alt42=3;
            switch ( input.LA(1) ) {
            case RULE_ID:
                {
                int LA42_1 = input.LA(2);

                if ( (LA42_1==FullStop) ) {
                    int LA42_6 = input.LA(3);

                    if ( (LA42_6==RULE_STAR) ) {
                        alt42=3;
                    }
                    else if ( ((LA42_6>=RULE_STRING && LA42_6<=RULE_ID)) ) {
                        alt42=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 42, 6, input);

                        throw nvae;
                    }
                }
                else if ( (LA42_1==EOF||LA42_1==FROM||LA42_1==LeftParenthesisPlusSignRightParenthesis||LA42_1==AS||(LA42_1>=VerticalLineVerticalLine && LA42_1<=HyphenMinus)||LA42_1==Solidus||LA42_1==RULE_STAR||(LA42_1>=RULE_STRING && LA42_1<=RULE_ID)) ) {
                    alt42=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 42, 1, input);

                    throw nvae;
                }
                }
                break;
            case RULE_DBNAME:
                {
                int LA42_2 = input.LA(2);

                if ( (LA42_2==FullStop) ) {
                    int LA42_6 = input.LA(3);

                    if ( (LA42_6==RULE_STAR) ) {
                        alt42=3;
                    }
                    else if ( ((LA42_6>=RULE_STRING && LA42_6<=RULE_ID)) ) {
                        alt42=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 42, 6, input);

                        throw nvae;
                    }
                }
                else if ( (LA42_2==EOF||LA42_2==FROM||LA42_2==LeftParenthesisPlusSignRightParenthesis||LA42_2==AS||(LA42_2>=VerticalLineVerticalLine && LA42_2<=HyphenMinus)||LA42_2==Solidus||LA42_2==RULE_STAR||(LA42_2>=RULE_STRING && LA42_2<=RULE_ID)) ) {
                    alt42=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 42, 2, input);

                    throw nvae;
                }
                }
                break;
            case RULE_STRING:
                {
                int LA42_3 = input.LA(2);

                if ( (LA42_3==FullStop) ) {
                    int LA42_6 = input.LA(3);

                    if ( (LA42_6==RULE_STAR) ) {
                        alt42=3;
                    }
                    else if ( ((LA42_6>=RULE_STRING && LA42_6<=RULE_ID)) ) {
                        alt42=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 42, 6, input);

                        throw nvae;
                    }
                }
                else if ( (LA42_3==EOF||LA42_3==FROM||LA42_3==LeftParenthesisPlusSignRightParenthesis||LA42_3==AS||(LA42_3>=VerticalLineVerticalLine && LA42_3<=HyphenMinus)||LA42_3==Solidus||LA42_3==RULE_STAR||(LA42_3>=RULE_STRING && LA42_3<=RULE_ID)) ) {
                    alt42=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 42, 3, input);

                    throw nvae;
                }
                }
                break;
            case EXTRACT:
            case CAST:
            case CASE:
            case LeftParenthesis:
            case RULE_JRPARAM:
            case RULE_JRNPARAM:
            case RULE_UNSIGNED:
            case RULE_INT:
            case RULE_SIGNED_DOUBLE:
            case RULE_STRING_:
                {
                alt42=1;
                }
                break;
            case RULE_STAR:
                {
                alt42=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 42, 0, input);

                throw nvae;
            }

            switch (alt42) {
                case 1 :
                    // InternalSQLParser.g:1892:3: ( ( (lv_ce_0_0= ruleOperandGroup ) ) ( (lv_alias_1_0= AS ) )? ( (lv_colAlias_2_0= ruleDbObjectName ) )? )
                    {
                    // InternalSQLParser.g:1892:3: ( ( (lv_ce_0_0= ruleOperandGroup ) ) ( (lv_alias_1_0= AS ) )? ( (lv_colAlias_2_0= ruleDbObjectName ) )? )
                    // InternalSQLParser.g:1893:4: ( (lv_ce_0_0= ruleOperandGroup ) ) ( (lv_alias_1_0= AS ) )? ( (lv_colAlias_2_0= ruleDbObjectName ) )?
                    {
                    // InternalSQLParser.g:1893:4: ( (lv_ce_0_0= ruleOperandGroup ) )
                    // InternalSQLParser.g:1894:5: (lv_ce_0_0= ruleOperandGroup )
                    {
                    // InternalSQLParser.g:1894:5: (lv_ce_0_0= ruleOperandGroup )
                    // InternalSQLParser.g:1895:6: lv_ce_0_0= ruleOperandGroup
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getColumnOrAliasAccess().getCeOperandGroupParserRuleCall_0_0_0());
                      					
                    }
                    pushFollow(FOLLOW_54);
                    lv_ce_0_0=ruleOperandGroup();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getColumnOrAliasRule());
                      						}
                      						set(
                      							current,
                      							"ce",
                      							lv_ce_0_0,
                      							"org.xtext.example.mydsl_sql.SQL.OperandGroup");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalSQLParser.g:1912:4: ( (lv_alias_1_0= AS ) )?
                    int alt40=2;
                    int LA40_0 = input.LA(1);

                    if ( (LA40_0==AS) ) {
                        alt40=1;
                    }
                    switch (alt40) {
                        case 1 :
                            // InternalSQLParser.g:1913:5: (lv_alias_1_0= AS )
                            {
                            // InternalSQLParser.g:1913:5: (lv_alias_1_0= AS )
                            // InternalSQLParser.g:1914:6: lv_alias_1_0= AS
                            {
                            lv_alias_1_0=(Token)match(input,AS,FOLLOW_55); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(lv_alias_1_0, grammarAccess.getColumnOrAliasAccess().getAliasASKeyword_0_1_0());
                              					
                            }
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getColumnOrAliasRule());
                              						}
                              						setWithLastConsumed(current, "alias", lv_alias_1_0, "AS");
                              					
                            }

                            }


                            }
                            break;

                    }

                    // InternalSQLParser.g:1926:4: ( (lv_colAlias_2_0= ruleDbObjectName ) )?
                    int alt41=2;
                    int LA41_0 = input.LA(1);

                    if ( ((LA41_0>=RULE_STRING && LA41_0<=RULE_ID)) ) {
                        alt41=1;
                    }
                    switch (alt41) {
                        case 1 :
                            // InternalSQLParser.g:1927:5: (lv_colAlias_2_0= ruleDbObjectName )
                            {
                            // InternalSQLParser.g:1927:5: (lv_colAlias_2_0= ruleDbObjectName )
                            // InternalSQLParser.g:1928:6: lv_colAlias_2_0= ruleDbObjectName
                            {
                            if ( state.backtracking==0 ) {

                              						newCompositeNode(grammarAccess.getColumnOrAliasAccess().getColAliasDbObjectNameParserRuleCall_0_2_0());
                              					
                            }
                            pushFollow(FOLLOW_2);
                            lv_colAlias_2_0=ruleDbObjectName();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElementForParent(grammarAccess.getColumnOrAliasRule());
                              						}
                              						set(
                              							current,
                              							"colAlias",
                              							lv_colAlias_2_0,
                              							"org.xtext.example.mydsl_sql.SQL.DbObjectName");
                              						afterParserOrEnumRuleCall();
                              					
                            }

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:1947:3: ( (lv_allCols_3_0= RULE_STAR ) )
                    {
                    // InternalSQLParser.g:1947:3: ( (lv_allCols_3_0= RULE_STAR ) )
                    // InternalSQLParser.g:1948:4: (lv_allCols_3_0= RULE_STAR )
                    {
                    // InternalSQLParser.g:1948:4: (lv_allCols_3_0= RULE_STAR )
                    // InternalSQLParser.g:1949:5: lv_allCols_3_0= RULE_STAR
                    {
                    lv_allCols_3_0=(Token)match(input,RULE_STAR,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_allCols_3_0, grammarAccess.getColumnOrAliasAccess().getAllColsSTARTerminalRuleCall_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getColumnOrAliasRule());
                      					}
                      					setWithLastConsumed(
                      						current,
                      						"allCols",
                      						lv_allCols_3_0,
                      						"org.xtext.example.mydsl_sql.SQL.STAR");
                      				
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:1966:3: ( (lv_dbAllCols_4_0= ruleDbObjectNameAll ) )
                    {
                    // InternalSQLParser.g:1966:3: ( (lv_dbAllCols_4_0= ruleDbObjectNameAll ) )
                    // InternalSQLParser.g:1967:4: (lv_dbAllCols_4_0= ruleDbObjectNameAll )
                    {
                    // InternalSQLParser.g:1967:4: (lv_dbAllCols_4_0= ruleDbObjectNameAll )
                    // InternalSQLParser.g:1968:5: lv_dbAllCols_4_0= ruleDbObjectNameAll
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getColumnOrAliasAccess().getDbAllColsDbObjectNameAllParserRuleCall_2_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_dbAllCols_4_0=ruleDbObjectNameAll();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getColumnOrAliasRule());
                      					}
                      					set(
                      						current,
                      						"dbAllCols",
                      						lv_dbAllCols_4_0,
                      						"org.xtext.example.mydsl_sql.SQL.DbObjectNameAll");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleColumnOrAlias"


    // $ANTLR start "entryRuleColumnFull"
    // InternalSQLParser.g:1989:1: entryRuleColumnFull returns [EObject current=null] : iv_ruleColumnFull= ruleColumnFull EOF ;
    public final EObject entryRuleColumnFull() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleColumnFull = null;


        try {
            // InternalSQLParser.g:1989:51: (iv_ruleColumnFull= ruleColumnFull EOF )
            // InternalSQLParser.g:1990:2: iv_ruleColumnFull= ruleColumnFull EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getColumnFullRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleColumnFull=ruleColumnFull();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleColumnFull; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleColumnFull"


    // $ANTLR start "ruleColumnFull"
    // InternalSQLParser.g:1996:1: ruleColumnFull returns [EObject current=null] : (this_DbObjectName_0= ruleDbObjectName ( () (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )? ) ;
    public final EObject ruleColumnFull() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_DbObjectName_0 = null;

        EObject lv_entries_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:2002:2: ( (this_DbObjectName_0= ruleDbObjectName ( () (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )? ) )
            // InternalSQLParser.g:2003:2: (this_DbObjectName_0= ruleDbObjectName ( () (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )? )
            {
            // InternalSQLParser.g:2003:2: (this_DbObjectName_0= ruleDbObjectName ( () (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )? )
            // InternalSQLParser.g:2004:3: this_DbObjectName_0= ruleDbObjectName ( () (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )?
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getColumnFullAccess().getDbObjectNameParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_56);
            this_DbObjectName_0=ruleDbObjectName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_DbObjectName_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:2015:3: ( () (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )?
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==FullStop) ) {
                alt44=1;
            }
            switch (alt44) {
                case 1 :
                    // InternalSQLParser.g:2016:4: () (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+
                    {
                    // InternalSQLParser.g:2016:4: ()
                    // InternalSQLParser.g:2017:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getColumnFullAccess().getColEntriesAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalSQLParser.g:2026:4: (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+
                    int cnt43=0;
                    loop43:
                    do {
                        int alt43=2;
                        int LA43_0 = input.LA(1);

                        if ( (LA43_0==FullStop) ) {
                            alt43=1;
                        }


                        switch (alt43) {
                    	case 1 :
                    	    // InternalSQLParser.g:2027:5: otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) )
                    	    {
                    	    otherlv_2=(Token)match(input,FullStop,FOLLOW_26); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_2, grammarAccess.getColumnFullAccess().getFullStopKeyword_1_1_0());
                    	      				
                    	    }
                    	    // InternalSQLParser.g:2031:5: ( (lv_entries_3_0= ruleDbObjectName ) )
                    	    // InternalSQLParser.g:2032:6: (lv_entries_3_0= ruleDbObjectName )
                    	    {
                    	    // InternalSQLParser.g:2032:6: (lv_entries_3_0= ruleDbObjectName )
                    	    // InternalSQLParser.g:2033:7: lv_entries_3_0= ruleDbObjectName
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getColumnFullAccess().getEntriesDbObjectNameParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_56);
                    	    lv_entries_3_0=ruleDbObjectName();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getColumnFullRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"entries",
                    	      								lv_entries_3_0,
                    	      								"org.xtext.example.mydsl_sql.SQL.DbObjectName");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt43 >= 1 ) break loop43;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(43, input);
                                throw eee;
                        }
                        cnt43++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleColumnFull"


    // $ANTLR start "entryRuleTables"
    // InternalSQLParser.g:2056:1: entryRuleTables returns [EObject current=null] : iv_ruleTables= ruleTables EOF ;
    public final EObject entryRuleTables() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTables = null;


        try {
            // InternalSQLParser.g:2056:47: (iv_ruleTables= ruleTables EOF )
            // InternalSQLParser.g:2057:2: iv_ruleTables= ruleTables EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTablesRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTables=ruleTables();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTables; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTables"


    // $ANTLR start "ruleTables"
    // InternalSQLParser.g:2063:1: ruleTables returns [EObject current=null] : (this_FromTable_0= ruleFromTable ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleFromTable ) ) )+ )? ) ;
    public final EObject ruleTables() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_FromTable_0 = null;

        EObject lv_entries_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:2069:2: ( (this_FromTable_0= ruleFromTable ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleFromTable ) ) )+ )? ) )
            // InternalSQLParser.g:2070:2: (this_FromTable_0= ruleFromTable ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleFromTable ) ) )+ )? )
            {
            // InternalSQLParser.g:2070:2: (this_FromTable_0= ruleFromTable ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleFromTable ) ) )+ )? )
            // InternalSQLParser.g:2071:3: this_FromTable_0= ruleFromTable ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleFromTable ) ) )+ )?
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getTablesAccess().getFromTableParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_15);
            this_FromTable_0=ruleFromTable();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_FromTable_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:2082:3: ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleFromTable ) ) )+ )?
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==Comma) ) {
                alt46=1;
            }
            switch (alt46) {
                case 1 :
                    // InternalSQLParser.g:2083:4: () (otherlv_2= Comma ( (lv_entries_3_0= ruleFromTable ) ) )+
                    {
                    // InternalSQLParser.g:2083:4: ()
                    // InternalSQLParser.g:2084:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getTablesAccess().getOrTableEntriesAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalSQLParser.g:2093:4: (otherlv_2= Comma ( (lv_entries_3_0= ruleFromTable ) ) )+
                    int cnt45=0;
                    loop45:
                    do {
                        int alt45=2;
                        int LA45_0 = input.LA(1);

                        if ( (LA45_0==Comma) ) {
                            alt45=1;
                        }


                        switch (alt45) {
                    	case 1 :
                    	    // InternalSQLParser.g:2094:5: otherlv_2= Comma ( (lv_entries_3_0= ruleFromTable ) )
                    	    {
                    	    otherlv_2=(Token)match(input,Comma,FOLLOW_5); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_2, grammarAccess.getTablesAccess().getCommaKeyword_1_1_0());
                    	      				
                    	    }
                    	    // InternalSQLParser.g:2098:5: ( (lv_entries_3_0= ruleFromTable ) )
                    	    // InternalSQLParser.g:2099:6: (lv_entries_3_0= ruleFromTable )
                    	    {
                    	    // InternalSQLParser.g:2099:6: (lv_entries_3_0= ruleFromTable )
                    	    // InternalSQLParser.g:2100:7: lv_entries_3_0= ruleFromTable
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getTablesAccess().getEntriesFromTableParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_15);
                    	    lv_entries_3_0=ruleFromTable();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getTablesRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"entries",
                    	      								lv_entries_3_0,
                    	      								"org.xtext.example.mydsl_sql.SQL.FromTable");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt45 >= 1 ) break loop45;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(45, input);
                                throw eee;
                        }
                        cnt45++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTables"


    // $ANTLR start "entryRuleFromTable"
    // InternalSQLParser.g:2123:1: entryRuleFromTable returns [EObject current=null] : iv_ruleFromTable= ruleFromTable EOF ;
    public final EObject entryRuleFromTable() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFromTable = null;


        try {
            // InternalSQLParser.g:2123:50: (iv_ruleFromTable= ruleFromTable EOF )
            // InternalSQLParser.g:2124:2: iv_ruleFromTable= ruleFromTable EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFromTableRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFromTable=ruleFromTable();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFromTable; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFromTable"


    // $ANTLR start "ruleFromTable"
    // InternalSQLParser.g:2130:1: ruleFromTable returns [EObject current=null] : ( ( (lv_table_0_0= ruleTableOrAlias ) ) ( (lv_fjoin_1_0= ruleFromTableJoin ) )* ) ;
    public final EObject ruleFromTable() throws RecognitionException {
        EObject current = null;

        EObject lv_table_0_0 = null;

        EObject lv_fjoin_1_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:2136:2: ( ( ( (lv_table_0_0= ruleTableOrAlias ) ) ( (lv_fjoin_1_0= ruleFromTableJoin ) )* ) )
            // InternalSQLParser.g:2137:2: ( ( (lv_table_0_0= ruleTableOrAlias ) ) ( (lv_fjoin_1_0= ruleFromTableJoin ) )* )
            {
            // InternalSQLParser.g:2137:2: ( ( (lv_table_0_0= ruleTableOrAlias ) ) ( (lv_fjoin_1_0= ruleFromTableJoin ) )* )
            // InternalSQLParser.g:2138:3: ( (lv_table_0_0= ruleTableOrAlias ) ) ( (lv_fjoin_1_0= ruleFromTableJoin ) )*
            {
            // InternalSQLParser.g:2138:3: ( (lv_table_0_0= ruleTableOrAlias ) )
            // InternalSQLParser.g:2139:4: (lv_table_0_0= ruleTableOrAlias )
            {
            // InternalSQLParser.g:2139:4: (lv_table_0_0= ruleTableOrAlias )
            // InternalSQLParser.g:2140:5: lv_table_0_0= ruleTableOrAlias
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getFromTableAccess().getTableTableOrAliasParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_57);
            lv_table_0_0=ruleTableOrAlias();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getFromTableRule());
              					}
              					set(
              						current,
              						"table",
              						lv_table_0_0,
              						"org.xtext.example.mydsl_sql.SQL.TableOrAlias");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:2157:3: ( (lv_fjoin_1_0= ruleFromTableJoin ) )*
            loop47:
            do {
                int alt47=2;
                int LA47_0 = input.LA(1);

                if ( (LA47_0==STRAIGHT_JOIN||LA47_0==NATURAL||LA47_0==CROSS||LA47_0==INNER||LA47_0==RIGHT||LA47_0==FULL||LA47_0==JOIN||LA47_0==LEFT) ) {
                    alt47=1;
                }


                switch (alt47) {
            	case 1 :
            	    // InternalSQLParser.g:2158:4: (lv_fjoin_1_0= ruleFromTableJoin )
            	    {
            	    // InternalSQLParser.g:2158:4: (lv_fjoin_1_0= ruleFromTableJoin )
            	    // InternalSQLParser.g:2159:5: lv_fjoin_1_0= ruleFromTableJoin
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getFromTableAccess().getFjoinFromTableJoinParserRuleCall_1_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_57);
            	    lv_fjoin_1_0=ruleFromTableJoin();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getFromTableRule());
            	      					}
            	      					add(
            	      						current,
            	      						"fjoin",
            	      						lv_fjoin_1_0,
            	      						"org.xtext.example.mydsl_sql.SQL.FromTableJoin");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop47;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFromTable"


    // $ANTLR start "entryRuleFromTableJoin"
    // InternalSQLParser.g:2180:1: entryRuleFromTableJoin returns [EObject current=null] : iv_ruleFromTableJoin= ruleFromTableJoin EOF ;
    public final EObject entryRuleFromTableJoin() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFromTableJoin = null;


        try {
            // InternalSQLParser.g:2180:54: (iv_ruleFromTableJoin= ruleFromTableJoin EOF )
            // InternalSQLParser.g:2181:2: iv_ruleFromTableJoin= ruleFromTableJoin EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFromTableJoinRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFromTableJoin=ruleFromTableJoin();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFromTableJoin; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFromTableJoin"


    // $ANTLR start "ruleFromTableJoin"
    // InternalSQLParser.g:2187:1: ruleFromTableJoin returns [EObject current=null] : ( ( (lv_join_0_0= ruleJoinType ) ) ( (lv_onTable_1_0= ruleTableOrAlias ) ) ( (otherlv_2= ON ( (lv_joinExpr_3_0= ruleFullExpression ) ) ) | ( (lv_joinCond_4_0= ruleJoinCondition ) ) ) ) ;
    public final EObject ruleFromTableJoin() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        AntlrDatatypeRuleToken lv_join_0_0 = null;

        EObject lv_onTable_1_0 = null;

        EObject lv_joinExpr_3_0 = null;

        EObject lv_joinCond_4_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:2193:2: ( ( ( (lv_join_0_0= ruleJoinType ) ) ( (lv_onTable_1_0= ruleTableOrAlias ) ) ( (otherlv_2= ON ( (lv_joinExpr_3_0= ruleFullExpression ) ) ) | ( (lv_joinCond_4_0= ruleJoinCondition ) ) ) ) )
            // InternalSQLParser.g:2194:2: ( ( (lv_join_0_0= ruleJoinType ) ) ( (lv_onTable_1_0= ruleTableOrAlias ) ) ( (otherlv_2= ON ( (lv_joinExpr_3_0= ruleFullExpression ) ) ) | ( (lv_joinCond_4_0= ruleJoinCondition ) ) ) )
            {
            // InternalSQLParser.g:2194:2: ( ( (lv_join_0_0= ruleJoinType ) ) ( (lv_onTable_1_0= ruleTableOrAlias ) ) ( (otherlv_2= ON ( (lv_joinExpr_3_0= ruleFullExpression ) ) ) | ( (lv_joinCond_4_0= ruleJoinCondition ) ) ) )
            // InternalSQLParser.g:2195:3: ( (lv_join_0_0= ruleJoinType ) ) ( (lv_onTable_1_0= ruleTableOrAlias ) ) ( (otherlv_2= ON ( (lv_joinExpr_3_0= ruleFullExpression ) ) ) | ( (lv_joinCond_4_0= ruleJoinCondition ) ) )
            {
            // InternalSQLParser.g:2195:3: ( (lv_join_0_0= ruleJoinType ) )
            // InternalSQLParser.g:2196:4: (lv_join_0_0= ruleJoinType )
            {
            // InternalSQLParser.g:2196:4: (lv_join_0_0= ruleJoinType )
            // InternalSQLParser.g:2197:5: lv_join_0_0= ruleJoinType
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getFromTableJoinAccess().getJoinJoinTypeParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_5);
            lv_join_0_0=ruleJoinType();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getFromTableJoinRule());
              					}
              					set(
              						current,
              						"join",
              						lv_join_0_0,
              						"org.xtext.example.mydsl_sql.SQL.JoinType");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:2214:3: ( (lv_onTable_1_0= ruleTableOrAlias ) )
            // InternalSQLParser.g:2215:4: (lv_onTable_1_0= ruleTableOrAlias )
            {
            // InternalSQLParser.g:2215:4: (lv_onTable_1_0= ruleTableOrAlias )
            // InternalSQLParser.g:2216:5: lv_onTable_1_0= ruleTableOrAlias
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getFromTableJoinAccess().getOnTableTableOrAliasParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_58);
            lv_onTable_1_0=ruleTableOrAlias();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getFromTableJoinRule());
              					}
              					set(
              						current,
              						"onTable",
              						lv_onTable_1_0,
              						"org.xtext.example.mydsl_sql.SQL.TableOrAlias");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:2233:3: ( (otherlv_2= ON ( (lv_joinExpr_3_0= ruleFullExpression ) ) ) | ( (lv_joinCond_4_0= ruleJoinCondition ) ) )
            int alt48=2;
            int LA48_0 = input.LA(1);

            if ( (LA48_0==ON) ) {
                alt48=1;
            }
            else if ( (LA48_0==USING) ) {
                alt48=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 48, 0, input);

                throw nvae;
            }
            switch (alt48) {
                case 1 :
                    // InternalSQLParser.g:2234:4: (otherlv_2= ON ( (lv_joinExpr_3_0= ruleFullExpression ) ) )
                    {
                    // InternalSQLParser.g:2234:4: (otherlv_2= ON ( (lv_joinExpr_3_0= ruleFullExpression ) ) )
                    // InternalSQLParser.g:2235:5: otherlv_2= ON ( (lv_joinExpr_3_0= ruleFullExpression ) )
                    {
                    otherlv_2=(Token)match(input,ON,FOLLOW_43); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_2, grammarAccess.getFromTableJoinAccess().getONKeyword_2_0_0());
                      				
                    }
                    // InternalSQLParser.g:2239:5: ( (lv_joinExpr_3_0= ruleFullExpression ) )
                    // InternalSQLParser.g:2240:6: (lv_joinExpr_3_0= ruleFullExpression )
                    {
                    // InternalSQLParser.g:2240:6: (lv_joinExpr_3_0= ruleFullExpression )
                    // InternalSQLParser.g:2241:7: lv_joinExpr_3_0= ruleFullExpression
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getFromTableJoinAccess().getJoinExprFullExpressionParserRuleCall_2_0_1_0());
                      						
                    }
                    pushFollow(FOLLOW_2);
                    lv_joinExpr_3_0=ruleFullExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getFromTableJoinRule());
                      							}
                      							set(
                      								current,
                      								"joinExpr",
                      								lv_joinExpr_3_0,
                      								"org.xtext.example.mydsl_sql.SQL.FullExpression");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:2260:4: ( (lv_joinCond_4_0= ruleJoinCondition ) )
                    {
                    // InternalSQLParser.g:2260:4: ( (lv_joinCond_4_0= ruleJoinCondition ) )
                    // InternalSQLParser.g:2261:5: (lv_joinCond_4_0= ruleJoinCondition )
                    {
                    // InternalSQLParser.g:2261:5: (lv_joinCond_4_0= ruleJoinCondition )
                    // InternalSQLParser.g:2262:6: lv_joinCond_4_0= ruleJoinCondition
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getFromTableJoinAccess().getJoinCondJoinConditionParserRuleCall_2_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_joinCond_4_0=ruleJoinCondition();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getFromTableJoinRule());
                      						}
                      						set(
                      							current,
                      							"joinCond",
                      							lv_joinCond_4_0,
                      							"org.xtext.example.mydsl_sql.SQL.JoinCondition");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFromTableJoin"


    // $ANTLR start "entryRuleJoinCondition"
    // InternalSQLParser.g:2284:1: entryRuleJoinCondition returns [EObject current=null] : iv_ruleJoinCondition= ruleJoinCondition EOF ;
    public final EObject entryRuleJoinCondition() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleJoinCondition = null;


        try {
            // InternalSQLParser.g:2284:54: (iv_ruleJoinCondition= ruleJoinCondition EOF )
            // InternalSQLParser.g:2285:2: iv_ruleJoinCondition= ruleJoinCondition EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getJoinConditionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleJoinCondition=ruleJoinCondition();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleJoinCondition; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleJoinCondition"


    // $ANTLR start "ruleJoinCondition"
    // InternalSQLParser.g:2291:1: ruleJoinCondition returns [EObject current=null] : (otherlv_0= USING otherlv_1= LeftParenthesis ( (lv_useCols_2_0= ruleUsingCols ) ) otherlv_3= RightParenthesis ) ;
    public final EObject ruleJoinCondition() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_useCols_2_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:2297:2: ( (otherlv_0= USING otherlv_1= LeftParenthesis ( (lv_useCols_2_0= ruleUsingCols ) ) otherlv_3= RightParenthesis ) )
            // InternalSQLParser.g:2298:2: (otherlv_0= USING otherlv_1= LeftParenthesis ( (lv_useCols_2_0= ruleUsingCols ) ) otherlv_3= RightParenthesis )
            {
            // InternalSQLParser.g:2298:2: (otherlv_0= USING otherlv_1= LeftParenthesis ( (lv_useCols_2_0= ruleUsingCols ) ) otherlv_3= RightParenthesis )
            // InternalSQLParser.g:2299:3: otherlv_0= USING otherlv_1= LeftParenthesis ( (lv_useCols_2_0= ruleUsingCols ) ) otherlv_3= RightParenthesis
            {
            otherlv_0=(Token)match(input,USING,FOLLOW_11); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getJoinConditionAccess().getUSINGKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_26); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getJoinConditionAccess().getLeftParenthesisKeyword_1());
              		
            }
            // InternalSQLParser.g:2307:3: ( (lv_useCols_2_0= ruleUsingCols ) )
            // InternalSQLParser.g:2308:4: (lv_useCols_2_0= ruleUsingCols )
            {
            // InternalSQLParser.g:2308:4: (lv_useCols_2_0= ruleUsingCols )
            // InternalSQLParser.g:2309:5: lv_useCols_2_0= ruleUsingCols
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getJoinConditionAccess().getUseColsUsingColsParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_13);
            lv_useCols_2_0=ruleUsingCols();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getJoinConditionRule());
              					}
              					set(
              						current,
              						"useCols",
              						lv_useCols_2_0,
              						"org.xtext.example.mydsl_sql.SQL.UsingCols");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getJoinConditionAccess().getRightParenthesisKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleJoinCondition"


    // $ANTLR start "entryRuleUsingCols"
    // InternalSQLParser.g:2334:1: entryRuleUsingCols returns [EObject current=null] : iv_ruleUsingCols= ruleUsingCols EOF ;
    public final EObject entryRuleUsingCols() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleUsingCols = null;


        try {
            // InternalSQLParser.g:2334:50: (iv_ruleUsingCols= ruleUsingCols EOF )
            // InternalSQLParser.g:2335:2: iv_ruleUsingCols= ruleUsingCols EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getUsingColsRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleUsingCols=ruleUsingCols();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleUsingCols; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleUsingCols"


    // $ANTLR start "ruleUsingCols"
    // InternalSQLParser.g:2341:1: ruleUsingCols returns [EObject current=null] : (this_DbObjectName_0= ruleDbObjectName ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )? ) ;
    public final EObject ruleUsingCols() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_DbObjectName_0 = null;

        EObject lv_entries_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:2347:2: ( (this_DbObjectName_0= ruleDbObjectName ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )? ) )
            // InternalSQLParser.g:2348:2: (this_DbObjectName_0= ruleDbObjectName ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )? )
            {
            // InternalSQLParser.g:2348:2: (this_DbObjectName_0= ruleDbObjectName ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )? )
            // InternalSQLParser.g:2349:3: this_DbObjectName_0= ruleDbObjectName ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )?
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getUsingColsAccess().getDbObjectNameParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_15);
            this_DbObjectName_0=ruleDbObjectName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_DbObjectName_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:2360:3: ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )?
            int alt50=2;
            int LA50_0 = input.LA(1);

            if ( (LA50_0==Comma) ) {
                alt50=1;
            }
            switch (alt50) {
                case 1 :
                    // InternalSQLParser.g:2361:4: () (otherlv_2= Comma ( (lv_entries_3_0= ruleDbObjectName ) ) )+
                    {
                    // InternalSQLParser.g:2361:4: ()
                    // InternalSQLParser.g:2362:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getUsingColsAccess().getUsingColsEntriesAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalSQLParser.g:2371:4: (otherlv_2= Comma ( (lv_entries_3_0= ruleDbObjectName ) ) )+
                    int cnt49=0;
                    loop49:
                    do {
                        int alt49=2;
                        int LA49_0 = input.LA(1);

                        if ( (LA49_0==Comma) ) {
                            alt49=1;
                        }


                        switch (alt49) {
                    	case 1 :
                    	    // InternalSQLParser.g:2372:5: otherlv_2= Comma ( (lv_entries_3_0= ruleDbObjectName ) )
                    	    {
                    	    otherlv_2=(Token)match(input,Comma,FOLLOW_26); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_2, grammarAccess.getUsingColsAccess().getCommaKeyword_1_1_0());
                    	      				
                    	    }
                    	    // InternalSQLParser.g:2376:5: ( (lv_entries_3_0= ruleDbObjectName ) )
                    	    // InternalSQLParser.g:2377:6: (lv_entries_3_0= ruleDbObjectName )
                    	    {
                    	    // InternalSQLParser.g:2377:6: (lv_entries_3_0= ruleDbObjectName )
                    	    // InternalSQLParser.g:2378:7: lv_entries_3_0= ruleDbObjectName
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getUsingColsAccess().getEntriesDbObjectNameParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_15);
                    	    lv_entries_3_0=ruleDbObjectName();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getUsingColsRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"entries",
                    	      								lv_entries_3_0,
                    	      								"org.xtext.example.mydsl_sql.SQL.DbObjectName");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt49 >= 1 ) break loop49;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(49, input);
                                throw eee;
                        }
                        cnt49++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleUsingCols"


    // $ANTLR start "entryRuleTableOrAlias"
    // InternalSQLParser.g:2401:1: entryRuleTableOrAlias returns [EObject current=null] : iv_ruleTableOrAlias= ruleTableOrAlias EOF ;
    public final EObject entryRuleTableOrAlias() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTableOrAlias = null;


        try {
            // InternalSQLParser.g:2401:53: (iv_ruleTableOrAlias= ruleTableOrAlias EOF )
            // InternalSQLParser.g:2402:2: iv_ruleTableOrAlias= ruleTableOrAlias EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTableOrAliasRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTableOrAlias=ruleTableOrAlias();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTableOrAlias; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTableOrAlias"


    // $ANTLR start "ruleTableOrAlias"
    // InternalSQLParser.g:2408:1: ruleTableOrAlias returns [EObject current=null] : ( ( ( (lv_tfull_0_0= ruleTableFull ) ) | ( (lv_sq_1_0= ruleSubQueryOperand ) ) | ( (lv_values_2_0= ruleFromValues ) ) ) ( ( (lv_pivot_3_0= rulePivotTable ) ) | ( (lv_unpivot_4_0= ruleUnpivotTable ) ) )? ( (lv_alias_5_0= AS ) )? ( (lv_tblAlias_6_0= ruleDbObjectName ) )? ) ;
    public final EObject ruleTableOrAlias() throws RecognitionException {
        EObject current = null;

        Token lv_alias_5_0=null;
        EObject lv_tfull_0_0 = null;

        EObject lv_sq_1_0 = null;

        EObject lv_values_2_0 = null;

        EObject lv_pivot_3_0 = null;

        EObject lv_unpivot_4_0 = null;

        EObject lv_tblAlias_6_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:2414:2: ( ( ( ( (lv_tfull_0_0= ruleTableFull ) ) | ( (lv_sq_1_0= ruleSubQueryOperand ) ) | ( (lv_values_2_0= ruleFromValues ) ) ) ( ( (lv_pivot_3_0= rulePivotTable ) ) | ( (lv_unpivot_4_0= ruleUnpivotTable ) ) )? ( (lv_alias_5_0= AS ) )? ( (lv_tblAlias_6_0= ruleDbObjectName ) )? ) )
            // InternalSQLParser.g:2415:2: ( ( ( (lv_tfull_0_0= ruleTableFull ) ) | ( (lv_sq_1_0= ruleSubQueryOperand ) ) | ( (lv_values_2_0= ruleFromValues ) ) ) ( ( (lv_pivot_3_0= rulePivotTable ) ) | ( (lv_unpivot_4_0= ruleUnpivotTable ) ) )? ( (lv_alias_5_0= AS ) )? ( (lv_tblAlias_6_0= ruleDbObjectName ) )? )
            {
            // InternalSQLParser.g:2415:2: ( ( ( (lv_tfull_0_0= ruleTableFull ) ) | ( (lv_sq_1_0= ruleSubQueryOperand ) ) | ( (lv_values_2_0= ruleFromValues ) ) ) ( ( (lv_pivot_3_0= rulePivotTable ) ) | ( (lv_unpivot_4_0= ruleUnpivotTable ) ) )? ( (lv_alias_5_0= AS ) )? ( (lv_tblAlias_6_0= ruleDbObjectName ) )? )
            // InternalSQLParser.g:2416:3: ( ( (lv_tfull_0_0= ruleTableFull ) ) | ( (lv_sq_1_0= ruleSubQueryOperand ) ) | ( (lv_values_2_0= ruleFromValues ) ) ) ( ( (lv_pivot_3_0= rulePivotTable ) ) | ( (lv_unpivot_4_0= ruleUnpivotTable ) ) )? ( (lv_alias_5_0= AS ) )? ( (lv_tblAlias_6_0= ruleDbObjectName ) )?
            {
            // InternalSQLParser.g:2416:3: ( ( (lv_tfull_0_0= ruleTableFull ) ) | ( (lv_sq_1_0= ruleSubQueryOperand ) ) | ( (lv_values_2_0= ruleFromValues ) ) )
            int alt51=3;
            int LA51_0 = input.LA(1);

            if ( ((LA51_0>=RULE_STRING && LA51_0<=RULE_ID)) ) {
                alt51=1;
            }
            else if ( (LA51_0==LeftParenthesis) ) {
                int LA51_2 = input.LA(2);

                if ( (LA51_2==VALUES) ) {
                    alt51=3;
                }
                else if ( (LA51_2==SELECT) ) {
                    alt51=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 51, 2, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 51, 0, input);

                throw nvae;
            }
            switch (alt51) {
                case 1 :
                    // InternalSQLParser.g:2417:4: ( (lv_tfull_0_0= ruleTableFull ) )
                    {
                    // InternalSQLParser.g:2417:4: ( (lv_tfull_0_0= ruleTableFull ) )
                    // InternalSQLParser.g:2418:5: (lv_tfull_0_0= ruleTableFull )
                    {
                    // InternalSQLParser.g:2418:5: (lv_tfull_0_0= ruleTableFull )
                    // InternalSQLParser.g:2419:6: lv_tfull_0_0= ruleTableFull
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTableOrAliasAccess().getTfullTableFullParserRuleCall_0_0_0());
                      					
                    }
                    pushFollow(FOLLOW_59);
                    lv_tfull_0_0=ruleTableFull();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTableOrAliasRule());
                      						}
                      						set(
                      							current,
                      							"tfull",
                      							lv_tfull_0_0,
                      							"org.xtext.example.mydsl_sql.SQL.TableFull");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:2437:4: ( (lv_sq_1_0= ruleSubQueryOperand ) )
                    {
                    // InternalSQLParser.g:2437:4: ( (lv_sq_1_0= ruleSubQueryOperand ) )
                    // InternalSQLParser.g:2438:5: (lv_sq_1_0= ruleSubQueryOperand )
                    {
                    // InternalSQLParser.g:2438:5: (lv_sq_1_0= ruleSubQueryOperand )
                    // InternalSQLParser.g:2439:6: lv_sq_1_0= ruleSubQueryOperand
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTableOrAliasAccess().getSqSubQueryOperandParserRuleCall_0_1_0());
                      					
                    }
                    pushFollow(FOLLOW_59);
                    lv_sq_1_0=ruleSubQueryOperand();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTableOrAliasRule());
                      						}
                      						set(
                      							current,
                      							"sq",
                      							lv_sq_1_0,
                      							"org.xtext.example.mydsl_sql.SQL.SubQueryOperand");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:2457:4: ( (lv_values_2_0= ruleFromValues ) )
                    {
                    // InternalSQLParser.g:2457:4: ( (lv_values_2_0= ruleFromValues ) )
                    // InternalSQLParser.g:2458:5: (lv_values_2_0= ruleFromValues )
                    {
                    // InternalSQLParser.g:2458:5: (lv_values_2_0= ruleFromValues )
                    // InternalSQLParser.g:2459:6: lv_values_2_0= ruleFromValues
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTableOrAliasAccess().getValuesFromValuesParserRuleCall_0_2_0());
                      					
                    }
                    pushFollow(FOLLOW_59);
                    lv_values_2_0=ruleFromValues();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTableOrAliasRule());
                      						}
                      						set(
                      							current,
                      							"values",
                      							lv_values_2_0,
                      							"org.xtext.example.mydsl_sql.SQL.FromValues");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            // InternalSQLParser.g:2477:3: ( ( (lv_pivot_3_0= rulePivotTable ) ) | ( (lv_unpivot_4_0= ruleUnpivotTable ) ) )?
            int alt52=3;
            int LA52_0 = input.LA(1);

            if ( (LA52_0==PIVOT) ) {
                alt52=1;
            }
            else if ( (LA52_0==UNPIVOT) ) {
                alt52=2;
            }
            switch (alt52) {
                case 1 :
                    // InternalSQLParser.g:2478:4: ( (lv_pivot_3_0= rulePivotTable ) )
                    {
                    // InternalSQLParser.g:2478:4: ( (lv_pivot_3_0= rulePivotTable ) )
                    // InternalSQLParser.g:2479:5: (lv_pivot_3_0= rulePivotTable )
                    {
                    // InternalSQLParser.g:2479:5: (lv_pivot_3_0= rulePivotTable )
                    // InternalSQLParser.g:2480:6: lv_pivot_3_0= rulePivotTable
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTableOrAliasAccess().getPivotPivotTableParserRuleCall_1_0_0());
                      					
                    }
                    pushFollow(FOLLOW_54);
                    lv_pivot_3_0=rulePivotTable();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTableOrAliasRule());
                      						}
                      						set(
                      							current,
                      							"pivot",
                      							lv_pivot_3_0,
                      							"org.xtext.example.mydsl_sql.SQL.PivotTable");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:2498:4: ( (lv_unpivot_4_0= ruleUnpivotTable ) )
                    {
                    // InternalSQLParser.g:2498:4: ( (lv_unpivot_4_0= ruleUnpivotTable ) )
                    // InternalSQLParser.g:2499:5: (lv_unpivot_4_0= ruleUnpivotTable )
                    {
                    // InternalSQLParser.g:2499:5: (lv_unpivot_4_0= ruleUnpivotTable )
                    // InternalSQLParser.g:2500:6: lv_unpivot_4_0= ruleUnpivotTable
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTableOrAliasAccess().getUnpivotUnpivotTableParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_54);
                    lv_unpivot_4_0=ruleUnpivotTable();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTableOrAliasRule());
                      						}
                      						set(
                      							current,
                      							"unpivot",
                      							lv_unpivot_4_0,
                      							"org.xtext.example.mydsl_sql.SQL.UnpivotTable");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            // InternalSQLParser.g:2518:3: ( (lv_alias_5_0= AS ) )?
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==AS) ) {
                alt53=1;
            }
            switch (alt53) {
                case 1 :
                    // InternalSQLParser.g:2519:4: (lv_alias_5_0= AS )
                    {
                    // InternalSQLParser.g:2519:4: (lv_alias_5_0= AS )
                    // InternalSQLParser.g:2520:5: lv_alias_5_0= AS
                    {
                    lv_alias_5_0=(Token)match(input,AS,FOLLOW_55); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_alias_5_0, grammarAccess.getTableOrAliasAccess().getAliasASKeyword_2_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getTableOrAliasRule());
                      					}
                      					setWithLastConsumed(current, "alias", lv_alias_5_0, "AS");
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalSQLParser.g:2532:3: ( (lv_tblAlias_6_0= ruleDbObjectName ) )?
            int alt54=2;
            alt54 = dfa54.predict(input);
            switch (alt54) {
                case 1 :
                    // InternalSQLParser.g:2533:4: (lv_tblAlias_6_0= ruleDbObjectName )
                    {
                    // InternalSQLParser.g:2533:4: (lv_tblAlias_6_0= ruleDbObjectName )
                    // InternalSQLParser.g:2534:5: lv_tblAlias_6_0= ruleDbObjectName
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getTableOrAliasAccess().getTblAliasDbObjectNameParserRuleCall_3_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_tblAlias_6_0=ruleDbObjectName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getTableOrAliasRule());
                      					}
                      					set(
                      						current,
                      						"tblAlias",
                      						lv_tblAlias_6_0,
                      						"org.xtext.example.mydsl_sql.SQL.DbObjectName");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTableOrAlias"


    // $ANTLR start "entryRuleFromValues"
    // InternalSQLParser.g:2555:1: entryRuleFromValues returns [EObject current=null] : iv_ruleFromValues= ruleFromValues EOF ;
    public final EObject entryRuleFromValues() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFromValues = null;


        try {
            // InternalSQLParser.g:2555:51: (iv_ruleFromValues= ruleFromValues EOF )
            // InternalSQLParser.g:2556:2: iv_ruleFromValues= ruleFromValues EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFromValuesRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFromValues=ruleFromValues();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFromValues; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFromValues"


    // $ANTLR start "ruleFromValues"
    // InternalSQLParser.g:2562:1: ruleFromValues returns [EObject current=null] : ( ( (lv_values_0_0= ruleValues ) ) ( (lv_c_1_0= ruleFromValuesColumns ) )? ) ;
    public final EObject ruleFromValues() throws RecognitionException {
        EObject current = null;

        EObject lv_values_0_0 = null;

        EObject lv_c_1_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:2568:2: ( ( ( (lv_values_0_0= ruleValues ) ) ( (lv_c_1_0= ruleFromValuesColumns ) )? ) )
            // InternalSQLParser.g:2569:2: ( ( (lv_values_0_0= ruleValues ) ) ( (lv_c_1_0= ruleFromValuesColumns ) )? )
            {
            // InternalSQLParser.g:2569:2: ( ( (lv_values_0_0= ruleValues ) ) ( (lv_c_1_0= ruleFromValuesColumns ) )? )
            // InternalSQLParser.g:2570:3: ( (lv_values_0_0= ruleValues ) ) ( (lv_c_1_0= ruleFromValuesColumns ) )?
            {
            // InternalSQLParser.g:2570:3: ( (lv_values_0_0= ruleValues ) )
            // InternalSQLParser.g:2571:4: (lv_values_0_0= ruleValues )
            {
            // InternalSQLParser.g:2571:4: (lv_values_0_0= ruleValues )
            // InternalSQLParser.g:2572:5: lv_values_0_0= ruleValues
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getFromValuesAccess().getValuesValuesParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_60);
            lv_values_0_0=ruleValues();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getFromValuesRule());
              					}
              					set(
              						current,
              						"values",
              						lv_values_0_0,
              						"org.xtext.example.mydsl_sql.SQL.Values");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:2589:3: ( (lv_c_1_0= ruleFromValuesColumns ) )?
            int alt55=2;
            alt55 = dfa55.predict(input);
            switch (alt55) {
                case 1 :
                    // InternalSQLParser.g:2590:4: (lv_c_1_0= ruleFromValuesColumns )
                    {
                    // InternalSQLParser.g:2590:4: (lv_c_1_0= ruleFromValuesColumns )
                    // InternalSQLParser.g:2591:5: lv_c_1_0= ruleFromValuesColumns
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getFromValuesAccess().getCFromValuesColumnsParserRuleCall_1_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_c_1_0=ruleFromValuesColumns();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getFromValuesRule());
                      					}
                      					set(
                      						current,
                      						"c",
                      						lv_c_1_0,
                      						"org.xtext.example.mydsl_sql.SQL.FromValuesColumns");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFromValues"


    // $ANTLR start "entryRuleFromValuesColumns"
    // InternalSQLParser.g:2612:1: entryRuleFromValuesColumns returns [EObject current=null] : iv_ruleFromValuesColumns= ruleFromValuesColumns EOF ;
    public final EObject entryRuleFromValuesColumns() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFromValuesColumns = null;


        try {
            // InternalSQLParser.g:2612:58: (iv_ruleFromValuesColumns= ruleFromValuesColumns EOF )
            // InternalSQLParser.g:2613:2: iv_ruleFromValuesColumns= ruleFromValuesColumns EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFromValuesColumnsRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFromValuesColumns=ruleFromValuesColumns();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFromValuesColumns; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFromValuesColumns"


    // $ANTLR start "ruleFromValuesColumns"
    // InternalSQLParser.g:2619:1: ruleFromValuesColumns returns [EObject current=null] : (this_ID_0= RULE_ID otherlv_1= LeftParenthesis ( (lv_fvCols_2_0= ruleFromValuesColumnNames ) ) otherlv_3= RightParenthesis ) ;
    public final EObject ruleFromValuesColumns() throws RecognitionException {
        EObject current = null;

        Token this_ID_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_fvCols_2_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:2625:2: ( (this_ID_0= RULE_ID otherlv_1= LeftParenthesis ( (lv_fvCols_2_0= ruleFromValuesColumnNames ) ) otherlv_3= RightParenthesis ) )
            // InternalSQLParser.g:2626:2: (this_ID_0= RULE_ID otherlv_1= LeftParenthesis ( (lv_fvCols_2_0= ruleFromValuesColumnNames ) ) otherlv_3= RightParenthesis )
            {
            // InternalSQLParser.g:2626:2: (this_ID_0= RULE_ID otherlv_1= LeftParenthesis ( (lv_fvCols_2_0= ruleFromValuesColumnNames ) ) otherlv_3= RightParenthesis )
            // InternalSQLParser.g:2627:3: this_ID_0= RULE_ID otherlv_1= LeftParenthesis ( (lv_fvCols_2_0= ruleFromValuesColumnNames ) ) otherlv_3= RightParenthesis
            {
            this_ID_0=(Token)match(input,RULE_ID,FOLLOW_11); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(this_ID_0, grammarAccess.getFromValuesColumnsAccess().getIDTerminalRuleCall_0());
              		
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_61); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getFromValuesColumnsAccess().getLeftParenthesisKeyword_1());
              		
            }
            // InternalSQLParser.g:2635:3: ( (lv_fvCols_2_0= ruleFromValuesColumnNames ) )
            // InternalSQLParser.g:2636:4: (lv_fvCols_2_0= ruleFromValuesColumnNames )
            {
            // InternalSQLParser.g:2636:4: (lv_fvCols_2_0= ruleFromValuesColumnNames )
            // InternalSQLParser.g:2637:5: lv_fvCols_2_0= ruleFromValuesColumnNames
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getFromValuesColumnsAccess().getFvColsFromValuesColumnNamesParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_13);
            lv_fvCols_2_0=ruleFromValuesColumnNames();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getFromValuesColumnsRule());
              					}
              					set(
              						current,
              						"fvCols",
              						lv_fvCols_2_0,
              						"org.xtext.example.mydsl_sql.SQL.FromValuesColumnNames");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getFromValuesColumnsAccess().getRightParenthesisKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFromValuesColumns"


    // $ANTLR start "entryRuleFromValuesColumnNames"
    // InternalSQLParser.g:2662:1: entryRuleFromValuesColumnNames returns [EObject current=null] : iv_ruleFromValuesColumnNames= ruleFromValuesColumnNames EOF ;
    public final EObject entryRuleFromValuesColumnNames() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFromValuesColumnNames = null;


        try {
            // InternalSQLParser.g:2662:62: (iv_ruleFromValuesColumnNames= ruleFromValuesColumnNames EOF )
            // InternalSQLParser.g:2663:2: iv_ruleFromValuesColumnNames= ruleFromValuesColumnNames EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFromValuesColumnNamesRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFromValuesColumnNames=ruleFromValuesColumnNames();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFromValuesColumnNames; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFromValuesColumnNames"


    // $ANTLR start "ruleFromValuesColumnNames"
    // InternalSQLParser.g:2669:1: ruleFromValuesColumnNames returns [EObject current=null] : (this_ColumnName_0= ruleColumnName ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleColumnName ) ) )+ )? ) ;
    public final EObject ruleFromValuesColumnNames() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_ColumnName_0 = null;

        EObject lv_entries_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:2675:2: ( (this_ColumnName_0= ruleColumnName ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleColumnName ) ) )+ )? ) )
            // InternalSQLParser.g:2676:2: (this_ColumnName_0= ruleColumnName ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleColumnName ) ) )+ )? )
            {
            // InternalSQLParser.g:2676:2: (this_ColumnName_0= ruleColumnName ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleColumnName ) ) )+ )? )
            // InternalSQLParser.g:2677:3: this_ColumnName_0= ruleColumnName ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleColumnName ) ) )+ )?
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getFromValuesColumnNamesAccess().getColumnNameParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_15);
            this_ColumnName_0=ruleColumnName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ColumnName_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:2688:3: ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleColumnName ) ) )+ )?
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==Comma) ) {
                alt57=1;
            }
            switch (alt57) {
                case 1 :
                    // InternalSQLParser.g:2689:4: () (otherlv_2= Comma ( (lv_entries_3_0= ruleColumnName ) ) )+
                    {
                    // InternalSQLParser.g:2689:4: ()
                    // InternalSQLParser.g:2690:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getFromValuesColumnNamesAccess().getAbcEntriesAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalSQLParser.g:2699:4: (otherlv_2= Comma ( (lv_entries_3_0= ruleColumnName ) ) )+
                    int cnt56=0;
                    loop56:
                    do {
                        int alt56=2;
                        int LA56_0 = input.LA(1);

                        if ( (LA56_0==Comma) ) {
                            alt56=1;
                        }


                        switch (alt56) {
                    	case 1 :
                    	    // InternalSQLParser.g:2700:5: otherlv_2= Comma ( (lv_entries_3_0= ruleColumnName ) )
                    	    {
                    	    otherlv_2=(Token)match(input,Comma,FOLLOW_61); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_2, grammarAccess.getFromValuesColumnNamesAccess().getCommaKeyword_1_1_0());
                    	      				
                    	    }
                    	    // InternalSQLParser.g:2704:5: ( (lv_entries_3_0= ruleColumnName ) )
                    	    // InternalSQLParser.g:2705:6: (lv_entries_3_0= ruleColumnName )
                    	    {
                    	    // InternalSQLParser.g:2705:6: (lv_entries_3_0= ruleColumnName )
                    	    // InternalSQLParser.g:2706:7: lv_entries_3_0= ruleColumnName
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getFromValuesColumnNamesAccess().getEntriesColumnNameParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_15);
                    	    lv_entries_3_0=ruleColumnName();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getFromValuesColumnNamesRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"entries",
                    	      								lv_entries_3_0,
                    	      								"org.xtext.example.mydsl_sql.SQL.ColumnName");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt56 >= 1 ) break loop56;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(56, input);
                                throw eee;
                        }
                        cnt56++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFromValuesColumnNames"


    // $ANTLR start "entryRuleColumnName"
    // InternalSQLParser.g:2729:1: entryRuleColumnName returns [EObject current=null] : iv_ruleColumnName= ruleColumnName EOF ;
    public final EObject entryRuleColumnName() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleColumnName = null;


        try {
            // InternalSQLParser.g:2729:51: (iv_ruleColumnName= ruleColumnName EOF )
            // InternalSQLParser.g:2730:2: iv_ruleColumnName= ruleColumnName EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getColumnNameRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleColumnName=ruleColumnName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleColumnName; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleColumnName"


    // $ANTLR start "ruleColumnName"
    // InternalSQLParser.g:2736:1: ruleColumnName returns [EObject current=null] : ( (lv_colName_0_0= RULE_STRING ) ) ;
    public final EObject ruleColumnName() throws RecognitionException {
        EObject current = null;

        Token lv_colName_0_0=null;


        	enterRule();

        try {
            // InternalSQLParser.g:2742:2: ( ( (lv_colName_0_0= RULE_STRING ) ) )
            // InternalSQLParser.g:2743:2: ( (lv_colName_0_0= RULE_STRING ) )
            {
            // InternalSQLParser.g:2743:2: ( (lv_colName_0_0= RULE_STRING ) )
            // InternalSQLParser.g:2744:3: (lv_colName_0_0= RULE_STRING )
            {
            // InternalSQLParser.g:2744:3: (lv_colName_0_0= RULE_STRING )
            // InternalSQLParser.g:2745:4: lv_colName_0_0= RULE_STRING
            {
            lv_colName_0_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(lv_colName_0_0, grammarAccess.getColumnNameAccess().getColNameSTRINGTerminalRuleCall_0());
              			
            }
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getColumnNameRule());
              				}
              				setWithLastConsumed(
              					current,
              					"colName",
              					lv_colName_0_0,
              					"org.xtext.example.mydsl_sql.SQL.STRING");
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleColumnName"


    // $ANTLR start "entryRuleValues"
    // InternalSQLParser.g:2764:1: entryRuleValues returns [EObject current=null] : iv_ruleValues= ruleValues EOF ;
    public final EObject entryRuleValues() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleValues = null;


        try {
            // InternalSQLParser.g:2764:47: (iv_ruleValues= ruleValues EOF )
            // InternalSQLParser.g:2765:2: iv_ruleValues= ruleValues EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getValuesRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleValues=ruleValues();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleValues; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleValues"


    // $ANTLR start "ruleValues"
    // InternalSQLParser.g:2771:1: ruleValues returns [EObject current=null] : (otherlv_0= LeftParenthesis otherlv_1= VALUES ( (lv_rows_2_0= ruleRows ) ) otherlv_3= RightParenthesis ) ;
    public final EObject ruleValues() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_rows_2_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:2777:2: ( (otherlv_0= LeftParenthesis otherlv_1= VALUES ( (lv_rows_2_0= ruleRows ) ) otherlv_3= RightParenthesis ) )
            // InternalSQLParser.g:2778:2: (otherlv_0= LeftParenthesis otherlv_1= VALUES ( (lv_rows_2_0= ruleRows ) ) otherlv_3= RightParenthesis )
            {
            // InternalSQLParser.g:2778:2: (otherlv_0= LeftParenthesis otherlv_1= VALUES ( (lv_rows_2_0= ruleRows ) ) otherlv_3= RightParenthesis )
            // InternalSQLParser.g:2779:3: otherlv_0= LeftParenthesis otherlv_1= VALUES ( (lv_rows_2_0= ruleRows ) ) otherlv_3= RightParenthesis
            {
            otherlv_0=(Token)match(input,LeftParenthesis,FOLLOW_62); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getValuesAccess().getLeftParenthesisKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,VALUES,FOLLOW_11); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getValuesAccess().getVALUESKeyword_1());
              		
            }
            // InternalSQLParser.g:2787:3: ( (lv_rows_2_0= ruleRows ) )
            // InternalSQLParser.g:2788:4: (lv_rows_2_0= ruleRows )
            {
            // InternalSQLParser.g:2788:4: (lv_rows_2_0= ruleRows )
            // InternalSQLParser.g:2789:5: lv_rows_2_0= ruleRows
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getValuesAccess().getRowsRowsParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_13);
            lv_rows_2_0=ruleRows();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getValuesRule());
              					}
              					set(
              						current,
              						"rows",
              						lv_rows_2_0,
              						"org.xtext.example.mydsl_sql.SQL.Rows");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getValuesAccess().getRightParenthesisKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleValues"


    // $ANTLR start "entryRuleRows"
    // InternalSQLParser.g:2814:1: entryRuleRows returns [EObject current=null] : iv_ruleRows= ruleRows EOF ;
    public final EObject entryRuleRows() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleRows = null;


        try {
            // InternalSQLParser.g:2814:45: (iv_ruleRows= ruleRows EOF )
            // InternalSQLParser.g:2815:2: iv_ruleRows= ruleRows EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRowsRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRows=ruleRows();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRows; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleRows"


    // $ANTLR start "ruleRows"
    // InternalSQLParser.g:2821:1: ruleRows returns [EObject current=null] : (this_Row_0= ruleRow ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleRow ) ) )+ )? ) ;
    public final EObject ruleRows() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_Row_0 = null;

        EObject lv_entries_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:2827:2: ( (this_Row_0= ruleRow ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleRow ) ) )+ )? ) )
            // InternalSQLParser.g:2828:2: (this_Row_0= ruleRow ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleRow ) ) )+ )? )
            {
            // InternalSQLParser.g:2828:2: (this_Row_0= ruleRow ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleRow ) ) )+ )? )
            // InternalSQLParser.g:2829:3: this_Row_0= ruleRow ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleRow ) ) )+ )?
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getRowsAccess().getRowParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_15);
            this_Row_0=ruleRow();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_Row_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:2840:3: ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleRow ) ) )+ )?
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==Comma) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    // InternalSQLParser.g:2841:4: () (otherlv_2= Comma ( (lv_entries_3_0= ruleRow ) ) )+
                    {
                    // InternalSQLParser.g:2841:4: ()
                    // InternalSQLParser.g:2842:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getRowsAccess().getRowsEntriesAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalSQLParser.g:2851:4: (otherlv_2= Comma ( (lv_entries_3_0= ruleRow ) ) )+
                    int cnt58=0;
                    loop58:
                    do {
                        int alt58=2;
                        int LA58_0 = input.LA(1);

                        if ( (LA58_0==Comma) ) {
                            alt58=1;
                        }


                        switch (alt58) {
                    	case 1 :
                    	    // InternalSQLParser.g:2852:5: otherlv_2= Comma ( (lv_entries_3_0= ruleRow ) )
                    	    {
                    	    otherlv_2=(Token)match(input,Comma,FOLLOW_11); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_2, grammarAccess.getRowsAccess().getCommaKeyword_1_1_0());
                    	      				
                    	    }
                    	    // InternalSQLParser.g:2856:5: ( (lv_entries_3_0= ruleRow ) )
                    	    // InternalSQLParser.g:2857:6: (lv_entries_3_0= ruleRow )
                    	    {
                    	    // InternalSQLParser.g:2857:6: (lv_entries_3_0= ruleRow )
                    	    // InternalSQLParser.g:2858:7: lv_entries_3_0= ruleRow
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getRowsAccess().getEntriesRowParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_15);
                    	    lv_entries_3_0=ruleRow();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getRowsRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"entries",
                    	      								lv_entries_3_0,
                    	      								"org.xtext.example.mydsl_sql.SQL.Row");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt58 >= 1 ) break loop58;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(58, input);
                                throw eee;
                        }
                        cnt58++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleRows"


    // $ANTLR start "entryRuleRow"
    // InternalSQLParser.g:2881:1: entryRuleRow returns [EObject current=null] : iv_ruleRow= ruleRow EOF ;
    public final EObject entryRuleRow() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleRow = null;


        try {
            // InternalSQLParser.g:2881:44: (iv_ruleRow= ruleRow EOF )
            // InternalSQLParser.g:2882:2: iv_ruleRow= ruleRow EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRowRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRow=ruleRow();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRow; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleRow"


    // $ANTLR start "ruleRow"
    // InternalSQLParser.g:2888:1: ruleRow returns [EObject current=null] : (otherlv_0= LeftParenthesis ( (lv_rowValues_1_0= ruleRowValues ) ) otherlv_2= RightParenthesis ) ;
    public final EObject ruleRow() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_rowValues_1_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:2894:2: ( (otherlv_0= LeftParenthesis ( (lv_rowValues_1_0= ruleRowValues ) ) otherlv_2= RightParenthesis ) )
            // InternalSQLParser.g:2895:2: (otherlv_0= LeftParenthesis ( (lv_rowValues_1_0= ruleRowValues ) ) otherlv_2= RightParenthesis )
            {
            // InternalSQLParser.g:2895:2: (otherlv_0= LeftParenthesis ( (lv_rowValues_1_0= ruleRowValues ) ) otherlv_2= RightParenthesis )
            // InternalSQLParser.g:2896:3: otherlv_0= LeftParenthesis ( (lv_rowValues_1_0= ruleRowValues ) ) otherlv_2= RightParenthesis
            {
            otherlv_0=(Token)match(input,LeftParenthesis,FOLLOW_63); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getRowAccess().getLeftParenthesisKeyword_0());
              		
            }
            // InternalSQLParser.g:2900:3: ( (lv_rowValues_1_0= ruleRowValues ) )
            // InternalSQLParser.g:2901:4: (lv_rowValues_1_0= ruleRowValues )
            {
            // InternalSQLParser.g:2901:4: (lv_rowValues_1_0= ruleRowValues )
            // InternalSQLParser.g:2902:5: lv_rowValues_1_0= ruleRowValues
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getRowAccess().getRowValuesRowValuesParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_13);
            lv_rowValues_1_0=ruleRowValues();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getRowRule());
              					}
              					set(
              						current,
              						"rowValues",
              						lv_rowValues_1_0,
              						"org.xtext.example.mydsl_sql.SQL.RowValues");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getRowAccess().getRightParenthesisKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleRow"


    // $ANTLR start "entryRuleRowValues"
    // InternalSQLParser.g:2927:1: entryRuleRowValues returns [EObject current=null] : iv_ruleRowValues= ruleRowValues EOF ;
    public final EObject entryRuleRowValues() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleRowValues = null;


        try {
            // InternalSQLParser.g:2927:50: (iv_ruleRowValues= ruleRowValues EOF )
            // InternalSQLParser.g:2928:2: iv_ruleRowValues= ruleRowValues EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRowValuesRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRowValues=ruleRowValues();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRowValues; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleRowValues"


    // $ANTLR start "ruleRowValues"
    // InternalSQLParser.g:2934:1: ruleRowValues returns [EObject current=null] : (this_RowValue_0= ruleRowValue ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleRowValue ) ) )+ )? ) ;
    public final EObject ruleRowValues() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_RowValue_0 = null;

        EObject lv_entries_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:2940:2: ( (this_RowValue_0= ruleRowValue ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleRowValue ) ) )+ )? ) )
            // InternalSQLParser.g:2941:2: (this_RowValue_0= ruleRowValue ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleRowValue ) ) )+ )? )
            {
            // InternalSQLParser.g:2941:2: (this_RowValue_0= ruleRowValue ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleRowValue ) ) )+ )? )
            // InternalSQLParser.g:2942:3: this_RowValue_0= ruleRowValue ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleRowValue ) ) )+ )?
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getRowValuesAccess().getRowValueParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_15);
            this_RowValue_0=ruleRowValue();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_RowValue_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:2953:3: ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleRowValue ) ) )+ )?
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==Comma) ) {
                alt61=1;
            }
            switch (alt61) {
                case 1 :
                    // InternalSQLParser.g:2954:4: () (otherlv_2= Comma ( (lv_entries_3_0= ruleRowValue ) ) )+
                    {
                    // InternalSQLParser.g:2954:4: ()
                    // InternalSQLParser.g:2955:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getRowValuesAccess().getRowValuesEntriesAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalSQLParser.g:2964:4: (otherlv_2= Comma ( (lv_entries_3_0= ruleRowValue ) ) )+
                    int cnt60=0;
                    loop60:
                    do {
                        int alt60=2;
                        int LA60_0 = input.LA(1);

                        if ( (LA60_0==Comma) ) {
                            alt60=1;
                        }


                        switch (alt60) {
                    	case 1 :
                    	    // InternalSQLParser.g:2965:5: otherlv_2= Comma ( (lv_entries_3_0= ruleRowValue ) )
                    	    {
                    	    otherlv_2=(Token)match(input,Comma,FOLLOW_63); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_2, grammarAccess.getRowValuesAccess().getCommaKeyword_1_1_0());
                    	      				
                    	    }
                    	    // InternalSQLParser.g:2969:5: ( (lv_entries_3_0= ruleRowValue ) )
                    	    // InternalSQLParser.g:2970:6: (lv_entries_3_0= ruleRowValue )
                    	    {
                    	    // InternalSQLParser.g:2970:6: (lv_entries_3_0= ruleRowValue )
                    	    // InternalSQLParser.g:2971:7: lv_entries_3_0= ruleRowValue
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getRowValuesAccess().getEntriesRowValueParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_15);
                    	    lv_entries_3_0=ruleRowValue();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getRowValuesRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"entries",
                    	      								lv_entries_3_0,
                    	      								"org.xtext.example.mydsl_sql.SQL.RowValue");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt60 >= 1 ) break loop60;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(60, input);
                                throw eee;
                        }
                        cnt60++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleRowValues"


    // $ANTLR start "entryRuleRowValue"
    // InternalSQLParser.g:2994:1: entryRuleRowValue returns [EObject current=null] : iv_ruleRowValue= ruleRowValue EOF ;
    public final EObject entryRuleRowValue() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleRowValue = null;


        try {
            // InternalSQLParser.g:2994:49: (iv_ruleRowValue= ruleRowValue EOF )
            // InternalSQLParser.g:2995:2: iv_ruleRowValue= ruleRowValue EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRowValueRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRowValue=ruleRowValue();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRowValue; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleRowValue"


    // $ANTLR start "ruleRowValue"
    // InternalSQLParser.g:3001:1: ruleRowValue returns [EObject current=null] : (this_ScalarNumberOperand_0= ruleScalarNumberOperand | ( (lv_null_1_0= NULL ) ) ) ;
    public final EObject ruleRowValue() throws RecognitionException {
        EObject current = null;

        Token lv_null_1_0=null;
        EObject this_ScalarNumberOperand_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:3007:2: ( (this_ScalarNumberOperand_0= ruleScalarNumberOperand | ( (lv_null_1_0= NULL ) ) ) )
            // InternalSQLParser.g:3008:2: (this_ScalarNumberOperand_0= ruleScalarNumberOperand | ( (lv_null_1_0= NULL ) ) )
            {
            // InternalSQLParser.g:3008:2: (this_ScalarNumberOperand_0= ruleScalarNumberOperand | ( (lv_null_1_0= NULL ) ) )
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( ((LA62_0>=RULE_UNSIGNED && LA62_0<=RULE_SIGNED_DOUBLE)||LA62_0==RULE_STRING_) ) {
                alt62=1;
            }
            else if ( (LA62_0==NULL) ) {
                alt62=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 62, 0, input);

                throw nvae;
            }
            switch (alt62) {
                case 1 :
                    // InternalSQLParser.g:3009:3: this_ScalarNumberOperand_0= ruleScalarNumberOperand
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getRowValueAccess().getScalarNumberOperandParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ScalarNumberOperand_0=ruleScalarNumberOperand();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ScalarNumberOperand_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:3021:3: ( (lv_null_1_0= NULL ) )
                    {
                    // InternalSQLParser.g:3021:3: ( (lv_null_1_0= NULL ) )
                    // InternalSQLParser.g:3022:4: (lv_null_1_0= NULL )
                    {
                    // InternalSQLParser.g:3022:4: (lv_null_1_0= NULL )
                    // InternalSQLParser.g:3023:5: lv_null_1_0= NULL
                    {
                    lv_null_1_0=(Token)match(input,NULL,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_null_1_0, grammarAccess.getRowValueAccess().getNullNULLKeyword_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getRowValueRule());
                      					}
                      					setWithLastConsumed(current, "null", lv_null_1_0, "NULL");
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleRowValue"


    // $ANTLR start "entryRulePivotTable"
    // InternalSQLParser.g:3039:1: entryRulePivotTable returns [EObject current=null] : iv_rulePivotTable= rulePivotTable EOF ;
    public final EObject entryRulePivotTable() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePivotTable = null;


        try {
            // InternalSQLParser.g:3039:51: (iv_rulePivotTable= rulePivotTable EOF )
            // InternalSQLParser.g:3040:2: iv_rulePivotTable= rulePivotTable EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPivotTableRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePivotTable=rulePivotTable();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePivotTable; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePivotTable"


    // $ANTLR start "rulePivotTable"
    // InternalSQLParser.g:3046:1: rulePivotTable returns [EObject current=null] : (otherlv_0= PIVOT (otherlv_1= XML )? otherlv_2= LeftParenthesis ( (lv_pfun_3_0= rulePivotFunctions ) ) ( (lv_pfor_4_0= rulePivotForClause ) ) ( (lv_pin_5_0= rulePivotInClause ) ) otherlv_6= RightParenthesis ) ;
    public final EObject rulePivotTable() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_6=null;
        EObject lv_pfun_3_0 = null;

        EObject lv_pfor_4_0 = null;

        EObject lv_pin_5_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:3052:2: ( (otherlv_0= PIVOT (otherlv_1= XML )? otherlv_2= LeftParenthesis ( (lv_pfun_3_0= rulePivotFunctions ) ) ( (lv_pfor_4_0= rulePivotForClause ) ) ( (lv_pin_5_0= rulePivotInClause ) ) otherlv_6= RightParenthesis ) )
            // InternalSQLParser.g:3053:2: (otherlv_0= PIVOT (otherlv_1= XML )? otherlv_2= LeftParenthesis ( (lv_pfun_3_0= rulePivotFunctions ) ) ( (lv_pfor_4_0= rulePivotForClause ) ) ( (lv_pin_5_0= rulePivotInClause ) ) otherlv_6= RightParenthesis )
            {
            // InternalSQLParser.g:3053:2: (otherlv_0= PIVOT (otherlv_1= XML )? otherlv_2= LeftParenthesis ( (lv_pfun_3_0= rulePivotFunctions ) ) ( (lv_pfor_4_0= rulePivotForClause ) ) ( (lv_pin_5_0= rulePivotInClause ) ) otherlv_6= RightParenthesis )
            // InternalSQLParser.g:3054:3: otherlv_0= PIVOT (otherlv_1= XML )? otherlv_2= LeftParenthesis ( (lv_pfun_3_0= rulePivotFunctions ) ) ( (lv_pfor_4_0= rulePivotForClause ) ) ( (lv_pin_5_0= rulePivotInClause ) ) otherlv_6= RightParenthesis
            {
            otherlv_0=(Token)match(input,PIVOT,FOLLOW_64); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getPivotTableAccess().getPIVOTKeyword_0());
              		
            }
            // InternalSQLParser.g:3058:3: (otherlv_1= XML )?
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==XML) ) {
                alt63=1;
            }
            switch (alt63) {
                case 1 :
                    // InternalSQLParser.g:3059:4: otherlv_1= XML
                    {
                    otherlv_1=(Token)match(input,XML,FOLLOW_11); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getPivotTableAccess().getXMLKeyword_1());
                      			
                    }

                    }
                    break;

            }

            otherlv_2=(Token)match(input,LeftParenthesis,FOLLOW_21); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getPivotTableAccess().getLeftParenthesisKeyword_2());
              		
            }
            // InternalSQLParser.g:3068:3: ( (lv_pfun_3_0= rulePivotFunctions ) )
            // InternalSQLParser.g:3069:4: (lv_pfun_3_0= rulePivotFunctions )
            {
            // InternalSQLParser.g:3069:4: (lv_pfun_3_0= rulePivotFunctions )
            // InternalSQLParser.g:3070:5: lv_pfun_3_0= rulePivotFunctions
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getPivotTableAccess().getPfunPivotFunctionsParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_65);
            lv_pfun_3_0=rulePivotFunctions();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPivotTableRule());
              					}
              					set(
              						current,
              						"pfun",
              						lv_pfun_3_0,
              						"org.xtext.example.mydsl_sql.SQL.PivotFunctions");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:3087:3: ( (lv_pfor_4_0= rulePivotForClause ) )
            // InternalSQLParser.g:3088:4: (lv_pfor_4_0= rulePivotForClause )
            {
            // InternalSQLParser.g:3088:4: (lv_pfor_4_0= rulePivotForClause )
            // InternalSQLParser.g:3089:5: lv_pfor_4_0= rulePivotForClause
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getPivotTableAccess().getPforPivotForClauseParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_66);
            lv_pfor_4_0=rulePivotForClause();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPivotTableRule());
              					}
              					set(
              						current,
              						"pfor",
              						lv_pfor_4_0,
              						"org.xtext.example.mydsl_sql.SQL.PivotForClause");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:3106:3: ( (lv_pin_5_0= rulePivotInClause ) )
            // InternalSQLParser.g:3107:4: (lv_pin_5_0= rulePivotInClause )
            {
            // InternalSQLParser.g:3107:4: (lv_pin_5_0= rulePivotInClause )
            // InternalSQLParser.g:3108:5: lv_pin_5_0= rulePivotInClause
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getPivotTableAccess().getPinPivotInClauseParserRuleCall_5_0());
              				
            }
            pushFollow(FOLLOW_13);
            lv_pin_5_0=rulePivotInClause();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPivotTableRule());
              					}
              					set(
              						current,
              						"pin",
              						lv_pin_5_0,
              						"org.xtext.example.mydsl_sql.SQL.PivotInClause");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_6=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_6, grammarAccess.getPivotTableAccess().getRightParenthesisKeyword_6());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePivotTable"


    // $ANTLR start "entryRulePivotFunctions"
    // InternalSQLParser.g:3133:1: entryRulePivotFunctions returns [EObject current=null] : iv_rulePivotFunctions= rulePivotFunctions EOF ;
    public final EObject entryRulePivotFunctions() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePivotFunctions = null;


        try {
            // InternalSQLParser.g:3133:55: (iv_rulePivotFunctions= rulePivotFunctions EOF )
            // InternalSQLParser.g:3134:2: iv_rulePivotFunctions= rulePivotFunctions EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPivotFunctionsRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePivotFunctions=rulePivotFunctions();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePivotFunctions; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePivotFunctions"


    // $ANTLR start "rulePivotFunctions"
    // InternalSQLParser.g:3140:1: rulePivotFunctions returns [EObject current=null] : ( (lv_abc_0_0= RULE_ID ) ) ;
    public final EObject rulePivotFunctions() throws RecognitionException {
        EObject current = null;

        Token lv_abc_0_0=null;


        	enterRule();

        try {
            // InternalSQLParser.g:3146:2: ( ( (lv_abc_0_0= RULE_ID ) ) )
            // InternalSQLParser.g:3147:2: ( (lv_abc_0_0= RULE_ID ) )
            {
            // InternalSQLParser.g:3147:2: ( (lv_abc_0_0= RULE_ID ) )
            // InternalSQLParser.g:3148:3: (lv_abc_0_0= RULE_ID )
            {
            // InternalSQLParser.g:3148:3: (lv_abc_0_0= RULE_ID )
            // InternalSQLParser.g:3149:4: lv_abc_0_0= RULE_ID
            {
            lv_abc_0_0=(Token)match(input,RULE_ID,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(lv_abc_0_0, grammarAccess.getPivotFunctionsAccess().getAbcIDTerminalRuleCall_0());
              			
            }
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getPivotFunctionsRule());
              				}
              				setWithLastConsumed(
              					current,
              					"abc",
              					lv_abc_0_0,
              					"org.xtext.example.mydsl_sql.SQL.ID");
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePivotFunctions"


    // $ANTLR start "entryRulePivotInClause"
    // InternalSQLParser.g:3168:1: entryRulePivotInClause returns [EObject current=null] : iv_rulePivotInClause= rulePivotInClause EOF ;
    public final EObject entryRulePivotInClause() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePivotInClause = null;


        try {
            // InternalSQLParser.g:3168:54: (iv_rulePivotInClause= rulePivotInClause EOF )
            // InternalSQLParser.g:3169:2: iv_rulePivotInClause= rulePivotInClause EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPivotInClauseRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePivotInClause=rulePivotInClause();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePivotInClause; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePivotInClause"


    // $ANTLR start "rulePivotInClause"
    // InternalSQLParser.g:3175:1: rulePivotInClause returns [EObject current=null] : (otherlv_0= IN otherlv_1= LeftParenthesis ( ( (lv_sq_2_0= ruleSubQueryOperand ) ) | ( (lv_args_3_0= ruleUnpivotInClauseArgs ) ) | ( (lv_pinany_4_0= rulePivotInClauseAny ) ) ) otherlv_5= RightParenthesis ) ;
    public final EObject rulePivotInClause() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_5=null;
        EObject lv_sq_2_0 = null;

        EObject lv_args_3_0 = null;

        AntlrDatatypeRuleToken lv_pinany_4_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:3181:2: ( (otherlv_0= IN otherlv_1= LeftParenthesis ( ( (lv_sq_2_0= ruleSubQueryOperand ) ) | ( (lv_args_3_0= ruleUnpivotInClauseArgs ) ) | ( (lv_pinany_4_0= rulePivotInClauseAny ) ) ) otherlv_5= RightParenthesis ) )
            // InternalSQLParser.g:3182:2: (otherlv_0= IN otherlv_1= LeftParenthesis ( ( (lv_sq_2_0= ruleSubQueryOperand ) ) | ( (lv_args_3_0= ruleUnpivotInClauseArgs ) ) | ( (lv_pinany_4_0= rulePivotInClauseAny ) ) ) otherlv_5= RightParenthesis )
            {
            // InternalSQLParser.g:3182:2: (otherlv_0= IN otherlv_1= LeftParenthesis ( ( (lv_sq_2_0= ruleSubQueryOperand ) ) | ( (lv_args_3_0= ruleUnpivotInClauseArgs ) ) | ( (lv_pinany_4_0= rulePivotInClauseAny ) ) ) otherlv_5= RightParenthesis )
            // InternalSQLParser.g:3183:3: otherlv_0= IN otherlv_1= LeftParenthesis ( ( (lv_sq_2_0= ruleSubQueryOperand ) ) | ( (lv_args_3_0= ruleUnpivotInClauseArgs ) ) | ( (lv_pinany_4_0= rulePivotInClauseAny ) ) ) otherlv_5= RightParenthesis
            {
            otherlv_0=(Token)match(input,IN,FOLLOW_11); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getPivotInClauseAccess().getINKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_67); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getPivotInClauseAccess().getLeftParenthesisKeyword_1());
              		
            }
            // InternalSQLParser.g:3191:3: ( ( (lv_sq_2_0= ruleSubQueryOperand ) ) | ( (lv_args_3_0= ruleUnpivotInClauseArgs ) ) | ( (lv_pinany_4_0= rulePivotInClauseAny ) ) )
            int alt64=3;
            switch ( input.LA(1) ) {
            case LeftParenthesis:
                {
                int LA64_1 = input.LA(2);

                if ( (LA64_1==SELECT) ) {
                    alt64=1;
                }
                else if ( ((LA64_1>=RULE_STRING && LA64_1<=RULE_ID)) ) {
                    alt64=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 64, 1, input);

                    throw nvae;
                }
                }
                break;
            case RULE_STRING:
            case RULE_DBNAME:
            case RULE_ID:
                {
                alt64=2;
                }
                break;
            case ANY:
                {
                alt64=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 64, 0, input);

                throw nvae;
            }

            switch (alt64) {
                case 1 :
                    // InternalSQLParser.g:3192:4: ( (lv_sq_2_0= ruleSubQueryOperand ) )
                    {
                    // InternalSQLParser.g:3192:4: ( (lv_sq_2_0= ruleSubQueryOperand ) )
                    // InternalSQLParser.g:3193:5: (lv_sq_2_0= ruleSubQueryOperand )
                    {
                    // InternalSQLParser.g:3193:5: (lv_sq_2_0= ruleSubQueryOperand )
                    // InternalSQLParser.g:3194:6: lv_sq_2_0= ruleSubQueryOperand
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getPivotInClauseAccess().getSqSubQueryOperandParserRuleCall_2_0_0());
                      					
                    }
                    pushFollow(FOLLOW_13);
                    lv_sq_2_0=ruleSubQueryOperand();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getPivotInClauseRule());
                      						}
                      						set(
                      							current,
                      							"sq",
                      							lv_sq_2_0,
                      							"org.xtext.example.mydsl_sql.SQL.SubQueryOperand");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:3212:4: ( (lv_args_3_0= ruleUnpivotInClauseArgs ) )
                    {
                    // InternalSQLParser.g:3212:4: ( (lv_args_3_0= ruleUnpivotInClauseArgs ) )
                    // InternalSQLParser.g:3213:5: (lv_args_3_0= ruleUnpivotInClauseArgs )
                    {
                    // InternalSQLParser.g:3213:5: (lv_args_3_0= ruleUnpivotInClauseArgs )
                    // InternalSQLParser.g:3214:6: lv_args_3_0= ruleUnpivotInClauseArgs
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getPivotInClauseAccess().getArgsUnpivotInClauseArgsParserRuleCall_2_1_0());
                      					
                    }
                    pushFollow(FOLLOW_13);
                    lv_args_3_0=ruleUnpivotInClauseArgs();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getPivotInClauseRule());
                      						}
                      						set(
                      							current,
                      							"args",
                      							lv_args_3_0,
                      							"org.xtext.example.mydsl_sql.SQL.UnpivotInClauseArgs");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:3232:4: ( (lv_pinany_4_0= rulePivotInClauseAny ) )
                    {
                    // InternalSQLParser.g:3232:4: ( (lv_pinany_4_0= rulePivotInClauseAny ) )
                    // InternalSQLParser.g:3233:5: (lv_pinany_4_0= rulePivotInClauseAny )
                    {
                    // InternalSQLParser.g:3233:5: (lv_pinany_4_0= rulePivotInClauseAny )
                    // InternalSQLParser.g:3234:6: lv_pinany_4_0= rulePivotInClauseAny
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getPivotInClauseAccess().getPinanyPivotInClauseAnyParserRuleCall_2_2_0());
                      					
                    }
                    pushFollow(FOLLOW_13);
                    lv_pinany_4_0=rulePivotInClauseAny();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getPivotInClauseRule());
                      						}
                      						set(
                      							current,
                      							"pinany",
                      							lv_pinany_4_0,
                      							"org.xtext.example.mydsl_sql.SQL.PivotInClauseAny");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getPivotInClauseAccess().getRightParenthesisKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePivotInClause"


    // $ANTLR start "entryRulePivotInClauseAny"
    // InternalSQLParser.g:3260:1: entryRulePivotInClauseAny returns [String current=null] : iv_rulePivotInClauseAny= rulePivotInClauseAny EOF ;
    public final String entryRulePivotInClauseAny() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_rulePivotInClauseAny = null;


        try {
            // InternalSQLParser.g:3260:56: (iv_rulePivotInClauseAny= rulePivotInClauseAny EOF )
            // InternalSQLParser.g:3261:2: iv_rulePivotInClauseAny= rulePivotInClauseAny EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPivotInClauseAnyRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePivotInClauseAny=rulePivotInClauseAny();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePivotInClauseAny.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePivotInClauseAny"


    // $ANTLR start "rulePivotInClauseAny"
    // InternalSQLParser.g:3267:1: rulePivotInClauseAny returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= ANY (kw= Comma kw= ANY )* ) ;
    public final AntlrDatatypeRuleToken rulePivotInClauseAny() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            // InternalSQLParser.g:3273:2: ( (kw= ANY (kw= Comma kw= ANY )* ) )
            // InternalSQLParser.g:3274:2: (kw= ANY (kw= Comma kw= ANY )* )
            {
            // InternalSQLParser.g:3274:2: (kw= ANY (kw= Comma kw= ANY )* )
            // InternalSQLParser.g:3275:3: kw= ANY (kw= Comma kw= ANY )*
            {
            kw=(Token)match(input,ANY,FOLLOW_15); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(kw);
              			newLeafNode(kw, grammarAccess.getPivotInClauseAnyAccess().getANYKeyword_0());
              		
            }
            // InternalSQLParser.g:3280:3: (kw= Comma kw= ANY )*
            loop65:
            do {
                int alt65=2;
                int LA65_0 = input.LA(1);

                if ( (LA65_0==Comma) ) {
                    alt65=1;
                }


                switch (alt65) {
            	case 1 :
            	    // InternalSQLParser.g:3281:4: kw= Comma kw= ANY
            	    {
            	    kw=(Token)match(input,Comma,FOLLOW_68); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				current.merge(kw);
            	      				newLeafNode(kw, grammarAccess.getPivotInClauseAnyAccess().getCommaKeyword_1_0());
            	      			
            	    }
            	    kw=(Token)match(input,ANY,FOLLOW_15); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				current.merge(kw);
            	      				newLeafNode(kw, grammarAccess.getPivotInClauseAnyAccess().getANYKeyword_1_1());
            	      			
            	    }

            	    }
            	    break;

            	default :
            	    break loop65;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePivotInClauseAny"


    // $ANTLR start "entryRuleUnpivotTable"
    // InternalSQLParser.g:3296:1: entryRuleUnpivotTable returns [EObject current=null] : iv_ruleUnpivotTable= ruleUnpivotTable EOF ;
    public final EObject entryRuleUnpivotTable() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleUnpivotTable = null;


        try {
            // InternalSQLParser.g:3296:53: (iv_ruleUnpivotTable= ruleUnpivotTable EOF )
            // InternalSQLParser.g:3297:2: iv_ruleUnpivotTable= ruleUnpivotTable EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getUnpivotTableRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleUnpivotTable=ruleUnpivotTable();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleUnpivotTable; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleUnpivotTable"


    // $ANTLR start "ruleUnpivotTable"
    // InternalSQLParser.g:3303:1: ruleUnpivotTable returns [EObject current=null] : (otherlv_0= UNPIVOT ( (otherlv_1= INCLUDE | otherlv_2= EXCLUDE ) otherlv_3= NULLS )? otherlv_4= LeftParenthesis ( (lv_pcols_5_0= rulePivotColumns ) ) ( (lv_pfor_6_0= rulePivotForClause ) ) ( (lv_inop_7_0= ruleUnpivotInClause ) ) otherlv_8= RightParenthesis ) ;
    public final EObject ruleUnpivotTable() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        Token otherlv_8=null;
        EObject lv_pcols_5_0 = null;

        EObject lv_pfor_6_0 = null;

        EObject lv_inop_7_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:3309:2: ( (otherlv_0= UNPIVOT ( (otherlv_1= INCLUDE | otherlv_2= EXCLUDE ) otherlv_3= NULLS )? otherlv_4= LeftParenthesis ( (lv_pcols_5_0= rulePivotColumns ) ) ( (lv_pfor_6_0= rulePivotForClause ) ) ( (lv_inop_7_0= ruleUnpivotInClause ) ) otherlv_8= RightParenthesis ) )
            // InternalSQLParser.g:3310:2: (otherlv_0= UNPIVOT ( (otherlv_1= INCLUDE | otherlv_2= EXCLUDE ) otherlv_3= NULLS )? otherlv_4= LeftParenthesis ( (lv_pcols_5_0= rulePivotColumns ) ) ( (lv_pfor_6_0= rulePivotForClause ) ) ( (lv_inop_7_0= ruleUnpivotInClause ) ) otherlv_8= RightParenthesis )
            {
            // InternalSQLParser.g:3310:2: (otherlv_0= UNPIVOT ( (otherlv_1= INCLUDE | otherlv_2= EXCLUDE ) otherlv_3= NULLS )? otherlv_4= LeftParenthesis ( (lv_pcols_5_0= rulePivotColumns ) ) ( (lv_pfor_6_0= rulePivotForClause ) ) ( (lv_inop_7_0= ruleUnpivotInClause ) ) otherlv_8= RightParenthesis )
            // InternalSQLParser.g:3311:3: otherlv_0= UNPIVOT ( (otherlv_1= INCLUDE | otherlv_2= EXCLUDE ) otherlv_3= NULLS )? otherlv_4= LeftParenthesis ( (lv_pcols_5_0= rulePivotColumns ) ) ( (lv_pfor_6_0= rulePivotForClause ) ) ( (lv_inop_7_0= ruleUnpivotInClause ) ) otherlv_8= RightParenthesis
            {
            otherlv_0=(Token)match(input,UNPIVOT,FOLLOW_69); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getUnpivotTableAccess().getUNPIVOTKeyword_0());
              		
            }
            // InternalSQLParser.g:3315:3: ( (otherlv_1= INCLUDE | otherlv_2= EXCLUDE ) otherlv_3= NULLS )?
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==EXCLUDE||LA67_0==INCLUDE) ) {
                alt67=1;
            }
            switch (alt67) {
                case 1 :
                    // InternalSQLParser.g:3316:4: (otherlv_1= INCLUDE | otherlv_2= EXCLUDE ) otherlv_3= NULLS
                    {
                    // InternalSQLParser.g:3316:4: (otherlv_1= INCLUDE | otherlv_2= EXCLUDE )
                    int alt66=2;
                    int LA66_0 = input.LA(1);

                    if ( (LA66_0==INCLUDE) ) {
                        alt66=1;
                    }
                    else if ( (LA66_0==EXCLUDE) ) {
                        alt66=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 66, 0, input);

                        throw nvae;
                    }
                    switch (alt66) {
                        case 1 :
                            // InternalSQLParser.g:3317:5: otherlv_1= INCLUDE
                            {
                            otherlv_1=(Token)match(input,INCLUDE,FOLLOW_70); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(otherlv_1, grammarAccess.getUnpivotTableAccess().getINCLUDEKeyword_1_0_0());
                              				
                            }

                            }
                            break;
                        case 2 :
                            // InternalSQLParser.g:3322:5: otherlv_2= EXCLUDE
                            {
                            otherlv_2=(Token)match(input,EXCLUDE,FOLLOW_70); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(otherlv_2, grammarAccess.getUnpivotTableAccess().getEXCLUDEKeyword_1_0_1());
                              				
                            }

                            }
                            break;

                    }

                    otherlv_3=(Token)match(input,NULLS,FOLLOW_11); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_3, grammarAccess.getUnpivotTableAccess().getNULLSKeyword_1_1());
                      			
                    }

                    }
                    break;

            }

            otherlv_4=(Token)match(input,LeftParenthesis,FOLLOW_5); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getUnpivotTableAccess().getLeftParenthesisKeyword_2());
              		
            }
            // InternalSQLParser.g:3336:3: ( (lv_pcols_5_0= rulePivotColumns ) )
            // InternalSQLParser.g:3337:4: (lv_pcols_5_0= rulePivotColumns )
            {
            // InternalSQLParser.g:3337:4: (lv_pcols_5_0= rulePivotColumns )
            // InternalSQLParser.g:3338:5: lv_pcols_5_0= rulePivotColumns
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getUnpivotTableAccess().getPcolsPivotColumnsParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_65);
            lv_pcols_5_0=rulePivotColumns();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getUnpivotTableRule());
              					}
              					set(
              						current,
              						"pcols",
              						lv_pcols_5_0,
              						"org.xtext.example.mydsl_sql.SQL.PivotColumns");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:3355:3: ( (lv_pfor_6_0= rulePivotForClause ) )
            // InternalSQLParser.g:3356:4: (lv_pfor_6_0= rulePivotForClause )
            {
            // InternalSQLParser.g:3356:4: (lv_pfor_6_0= rulePivotForClause )
            // InternalSQLParser.g:3357:5: lv_pfor_6_0= rulePivotForClause
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getUnpivotTableAccess().getPforPivotForClauseParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_66);
            lv_pfor_6_0=rulePivotForClause();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getUnpivotTableRule());
              					}
              					set(
              						current,
              						"pfor",
              						lv_pfor_6_0,
              						"org.xtext.example.mydsl_sql.SQL.PivotForClause");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:3374:3: ( (lv_inop_7_0= ruleUnpivotInClause ) )
            // InternalSQLParser.g:3375:4: (lv_inop_7_0= ruleUnpivotInClause )
            {
            // InternalSQLParser.g:3375:4: (lv_inop_7_0= ruleUnpivotInClause )
            // InternalSQLParser.g:3376:5: lv_inop_7_0= ruleUnpivotInClause
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getUnpivotTableAccess().getInopUnpivotInClauseParserRuleCall_5_0());
              				
            }
            pushFollow(FOLLOW_13);
            lv_inop_7_0=ruleUnpivotInClause();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getUnpivotTableRule());
              					}
              					set(
              						current,
              						"inop",
              						lv_inop_7_0,
              						"org.xtext.example.mydsl_sql.SQL.UnpivotInClause");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_8=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_8, grammarAccess.getUnpivotTableAccess().getRightParenthesisKeyword_6());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleUnpivotTable"


    // $ANTLR start "entryRuleUnpivotInClause"
    // InternalSQLParser.g:3401:1: entryRuleUnpivotInClause returns [EObject current=null] : iv_ruleUnpivotInClause= ruleUnpivotInClause EOF ;
    public final EObject entryRuleUnpivotInClause() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleUnpivotInClause = null;


        try {
            // InternalSQLParser.g:3401:56: (iv_ruleUnpivotInClause= ruleUnpivotInClause EOF )
            // InternalSQLParser.g:3402:2: iv_ruleUnpivotInClause= ruleUnpivotInClause EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getUnpivotInClauseRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleUnpivotInClause=ruleUnpivotInClause();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleUnpivotInClause; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleUnpivotInClause"


    // $ANTLR start "ruleUnpivotInClause"
    // InternalSQLParser.g:3408:1: ruleUnpivotInClause returns [EObject current=null] : ( () ( (lv_op_1_0= IN ) ) otherlv_2= LeftParenthesis ( (lv_args_3_0= ruleUnpivotInClauseArgs ) ) otherlv_4= RightParenthesis ) ;
    public final EObject ruleUnpivotInClause() throws RecognitionException {
        EObject current = null;

        Token lv_op_1_0=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject lv_args_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:3414:2: ( ( () ( (lv_op_1_0= IN ) ) otherlv_2= LeftParenthesis ( (lv_args_3_0= ruleUnpivotInClauseArgs ) ) otherlv_4= RightParenthesis ) )
            // InternalSQLParser.g:3415:2: ( () ( (lv_op_1_0= IN ) ) otherlv_2= LeftParenthesis ( (lv_args_3_0= ruleUnpivotInClauseArgs ) ) otherlv_4= RightParenthesis )
            {
            // InternalSQLParser.g:3415:2: ( () ( (lv_op_1_0= IN ) ) otherlv_2= LeftParenthesis ( (lv_args_3_0= ruleUnpivotInClauseArgs ) ) otherlv_4= RightParenthesis )
            // InternalSQLParser.g:3416:3: () ( (lv_op_1_0= IN ) ) otherlv_2= LeftParenthesis ( (lv_args_3_0= ruleUnpivotInClauseArgs ) ) otherlv_4= RightParenthesis
            {
            // InternalSQLParser.g:3416:3: ()
            // InternalSQLParser.g:3417:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getUnpivotInClauseAccess().getUnipivotInClauseAction_0(),
              					current);
              			
            }

            }

            // InternalSQLParser.g:3426:3: ( (lv_op_1_0= IN ) )
            // InternalSQLParser.g:3427:4: (lv_op_1_0= IN )
            {
            // InternalSQLParser.g:3427:4: (lv_op_1_0= IN )
            // InternalSQLParser.g:3428:5: lv_op_1_0= IN
            {
            lv_op_1_0=(Token)match(input,IN,FOLLOW_11); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_op_1_0, grammarAccess.getUnpivotInClauseAccess().getOpINKeyword_1_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getUnpivotInClauseRule());
              					}
              					setWithLastConsumed(current, "op", lv_op_1_0, "IN");
              				
            }

            }


            }

            otherlv_2=(Token)match(input,LeftParenthesis,FOLLOW_5); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getUnpivotInClauseAccess().getLeftParenthesisKeyword_2());
              		
            }
            // InternalSQLParser.g:3444:3: ( (lv_args_3_0= ruleUnpivotInClauseArgs ) )
            // InternalSQLParser.g:3445:4: (lv_args_3_0= ruleUnpivotInClauseArgs )
            {
            // InternalSQLParser.g:3445:4: (lv_args_3_0= ruleUnpivotInClauseArgs )
            // InternalSQLParser.g:3446:5: lv_args_3_0= ruleUnpivotInClauseArgs
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getUnpivotInClauseAccess().getArgsUnpivotInClauseArgsParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_13);
            lv_args_3_0=ruleUnpivotInClauseArgs();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getUnpivotInClauseRule());
              					}
              					set(
              						current,
              						"args",
              						lv_args_3_0,
              						"org.xtext.example.mydsl_sql.SQL.UnpivotInClauseArgs");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_4=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getUnpivotInClauseAccess().getRightParenthesisKeyword_4());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleUnpivotInClause"


    // $ANTLR start "entryRuleUnpivotInClauseArgs"
    // InternalSQLParser.g:3471:1: entryRuleUnpivotInClauseArgs returns [EObject current=null] : iv_ruleUnpivotInClauseArgs= ruleUnpivotInClauseArgs EOF ;
    public final EObject entryRuleUnpivotInClauseArgs() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleUnpivotInClauseArgs = null;


        try {
            // InternalSQLParser.g:3471:60: (iv_ruleUnpivotInClauseArgs= ruleUnpivotInClauseArgs EOF )
            // InternalSQLParser.g:3472:2: iv_ruleUnpivotInClauseArgs= ruleUnpivotInClauseArgs EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getUnpivotInClauseArgsRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleUnpivotInClauseArgs=ruleUnpivotInClauseArgs();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleUnpivotInClauseArgs; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleUnpivotInClauseArgs"


    // $ANTLR start "ruleUnpivotInClauseArgs"
    // InternalSQLParser.g:3478:1: ruleUnpivotInClauseArgs returns [EObject current=null] : (this_UnpivotInClauseArg_0= ruleUnpivotInClauseArg ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleUnpivotInClauseArg ) ) )+ )? ) ;
    public final EObject ruleUnpivotInClauseArgs() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_UnpivotInClauseArg_0 = null;

        EObject lv_entries_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:3484:2: ( (this_UnpivotInClauseArg_0= ruleUnpivotInClauseArg ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleUnpivotInClauseArg ) ) )+ )? ) )
            // InternalSQLParser.g:3485:2: (this_UnpivotInClauseArg_0= ruleUnpivotInClauseArg ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleUnpivotInClauseArg ) ) )+ )? )
            {
            // InternalSQLParser.g:3485:2: (this_UnpivotInClauseArg_0= ruleUnpivotInClauseArg ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleUnpivotInClauseArg ) ) )+ )? )
            // InternalSQLParser.g:3486:3: this_UnpivotInClauseArg_0= ruleUnpivotInClauseArg ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleUnpivotInClauseArg ) ) )+ )?
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getUnpivotInClauseArgsAccess().getUnpivotInClauseArgParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_15);
            this_UnpivotInClauseArg_0=ruleUnpivotInClauseArg();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_UnpivotInClauseArg_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:3497:3: ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleUnpivotInClauseArg ) ) )+ )?
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( (LA69_0==Comma) ) {
                alt69=1;
            }
            switch (alt69) {
                case 1 :
                    // InternalSQLParser.g:3498:4: () (otherlv_2= Comma ( (lv_entries_3_0= ruleUnpivotInClauseArg ) ) )+
                    {
                    // InternalSQLParser.g:3498:4: ()
                    // InternalSQLParser.g:3499:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getUnpivotInClauseArgsAccess().getUicargsEntriesAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalSQLParser.g:3508:4: (otherlv_2= Comma ( (lv_entries_3_0= ruleUnpivotInClauseArg ) ) )+
                    int cnt68=0;
                    loop68:
                    do {
                        int alt68=2;
                        int LA68_0 = input.LA(1);

                        if ( (LA68_0==Comma) ) {
                            alt68=1;
                        }


                        switch (alt68) {
                    	case 1 :
                    	    // InternalSQLParser.g:3509:5: otherlv_2= Comma ( (lv_entries_3_0= ruleUnpivotInClauseArg ) )
                    	    {
                    	    otherlv_2=(Token)match(input,Comma,FOLLOW_5); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_2, grammarAccess.getUnpivotInClauseArgsAccess().getCommaKeyword_1_1_0());
                    	      				
                    	    }
                    	    // InternalSQLParser.g:3513:5: ( (lv_entries_3_0= ruleUnpivotInClauseArg ) )
                    	    // InternalSQLParser.g:3514:6: (lv_entries_3_0= ruleUnpivotInClauseArg )
                    	    {
                    	    // InternalSQLParser.g:3514:6: (lv_entries_3_0= ruleUnpivotInClauseArg )
                    	    // InternalSQLParser.g:3515:7: lv_entries_3_0= ruleUnpivotInClauseArg
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getUnpivotInClauseArgsAccess().getEntriesUnpivotInClauseArgParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_15);
                    	    lv_entries_3_0=ruleUnpivotInClauseArg();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getUnpivotInClauseArgsRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"entries",
                    	      								lv_entries_3_0,
                    	      								"org.xtext.example.mydsl_sql.SQL.UnpivotInClauseArg");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt68 >= 1 ) break loop68;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(68, input);
                                throw eee;
                        }
                        cnt68++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleUnpivotInClauseArgs"


    // $ANTLR start "entryRuleUnpivotInClauseArg"
    // InternalSQLParser.g:3538:1: entryRuleUnpivotInClauseArg returns [EObject current=null] : iv_ruleUnpivotInClauseArg= ruleUnpivotInClauseArg EOF ;
    public final EObject entryRuleUnpivotInClauseArg() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleUnpivotInClauseArg = null;


        try {
            // InternalSQLParser.g:3538:59: (iv_ruleUnpivotInClauseArg= ruleUnpivotInClauseArg EOF )
            // InternalSQLParser.g:3539:2: iv_ruleUnpivotInClauseArg= ruleUnpivotInClauseArg EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getUnpivotInClauseArgRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleUnpivotInClauseArg=ruleUnpivotInClauseArg();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleUnpivotInClauseArg; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleUnpivotInClauseArg"


    // $ANTLR start "ruleUnpivotInClauseArg"
    // InternalSQLParser.g:3545:1: ruleUnpivotInClauseArg returns [EObject current=null] : ( ( (lv_pcols_0_0= rulePivotColumns ) ) (otherlv_1= AS ( (lv_cfuls_2_0= rulePivotColumns ) ) )? ) ;
    public final EObject ruleUnpivotInClauseArg() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_pcols_0_0 = null;

        EObject lv_cfuls_2_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:3551:2: ( ( ( (lv_pcols_0_0= rulePivotColumns ) ) (otherlv_1= AS ( (lv_cfuls_2_0= rulePivotColumns ) ) )? ) )
            // InternalSQLParser.g:3552:2: ( ( (lv_pcols_0_0= rulePivotColumns ) ) (otherlv_1= AS ( (lv_cfuls_2_0= rulePivotColumns ) ) )? )
            {
            // InternalSQLParser.g:3552:2: ( ( (lv_pcols_0_0= rulePivotColumns ) ) (otherlv_1= AS ( (lv_cfuls_2_0= rulePivotColumns ) ) )? )
            // InternalSQLParser.g:3553:3: ( (lv_pcols_0_0= rulePivotColumns ) ) (otherlv_1= AS ( (lv_cfuls_2_0= rulePivotColumns ) ) )?
            {
            // InternalSQLParser.g:3553:3: ( (lv_pcols_0_0= rulePivotColumns ) )
            // InternalSQLParser.g:3554:4: (lv_pcols_0_0= rulePivotColumns )
            {
            // InternalSQLParser.g:3554:4: (lv_pcols_0_0= rulePivotColumns )
            // InternalSQLParser.g:3555:5: lv_pcols_0_0= rulePivotColumns
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getUnpivotInClauseArgAccess().getPcolsPivotColumnsParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_71);
            lv_pcols_0_0=rulePivotColumns();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getUnpivotInClauseArgRule());
              					}
              					set(
              						current,
              						"pcols",
              						lv_pcols_0_0,
              						"org.xtext.example.mydsl_sql.SQL.PivotColumns");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:3572:3: (otherlv_1= AS ( (lv_cfuls_2_0= rulePivotColumns ) ) )?
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==AS) ) {
                alt70=1;
            }
            switch (alt70) {
                case 1 :
                    // InternalSQLParser.g:3573:4: otherlv_1= AS ( (lv_cfuls_2_0= rulePivotColumns ) )
                    {
                    otherlv_1=(Token)match(input,AS,FOLLOW_5); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getUnpivotInClauseArgAccess().getASKeyword_1_0());
                      			
                    }
                    // InternalSQLParser.g:3577:4: ( (lv_cfuls_2_0= rulePivotColumns ) )
                    // InternalSQLParser.g:3578:5: (lv_cfuls_2_0= rulePivotColumns )
                    {
                    // InternalSQLParser.g:3578:5: (lv_cfuls_2_0= rulePivotColumns )
                    // InternalSQLParser.g:3579:6: lv_cfuls_2_0= rulePivotColumns
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getUnpivotInClauseArgAccess().getCfulsPivotColumnsParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_cfuls_2_0=rulePivotColumns();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getUnpivotInClauseArgRule());
                      						}
                      						set(
                      							current,
                      							"cfuls",
                      							lv_cfuls_2_0,
                      							"org.xtext.example.mydsl_sql.SQL.PivotColumns");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleUnpivotInClauseArg"


    // $ANTLR start "entryRulePivotForClause"
    // InternalSQLParser.g:3601:1: entryRulePivotForClause returns [EObject current=null] : iv_rulePivotForClause= rulePivotForClause EOF ;
    public final EObject entryRulePivotForClause() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePivotForClause = null;


        try {
            // InternalSQLParser.g:3601:55: (iv_rulePivotForClause= rulePivotForClause EOF )
            // InternalSQLParser.g:3602:2: iv_rulePivotForClause= rulePivotForClause EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPivotForClauseRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePivotForClause=rulePivotForClause();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePivotForClause; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePivotForClause"


    // $ANTLR start "rulePivotForClause"
    // InternalSQLParser.g:3608:1: rulePivotForClause returns [EObject current=null] : (otherlv_0= FOR (this_ColumnFull_1= ruleColumnFull | (otherlv_2= LeftParenthesis this_Columns_3= ruleColumns otherlv_4= RightParenthesis ) ) ) ;
    public final EObject rulePivotForClause() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject this_ColumnFull_1 = null;

        EObject this_Columns_3 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:3614:2: ( (otherlv_0= FOR (this_ColumnFull_1= ruleColumnFull | (otherlv_2= LeftParenthesis this_Columns_3= ruleColumns otherlv_4= RightParenthesis ) ) ) )
            // InternalSQLParser.g:3615:2: (otherlv_0= FOR (this_ColumnFull_1= ruleColumnFull | (otherlv_2= LeftParenthesis this_Columns_3= ruleColumns otherlv_4= RightParenthesis ) ) )
            {
            // InternalSQLParser.g:3615:2: (otherlv_0= FOR (this_ColumnFull_1= ruleColumnFull | (otherlv_2= LeftParenthesis this_Columns_3= ruleColumns otherlv_4= RightParenthesis ) ) )
            // InternalSQLParser.g:3616:3: otherlv_0= FOR (this_ColumnFull_1= ruleColumnFull | (otherlv_2= LeftParenthesis this_Columns_3= ruleColumns otherlv_4= RightParenthesis ) )
            {
            otherlv_0=(Token)match(input,FOR,FOLLOW_5); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getPivotForClauseAccess().getFORKeyword_0());
              		
            }
            // InternalSQLParser.g:3620:3: (this_ColumnFull_1= ruleColumnFull | (otherlv_2= LeftParenthesis this_Columns_3= ruleColumns otherlv_4= RightParenthesis ) )
            int alt71=2;
            int LA71_0 = input.LA(1);

            if ( ((LA71_0>=RULE_STRING && LA71_0<=RULE_ID)) ) {
                alt71=1;
            }
            else if ( (LA71_0==LeftParenthesis) ) {
                alt71=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 71, 0, input);

                throw nvae;
            }
            switch (alt71) {
                case 1 :
                    // InternalSQLParser.g:3621:4: this_ColumnFull_1= ruleColumnFull
                    {
                    if ( state.backtracking==0 ) {

                      				/* */
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getPivotForClauseAccess().getColumnFullParserRuleCall_1_0());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_ColumnFull_1=ruleColumnFull();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ColumnFull_1;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:3633:4: (otherlv_2= LeftParenthesis this_Columns_3= ruleColumns otherlv_4= RightParenthesis )
                    {
                    // InternalSQLParser.g:3633:4: (otherlv_2= LeftParenthesis this_Columns_3= ruleColumns otherlv_4= RightParenthesis )
                    // InternalSQLParser.g:3634:5: otherlv_2= LeftParenthesis this_Columns_3= ruleColumns otherlv_4= RightParenthesis
                    {
                    otherlv_2=(Token)match(input,LeftParenthesis,FOLLOW_6); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_2, grammarAccess.getPivotForClauseAccess().getLeftParenthesisKeyword_1_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getPivotForClauseAccess().getColumnsParserRuleCall_1_1_1());
                      				
                    }
                    pushFollow(FOLLOW_13);
                    this_Columns_3=ruleColumns();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_Columns_3;
                      					afterParserOrEnumRuleCall();
                      				
                    }
                    otherlv_4=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_4, grammarAccess.getPivotForClauseAccess().getRightParenthesisKeyword_1_1_2());
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePivotForClause"


    // $ANTLR start "entryRulePivotColumns"
    // InternalSQLParser.g:3659:1: entryRulePivotColumns returns [EObject current=null] : iv_rulePivotColumns= rulePivotColumns EOF ;
    public final EObject entryRulePivotColumns() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePivotColumns = null;


        try {
            // InternalSQLParser.g:3659:53: (iv_rulePivotColumns= rulePivotColumns EOF )
            // InternalSQLParser.g:3660:2: iv_rulePivotColumns= rulePivotColumns EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPivotColumnsRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePivotColumns=rulePivotColumns();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePivotColumns; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePivotColumns"


    // $ANTLR start "rulePivotColumns"
    // InternalSQLParser.g:3666:1: rulePivotColumns returns [EObject current=null] : (this_PivotCol_0= rulePivotCol | (otherlv_1= LeftParenthesis this_PivotCols_2= rulePivotCols otherlv_3= RightParenthesis ) ) ;
    public final EObject rulePivotColumns() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject this_PivotCol_0 = null;

        EObject this_PivotCols_2 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:3672:2: ( (this_PivotCol_0= rulePivotCol | (otherlv_1= LeftParenthesis this_PivotCols_2= rulePivotCols otherlv_3= RightParenthesis ) ) )
            // InternalSQLParser.g:3673:2: (this_PivotCol_0= rulePivotCol | (otherlv_1= LeftParenthesis this_PivotCols_2= rulePivotCols otherlv_3= RightParenthesis ) )
            {
            // InternalSQLParser.g:3673:2: (this_PivotCol_0= rulePivotCol | (otherlv_1= LeftParenthesis this_PivotCols_2= rulePivotCols otherlv_3= RightParenthesis ) )
            int alt72=2;
            int LA72_0 = input.LA(1);

            if ( ((LA72_0>=RULE_STRING && LA72_0<=RULE_ID)) ) {
                alt72=1;
            }
            else if ( (LA72_0==LeftParenthesis) ) {
                alt72=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 72, 0, input);

                throw nvae;
            }
            switch (alt72) {
                case 1 :
                    // InternalSQLParser.g:3674:3: this_PivotCol_0= rulePivotCol
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPivotColumnsAccess().getPivotColParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_PivotCol_0=rulePivotCol();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_PivotCol_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:3686:3: (otherlv_1= LeftParenthesis this_PivotCols_2= rulePivotCols otherlv_3= RightParenthesis )
                    {
                    // InternalSQLParser.g:3686:3: (otherlv_1= LeftParenthesis this_PivotCols_2= rulePivotCols otherlv_3= RightParenthesis )
                    // InternalSQLParser.g:3687:4: otherlv_1= LeftParenthesis this_PivotCols_2= rulePivotCols otherlv_3= RightParenthesis
                    {
                    otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_26); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getPivotColumnsAccess().getLeftParenthesisKeyword_1_0());
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				/* */
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getPivotColumnsAccess().getPivotColsParserRuleCall_1_1());
                      			
                    }
                    pushFollow(FOLLOW_13);
                    this_PivotCols_2=rulePivotCols();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_PivotCols_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }
                    otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_3, grammarAccess.getPivotColumnsAccess().getRightParenthesisKeyword_1_2());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePivotColumns"


    // $ANTLR start "entryRulePivotCols"
    // InternalSQLParser.g:3711:1: entryRulePivotCols returns [EObject current=null] : iv_rulePivotCols= rulePivotCols EOF ;
    public final EObject entryRulePivotCols() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePivotCols = null;


        try {
            // InternalSQLParser.g:3711:50: (iv_rulePivotCols= rulePivotCols EOF )
            // InternalSQLParser.g:3712:2: iv_rulePivotCols= rulePivotCols EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPivotColsRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePivotCols=rulePivotCols();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePivotCols; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePivotCols"


    // $ANTLR start "rulePivotCols"
    // InternalSQLParser.g:3718:1: rulePivotCols returns [EObject current=null] : (this_PivotCol_0= rulePivotCol ( () (otherlv_2= Comma ( (lv_entries_3_0= rulePivotCol ) ) )+ )? ) ;
    public final EObject rulePivotCols() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_PivotCol_0 = null;

        EObject lv_entries_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:3724:2: ( (this_PivotCol_0= rulePivotCol ( () (otherlv_2= Comma ( (lv_entries_3_0= rulePivotCol ) ) )+ )? ) )
            // InternalSQLParser.g:3725:2: (this_PivotCol_0= rulePivotCol ( () (otherlv_2= Comma ( (lv_entries_3_0= rulePivotCol ) ) )+ )? )
            {
            // InternalSQLParser.g:3725:2: (this_PivotCol_0= rulePivotCol ( () (otherlv_2= Comma ( (lv_entries_3_0= rulePivotCol ) ) )+ )? )
            // InternalSQLParser.g:3726:3: this_PivotCol_0= rulePivotCol ( () (otherlv_2= Comma ( (lv_entries_3_0= rulePivotCol ) ) )+ )?
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getPivotColsAccess().getPivotColParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_15);
            this_PivotCol_0=rulePivotCol();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_PivotCol_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:3737:3: ( () (otherlv_2= Comma ( (lv_entries_3_0= rulePivotCol ) ) )+ )?
            int alt74=2;
            int LA74_0 = input.LA(1);

            if ( (LA74_0==Comma) ) {
                alt74=1;
            }
            switch (alt74) {
                case 1 :
                    // InternalSQLParser.g:3738:4: () (otherlv_2= Comma ( (lv_entries_3_0= rulePivotCol ) ) )+
                    {
                    // InternalSQLParser.g:3738:4: ()
                    // InternalSQLParser.g:3739:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getPivotColsAccess().getPvcsEntriesAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalSQLParser.g:3748:4: (otherlv_2= Comma ( (lv_entries_3_0= rulePivotCol ) ) )+
                    int cnt73=0;
                    loop73:
                    do {
                        int alt73=2;
                        int LA73_0 = input.LA(1);

                        if ( (LA73_0==Comma) ) {
                            alt73=1;
                        }


                        switch (alt73) {
                    	case 1 :
                    	    // InternalSQLParser.g:3749:5: otherlv_2= Comma ( (lv_entries_3_0= rulePivotCol ) )
                    	    {
                    	    otherlv_2=(Token)match(input,Comma,FOLLOW_26); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_2, grammarAccess.getPivotColsAccess().getCommaKeyword_1_1_0());
                    	      				
                    	    }
                    	    // InternalSQLParser.g:3753:5: ( (lv_entries_3_0= rulePivotCol ) )
                    	    // InternalSQLParser.g:3754:6: (lv_entries_3_0= rulePivotCol )
                    	    {
                    	    // InternalSQLParser.g:3754:6: (lv_entries_3_0= rulePivotCol )
                    	    // InternalSQLParser.g:3755:7: lv_entries_3_0= rulePivotCol
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getPivotColsAccess().getEntriesPivotColParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_15);
                    	    lv_entries_3_0=rulePivotCol();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getPivotColsRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"entries",
                    	      								lv_entries_3_0,
                    	      								"org.xtext.example.mydsl_sql.SQL.PivotCol");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt73 >= 1 ) break loop73;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(73, input);
                                throw eee;
                        }
                        cnt73++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePivotCols"


    // $ANTLR start "entryRulePivotCol"
    // InternalSQLParser.g:3778:1: entryRulePivotCol returns [EObject current=null] : iv_rulePivotCol= rulePivotCol EOF ;
    public final EObject entryRulePivotCol() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePivotCol = null;


        try {
            // InternalSQLParser.g:3778:49: (iv_rulePivotCol= rulePivotCol EOF )
            // InternalSQLParser.g:3779:2: iv_rulePivotCol= rulePivotCol EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPivotColRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePivotCol=rulePivotCol();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePivotCol; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePivotCol"


    // $ANTLR start "rulePivotCol"
    // InternalSQLParser.g:3785:1: rulePivotCol returns [EObject current=null] : (this_DbObjectName_0= ruleDbObjectName ( () (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )? ) ;
    public final EObject rulePivotCol() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_DbObjectName_0 = null;

        EObject lv_entries_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:3791:2: ( (this_DbObjectName_0= ruleDbObjectName ( () (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )? ) )
            // InternalSQLParser.g:3792:2: (this_DbObjectName_0= ruleDbObjectName ( () (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )? )
            {
            // InternalSQLParser.g:3792:2: (this_DbObjectName_0= ruleDbObjectName ( () (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )? )
            // InternalSQLParser.g:3793:3: this_DbObjectName_0= ruleDbObjectName ( () (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )?
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getPivotColAccess().getDbObjectNameParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_56);
            this_DbObjectName_0=ruleDbObjectName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_DbObjectName_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:3804:3: ( () (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )?
            int alt76=2;
            int LA76_0 = input.LA(1);

            if ( (LA76_0==FullStop) ) {
                alt76=1;
            }
            switch (alt76) {
                case 1 :
                    // InternalSQLParser.g:3805:4: () (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+
                    {
                    // InternalSQLParser.g:3805:4: ()
                    // InternalSQLParser.g:3806:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getPivotColAccess().getPcolsEntriesAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalSQLParser.g:3815:4: (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+
                    int cnt75=0;
                    loop75:
                    do {
                        int alt75=2;
                        int LA75_0 = input.LA(1);

                        if ( (LA75_0==FullStop) ) {
                            alt75=1;
                        }


                        switch (alt75) {
                    	case 1 :
                    	    // InternalSQLParser.g:3816:5: otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) )
                    	    {
                    	    otherlv_2=(Token)match(input,FullStop,FOLLOW_26); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_2, grammarAccess.getPivotColAccess().getFullStopKeyword_1_1_0());
                    	      				
                    	    }
                    	    // InternalSQLParser.g:3820:5: ( (lv_entries_3_0= ruleDbObjectName ) )
                    	    // InternalSQLParser.g:3821:6: (lv_entries_3_0= ruleDbObjectName )
                    	    {
                    	    // InternalSQLParser.g:3821:6: (lv_entries_3_0= ruleDbObjectName )
                    	    // InternalSQLParser.g:3822:7: lv_entries_3_0= ruleDbObjectName
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getPivotColAccess().getEntriesDbObjectNameParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_56);
                    	    lv_entries_3_0=ruleDbObjectName();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getPivotColRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"entries",
                    	      								lv_entries_3_0,
                    	      								"org.xtext.example.mydsl_sql.SQL.DbObjectName");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt75 >= 1 ) break loop75;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(75, input);
                                throw eee;
                        }
                        cnt75++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePivotCol"


    // $ANTLR start "entryRuleTableFull"
    // InternalSQLParser.g:3845:1: entryRuleTableFull returns [EObject current=null] : iv_ruleTableFull= ruleTableFull EOF ;
    public final EObject entryRuleTableFull() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTableFull = null;


        try {
            // InternalSQLParser.g:3845:50: (iv_ruleTableFull= ruleTableFull EOF )
            // InternalSQLParser.g:3846:2: iv_ruleTableFull= ruleTableFull EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTableFullRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTableFull=ruleTableFull();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTableFull; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTableFull"


    // $ANTLR start "ruleTableFull"
    // InternalSQLParser.g:3852:1: ruleTableFull returns [EObject current=null] : (this_DbObjectName_0= ruleDbObjectName ( () (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )? ) ;
    public final EObject ruleTableFull() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_DbObjectName_0 = null;

        EObject lv_entries_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:3858:2: ( (this_DbObjectName_0= ruleDbObjectName ( () (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )? ) )
            // InternalSQLParser.g:3859:2: (this_DbObjectName_0= ruleDbObjectName ( () (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )? )
            {
            // InternalSQLParser.g:3859:2: (this_DbObjectName_0= ruleDbObjectName ( () (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )? )
            // InternalSQLParser.g:3860:3: this_DbObjectName_0= ruleDbObjectName ( () (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )?
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getTableFullAccess().getDbObjectNameParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_56);
            this_DbObjectName_0=ruleDbObjectName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_DbObjectName_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:3871:3: ( () (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+ )?
            int alt78=2;
            int LA78_0 = input.LA(1);

            if ( (LA78_0==FullStop) ) {
                alt78=1;
            }
            switch (alt78) {
                case 1 :
                    // InternalSQLParser.g:3872:4: () (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+
                    {
                    // InternalSQLParser.g:3872:4: ()
                    // InternalSQLParser.g:3873:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getTableFullAccess().getTblsEntriesAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalSQLParser.g:3882:4: (otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) ) )+
                    int cnt77=0;
                    loop77:
                    do {
                        int alt77=2;
                        int LA77_0 = input.LA(1);

                        if ( (LA77_0==FullStop) ) {
                            alt77=1;
                        }


                        switch (alt77) {
                    	case 1 :
                    	    // InternalSQLParser.g:3883:5: otherlv_2= FullStop ( (lv_entries_3_0= ruleDbObjectName ) )
                    	    {
                    	    otherlv_2=(Token)match(input,FullStop,FOLLOW_26); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_2, grammarAccess.getTableFullAccess().getFullStopKeyword_1_1_0());
                    	      				
                    	    }
                    	    // InternalSQLParser.g:3887:5: ( (lv_entries_3_0= ruleDbObjectName ) )
                    	    // InternalSQLParser.g:3888:6: (lv_entries_3_0= ruleDbObjectName )
                    	    {
                    	    // InternalSQLParser.g:3888:6: (lv_entries_3_0= ruleDbObjectName )
                    	    // InternalSQLParser.g:3889:7: lv_entries_3_0= ruleDbObjectName
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getTableFullAccess().getEntriesDbObjectNameParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_56);
                    	    lv_entries_3_0=ruleDbObjectName();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getTableFullRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"entries",
                    	      								lv_entries_3_0,
                    	      								"org.xtext.example.mydsl_sql.SQL.DbObjectName");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt77 >= 1 ) break loop77;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(77, input);
                                throw eee;
                        }
                        cnt77++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTableFull"


    // $ANTLR start "entryRuleDbObjectNameAll"
    // InternalSQLParser.g:3912:1: entryRuleDbObjectNameAll returns [EObject current=null] : iv_ruleDbObjectNameAll= ruleDbObjectNameAll EOF ;
    public final EObject entryRuleDbObjectNameAll() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleDbObjectNameAll = null;


        try {
            // InternalSQLParser.g:3912:56: (iv_ruleDbObjectNameAll= ruleDbObjectNameAll EOF )
            // InternalSQLParser.g:3913:2: iv_ruleDbObjectNameAll= ruleDbObjectNameAll EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDbObjectNameAllRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDbObjectNameAll=ruleDbObjectNameAll();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDbObjectNameAll; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleDbObjectNameAll"


    // $ANTLR start "ruleDbObjectNameAll"
    // InternalSQLParser.g:3919:1: ruleDbObjectNameAll returns [EObject current=null] : ( ( (lv_dbname_0_0= ruleDBID ) ) otherlv_1= FullStop this_STAR_2= RULE_STAR ) ;
    public final EObject ruleDbObjectNameAll() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token this_STAR_2=null;
        AntlrDatatypeRuleToken lv_dbname_0_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:3925:2: ( ( ( (lv_dbname_0_0= ruleDBID ) ) otherlv_1= FullStop this_STAR_2= RULE_STAR ) )
            // InternalSQLParser.g:3926:2: ( ( (lv_dbname_0_0= ruleDBID ) ) otherlv_1= FullStop this_STAR_2= RULE_STAR )
            {
            // InternalSQLParser.g:3926:2: ( ( (lv_dbname_0_0= ruleDBID ) ) otherlv_1= FullStop this_STAR_2= RULE_STAR )
            // InternalSQLParser.g:3927:3: ( (lv_dbname_0_0= ruleDBID ) ) otherlv_1= FullStop this_STAR_2= RULE_STAR
            {
            // InternalSQLParser.g:3927:3: ( (lv_dbname_0_0= ruleDBID ) )
            // InternalSQLParser.g:3928:4: (lv_dbname_0_0= ruleDBID )
            {
            // InternalSQLParser.g:3928:4: (lv_dbname_0_0= ruleDBID )
            // InternalSQLParser.g:3929:5: lv_dbname_0_0= ruleDBID
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getDbObjectNameAllAccess().getDbnameDBIDParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_72);
            lv_dbname_0_0=ruleDBID();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getDbObjectNameAllRule());
              					}
              					set(
              						current,
              						"dbname",
              						lv_dbname_0_0,
              						"org.xtext.example.mydsl_sql.SQL.DBID");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_1=(Token)match(input,FullStop,FOLLOW_73); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getDbObjectNameAllAccess().getFullStopKeyword_1());
              		
            }
            this_STAR_2=(Token)match(input,RULE_STAR,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(this_STAR_2, grammarAccess.getDbObjectNameAllAccess().getSTARTerminalRuleCall_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleDbObjectNameAll"


    // $ANTLR start "entryRuleDbObjectName"
    // InternalSQLParser.g:3958:1: entryRuleDbObjectName returns [EObject current=null] : iv_ruleDbObjectName= ruleDbObjectName EOF ;
    public final EObject entryRuleDbObjectName() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleDbObjectName = null;


        try {
            // InternalSQLParser.g:3958:53: (iv_ruleDbObjectName= ruleDbObjectName EOF )
            // InternalSQLParser.g:3959:2: iv_ruleDbObjectName= ruleDbObjectName EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDbObjectNameRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDbObjectName=ruleDbObjectName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDbObjectName; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleDbObjectName"


    // $ANTLR start "ruleDbObjectName"
    // InternalSQLParser.g:3965:1: ruleDbObjectName returns [EObject current=null] : ( (lv_dbname_0_0= ruleDBID ) ) ;
    public final EObject ruleDbObjectName() throws RecognitionException {
        EObject current = null;

        AntlrDatatypeRuleToken lv_dbname_0_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:3971:2: ( ( (lv_dbname_0_0= ruleDBID ) ) )
            // InternalSQLParser.g:3972:2: ( (lv_dbname_0_0= ruleDBID ) )
            {
            // InternalSQLParser.g:3972:2: ( (lv_dbname_0_0= ruleDBID ) )
            // InternalSQLParser.g:3973:3: (lv_dbname_0_0= ruleDBID )
            {
            // InternalSQLParser.g:3973:3: (lv_dbname_0_0= ruleDBID )
            // InternalSQLParser.g:3974:4: lv_dbname_0_0= ruleDBID
            {
            if ( state.backtracking==0 ) {

              				newCompositeNode(grammarAccess.getDbObjectNameAccess().getDbnameDBIDParserRuleCall_0());
              			
            }
            pushFollow(FOLLOW_2);
            lv_dbname_0_0=ruleDBID();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getDbObjectNameRule());
              				}
              				set(
              					current,
              					"dbname",
              					lv_dbname_0_0,
              					"org.xtext.example.mydsl_sql.SQL.DBID");
              				afterParserOrEnumRuleCall();
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleDbObjectName"


    // $ANTLR start "entryRuleOrderByColumns"
    // InternalSQLParser.g:3994:1: entryRuleOrderByColumns returns [EObject current=null] : iv_ruleOrderByColumns= ruleOrderByColumns EOF ;
    public final EObject entryRuleOrderByColumns() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOrderByColumns = null;


        try {
            // InternalSQLParser.g:3994:55: (iv_ruleOrderByColumns= ruleOrderByColumns EOF )
            // InternalSQLParser.g:3995:2: iv_ruleOrderByColumns= ruleOrderByColumns EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOrderByColumnsRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOrderByColumns=ruleOrderByColumns();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOrderByColumns; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOrderByColumns"


    // $ANTLR start "ruleOrderByColumns"
    // InternalSQLParser.g:4001:1: ruleOrderByColumns returns [EObject current=null] : (this_OrderByColumnFull_0= ruleOrderByColumnFull ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleOrderByColumnFull ) ) )+ )? ) ;
    public final EObject ruleOrderByColumns() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_OrderByColumnFull_0 = null;

        EObject lv_entries_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:4007:2: ( (this_OrderByColumnFull_0= ruleOrderByColumnFull ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleOrderByColumnFull ) ) )+ )? ) )
            // InternalSQLParser.g:4008:2: (this_OrderByColumnFull_0= ruleOrderByColumnFull ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleOrderByColumnFull ) ) )+ )? )
            {
            // InternalSQLParser.g:4008:2: (this_OrderByColumnFull_0= ruleOrderByColumnFull ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleOrderByColumnFull ) ) )+ )? )
            // InternalSQLParser.g:4009:3: this_OrderByColumnFull_0= ruleOrderByColumnFull ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleOrderByColumnFull ) ) )+ )?
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getOrderByColumnsAccess().getOrderByColumnFullParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_15);
            this_OrderByColumnFull_0=ruleOrderByColumnFull();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_OrderByColumnFull_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:4020:3: ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleOrderByColumnFull ) ) )+ )?
            int alt80=2;
            int LA80_0 = input.LA(1);

            if ( (LA80_0==Comma) ) {
                alt80=1;
            }
            switch (alt80) {
                case 1 :
                    // InternalSQLParser.g:4021:4: () (otherlv_2= Comma ( (lv_entries_3_0= ruleOrderByColumnFull ) ) )+
                    {
                    // InternalSQLParser.g:4021:4: ()
                    // InternalSQLParser.g:4022:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getOrderByColumnsAccess().getOrOrderByColumnEntriesAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalSQLParser.g:4031:4: (otherlv_2= Comma ( (lv_entries_3_0= ruleOrderByColumnFull ) ) )+
                    int cnt79=0;
                    loop79:
                    do {
                        int alt79=2;
                        int LA79_0 = input.LA(1);

                        if ( (LA79_0==Comma) ) {
                            alt79=1;
                        }


                        switch (alt79) {
                    	case 1 :
                    	    // InternalSQLParser.g:4032:5: otherlv_2= Comma ( (lv_entries_3_0= ruleOrderByColumnFull ) )
                    	    {
                    	    otherlv_2=(Token)match(input,Comma,FOLLOW_46); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_2, grammarAccess.getOrderByColumnsAccess().getCommaKeyword_1_1_0());
                    	      				
                    	    }
                    	    // InternalSQLParser.g:4036:5: ( (lv_entries_3_0= ruleOrderByColumnFull ) )
                    	    // InternalSQLParser.g:4037:6: (lv_entries_3_0= ruleOrderByColumnFull )
                    	    {
                    	    // InternalSQLParser.g:4037:6: (lv_entries_3_0= ruleOrderByColumnFull )
                    	    // InternalSQLParser.g:4038:7: lv_entries_3_0= ruleOrderByColumnFull
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getOrderByColumnsAccess().getEntriesOrderByColumnFullParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_15);
                    	    lv_entries_3_0=ruleOrderByColumnFull();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getOrderByColumnsRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"entries",
                    	      								lv_entries_3_0,
                    	      								"org.xtext.example.mydsl_sql.SQL.OrderByColumnFull");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt79 >= 1 ) break loop79;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(79, input);
                                throw eee;
                        }
                        cnt79++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOrderByColumns"


    // $ANTLR start "entryRuleOrderByColumnFull"
    // InternalSQLParser.g:4061:1: entryRuleOrderByColumnFull returns [EObject current=null] : iv_ruleOrderByColumnFull= ruleOrderByColumnFull EOF ;
    public final EObject entryRuleOrderByColumnFull() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOrderByColumnFull = null;


        try {
            // InternalSQLParser.g:4061:58: (iv_ruleOrderByColumnFull= ruleOrderByColumnFull EOF )
            // InternalSQLParser.g:4062:2: iv_ruleOrderByColumnFull= ruleOrderByColumnFull EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOrderByColumnFullRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOrderByColumnFull=ruleOrderByColumnFull();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOrderByColumnFull; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOrderByColumnFull"


    // $ANTLR start "ruleOrderByColumnFull"
    // InternalSQLParser.g:4068:1: ruleOrderByColumnFull returns [EObject current=null] : ( ( ( (lv_colOrder_0_0= ruleColumnFull ) ) | ( (lv_colOrderInt_1_0= RULE_UNSIGNED ) ) ) ( ( (lv_direction_2_1= ASC | lv_direction_2_2= DESC ) ) )? ) ;
    public final EObject ruleOrderByColumnFull() throws RecognitionException {
        EObject current = null;

        Token lv_colOrderInt_1_0=null;
        Token lv_direction_2_1=null;
        Token lv_direction_2_2=null;
        EObject lv_colOrder_0_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:4074:2: ( ( ( ( (lv_colOrder_0_0= ruleColumnFull ) ) | ( (lv_colOrderInt_1_0= RULE_UNSIGNED ) ) ) ( ( (lv_direction_2_1= ASC | lv_direction_2_2= DESC ) ) )? ) )
            // InternalSQLParser.g:4075:2: ( ( ( (lv_colOrder_0_0= ruleColumnFull ) ) | ( (lv_colOrderInt_1_0= RULE_UNSIGNED ) ) ) ( ( (lv_direction_2_1= ASC | lv_direction_2_2= DESC ) ) )? )
            {
            // InternalSQLParser.g:4075:2: ( ( ( (lv_colOrder_0_0= ruleColumnFull ) ) | ( (lv_colOrderInt_1_0= RULE_UNSIGNED ) ) ) ( ( (lv_direction_2_1= ASC | lv_direction_2_2= DESC ) ) )? )
            // InternalSQLParser.g:4076:3: ( ( (lv_colOrder_0_0= ruleColumnFull ) ) | ( (lv_colOrderInt_1_0= RULE_UNSIGNED ) ) ) ( ( (lv_direction_2_1= ASC | lv_direction_2_2= DESC ) ) )?
            {
            // InternalSQLParser.g:4076:3: ( ( (lv_colOrder_0_0= ruleColumnFull ) ) | ( (lv_colOrderInt_1_0= RULE_UNSIGNED ) ) )
            int alt81=2;
            int LA81_0 = input.LA(1);

            if ( ((LA81_0>=RULE_STRING && LA81_0<=RULE_ID)) ) {
                alt81=1;
            }
            else if ( (LA81_0==RULE_UNSIGNED) ) {
                alt81=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 81, 0, input);

                throw nvae;
            }
            switch (alt81) {
                case 1 :
                    // InternalSQLParser.g:4077:4: ( (lv_colOrder_0_0= ruleColumnFull ) )
                    {
                    // InternalSQLParser.g:4077:4: ( (lv_colOrder_0_0= ruleColumnFull ) )
                    // InternalSQLParser.g:4078:5: (lv_colOrder_0_0= ruleColumnFull )
                    {
                    // InternalSQLParser.g:4078:5: (lv_colOrder_0_0= ruleColumnFull )
                    // InternalSQLParser.g:4079:6: lv_colOrder_0_0= ruleColumnFull
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getOrderByColumnFullAccess().getColOrderColumnFullParserRuleCall_0_0_0());
                      					
                    }
                    pushFollow(FOLLOW_74);
                    lv_colOrder_0_0=ruleColumnFull();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getOrderByColumnFullRule());
                      						}
                      						set(
                      							current,
                      							"colOrder",
                      							lv_colOrder_0_0,
                      							"org.xtext.example.mydsl_sql.SQL.ColumnFull");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:4097:4: ( (lv_colOrderInt_1_0= RULE_UNSIGNED ) )
                    {
                    // InternalSQLParser.g:4097:4: ( (lv_colOrderInt_1_0= RULE_UNSIGNED ) )
                    // InternalSQLParser.g:4098:5: (lv_colOrderInt_1_0= RULE_UNSIGNED )
                    {
                    // InternalSQLParser.g:4098:5: (lv_colOrderInt_1_0= RULE_UNSIGNED )
                    // InternalSQLParser.g:4099:6: lv_colOrderInt_1_0= RULE_UNSIGNED
                    {
                    lv_colOrderInt_1_0=(Token)match(input,RULE_UNSIGNED,FOLLOW_74); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_colOrderInt_1_0, grammarAccess.getOrderByColumnFullAccess().getColOrderIntUNSIGNEDTerminalRuleCall_0_1_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getOrderByColumnFullRule());
                      						}
                      						setWithLastConsumed(
                      							current,
                      							"colOrderInt",
                      							lv_colOrderInt_1_0,
                      							"org.xtext.example.mydsl_sql.SQL.UNSIGNED");
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            // InternalSQLParser.g:4116:3: ( ( (lv_direction_2_1= ASC | lv_direction_2_2= DESC ) ) )?
            int alt83=2;
            int LA83_0 = input.LA(1);

            if ( (LA83_0==DESC||LA83_0==ASC) ) {
                alt83=1;
            }
            switch (alt83) {
                case 1 :
                    // InternalSQLParser.g:4117:4: ( (lv_direction_2_1= ASC | lv_direction_2_2= DESC ) )
                    {
                    // InternalSQLParser.g:4117:4: ( (lv_direction_2_1= ASC | lv_direction_2_2= DESC ) )
                    // InternalSQLParser.g:4118:5: (lv_direction_2_1= ASC | lv_direction_2_2= DESC )
                    {
                    // InternalSQLParser.g:4118:5: (lv_direction_2_1= ASC | lv_direction_2_2= DESC )
                    int alt82=2;
                    int LA82_0 = input.LA(1);

                    if ( (LA82_0==ASC) ) {
                        alt82=1;
                    }
                    else if ( (LA82_0==DESC) ) {
                        alt82=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 82, 0, input);

                        throw nvae;
                    }
                    switch (alt82) {
                        case 1 :
                            // InternalSQLParser.g:4119:6: lv_direction_2_1= ASC
                            {
                            lv_direction_2_1=(Token)match(input,ASC,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(lv_direction_2_1, grammarAccess.getOrderByColumnFullAccess().getDirectionASCKeyword_1_0_0());
                              					
                            }
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getOrderByColumnFullRule());
                              						}
                              						setWithLastConsumed(current, "direction", lv_direction_2_1, null);
                              					
                            }

                            }
                            break;
                        case 2 :
                            // InternalSQLParser.g:4130:6: lv_direction_2_2= DESC
                            {
                            lv_direction_2_2=(Token)match(input,DESC,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(lv_direction_2_2, grammarAccess.getOrderByColumnFullAccess().getDirectionDESCKeyword_1_0_1());
                              					
                            }
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getOrderByColumnFullRule());
                              						}
                              						setWithLastConsumed(current, "direction", lv_direction_2_2, null);
                              					
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOrderByColumnFull"


    // $ANTLR start "entryRuleGroupByColumns"
    // InternalSQLParser.g:4147:1: entryRuleGroupByColumns returns [EObject current=null] : iv_ruleGroupByColumns= ruleGroupByColumns EOF ;
    public final EObject entryRuleGroupByColumns() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleGroupByColumns = null;


        try {
            // InternalSQLParser.g:4147:55: (iv_ruleGroupByColumns= ruleGroupByColumns EOF )
            // InternalSQLParser.g:4148:2: iv_ruleGroupByColumns= ruleGroupByColumns EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getGroupByColumnsRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleGroupByColumns=ruleGroupByColumns();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleGroupByColumns; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleGroupByColumns"


    // $ANTLR start "ruleGroupByColumns"
    // InternalSQLParser.g:4154:1: ruleGroupByColumns returns [EObject current=null] : (this_GroupByColumnFull_0= ruleGroupByColumnFull ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleGroupByColumnFull ) ) )+ )? ) ;
    public final EObject ruleGroupByColumns() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_GroupByColumnFull_0 = null;

        EObject lv_entries_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:4160:2: ( (this_GroupByColumnFull_0= ruleGroupByColumnFull ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleGroupByColumnFull ) ) )+ )? ) )
            // InternalSQLParser.g:4161:2: (this_GroupByColumnFull_0= ruleGroupByColumnFull ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleGroupByColumnFull ) ) )+ )? )
            {
            // InternalSQLParser.g:4161:2: (this_GroupByColumnFull_0= ruleGroupByColumnFull ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleGroupByColumnFull ) ) )+ )? )
            // InternalSQLParser.g:4162:3: this_GroupByColumnFull_0= ruleGroupByColumnFull ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleGroupByColumnFull ) ) )+ )?
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getGroupByColumnsAccess().getGroupByColumnFullParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_15);
            this_GroupByColumnFull_0=ruleGroupByColumnFull();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_GroupByColumnFull_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:4173:3: ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleGroupByColumnFull ) ) )+ )?
            int alt85=2;
            int LA85_0 = input.LA(1);

            if ( (LA85_0==Comma) ) {
                alt85=1;
            }
            switch (alt85) {
                case 1 :
                    // InternalSQLParser.g:4174:4: () (otherlv_2= Comma ( (lv_entries_3_0= ruleGroupByColumnFull ) ) )+
                    {
                    // InternalSQLParser.g:4174:4: ()
                    // InternalSQLParser.g:4175:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getGroupByColumnsAccess().getOrGroupByColumnEntriesAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalSQLParser.g:4184:4: (otherlv_2= Comma ( (lv_entries_3_0= ruleGroupByColumnFull ) ) )+
                    int cnt84=0;
                    loop84:
                    do {
                        int alt84=2;
                        int LA84_0 = input.LA(1);

                        if ( (LA84_0==Comma) ) {
                            alt84=1;
                        }


                        switch (alt84) {
                    	case 1 :
                    	    // InternalSQLParser.g:4185:5: otherlv_2= Comma ( (lv_entries_3_0= ruleGroupByColumnFull ) )
                    	    {
                    	    otherlv_2=(Token)match(input,Comma,FOLLOW_46); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_2, grammarAccess.getGroupByColumnsAccess().getCommaKeyword_1_1_0());
                    	      				
                    	    }
                    	    // InternalSQLParser.g:4189:5: ( (lv_entries_3_0= ruleGroupByColumnFull ) )
                    	    // InternalSQLParser.g:4190:6: (lv_entries_3_0= ruleGroupByColumnFull )
                    	    {
                    	    // InternalSQLParser.g:4190:6: (lv_entries_3_0= ruleGroupByColumnFull )
                    	    // InternalSQLParser.g:4191:7: lv_entries_3_0= ruleGroupByColumnFull
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getGroupByColumnsAccess().getEntriesGroupByColumnFullParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_15);
                    	    lv_entries_3_0=ruleGroupByColumnFull();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getGroupByColumnsRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"entries",
                    	      								lv_entries_3_0,
                    	      								"org.xtext.example.mydsl_sql.SQL.GroupByColumnFull");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt84 >= 1 ) break loop84;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(84, input);
                                throw eee;
                        }
                        cnt84++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleGroupByColumns"


    // $ANTLR start "entryRuleGroupByColumnFull"
    // InternalSQLParser.g:4214:1: entryRuleGroupByColumnFull returns [EObject current=null] : iv_ruleGroupByColumnFull= ruleGroupByColumnFull EOF ;
    public final EObject entryRuleGroupByColumnFull() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleGroupByColumnFull = null;


        try {
            // InternalSQLParser.g:4214:58: (iv_ruleGroupByColumnFull= ruleGroupByColumnFull EOF )
            // InternalSQLParser.g:4215:2: iv_ruleGroupByColumnFull= ruleGroupByColumnFull EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getGroupByColumnFullRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleGroupByColumnFull=ruleGroupByColumnFull();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleGroupByColumnFull; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleGroupByColumnFull"


    // $ANTLR start "ruleGroupByColumnFull"
    // InternalSQLParser.g:4221:1: ruleGroupByColumnFull returns [EObject current=null] : ( ( (lv_colGrBy_0_0= ruleColumnFull ) ) | ( (lv_gbFunction_1_0= ruleOperandFunction ) ) | ( (lv_grByInt_2_0= RULE_UNSIGNED ) ) ) ;
    public final EObject ruleGroupByColumnFull() throws RecognitionException {
        EObject current = null;

        Token lv_grByInt_2_0=null;
        EObject lv_colGrBy_0_0 = null;

        EObject lv_gbFunction_1_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:4227:2: ( ( ( (lv_colGrBy_0_0= ruleColumnFull ) ) | ( (lv_gbFunction_1_0= ruleOperandFunction ) ) | ( (lv_grByInt_2_0= RULE_UNSIGNED ) ) ) )
            // InternalSQLParser.g:4228:2: ( ( (lv_colGrBy_0_0= ruleColumnFull ) ) | ( (lv_gbFunction_1_0= ruleOperandFunction ) ) | ( (lv_grByInt_2_0= RULE_UNSIGNED ) ) )
            {
            // InternalSQLParser.g:4228:2: ( ( (lv_colGrBy_0_0= ruleColumnFull ) ) | ( (lv_gbFunction_1_0= ruleOperandFunction ) ) | ( (lv_grByInt_2_0= RULE_UNSIGNED ) ) )
            int alt86=3;
            switch ( input.LA(1) ) {
            case RULE_ID:
                {
                int LA86_1 = input.LA(2);

                if ( (LA86_1==EOF||LA86_1==INTERSECT||LA86_1==EXCEPT||LA86_1==HAVING||LA86_1==OFFSET||LA86_1==FETCH||(LA86_1>=LIMIT && LA86_1<=MINUS)||LA86_1==ORDER||LA86_1==UNION||LA86_1==RightParenthesis||LA86_1==Comma||LA86_1==FullStop) ) {
                    alt86=1;
                }
                else if ( (LA86_1==LeftParenthesis) ) {
                    alt86=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 86, 1, input);

                    throw nvae;
                }
                }
                break;
            case RULE_STRING:
            case RULE_DBNAME:
                {
                alt86=1;
                }
                break;
            case RULE_UNSIGNED:
                {
                alt86=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 86, 0, input);

                throw nvae;
            }

            switch (alt86) {
                case 1 :
                    // InternalSQLParser.g:4229:3: ( (lv_colGrBy_0_0= ruleColumnFull ) )
                    {
                    // InternalSQLParser.g:4229:3: ( (lv_colGrBy_0_0= ruleColumnFull ) )
                    // InternalSQLParser.g:4230:4: (lv_colGrBy_0_0= ruleColumnFull )
                    {
                    // InternalSQLParser.g:4230:4: (lv_colGrBy_0_0= ruleColumnFull )
                    // InternalSQLParser.g:4231:5: lv_colGrBy_0_0= ruleColumnFull
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getGroupByColumnFullAccess().getColGrByColumnFullParserRuleCall_0_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_colGrBy_0_0=ruleColumnFull();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getGroupByColumnFullRule());
                      					}
                      					set(
                      						current,
                      						"colGrBy",
                      						lv_colGrBy_0_0,
                      						"org.xtext.example.mydsl_sql.SQL.ColumnFull");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:4249:3: ( (lv_gbFunction_1_0= ruleOperandFunction ) )
                    {
                    // InternalSQLParser.g:4249:3: ( (lv_gbFunction_1_0= ruleOperandFunction ) )
                    // InternalSQLParser.g:4250:4: (lv_gbFunction_1_0= ruleOperandFunction )
                    {
                    // InternalSQLParser.g:4250:4: (lv_gbFunction_1_0= ruleOperandFunction )
                    // InternalSQLParser.g:4251:5: lv_gbFunction_1_0= ruleOperandFunction
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getGroupByColumnFullAccess().getGbFunctionOperandFunctionParserRuleCall_1_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_gbFunction_1_0=ruleOperandFunction();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getGroupByColumnFullRule());
                      					}
                      					set(
                      						current,
                      						"gbFunction",
                      						lv_gbFunction_1_0,
                      						"org.xtext.example.mydsl_sql.SQL.OperandFunction");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:4269:3: ( (lv_grByInt_2_0= RULE_UNSIGNED ) )
                    {
                    // InternalSQLParser.g:4269:3: ( (lv_grByInt_2_0= RULE_UNSIGNED ) )
                    // InternalSQLParser.g:4270:4: (lv_grByInt_2_0= RULE_UNSIGNED )
                    {
                    // InternalSQLParser.g:4270:4: (lv_grByInt_2_0= RULE_UNSIGNED )
                    // InternalSQLParser.g:4271:5: lv_grByInt_2_0= RULE_UNSIGNED
                    {
                    lv_grByInt_2_0=(Token)match(input,RULE_UNSIGNED,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_grByInt_2_0, grammarAccess.getGroupByColumnFullAccess().getGrByIntUNSIGNEDTerminalRuleCall_2_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getGroupByColumnFullRule());
                      					}
                      					setWithLastConsumed(
                      						current,
                      						"grByInt",
                      						lv_grByInt_2_0,
                      						"org.xtext.example.mydsl_sql.SQL.UNSIGNED");
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleGroupByColumnFull"


    // $ANTLR start "entryRuleFullExpression"
    // InternalSQLParser.g:4291:1: entryRuleFullExpression returns [EObject current=null] : iv_ruleFullExpression= ruleFullExpression EOF ;
    public final EObject entryRuleFullExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFullExpression = null;


        try {
            // InternalSQLParser.g:4291:55: (iv_ruleFullExpression= ruleFullExpression EOF )
            // InternalSQLParser.g:4292:2: iv_ruleFullExpression= ruleFullExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFullExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFullExpression=ruleFullExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFullExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFullExpression"


    // $ANTLR start "ruleFullExpression"
    // InternalSQLParser.g:4298:1: ruleFullExpression returns [EObject current=null] : (this_ExpressionFragment_0= ruleExpressionFragment ( () ( (lv_entries_2_0= ruleExpressionFragmentSecond ) )+ )? ) ;
    public final EObject ruleFullExpression() throws RecognitionException {
        EObject current = null;

        EObject this_ExpressionFragment_0 = null;

        EObject lv_entries_2_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:4304:2: ( (this_ExpressionFragment_0= ruleExpressionFragment ( () ( (lv_entries_2_0= ruleExpressionFragmentSecond ) )+ )? ) )
            // InternalSQLParser.g:4305:2: (this_ExpressionFragment_0= ruleExpressionFragment ( () ( (lv_entries_2_0= ruleExpressionFragmentSecond ) )+ )? )
            {
            // InternalSQLParser.g:4305:2: (this_ExpressionFragment_0= ruleExpressionFragment ( () ( (lv_entries_2_0= ruleExpressionFragmentSecond ) )+ )? )
            // InternalSQLParser.g:4306:3: this_ExpressionFragment_0= ruleExpressionFragment ( () ( (lv_entries_2_0= ruleExpressionFragmentSecond ) )+ )?
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getFullExpressionAccess().getExpressionFragmentParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_75);
            this_ExpressionFragment_0=ruleExpressionFragment();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ExpressionFragment_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:4317:3: ( () ( (lv_entries_2_0= ruleExpressionFragmentSecond ) )+ )?
            int alt88=2;
            alt88 = dfa88.predict(input);
            switch (alt88) {
                case 1 :
                    // InternalSQLParser.g:4318:4: () ( (lv_entries_2_0= ruleExpressionFragmentSecond ) )+
                    {
                    // InternalSQLParser.g:4318:4: ()
                    // InternalSQLParser.g:4319:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getFullExpressionAccess().getOrExprEntriesAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalSQLParser.g:4328:4: ( (lv_entries_2_0= ruleExpressionFragmentSecond ) )+
                    int cnt87=0;
                    loop87:
                    do {
                        int alt87=2;
                        alt87 = dfa87.predict(input);
                        switch (alt87) {
                    	case 1 :
                    	    // InternalSQLParser.g:4329:5: (lv_entries_2_0= ruleExpressionFragmentSecond )
                    	    {
                    	    // InternalSQLParser.g:4329:5: (lv_entries_2_0= ruleExpressionFragmentSecond )
                    	    // InternalSQLParser.g:4330:6: lv_entries_2_0= ruleExpressionFragmentSecond
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      						newCompositeNode(grammarAccess.getFullExpressionAccess().getEntriesExpressionFragmentSecondParserRuleCall_1_1_0());
                    	      					
                    	    }
                    	    pushFollow(FOLLOW_75);
                    	    lv_entries_2_0=ruleExpressionFragmentSecond();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						if (current==null) {
                    	      							current = createModelElementForParent(grammarAccess.getFullExpressionRule());
                    	      						}
                    	      						add(
                    	      							current,
                    	      							"entries",
                    	      							lv_entries_2_0,
                    	      							"org.xtext.example.mydsl_sql.SQL.ExpressionFragmentSecond");
                    	      						afterParserOrEnumRuleCall();
                    	      					
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt87 >= 1 ) break loop87;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(87, input);
                                throw eee;
                        }
                        cnt87++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFullExpression"


    // $ANTLR start "entryRuleExpressionFragmentSecond"
    // InternalSQLParser.g:4352:1: entryRuleExpressionFragmentSecond returns [EObject current=null] : iv_ruleExpressionFragmentSecond= ruleExpressionFragmentSecond EOF ;
    public final EObject entryRuleExpressionFragmentSecond() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExpressionFragmentSecond = null;


        try {
            // InternalSQLParser.g:4352:65: (iv_ruleExpressionFragmentSecond= ruleExpressionFragmentSecond EOF )
            // InternalSQLParser.g:4353:2: iv_ruleExpressionFragmentSecond= ruleExpressionFragmentSecond EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExpressionFragmentSecondRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExpressionFragmentSecond=ruleExpressionFragmentSecond();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExpressionFragmentSecond; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleExpressionFragmentSecond"


    // $ANTLR start "ruleExpressionFragmentSecond"
    // InternalSQLParser.g:4359:1: ruleExpressionFragmentSecond returns [EObject current=null] : ( ( ( ( (lv_c_0_1= AND | lv_c_0_2= OR ) ) ) ( (lv_efrag_1_0= ruleExpressionFragment ) ) ) | ( (lv_notPrm_2_0= RULE_JRNPARAM ) ) ) ;
    public final EObject ruleExpressionFragmentSecond() throws RecognitionException {
        EObject current = null;

        Token lv_c_0_1=null;
        Token lv_c_0_2=null;
        Token lv_notPrm_2_0=null;
        EObject lv_efrag_1_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:4365:2: ( ( ( ( ( (lv_c_0_1= AND | lv_c_0_2= OR ) ) ) ( (lv_efrag_1_0= ruleExpressionFragment ) ) ) | ( (lv_notPrm_2_0= RULE_JRNPARAM ) ) ) )
            // InternalSQLParser.g:4366:2: ( ( ( ( (lv_c_0_1= AND | lv_c_0_2= OR ) ) ) ( (lv_efrag_1_0= ruleExpressionFragment ) ) ) | ( (lv_notPrm_2_0= RULE_JRNPARAM ) ) )
            {
            // InternalSQLParser.g:4366:2: ( ( ( ( (lv_c_0_1= AND | lv_c_0_2= OR ) ) ) ( (lv_efrag_1_0= ruleExpressionFragment ) ) ) | ( (lv_notPrm_2_0= RULE_JRNPARAM ) ) )
            int alt90=2;
            int LA90_0 = input.LA(1);

            if ( (LA90_0==AND||LA90_0==OR) ) {
                alt90=1;
            }
            else if ( (LA90_0==RULE_JRNPARAM) ) {
                alt90=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 90, 0, input);

                throw nvae;
            }
            switch (alt90) {
                case 1 :
                    // InternalSQLParser.g:4367:3: ( ( ( (lv_c_0_1= AND | lv_c_0_2= OR ) ) ) ( (lv_efrag_1_0= ruleExpressionFragment ) ) )
                    {
                    // InternalSQLParser.g:4367:3: ( ( ( (lv_c_0_1= AND | lv_c_0_2= OR ) ) ) ( (lv_efrag_1_0= ruleExpressionFragment ) ) )
                    // InternalSQLParser.g:4368:4: ( ( (lv_c_0_1= AND | lv_c_0_2= OR ) ) ) ( (lv_efrag_1_0= ruleExpressionFragment ) )
                    {
                    // InternalSQLParser.g:4368:4: ( ( (lv_c_0_1= AND | lv_c_0_2= OR ) ) )
                    // InternalSQLParser.g:4369:5: ( (lv_c_0_1= AND | lv_c_0_2= OR ) )
                    {
                    // InternalSQLParser.g:4369:5: ( (lv_c_0_1= AND | lv_c_0_2= OR ) )
                    // InternalSQLParser.g:4370:6: (lv_c_0_1= AND | lv_c_0_2= OR )
                    {
                    // InternalSQLParser.g:4370:6: (lv_c_0_1= AND | lv_c_0_2= OR )
                    int alt89=2;
                    int LA89_0 = input.LA(1);

                    if ( (LA89_0==AND) ) {
                        alt89=1;
                    }
                    else if ( (LA89_0==OR) ) {
                        alt89=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 89, 0, input);

                        throw nvae;
                    }
                    switch (alt89) {
                        case 1 :
                            // InternalSQLParser.g:4371:7: lv_c_0_1= AND
                            {
                            lv_c_0_1=(Token)match(input,AND,FOLLOW_43); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(lv_c_0_1, grammarAccess.getExpressionFragmentSecondAccess().getCANDKeyword_0_0_0_0());
                              						
                            }
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getExpressionFragmentSecondRule());
                              							}
                              							setWithLastConsumed(current, "c", lv_c_0_1, null);
                              						
                            }

                            }
                            break;
                        case 2 :
                            // InternalSQLParser.g:4382:7: lv_c_0_2= OR
                            {
                            lv_c_0_2=(Token)match(input,OR,FOLLOW_43); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(lv_c_0_2, grammarAccess.getExpressionFragmentSecondAccess().getCORKeyword_0_0_0_1());
                              						
                            }
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getExpressionFragmentSecondRule());
                              							}
                              							setWithLastConsumed(current, "c", lv_c_0_2, null);
                              						
                            }

                            }
                            break;

                    }


                    }


                    }

                    // InternalSQLParser.g:4395:4: ( (lv_efrag_1_0= ruleExpressionFragment ) )
                    // InternalSQLParser.g:4396:5: (lv_efrag_1_0= ruleExpressionFragment )
                    {
                    // InternalSQLParser.g:4396:5: (lv_efrag_1_0= ruleExpressionFragment )
                    // InternalSQLParser.g:4397:6: lv_efrag_1_0= ruleExpressionFragment
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getExpressionFragmentSecondAccess().getEfragExpressionFragmentParserRuleCall_0_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_efrag_1_0=ruleExpressionFragment();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExpressionFragmentSecondRule());
                      						}
                      						set(
                      							current,
                      							"efrag",
                      							lv_efrag_1_0,
                      							"org.xtext.example.mydsl_sql.SQL.ExpressionFragment");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:4416:3: ( (lv_notPrm_2_0= RULE_JRNPARAM ) )
                    {
                    // InternalSQLParser.g:4416:3: ( (lv_notPrm_2_0= RULE_JRNPARAM ) )
                    // InternalSQLParser.g:4417:4: (lv_notPrm_2_0= RULE_JRNPARAM )
                    {
                    // InternalSQLParser.g:4417:4: (lv_notPrm_2_0= RULE_JRNPARAM )
                    // InternalSQLParser.g:4418:5: lv_notPrm_2_0= RULE_JRNPARAM
                    {
                    lv_notPrm_2_0=(Token)match(input,RULE_JRNPARAM,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_notPrm_2_0, grammarAccess.getExpressionFragmentSecondAccess().getNotPrmJRNPARAMTerminalRuleCall_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getExpressionFragmentSecondRule());
                      					}
                      					setWithLastConsumed(
                      						current,
                      						"notPrm",
                      						lv_notPrm_2_0,
                      						"org.xtext.example.mydsl_sql.SQL.JRNPARAM");
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleExpressionFragmentSecond"


    // $ANTLR start "entryRuleExpressionFragment"
    // InternalSQLParser.g:4438:1: entryRuleExpressionFragment returns [EObject current=null] : iv_ruleExpressionFragment= ruleExpressionFragment EOF ;
    public final EObject entryRuleExpressionFragment() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExpressionFragment = null;


        try {
            // InternalSQLParser.g:4438:59: (iv_ruleExpressionFragment= ruleExpressionFragment EOF )
            // InternalSQLParser.g:4439:2: iv_ruleExpressionFragment= ruleExpressionFragment EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExpressionFragmentRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExpressionFragment=ruleExpressionFragment();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExpressionFragment; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleExpressionFragment"


    // $ANTLR start "ruleExpressionFragment"
    // InternalSQLParser.g:4445:1: ruleExpressionFragment returns [EObject current=null] : ( ( (lv_expgroup_0_0= ruleExpressionGroup ) ) | ( (lv_exp_1_0= ruleExpression ) ) | ( ( (lv_xexp_2_1= ruleXExpression | lv_xexp_2_2= ruleXExpression_ ) ) ) | ( (lv_notPrm_3_0= RULE_JRNPARAM ) ) | ( (lv_in_4_0= ruleInOperator ) ) | ( (lv_exists_5_0= ruleExistsOperator ) ) ) ;
    public final EObject ruleExpressionFragment() throws RecognitionException {
        EObject current = null;

        Token lv_notPrm_3_0=null;
        EObject lv_expgroup_0_0 = null;

        EObject lv_exp_1_0 = null;

        EObject lv_xexp_2_1 = null;

        EObject lv_xexp_2_2 = null;

        EObject lv_in_4_0 = null;

        EObject lv_exists_5_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:4451:2: ( ( ( (lv_expgroup_0_0= ruleExpressionGroup ) ) | ( (lv_exp_1_0= ruleExpression ) ) | ( ( (lv_xexp_2_1= ruleXExpression | lv_xexp_2_2= ruleXExpression_ ) ) ) | ( (lv_notPrm_3_0= RULE_JRNPARAM ) ) | ( (lv_in_4_0= ruleInOperator ) ) | ( (lv_exists_5_0= ruleExistsOperator ) ) ) )
            // InternalSQLParser.g:4452:2: ( ( (lv_expgroup_0_0= ruleExpressionGroup ) ) | ( (lv_exp_1_0= ruleExpression ) ) | ( ( (lv_xexp_2_1= ruleXExpression | lv_xexp_2_2= ruleXExpression_ ) ) ) | ( (lv_notPrm_3_0= RULE_JRNPARAM ) ) | ( (lv_in_4_0= ruleInOperator ) ) | ( (lv_exists_5_0= ruleExistsOperator ) ) )
            {
            // InternalSQLParser.g:4452:2: ( ( (lv_expgroup_0_0= ruleExpressionGroup ) ) | ( (lv_exp_1_0= ruleExpression ) ) | ( ( (lv_xexp_2_1= ruleXExpression | lv_xexp_2_2= ruleXExpression_ ) ) ) | ( (lv_notPrm_3_0= RULE_JRNPARAM ) ) | ( (lv_in_4_0= ruleInOperator ) ) | ( (lv_exists_5_0= ruleExistsOperator ) ) )
            int alt92=6;
            alt92 = dfa92.predict(input);
            switch (alt92) {
                case 1 :
                    // InternalSQLParser.g:4453:3: ( (lv_expgroup_0_0= ruleExpressionGroup ) )
                    {
                    // InternalSQLParser.g:4453:3: ( (lv_expgroup_0_0= ruleExpressionGroup ) )
                    // InternalSQLParser.g:4454:4: (lv_expgroup_0_0= ruleExpressionGroup )
                    {
                    // InternalSQLParser.g:4454:4: (lv_expgroup_0_0= ruleExpressionGroup )
                    // InternalSQLParser.g:4455:5: lv_expgroup_0_0= ruleExpressionGroup
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getExpressionFragmentAccess().getExpgroupExpressionGroupParserRuleCall_0_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_expgroup_0_0=ruleExpressionGroup();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getExpressionFragmentRule());
                      					}
                      					set(
                      						current,
                      						"expgroup",
                      						lv_expgroup_0_0,
                      						"org.xtext.example.mydsl_sql.SQL.ExpressionGroup");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:4473:3: ( (lv_exp_1_0= ruleExpression ) )
                    {
                    // InternalSQLParser.g:4473:3: ( (lv_exp_1_0= ruleExpression ) )
                    // InternalSQLParser.g:4474:4: (lv_exp_1_0= ruleExpression )
                    {
                    // InternalSQLParser.g:4474:4: (lv_exp_1_0= ruleExpression )
                    // InternalSQLParser.g:4475:5: lv_exp_1_0= ruleExpression
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getExpressionFragmentAccess().getExpExpressionParserRuleCall_1_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_exp_1_0=ruleExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getExpressionFragmentRule());
                      					}
                      					set(
                      						current,
                      						"exp",
                      						lv_exp_1_0,
                      						"org.xtext.example.mydsl_sql.SQL.Expression");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:4493:3: ( ( (lv_xexp_2_1= ruleXExpression | lv_xexp_2_2= ruleXExpression_ ) ) )
                    {
                    // InternalSQLParser.g:4493:3: ( ( (lv_xexp_2_1= ruleXExpression | lv_xexp_2_2= ruleXExpression_ ) ) )
                    // InternalSQLParser.g:4494:4: ( (lv_xexp_2_1= ruleXExpression | lv_xexp_2_2= ruleXExpression_ ) )
                    {
                    // InternalSQLParser.g:4494:4: ( (lv_xexp_2_1= ruleXExpression | lv_xexp_2_2= ruleXExpression_ ) )
                    // InternalSQLParser.g:4495:5: (lv_xexp_2_1= ruleXExpression | lv_xexp_2_2= ruleXExpression_ )
                    {
                    // InternalSQLParser.g:4495:5: (lv_xexp_2_1= ruleXExpression | lv_xexp_2_2= ruleXExpression_ )
                    int alt91=2;
                    alt91 = dfa91.predict(input);
                    switch (alt91) {
                        case 1 :
                            // InternalSQLParser.g:4496:6: lv_xexp_2_1= ruleXExpression
                            {
                            if ( state.backtracking==0 ) {

                              						newCompositeNode(grammarAccess.getExpressionFragmentAccess().getXexpXExpressionParserRuleCall_2_0_0());
                              					
                            }
                            pushFollow(FOLLOW_2);
                            lv_xexp_2_1=ruleXExpression();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElementForParent(grammarAccess.getExpressionFragmentRule());
                              						}
                              						set(
                              							current,
                              							"xexp",
                              							lv_xexp_2_1,
                              							"org.xtext.example.mydsl_sql.SQL.XExpression");
                              						afterParserOrEnumRuleCall();
                              					
                            }

                            }
                            break;
                        case 2 :
                            // InternalSQLParser.g:4512:6: lv_xexp_2_2= ruleXExpression_
                            {
                            if ( state.backtracking==0 ) {

                              						newCompositeNode(grammarAccess.getExpressionFragmentAccess().getXexpXExpression_ParserRuleCall_2_0_1());
                              					
                            }
                            pushFollow(FOLLOW_2);
                            lv_xexp_2_2=ruleXExpression_();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElementForParent(grammarAccess.getExpressionFragmentRule());
                              						}
                              						set(
                              							current,
                              							"xexp",
                              							lv_xexp_2_2,
                              							"org.xtext.example.mydsl_sql.SQL.XExpression_");
                              						afterParserOrEnumRuleCall();
                              					
                            }

                            }
                            break;

                    }


                    }


                    }


                    }
                    break;
                case 4 :
                    // InternalSQLParser.g:4531:3: ( (lv_notPrm_3_0= RULE_JRNPARAM ) )
                    {
                    // InternalSQLParser.g:4531:3: ( (lv_notPrm_3_0= RULE_JRNPARAM ) )
                    // InternalSQLParser.g:4532:4: (lv_notPrm_3_0= RULE_JRNPARAM )
                    {
                    // InternalSQLParser.g:4532:4: (lv_notPrm_3_0= RULE_JRNPARAM )
                    // InternalSQLParser.g:4533:5: lv_notPrm_3_0= RULE_JRNPARAM
                    {
                    lv_notPrm_3_0=(Token)match(input,RULE_JRNPARAM,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_notPrm_3_0, grammarAccess.getExpressionFragmentAccess().getNotPrmJRNPARAMTerminalRuleCall_3_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getExpressionFragmentRule());
                      					}
                      					setWithLastConsumed(
                      						current,
                      						"notPrm",
                      						lv_notPrm_3_0,
                      						"org.xtext.example.mydsl_sql.SQL.JRNPARAM");
                      				
                    }

                    }


                    }


                    }
                    break;
                case 5 :
                    // InternalSQLParser.g:4550:3: ( (lv_in_4_0= ruleInOperator ) )
                    {
                    // InternalSQLParser.g:4550:3: ( (lv_in_4_0= ruleInOperator ) )
                    // InternalSQLParser.g:4551:4: (lv_in_4_0= ruleInOperator )
                    {
                    // InternalSQLParser.g:4551:4: (lv_in_4_0= ruleInOperator )
                    // InternalSQLParser.g:4552:5: lv_in_4_0= ruleInOperator
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getExpressionFragmentAccess().getInInOperatorParserRuleCall_4_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_in_4_0=ruleInOperator();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getExpressionFragmentRule());
                      					}
                      					set(
                      						current,
                      						"in",
                      						lv_in_4_0,
                      						"org.xtext.example.mydsl_sql.SQL.InOperator");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 6 :
                    // InternalSQLParser.g:4570:3: ( (lv_exists_5_0= ruleExistsOperator ) )
                    {
                    // InternalSQLParser.g:4570:3: ( (lv_exists_5_0= ruleExistsOperator ) )
                    // InternalSQLParser.g:4571:4: (lv_exists_5_0= ruleExistsOperator )
                    {
                    // InternalSQLParser.g:4571:4: (lv_exists_5_0= ruleExistsOperator )
                    // InternalSQLParser.g:4572:5: lv_exists_5_0= ruleExistsOperator
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getExpressionFragmentAccess().getExistsExistsOperatorParserRuleCall_5_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_exists_5_0=ruleExistsOperator();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getExpressionFragmentRule());
                      					}
                      					set(
                      						current,
                      						"exists",
                      						lv_exists_5_0,
                      						"org.xtext.example.mydsl_sql.SQL.ExistsOperator");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleExpressionFragment"


    // $ANTLR start "entryRuleExpressionGroup"
    // InternalSQLParser.g:4593:1: entryRuleExpressionGroup returns [EObject current=null] : iv_ruleExpressionGroup= ruleExpressionGroup EOF ;
    public final EObject entryRuleExpressionGroup() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExpressionGroup = null;


        try {
            // InternalSQLParser.g:4593:56: (iv_ruleExpressionGroup= ruleExpressionGroup EOF )
            // InternalSQLParser.g:4594:2: iv_ruleExpressionGroup= ruleExpressionGroup EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExpressionGroupRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExpressionGroup=ruleExpressionGroup();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExpressionGroup; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleExpressionGroup"


    // $ANTLR start "ruleExpressionGroup"
    // InternalSQLParser.g:4600:1: ruleExpressionGroup returns [EObject current=null] : ( () ( ( (lv_isnot_1_1= NOT | lv_isnot_1_2= NOT_1 ) ) )? otherlv_2= LeftParenthesis ( (lv_expr_3_0= ruleFullExpression ) ) otherlv_4= RightParenthesis ) ;
    public final EObject ruleExpressionGroup() throws RecognitionException {
        EObject current = null;

        Token lv_isnot_1_1=null;
        Token lv_isnot_1_2=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject lv_expr_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:4606:2: ( ( () ( ( (lv_isnot_1_1= NOT | lv_isnot_1_2= NOT_1 ) ) )? otherlv_2= LeftParenthesis ( (lv_expr_3_0= ruleFullExpression ) ) otherlv_4= RightParenthesis ) )
            // InternalSQLParser.g:4607:2: ( () ( ( (lv_isnot_1_1= NOT | lv_isnot_1_2= NOT_1 ) ) )? otherlv_2= LeftParenthesis ( (lv_expr_3_0= ruleFullExpression ) ) otherlv_4= RightParenthesis )
            {
            // InternalSQLParser.g:4607:2: ( () ( ( (lv_isnot_1_1= NOT | lv_isnot_1_2= NOT_1 ) ) )? otherlv_2= LeftParenthesis ( (lv_expr_3_0= ruleFullExpression ) ) otherlv_4= RightParenthesis )
            // InternalSQLParser.g:4608:3: () ( ( (lv_isnot_1_1= NOT | lv_isnot_1_2= NOT_1 ) ) )? otherlv_2= LeftParenthesis ( (lv_expr_3_0= ruleFullExpression ) ) otherlv_4= RightParenthesis
            {
            // InternalSQLParser.g:4608:3: ()
            // InternalSQLParser.g:4609:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getExpressionGroupAccess().getExprGroupAction_0(),
              					current);
              			
            }

            }

            // InternalSQLParser.g:4618:3: ( ( (lv_isnot_1_1= NOT | lv_isnot_1_2= NOT_1 ) ) )?
            int alt94=2;
            int LA94_0 = input.LA(1);

            if ( (LA94_0==NOT_1||LA94_0==NOT) ) {
                alt94=1;
            }
            switch (alt94) {
                case 1 :
                    // InternalSQLParser.g:4619:4: ( (lv_isnot_1_1= NOT | lv_isnot_1_2= NOT_1 ) )
                    {
                    // InternalSQLParser.g:4619:4: ( (lv_isnot_1_1= NOT | lv_isnot_1_2= NOT_1 ) )
                    // InternalSQLParser.g:4620:5: (lv_isnot_1_1= NOT | lv_isnot_1_2= NOT_1 )
                    {
                    // InternalSQLParser.g:4620:5: (lv_isnot_1_1= NOT | lv_isnot_1_2= NOT_1 )
                    int alt93=2;
                    int LA93_0 = input.LA(1);

                    if ( (LA93_0==NOT) ) {
                        alt93=1;
                    }
                    else if ( (LA93_0==NOT_1) ) {
                        alt93=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 93, 0, input);

                        throw nvae;
                    }
                    switch (alt93) {
                        case 1 :
                            // InternalSQLParser.g:4621:6: lv_isnot_1_1= NOT
                            {
                            lv_isnot_1_1=(Token)match(input,NOT,FOLLOW_11); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(lv_isnot_1_1, grammarAccess.getExpressionGroupAccess().getIsnotNOTKeyword_1_0_0());
                              					
                            }
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getExpressionGroupRule());
                              						}
                              						setWithLastConsumed(current, "isnot", lv_isnot_1_1, null);
                              					
                            }

                            }
                            break;
                        case 2 :
                            // InternalSQLParser.g:4632:6: lv_isnot_1_2= NOT_1
                            {
                            lv_isnot_1_2=(Token)match(input,NOT_1,FOLLOW_11); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(lv_isnot_1_2, grammarAccess.getExpressionGroupAccess().getIsnotNOTKeyword_1_0_1());
                              					
                            }
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getExpressionGroupRule());
                              						}
                              						setWithLastConsumed(current, "isnot", lv_isnot_1_2, null);
                              					
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;

            }

            otherlv_2=(Token)match(input,LeftParenthesis,FOLLOW_43); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getExpressionGroupAccess().getLeftParenthesisKeyword_2());
              		
            }
            // InternalSQLParser.g:4649:3: ( (lv_expr_3_0= ruleFullExpression ) )
            // InternalSQLParser.g:4650:4: (lv_expr_3_0= ruleFullExpression )
            {
            // InternalSQLParser.g:4650:4: (lv_expr_3_0= ruleFullExpression )
            // InternalSQLParser.g:4651:5: lv_expr_3_0= ruleFullExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getExpressionGroupAccess().getExprFullExpressionParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_13);
            lv_expr_3_0=ruleFullExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getExpressionGroupRule());
              					}
              					set(
              						current,
              						"expr",
              						lv_expr_3_0,
              						"org.xtext.example.mydsl_sql.SQL.FullExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_4=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getExpressionGroupAccess().getRightParenthesisKeyword_4());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleExpressionGroup"


    // $ANTLR start "entryRuleXExpression"
    // InternalSQLParser.g:4676:1: entryRuleXExpression returns [EObject current=null] : iv_ruleXExpression= ruleXExpression EOF ;
    public final EObject entryRuleXExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleXExpression = null;


        try {
            // InternalSQLParser.g:4676:52: (iv_ruleXExpression= ruleXExpression EOF )
            // InternalSQLParser.g:4677:2: iv_ruleXExpression= ruleXExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getXExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleXExpression=ruleXExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleXExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleXExpression"


    // $ANTLR start "ruleXExpression"
    // InternalSQLParser.g:4683:1: ruleXExpression returns [EObject current=null] : (otherlv_0= X () ( (lv_xf_2_0= ruleXFunction ) ) otherlv_3= Comma ( (lv_col_4_0= ruleOperandGroup ) ) (otherlv_5= Comma ( (lv_prm_6_0= ruleXExpressionParams ) ) )? otherlv_7= RightCurlyBracket ) ;
    public final EObject ruleXExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Token otherlv_7=null;
        Enumerator lv_xf_2_0 = null;

        EObject lv_col_4_0 = null;

        EObject lv_prm_6_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:4689:2: ( (otherlv_0= X () ( (lv_xf_2_0= ruleXFunction ) ) otherlv_3= Comma ( (lv_col_4_0= ruleOperandGroup ) ) (otherlv_5= Comma ( (lv_prm_6_0= ruleXExpressionParams ) ) )? otherlv_7= RightCurlyBracket ) )
            // InternalSQLParser.g:4690:2: (otherlv_0= X () ( (lv_xf_2_0= ruleXFunction ) ) otherlv_3= Comma ( (lv_col_4_0= ruleOperandGroup ) ) (otherlv_5= Comma ( (lv_prm_6_0= ruleXExpressionParams ) ) )? otherlv_7= RightCurlyBracket )
            {
            // InternalSQLParser.g:4690:2: (otherlv_0= X () ( (lv_xf_2_0= ruleXFunction ) ) otherlv_3= Comma ( (lv_col_4_0= ruleOperandGroup ) ) (otherlv_5= Comma ( (lv_prm_6_0= ruleXExpressionParams ) ) )? otherlv_7= RightCurlyBracket )
            // InternalSQLParser.g:4691:3: otherlv_0= X () ( (lv_xf_2_0= ruleXFunction ) ) otherlv_3= Comma ( (lv_col_4_0= ruleOperandGroup ) ) (otherlv_5= Comma ( (lv_prm_6_0= ruleXExpressionParams ) ) )? otherlv_7= RightCurlyBracket
            {
            otherlv_0=(Token)match(input,X,FOLLOW_76); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getXExpressionAccess().getXKeyword_0());
              		
            }
            // InternalSQLParser.g:4695:3: ()
            // InternalSQLParser.g:4696:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getXExpressionAccess().getXExprAction_1(),
              					current);
              			
            }

            }

            // InternalSQLParser.g:4705:3: ( (lv_xf_2_0= ruleXFunction ) )
            // InternalSQLParser.g:4706:4: (lv_xf_2_0= ruleXFunction )
            {
            // InternalSQLParser.g:4706:4: (lv_xf_2_0= ruleXFunction )
            // InternalSQLParser.g:4707:5: lv_xf_2_0= ruleXFunction
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getXExpressionAccess().getXfXFunctionEnumRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_77);
            lv_xf_2_0=ruleXFunction();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getXExpressionRule());
              					}
              					set(
              						current,
              						"xf",
              						lv_xf_2_0,
              						"org.xtext.example.mydsl_sql.SQL.XFunction");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,Comma,FOLLOW_78); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getXExpressionAccess().getCommaKeyword_3());
              		
            }
            // InternalSQLParser.g:4728:3: ( (lv_col_4_0= ruleOperandGroup ) )
            // InternalSQLParser.g:4729:4: (lv_col_4_0= ruleOperandGroup )
            {
            // InternalSQLParser.g:4729:4: (lv_col_4_0= ruleOperandGroup )
            // InternalSQLParser.g:4730:5: lv_col_4_0= ruleOperandGroup
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getXExpressionAccess().getColOperandGroupParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_79);
            lv_col_4_0=ruleOperandGroup();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getXExpressionRule());
              					}
              					set(
              						current,
              						"col",
              						lv_col_4_0,
              						"org.xtext.example.mydsl_sql.SQL.OperandGroup");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:4747:3: (otherlv_5= Comma ( (lv_prm_6_0= ruleXExpressionParams ) ) )?
            int alt95=2;
            int LA95_0 = input.LA(1);

            if ( (LA95_0==Comma) ) {
                alt95=1;
            }
            switch (alt95) {
                case 1 :
                    // InternalSQLParser.g:4748:4: otherlv_5= Comma ( (lv_prm_6_0= ruleXExpressionParams ) )
                    {
                    otherlv_5=(Token)match(input,Comma,FOLLOW_21); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_5, grammarAccess.getXExpressionAccess().getCommaKeyword_5_0());
                      			
                    }
                    // InternalSQLParser.g:4752:4: ( (lv_prm_6_0= ruleXExpressionParams ) )
                    // InternalSQLParser.g:4753:5: (lv_prm_6_0= ruleXExpressionParams )
                    {
                    // InternalSQLParser.g:4753:5: (lv_prm_6_0= ruleXExpressionParams )
                    // InternalSQLParser.g:4754:6: lv_prm_6_0= ruleXExpressionParams
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getXExpressionAccess().getPrmXExpressionParamsParserRuleCall_5_1_0());
                      					
                    }
                    pushFollow(FOLLOW_80);
                    lv_prm_6_0=ruleXExpressionParams();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getXExpressionRule());
                      						}
                      						set(
                      							current,
                      							"prm",
                      							lv_prm_6_0,
                      							"org.xtext.example.mydsl_sql.SQL.XExpressionParams");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            otherlv_7=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_7, grammarAccess.getXExpressionAccess().getRightCurlyBracketKeyword_6());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleXExpression"


    // $ANTLR start "entryRuleXExpression_"
    // InternalSQLParser.g:4780:1: entryRuleXExpression_ returns [EObject current=null] : iv_ruleXExpression_= ruleXExpression_ EOF ;
    public final EObject entryRuleXExpression_() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleXExpression_ = null;


        try {
            // InternalSQLParser.g:4780:53: (iv_ruleXExpression_= ruleXExpression_ EOF )
            // InternalSQLParser.g:4781:2: iv_ruleXExpression_= ruleXExpression_ EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getXExpression_Rule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleXExpression_=ruleXExpression_();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleXExpression_; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleXExpression_"


    // $ANTLR start "ruleXExpression_"
    // InternalSQLParser.g:4787:1: ruleXExpression_ returns [EObject current=null] : (otherlv_0= X () ( (lv_xf_2_0= ruleXFunction ) ) otherlv_3= VerticalLine ( (lv_col_4_0= ruleOperandGroup ) ) (otherlv_5= VerticalLine ( (lv_prm_6_0= ruleXExpressionParams ) ) )? otherlv_7= RightCurlyBracket ) ;
    public final EObject ruleXExpression_() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Token otherlv_7=null;
        Enumerator lv_xf_2_0 = null;

        EObject lv_col_4_0 = null;

        EObject lv_prm_6_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:4793:2: ( (otherlv_0= X () ( (lv_xf_2_0= ruleXFunction ) ) otherlv_3= VerticalLine ( (lv_col_4_0= ruleOperandGroup ) ) (otherlv_5= VerticalLine ( (lv_prm_6_0= ruleXExpressionParams ) ) )? otherlv_7= RightCurlyBracket ) )
            // InternalSQLParser.g:4794:2: (otherlv_0= X () ( (lv_xf_2_0= ruleXFunction ) ) otherlv_3= VerticalLine ( (lv_col_4_0= ruleOperandGroup ) ) (otherlv_5= VerticalLine ( (lv_prm_6_0= ruleXExpressionParams ) ) )? otherlv_7= RightCurlyBracket )
            {
            // InternalSQLParser.g:4794:2: (otherlv_0= X () ( (lv_xf_2_0= ruleXFunction ) ) otherlv_3= VerticalLine ( (lv_col_4_0= ruleOperandGroup ) ) (otherlv_5= VerticalLine ( (lv_prm_6_0= ruleXExpressionParams ) ) )? otherlv_7= RightCurlyBracket )
            // InternalSQLParser.g:4795:3: otherlv_0= X () ( (lv_xf_2_0= ruleXFunction ) ) otherlv_3= VerticalLine ( (lv_col_4_0= ruleOperandGroup ) ) (otherlv_5= VerticalLine ( (lv_prm_6_0= ruleXExpressionParams ) ) )? otherlv_7= RightCurlyBracket
            {
            otherlv_0=(Token)match(input,X,FOLLOW_76); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getXExpression_Access().getXKeyword_0());
              		
            }
            // InternalSQLParser.g:4799:3: ()
            // InternalSQLParser.g:4800:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getXExpression_Access().getXExprAction_1(),
              					current);
              			
            }

            }

            // InternalSQLParser.g:4809:3: ( (lv_xf_2_0= ruleXFunction ) )
            // InternalSQLParser.g:4810:4: (lv_xf_2_0= ruleXFunction )
            {
            // InternalSQLParser.g:4810:4: (lv_xf_2_0= ruleXFunction )
            // InternalSQLParser.g:4811:5: lv_xf_2_0= ruleXFunction
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getXExpression_Access().getXfXFunctionEnumRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_81);
            lv_xf_2_0=ruleXFunction();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getXExpression_Rule());
              					}
              					set(
              						current,
              						"xf",
              						lv_xf_2_0,
              						"org.xtext.example.mydsl_sql.SQL.XFunction");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,VerticalLine,FOLLOW_78); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getXExpression_Access().getVerticalLineKeyword_3());
              		
            }
            // InternalSQLParser.g:4832:3: ( (lv_col_4_0= ruleOperandGroup ) )
            // InternalSQLParser.g:4833:4: (lv_col_4_0= ruleOperandGroup )
            {
            // InternalSQLParser.g:4833:4: (lv_col_4_0= ruleOperandGroup )
            // InternalSQLParser.g:4834:5: lv_col_4_0= ruleOperandGroup
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getXExpression_Access().getColOperandGroupParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_82);
            lv_col_4_0=ruleOperandGroup();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getXExpression_Rule());
              					}
              					set(
              						current,
              						"col",
              						lv_col_4_0,
              						"org.xtext.example.mydsl_sql.SQL.OperandGroup");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:4851:3: (otherlv_5= VerticalLine ( (lv_prm_6_0= ruleXExpressionParams ) ) )?
            int alt96=2;
            int LA96_0 = input.LA(1);

            if ( (LA96_0==VerticalLine) ) {
                alt96=1;
            }
            switch (alt96) {
                case 1 :
                    // InternalSQLParser.g:4852:4: otherlv_5= VerticalLine ( (lv_prm_6_0= ruleXExpressionParams ) )
                    {
                    otherlv_5=(Token)match(input,VerticalLine,FOLLOW_21); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_5, grammarAccess.getXExpression_Access().getVerticalLineKeyword_5_0());
                      			
                    }
                    // InternalSQLParser.g:4856:4: ( (lv_prm_6_0= ruleXExpressionParams ) )
                    // InternalSQLParser.g:4857:5: (lv_prm_6_0= ruleXExpressionParams )
                    {
                    // InternalSQLParser.g:4857:5: (lv_prm_6_0= ruleXExpressionParams )
                    // InternalSQLParser.g:4858:6: lv_prm_6_0= ruleXExpressionParams
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getXExpression_Access().getPrmXExpressionParamsParserRuleCall_5_1_0());
                      					
                    }
                    pushFollow(FOLLOW_80);
                    lv_prm_6_0=ruleXExpressionParams();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getXExpression_Rule());
                      						}
                      						set(
                      							current,
                      							"prm",
                      							lv_prm_6_0,
                      							"org.xtext.example.mydsl_sql.SQL.XExpressionParams");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            otherlv_7=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_7, grammarAccess.getXExpression_Access().getRightCurlyBracketKeyword_6());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleXExpression_"


    // $ANTLR start "entryRuleXExpressionParams"
    // InternalSQLParser.g:4884:1: entryRuleXExpressionParams returns [EObject current=null] : iv_ruleXExpressionParams= ruleXExpressionParams EOF ;
    public final EObject entryRuleXExpressionParams() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleXExpressionParams = null;


        try {
            // InternalSQLParser.g:4884:58: (iv_ruleXExpressionParams= ruleXExpressionParams EOF )
            // InternalSQLParser.g:4885:2: iv_ruleXExpressionParams= ruleXExpressionParams EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getXExpressionParamsRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleXExpressionParams=ruleXExpressionParams();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleXExpressionParams; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleXExpressionParams"


    // $ANTLR start "ruleXExpressionParams"
    // InternalSQLParser.g:4891:1: ruleXExpressionParams returns [EObject current=null] : (this_JRParameter_0= ruleJRParameter ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleJRParameter ) ) )+ )? ) ;
    public final EObject ruleXExpressionParams() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_JRParameter_0 = null;

        EObject lv_entries_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:4897:2: ( (this_JRParameter_0= ruleJRParameter ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleJRParameter ) ) )+ )? ) )
            // InternalSQLParser.g:4898:2: (this_JRParameter_0= ruleJRParameter ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleJRParameter ) ) )+ )? )
            {
            // InternalSQLParser.g:4898:2: (this_JRParameter_0= ruleJRParameter ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleJRParameter ) ) )+ )? )
            // InternalSQLParser.g:4899:3: this_JRParameter_0= ruleJRParameter ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleJRParameter ) ) )+ )?
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getXExpressionParamsAccess().getJRParameterParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_15);
            this_JRParameter_0=ruleJRParameter();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_JRParameter_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:4910:3: ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleJRParameter ) ) )+ )?
            int alt98=2;
            int LA98_0 = input.LA(1);

            if ( (LA98_0==Comma) ) {
                alt98=1;
            }
            switch (alt98) {
                case 1 :
                    // InternalSQLParser.g:4911:4: () (otherlv_2= Comma ( (lv_entries_3_0= ruleJRParameter ) ) )+
                    {
                    // InternalSQLParser.g:4911:4: ()
                    // InternalSQLParser.g:4912:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getXExpressionParamsAccess().getPrmsEntriesAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalSQLParser.g:4921:4: (otherlv_2= Comma ( (lv_entries_3_0= ruleJRParameter ) ) )+
                    int cnt97=0;
                    loop97:
                    do {
                        int alt97=2;
                        int LA97_0 = input.LA(1);

                        if ( (LA97_0==Comma) ) {
                            alt97=1;
                        }


                        switch (alt97) {
                    	case 1 :
                    	    // InternalSQLParser.g:4922:5: otherlv_2= Comma ( (lv_entries_3_0= ruleJRParameter ) )
                    	    {
                    	    otherlv_2=(Token)match(input,Comma,FOLLOW_21); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_2, grammarAccess.getXExpressionParamsAccess().getCommaKeyword_1_1_0());
                    	      				
                    	    }
                    	    // InternalSQLParser.g:4926:5: ( (lv_entries_3_0= ruleJRParameter ) )
                    	    // InternalSQLParser.g:4927:6: (lv_entries_3_0= ruleJRParameter )
                    	    {
                    	    // InternalSQLParser.g:4927:6: (lv_entries_3_0= ruleJRParameter )
                    	    // InternalSQLParser.g:4928:7: lv_entries_3_0= ruleJRParameter
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getXExpressionParamsAccess().getEntriesJRParameterParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_15);
                    	    lv_entries_3_0=ruleJRParameter();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getXExpressionParamsRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"entries",
                    	      								lv_entries_3_0,
                    	      								"org.xtext.example.mydsl_sql.SQL.JRParameter");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt97 >= 1 ) break loop97;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(97, input);
                                throw eee;
                        }
                        cnt97++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleXExpressionParams"


    // $ANTLR start "entryRuleJRParameter"
    // InternalSQLParser.g:4951:1: entryRuleJRParameter returns [EObject current=null] : iv_ruleJRParameter= ruleJRParameter EOF ;
    public final EObject entryRuleJRParameter() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleJRParameter = null;


        try {
            // InternalSQLParser.g:4951:52: (iv_ruleJRParameter= ruleJRParameter EOF )
            // InternalSQLParser.g:4952:2: iv_ruleJRParameter= ruleJRParameter EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getJRParameterRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleJRParameter=ruleJRParameter();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleJRParameter; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleJRParameter"


    // $ANTLR start "ruleJRParameter"
    // InternalSQLParser.g:4958:1: ruleJRParameter returns [EObject current=null] : ( (lv_jrprm_0_0= RULE_ID ) ) ;
    public final EObject ruleJRParameter() throws RecognitionException {
        EObject current = null;

        Token lv_jrprm_0_0=null;


        	enterRule();

        try {
            // InternalSQLParser.g:4964:2: ( ( (lv_jrprm_0_0= RULE_ID ) ) )
            // InternalSQLParser.g:4965:2: ( (lv_jrprm_0_0= RULE_ID ) )
            {
            // InternalSQLParser.g:4965:2: ( (lv_jrprm_0_0= RULE_ID ) )
            // InternalSQLParser.g:4966:3: (lv_jrprm_0_0= RULE_ID )
            {
            // InternalSQLParser.g:4966:3: (lv_jrprm_0_0= RULE_ID )
            // InternalSQLParser.g:4967:4: lv_jrprm_0_0= RULE_ID
            {
            lv_jrprm_0_0=(Token)match(input,RULE_ID,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(lv_jrprm_0_0, grammarAccess.getJRParameterAccess().getJrprmIDTerminalRuleCall_0());
              			
            }
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getJRParameterRule());
              				}
              				setWithLastConsumed(
              					current,
              					"jrprm",
              					lv_jrprm_0_0,
              					"org.xtext.example.mydsl_sql.SQL.ID");
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleJRParameter"


    // $ANTLR start "entryRuleExpression"
    // InternalSQLParser.g:4986:1: entryRuleExpression returns [EObject current=null] : iv_ruleExpression= ruleExpression EOF ;
    public final EObject entryRuleExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExpression = null;


        try {
            // InternalSQLParser.g:4986:51: (iv_ruleExpression= ruleExpression EOF )
            // InternalSQLParser.g:4987:2: iv_ruleExpression= ruleExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExpression=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleExpression"


    // $ANTLR start "ruleExpression"
    // InternalSQLParser.g:4993:1: ruleExpression returns [EObject current=null] : ( ( (lv_op1_0_0= ruleOperand ) ) ( ( (lv_isnull_1_0= ruleIsNullValue ) ) | ( (lv_in_2_0= ruleInOperator ) ) | ( (lv_exists_3_0= ruleExistsOperator ) ) | ( (lv_between_4_0= ruleBetween ) ) | ( (lv_like_5_0= ruleLike ) ) | ( (lv_comp_6_0= ruleComparison ) ) ) ) ;
    public final EObject ruleExpression() throws RecognitionException {
        EObject current = null;

        EObject lv_op1_0_0 = null;

        AntlrDatatypeRuleToken lv_isnull_1_0 = null;

        EObject lv_in_2_0 = null;

        EObject lv_exists_3_0 = null;

        EObject lv_between_4_0 = null;

        EObject lv_like_5_0 = null;

        EObject lv_comp_6_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:4999:2: ( ( ( (lv_op1_0_0= ruleOperand ) ) ( ( (lv_isnull_1_0= ruleIsNullValue ) ) | ( (lv_in_2_0= ruleInOperator ) ) | ( (lv_exists_3_0= ruleExistsOperator ) ) | ( (lv_between_4_0= ruleBetween ) ) | ( (lv_like_5_0= ruleLike ) ) | ( (lv_comp_6_0= ruleComparison ) ) ) ) )
            // InternalSQLParser.g:5000:2: ( ( (lv_op1_0_0= ruleOperand ) ) ( ( (lv_isnull_1_0= ruleIsNullValue ) ) | ( (lv_in_2_0= ruleInOperator ) ) | ( (lv_exists_3_0= ruleExistsOperator ) ) | ( (lv_between_4_0= ruleBetween ) ) | ( (lv_like_5_0= ruleLike ) ) | ( (lv_comp_6_0= ruleComparison ) ) ) )
            {
            // InternalSQLParser.g:5000:2: ( ( (lv_op1_0_0= ruleOperand ) ) ( ( (lv_isnull_1_0= ruleIsNullValue ) ) | ( (lv_in_2_0= ruleInOperator ) ) | ( (lv_exists_3_0= ruleExistsOperator ) ) | ( (lv_between_4_0= ruleBetween ) ) | ( (lv_like_5_0= ruleLike ) ) | ( (lv_comp_6_0= ruleComparison ) ) ) )
            // InternalSQLParser.g:5001:3: ( (lv_op1_0_0= ruleOperand ) ) ( ( (lv_isnull_1_0= ruleIsNullValue ) ) | ( (lv_in_2_0= ruleInOperator ) ) | ( (lv_exists_3_0= ruleExistsOperator ) ) | ( (lv_between_4_0= ruleBetween ) ) | ( (lv_like_5_0= ruleLike ) ) | ( (lv_comp_6_0= ruleComparison ) ) )
            {
            // InternalSQLParser.g:5001:3: ( (lv_op1_0_0= ruleOperand ) )
            // InternalSQLParser.g:5002:4: (lv_op1_0_0= ruleOperand )
            {
            // InternalSQLParser.g:5002:4: (lv_op1_0_0= ruleOperand )
            // InternalSQLParser.g:5003:5: lv_op1_0_0= ruleOperand
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getExpressionAccess().getOp1OperandParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_83);
            lv_op1_0_0=ruleOperand();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getExpressionRule());
              					}
              					set(
              						current,
              						"op1",
              						lv_op1_0_0,
              						"org.xtext.example.mydsl_sql.SQL.Operand");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:5020:3: ( ( (lv_isnull_1_0= ruleIsNullValue ) ) | ( (lv_in_2_0= ruleInOperator ) ) | ( (lv_exists_3_0= ruleExistsOperator ) ) | ( (lv_between_4_0= ruleBetween ) ) | ( (lv_like_5_0= ruleLike ) ) | ( (lv_comp_6_0= ruleComparison ) ) )
            int alt99=6;
            switch ( input.LA(1) ) {
            case IS:
                {
                alt99=1;
                }
                break;
            case NOT:
                {
                switch ( input.LA(2) ) {
                case BETWEEN:
                    {
                    alt99=4;
                    }
                    break;
                case EXISTS:
                    {
                    alt99=3;
                    }
                    break;
                case LIKE:
                    {
                    alt99=5;
                    }
                    break;
                case IN:
                    {
                    alt99=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 99, 2, input);

                    throw nvae;
                }

                }
                break;
            case IN:
                {
                alt99=2;
                }
                break;
            case EXISTS:
                {
                alt99=3;
                }
                break;
            case BETWEEN:
                {
                alt99=4;
                }
                break;
            case LIKE:
                {
                alt99=5;
                }
                break;
            case ExclamationMarkEqualsSign:
            case LessThanSignEqualsSign:
            case LessThanSignGreaterThanSign:
            case GreaterThanSignEqualsSign:
            case CircumflexAccentEqualsSign:
            case LessThanSign:
            case EqualsSign:
            case GreaterThanSign:
                {
                alt99=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 99, 0, input);

                throw nvae;
            }

            switch (alt99) {
                case 1 :
                    // InternalSQLParser.g:5021:4: ( (lv_isnull_1_0= ruleIsNullValue ) )
                    {
                    // InternalSQLParser.g:5021:4: ( (lv_isnull_1_0= ruleIsNullValue ) )
                    // InternalSQLParser.g:5022:5: (lv_isnull_1_0= ruleIsNullValue )
                    {
                    // InternalSQLParser.g:5022:5: (lv_isnull_1_0= ruleIsNullValue )
                    // InternalSQLParser.g:5023:6: lv_isnull_1_0= ruleIsNullValue
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getExpressionAccess().getIsnullIsNullValueParserRuleCall_1_0_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_isnull_1_0=ruleIsNullValue();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExpressionRule());
                      						}
                      						set(
                      							current,
                      							"isnull",
                      							lv_isnull_1_0,
                      							"org.xtext.example.mydsl_sql.SQL.IsNullValue");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:5041:4: ( (lv_in_2_0= ruleInOperator ) )
                    {
                    // InternalSQLParser.g:5041:4: ( (lv_in_2_0= ruleInOperator ) )
                    // InternalSQLParser.g:5042:5: (lv_in_2_0= ruleInOperator )
                    {
                    // InternalSQLParser.g:5042:5: (lv_in_2_0= ruleInOperator )
                    // InternalSQLParser.g:5043:6: lv_in_2_0= ruleInOperator
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getExpressionAccess().getInInOperatorParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_in_2_0=ruleInOperator();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExpressionRule());
                      						}
                      						set(
                      							current,
                      							"in",
                      							lv_in_2_0,
                      							"org.xtext.example.mydsl_sql.SQL.InOperator");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:5061:4: ( (lv_exists_3_0= ruleExistsOperator ) )
                    {
                    // InternalSQLParser.g:5061:4: ( (lv_exists_3_0= ruleExistsOperator ) )
                    // InternalSQLParser.g:5062:5: (lv_exists_3_0= ruleExistsOperator )
                    {
                    // InternalSQLParser.g:5062:5: (lv_exists_3_0= ruleExistsOperator )
                    // InternalSQLParser.g:5063:6: lv_exists_3_0= ruleExistsOperator
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getExpressionAccess().getExistsExistsOperatorParserRuleCall_1_2_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_exists_3_0=ruleExistsOperator();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExpressionRule());
                      						}
                      						set(
                      							current,
                      							"exists",
                      							lv_exists_3_0,
                      							"org.xtext.example.mydsl_sql.SQL.ExistsOperator");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 4 :
                    // InternalSQLParser.g:5081:4: ( (lv_between_4_0= ruleBetween ) )
                    {
                    // InternalSQLParser.g:5081:4: ( (lv_between_4_0= ruleBetween ) )
                    // InternalSQLParser.g:5082:5: (lv_between_4_0= ruleBetween )
                    {
                    // InternalSQLParser.g:5082:5: (lv_between_4_0= ruleBetween )
                    // InternalSQLParser.g:5083:6: lv_between_4_0= ruleBetween
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getExpressionAccess().getBetweenBetweenParserRuleCall_1_3_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_between_4_0=ruleBetween();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExpressionRule());
                      						}
                      						set(
                      							current,
                      							"between",
                      							lv_between_4_0,
                      							"org.xtext.example.mydsl_sql.SQL.Between");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 5 :
                    // InternalSQLParser.g:5101:4: ( (lv_like_5_0= ruleLike ) )
                    {
                    // InternalSQLParser.g:5101:4: ( (lv_like_5_0= ruleLike ) )
                    // InternalSQLParser.g:5102:5: (lv_like_5_0= ruleLike )
                    {
                    // InternalSQLParser.g:5102:5: (lv_like_5_0= ruleLike )
                    // InternalSQLParser.g:5103:6: lv_like_5_0= ruleLike
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getExpressionAccess().getLikeLikeParserRuleCall_1_4_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_like_5_0=ruleLike();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExpressionRule());
                      						}
                      						set(
                      							current,
                      							"like",
                      							lv_like_5_0,
                      							"org.xtext.example.mydsl_sql.SQL.Like");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 6 :
                    // InternalSQLParser.g:5121:4: ( (lv_comp_6_0= ruleComparison ) )
                    {
                    // InternalSQLParser.g:5121:4: ( (lv_comp_6_0= ruleComparison ) )
                    // InternalSQLParser.g:5122:5: (lv_comp_6_0= ruleComparison )
                    {
                    // InternalSQLParser.g:5122:5: (lv_comp_6_0= ruleComparison )
                    // InternalSQLParser.g:5123:6: lv_comp_6_0= ruleComparison
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getExpressionAccess().getCompComparisonParserRuleCall_1_5_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_comp_6_0=ruleComparison();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExpressionRule());
                      						}
                      						set(
                      							current,
                      							"comp",
                      							lv_comp_6_0,
                      							"org.xtext.example.mydsl_sql.SQL.Comparison");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleExpression"


    // $ANTLR start "entryRuleIsNullValue"
    // InternalSQLParser.g:5145:1: entryRuleIsNullValue returns [String current=null] : iv_ruleIsNullValue= ruleIsNullValue EOF ;
    public final String entryRuleIsNullValue() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleIsNullValue = null;


        try {
            // InternalSQLParser.g:5145:51: (iv_ruleIsNullValue= ruleIsNullValue EOF )
            // InternalSQLParser.g:5146:2: iv_ruleIsNullValue= ruleIsNullValue EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIsNullValueRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIsNullValue=ruleIsNullValue();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIsNullValue.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleIsNullValue"


    // $ANTLR start "ruleIsNullValue"
    // InternalSQLParser.g:5152:1: ruleIsNullValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= IS (kw= NOT )? kw= NULL ) ;
    public final AntlrDatatypeRuleToken ruleIsNullValue() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            // InternalSQLParser.g:5158:2: ( (kw= IS (kw= NOT )? kw= NULL ) )
            // InternalSQLParser.g:5159:2: (kw= IS (kw= NOT )? kw= NULL )
            {
            // InternalSQLParser.g:5159:2: (kw= IS (kw= NOT )? kw= NULL )
            // InternalSQLParser.g:5160:3: kw= IS (kw= NOT )? kw= NULL
            {
            kw=(Token)match(input,IS,FOLLOW_84); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(kw);
              			newLeafNode(kw, grammarAccess.getIsNullValueAccess().getISKeyword_0());
              		
            }
            // InternalSQLParser.g:5165:3: (kw= NOT )?
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==NOT) ) {
                alt100=1;
            }
            switch (alt100) {
                case 1 :
                    // InternalSQLParser.g:5166:4: kw= NOT
                    {
                    kw=(Token)match(input,NOT,FOLLOW_85); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getIsNullValueAccess().getNOTKeyword_1());
                      			
                    }

                    }
                    break;

            }

            kw=(Token)match(input,NULL,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(kw);
              			newLeafNode(kw, grammarAccess.getIsNullValueAccess().getNULLKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleIsNullValue"


    // $ANTLR start "entryRuleComparison"
    // InternalSQLParser.g:5181:1: entryRuleComparison returns [EObject current=null] : iv_ruleComparison= ruleComparison EOF ;
    public final EObject entryRuleComparison() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleComparison = null;


        try {
            // InternalSQLParser.g:5181:51: (iv_ruleComparison= ruleComparison EOF )
            // InternalSQLParser.g:5182:2: iv_ruleComparison= ruleComparison EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getComparisonRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleComparison=ruleComparison();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleComparison; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleComparison"


    // $ANTLR start "ruleComparison"
    // InternalSQLParser.g:5188:1: ruleComparison returns [EObject current=null] : ( ( ( (lv_operator_0_1= GreaterThanSign | lv_operator_0_2= GreaterThanSignEqualsSign | lv_operator_0_3= LessThanSign | lv_operator_0_4= LessThanSignEqualsSign | lv_operator_0_5= EqualsSign | lv_operator_0_6= LessThanSignGreaterThanSign | lv_operator_0_7= ExclamationMarkEqualsSign | lv_operator_0_8= CircumflexAccentEqualsSign ) ) ) ( ( (lv_subOperator_1_1= ANY | lv_subOperator_1_2= ALL | lv_subOperator_1_3= SOME ) ) )? ( (lv_op2_2_0= ruleOperand ) ) ) ;
    public final EObject ruleComparison() throws RecognitionException {
        EObject current = null;

        Token lv_operator_0_1=null;
        Token lv_operator_0_2=null;
        Token lv_operator_0_3=null;
        Token lv_operator_0_4=null;
        Token lv_operator_0_5=null;
        Token lv_operator_0_6=null;
        Token lv_operator_0_7=null;
        Token lv_operator_0_8=null;
        Token lv_subOperator_1_1=null;
        Token lv_subOperator_1_2=null;
        Token lv_subOperator_1_3=null;
        EObject lv_op2_2_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:5194:2: ( ( ( ( (lv_operator_0_1= GreaterThanSign | lv_operator_0_2= GreaterThanSignEqualsSign | lv_operator_0_3= LessThanSign | lv_operator_0_4= LessThanSignEqualsSign | lv_operator_0_5= EqualsSign | lv_operator_0_6= LessThanSignGreaterThanSign | lv_operator_0_7= ExclamationMarkEqualsSign | lv_operator_0_8= CircumflexAccentEqualsSign ) ) ) ( ( (lv_subOperator_1_1= ANY | lv_subOperator_1_2= ALL | lv_subOperator_1_3= SOME ) ) )? ( (lv_op2_2_0= ruleOperand ) ) ) )
            // InternalSQLParser.g:5195:2: ( ( ( (lv_operator_0_1= GreaterThanSign | lv_operator_0_2= GreaterThanSignEqualsSign | lv_operator_0_3= LessThanSign | lv_operator_0_4= LessThanSignEqualsSign | lv_operator_0_5= EqualsSign | lv_operator_0_6= LessThanSignGreaterThanSign | lv_operator_0_7= ExclamationMarkEqualsSign | lv_operator_0_8= CircumflexAccentEqualsSign ) ) ) ( ( (lv_subOperator_1_1= ANY | lv_subOperator_1_2= ALL | lv_subOperator_1_3= SOME ) ) )? ( (lv_op2_2_0= ruleOperand ) ) )
            {
            // InternalSQLParser.g:5195:2: ( ( ( (lv_operator_0_1= GreaterThanSign | lv_operator_0_2= GreaterThanSignEqualsSign | lv_operator_0_3= LessThanSign | lv_operator_0_4= LessThanSignEqualsSign | lv_operator_0_5= EqualsSign | lv_operator_0_6= LessThanSignGreaterThanSign | lv_operator_0_7= ExclamationMarkEqualsSign | lv_operator_0_8= CircumflexAccentEqualsSign ) ) ) ( ( (lv_subOperator_1_1= ANY | lv_subOperator_1_2= ALL | lv_subOperator_1_3= SOME ) ) )? ( (lv_op2_2_0= ruleOperand ) ) )
            // InternalSQLParser.g:5196:3: ( ( (lv_operator_0_1= GreaterThanSign | lv_operator_0_2= GreaterThanSignEqualsSign | lv_operator_0_3= LessThanSign | lv_operator_0_4= LessThanSignEqualsSign | lv_operator_0_5= EqualsSign | lv_operator_0_6= LessThanSignGreaterThanSign | lv_operator_0_7= ExclamationMarkEqualsSign | lv_operator_0_8= CircumflexAccentEqualsSign ) ) ) ( ( (lv_subOperator_1_1= ANY | lv_subOperator_1_2= ALL | lv_subOperator_1_3= SOME ) ) )? ( (lv_op2_2_0= ruleOperand ) )
            {
            // InternalSQLParser.g:5196:3: ( ( (lv_operator_0_1= GreaterThanSign | lv_operator_0_2= GreaterThanSignEqualsSign | lv_operator_0_3= LessThanSign | lv_operator_0_4= LessThanSignEqualsSign | lv_operator_0_5= EqualsSign | lv_operator_0_6= LessThanSignGreaterThanSign | lv_operator_0_7= ExclamationMarkEqualsSign | lv_operator_0_8= CircumflexAccentEqualsSign ) ) )
            // InternalSQLParser.g:5197:4: ( (lv_operator_0_1= GreaterThanSign | lv_operator_0_2= GreaterThanSignEqualsSign | lv_operator_0_3= LessThanSign | lv_operator_0_4= LessThanSignEqualsSign | lv_operator_0_5= EqualsSign | lv_operator_0_6= LessThanSignGreaterThanSign | lv_operator_0_7= ExclamationMarkEqualsSign | lv_operator_0_8= CircumflexAccentEqualsSign ) )
            {
            // InternalSQLParser.g:5197:4: ( (lv_operator_0_1= GreaterThanSign | lv_operator_0_2= GreaterThanSignEqualsSign | lv_operator_0_3= LessThanSign | lv_operator_0_4= LessThanSignEqualsSign | lv_operator_0_5= EqualsSign | lv_operator_0_6= LessThanSignGreaterThanSign | lv_operator_0_7= ExclamationMarkEqualsSign | lv_operator_0_8= CircumflexAccentEqualsSign ) )
            // InternalSQLParser.g:5198:5: (lv_operator_0_1= GreaterThanSign | lv_operator_0_2= GreaterThanSignEqualsSign | lv_operator_0_3= LessThanSign | lv_operator_0_4= LessThanSignEqualsSign | lv_operator_0_5= EqualsSign | lv_operator_0_6= LessThanSignGreaterThanSign | lv_operator_0_7= ExclamationMarkEqualsSign | lv_operator_0_8= CircumflexAccentEqualsSign )
            {
            // InternalSQLParser.g:5198:5: (lv_operator_0_1= GreaterThanSign | lv_operator_0_2= GreaterThanSignEqualsSign | lv_operator_0_3= LessThanSign | lv_operator_0_4= LessThanSignEqualsSign | lv_operator_0_5= EqualsSign | lv_operator_0_6= LessThanSignGreaterThanSign | lv_operator_0_7= ExclamationMarkEqualsSign | lv_operator_0_8= CircumflexAccentEqualsSign )
            int alt101=8;
            switch ( input.LA(1) ) {
            case GreaterThanSign:
                {
                alt101=1;
                }
                break;
            case GreaterThanSignEqualsSign:
                {
                alt101=2;
                }
                break;
            case LessThanSign:
                {
                alt101=3;
                }
                break;
            case LessThanSignEqualsSign:
                {
                alt101=4;
                }
                break;
            case EqualsSign:
                {
                alt101=5;
                }
                break;
            case LessThanSignGreaterThanSign:
                {
                alt101=6;
                }
                break;
            case ExclamationMarkEqualsSign:
                {
                alt101=7;
                }
                break;
            case CircumflexAccentEqualsSign:
                {
                alt101=8;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 101, 0, input);

                throw nvae;
            }

            switch (alt101) {
                case 1 :
                    // InternalSQLParser.g:5199:6: lv_operator_0_1= GreaterThanSign
                    {
                    lv_operator_0_1=(Token)match(input,GreaterThanSign,FOLLOW_86); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_operator_0_1, grammarAccess.getComparisonAccess().getOperatorGreaterThanSignKeyword_0_0_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getComparisonRule());
                      						}
                      						setWithLastConsumed(current, "operator", lv_operator_0_1, null);
                      					
                    }

                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:5210:6: lv_operator_0_2= GreaterThanSignEqualsSign
                    {
                    lv_operator_0_2=(Token)match(input,GreaterThanSignEqualsSign,FOLLOW_86); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_operator_0_2, grammarAccess.getComparisonAccess().getOperatorGreaterThanSignEqualsSignKeyword_0_0_1());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getComparisonRule());
                      						}
                      						setWithLastConsumed(current, "operator", lv_operator_0_2, null);
                      					
                    }

                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:5221:6: lv_operator_0_3= LessThanSign
                    {
                    lv_operator_0_3=(Token)match(input,LessThanSign,FOLLOW_86); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_operator_0_3, grammarAccess.getComparisonAccess().getOperatorLessThanSignKeyword_0_0_2());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getComparisonRule());
                      						}
                      						setWithLastConsumed(current, "operator", lv_operator_0_3, null);
                      					
                    }

                    }
                    break;
                case 4 :
                    // InternalSQLParser.g:5232:6: lv_operator_0_4= LessThanSignEqualsSign
                    {
                    lv_operator_0_4=(Token)match(input,LessThanSignEqualsSign,FOLLOW_86); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_operator_0_4, grammarAccess.getComparisonAccess().getOperatorLessThanSignEqualsSignKeyword_0_0_3());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getComparisonRule());
                      						}
                      						setWithLastConsumed(current, "operator", lv_operator_0_4, null);
                      					
                    }

                    }
                    break;
                case 5 :
                    // InternalSQLParser.g:5243:6: lv_operator_0_5= EqualsSign
                    {
                    lv_operator_0_5=(Token)match(input,EqualsSign,FOLLOW_86); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_operator_0_5, grammarAccess.getComparisonAccess().getOperatorEqualsSignKeyword_0_0_4());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getComparisonRule());
                      						}
                      						setWithLastConsumed(current, "operator", lv_operator_0_5, null);
                      					
                    }

                    }
                    break;
                case 6 :
                    // InternalSQLParser.g:5254:6: lv_operator_0_6= LessThanSignGreaterThanSign
                    {
                    lv_operator_0_6=(Token)match(input,LessThanSignGreaterThanSign,FOLLOW_86); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_operator_0_6, grammarAccess.getComparisonAccess().getOperatorLessThanSignGreaterThanSignKeyword_0_0_5());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getComparisonRule());
                      						}
                      						setWithLastConsumed(current, "operator", lv_operator_0_6, null);
                      					
                    }

                    }
                    break;
                case 7 :
                    // InternalSQLParser.g:5265:6: lv_operator_0_7= ExclamationMarkEqualsSign
                    {
                    lv_operator_0_7=(Token)match(input,ExclamationMarkEqualsSign,FOLLOW_86); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_operator_0_7, grammarAccess.getComparisonAccess().getOperatorExclamationMarkEqualsSignKeyword_0_0_6());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getComparisonRule());
                      						}
                      						setWithLastConsumed(current, "operator", lv_operator_0_7, null);
                      					
                    }

                    }
                    break;
                case 8 :
                    // InternalSQLParser.g:5276:6: lv_operator_0_8= CircumflexAccentEqualsSign
                    {
                    lv_operator_0_8=(Token)match(input,CircumflexAccentEqualsSign,FOLLOW_86); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_operator_0_8, grammarAccess.getComparisonAccess().getOperatorCircumflexAccentEqualsSignKeyword_0_0_7());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getComparisonRule());
                      						}
                      						setWithLastConsumed(current, "operator", lv_operator_0_8, null);
                      					
                    }

                    }
                    break;

            }


            }


            }

            // InternalSQLParser.g:5289:3: ( ( (lv_subOperator_1_1= ANY | lv_subOperator_1_2= ALL | lv_subOperator_1_3= SOME ) ) )?
            int alt103=2;
            int LA103_0 = input.LA(1);

            if ( (LA103_0==SOME||LA103_0==ALL||LA103_0==ANY) ) {
                alt103=1;
            }
            switch (alt103) {
                case 1 :
                    // InternalSQLParser.g:5290:4: ( (lv_subOperator_1_1= ANY | lv_subOperator_1_2= ALL | lv_subOperator_1_3= SOME ) )
                    {
                    // InternalSQLParser.g:5290:4: ( (lv_subOperator_1_1= ANY | lv_subOperator_1_2= ALL | lv_subOperator_1_3= SOME ) )
                    // InternalSQLParser.g:5291:5: (lv_subOperator_1_1= ANY | lv_subOperator_1_2= ALL | lv_subOperator_1_3= SOME )
                    {
                    // InternalSQLParser.g:5291:5: (lv_subOperator_1_1= ANY | lv_subOperator_1_2= ALL | lv_subOperator_1_3= SOME )
                    int alt102=3;
                    switch ( input.LA(1) ) {
                    case ANY:
                        {
                        alt102=1;
                        }
                        break;
                    case ALL:
                        {
                        alt102=2;
                        }
                        break;
                    case SOME:
                        {
                        alt102=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 102, 0, input);

                        throw nvae;
                    }

                    switch (alt102) {
                        case 1 :
                            // InternalSQLParser.g:5292:6: lv_subOperator_1_1= ANY
                            {
                            lv_subOperator_1_1=(Token)match(input,ANY,FOLLOW_78); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(lv_subOperator_1_1, grammarAccess.getComparisonAccess().getSubOperatorANYKeyword_1_0_0());
                              					
                            }
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getComparisonRule());
                              						}
                              						setWithLastConsumed(current, "subOperator", lv_subOperator_1_1, null);
                              					
                            }

                            }
                            break;
                        case 2 :
                            // InternalSQLParser.g:5303:6: lv_subOperator_1_2= ALL
                            {
                            lv_subOperator_1_2=(Token)match(input,ALL,FOLLOW_78); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(lv_subOperator_1_2, grammarAccess.getComparisonAccess().getSubOperatorALLKeyword_1_0_1());
                              					
                            }
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getComparisonRule());
                              						}
                              						setWithLastConsumed(current, "subOperator", lv_subOperator_1_2, null);
                              					
                            }

                            }
                            break;
                        case 3 :
                            // InternalSQLParser.g:5314:6: lv_subOperator_1_3= SOME
                            {
                            lv_subOperator_1_3=(Token)match(input,SOME,FOLLOW_78); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(lv_subOperator_1_3, grammarAccess.getComparisonAccess().getSubOperatorSOMEKeyword_1_0_2());
                              					
                            }
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getComparisonRule());
                              						}
                              						setWithLastConsumed(current, "subOperator", lv_subOperator_1_3, null);
                              					
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;

            }

            // InternalSQLParser.g:5327:3: ( (lv_op2_2_0= ruleOperand ) )
            // InternalSQLParser.g:5328:4: (lv_op2_2_0= ruleOperand )
            {
            // InternalSQLParser.g:5328:4: (lv_op2_2_0= ruleOperand )
            // InternalSQLParser.g:5329:5: lv_op2_2_0= ruleOperand
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getComparisonAccess().getOp2OperandParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_op2_2_0=ruleOperand();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getComparisonRule());
              					}
              					set(
              						current,
              						"op2",
              						lv_op2_2_0,
              						"org.xtext.example.mydsl_sql.SQL.Operand");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleComparison"


    // $ANTLR start "entryRuleLike"
    // InternalSQLParser.g:5350:1: entryRuleLike returns [EObject current=null] : iv_ruleLike= ruleLike EOF ;
    public final EObject entryRuleLike() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleLike = null;


        try {
            // InternalSQLParser.g:5350:45: (iv_ruleLike= ruleLike EOF )
            // InternalSQLParser.g:5351:2: iv_ruleLike= ruleLike EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLikeRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLike=ruleLike();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLike; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleLike"


    // $ANTLR start "ruleLike"
    // InternalSQLParser.g:5357:1: ruleLike returns [EObject current=null] : ( ( (lv_opLike_0_0= ruleLikeValue ) ) ( (lv_op2_1_0= ruleLikeOperand ) ) ) ;
    public final EObject ruleLike() throws RecognitionException {
        EObject current = null;

        AntlrDatatypeRuleToken lv_opLike_0_0 = null;

        EObject lv_op2_1_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:5363:2: ( ( ( (lv_opLike_0_0= ruleLikeValue ) ) ( (lv_op2_1_0= ruleLikeOperand ) ) ) )
            // InternalSQLParser.g:5364:2: ( ( (lv_opLike_0_0= ruleLikeValue ) ) ( (lv_op2_1_0= ruleLikeOperand ) ) )
            {
            // InternalSQLParser.g:5364:2: ( ( (lv_opLike_0_0= ruleLikeValue ) ) ( (lv_op2_1_0= ruleLikeOperand ) ) )
            // InternalSQLParser.g:5365:3: ( (lv_opLike_0_0= ruleLikeValue ) ) ( (lv_op2_1_0= ruleLikeOperand ) )
            {
            // InternalSQLParser.g:5365:3: ( (lv_opLike_0_0= ruleLikeValue ) )
            // InternalSQLParser.g:5366:4: (lv_opLike_0_0= ruleLikeValue )
            {
            // InternalSQLParser.g:5366:4: (lv_opLike_0_0= ruleLikeValue )
            // InternalSQLParser.g:5367:5: lv_opLike_0_0= ruleLikeValue
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getLikeAccess().getOpLikeLikeValueParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_87);
            lv_opLike_0_0=ruleLikeValue();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getLikeRule());
              					}
              					set(
              						current,
              						"opLike",
              						lv_opLike_0_0,
              						"org.xtext.example.mydsl_sql.SQL.LikeValue");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:5384:3: ( (lv_op2_1_0= ruleLikeOperand ) )
            // InternalSQLParser.g:5385:4: (lv_op2_1_0= ruleLikeOperand )
            {
            // InternalSQLParser.g:5385:4: (lv_op2_1_0= ruleLikeOperand )
            // InternalSQLParser.g:5386:5: lv_op2_1_0= ruleLikeOperand
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getLikeAccess().getOp2LikeOperandParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_op2_1_0=ruleLikeOperand();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getLikeRule());
              					}
              					set(
              						current,
              						"op2",
              						lv_op2_1_0,
              						"org.xtext.example.mydsl_sql.SQL.LikeOperand");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleLike"


    // $ANTLR start "entryRuleLikeValue"
    // InternalSQLParser.g:5407:1: entryRuleLikeValue returns [String current=null] : iv_ruleLikeValue= ruleLikeValue EOF ;
    public final String entryRuleLikeValue() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleLikeValue = null;


        try {
            // InternalSQLParser.g:5407:49: (iv_ruleLikeValue= ruleLikeValue EOF )
            // InternalSQLParser.g:5408:2: iv_ruleLikeValue= ruleLikeValue EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLikeValueRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLikeValue=ruleLikeValue();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLikeValue.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleLikeValue"


    // $ANTLR start "ruleLikeValue"
    // InternalSQLParser.g:5414:1: ruleLikeValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : ( (kw= NOT )? kw= LIKE ) ;
    public final AntlrDatatypeRuleToken ruleLikeValue() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            // InternalSQLParser.g:5420:2: ( ( (kw= NOT )? kw= LIKE ) )
            // InternalSQLParser.g:5421:2: ( (kw= NOT )? kw= LIKE )
            {
            // InternalSQLParser.g:5421:2: ( (kw= NOT )? kw= LIKE )
            // InternalSQLParser.g:5422:3: (kw= NOT )? kw= LIKE
            {
            // InternalSQLParser.g:5422:3: (kw= NOT )?
            int alt104=2;
            int LA104_0 = input.LA(1);

            if ( (LA104_0==NOT) ) {
                alt104=1;
            }
            switch (alt104) {
                case 1 :
                    // InternalSQLParser.g:5423:4: kw= NOT
                    {
                    kw=(Token)match(input,NOT,FOLLOW_88); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getLikeValueAccess().getNOTKeyword_0());
                      			
                    }

                    }
                    break;

            }

            kw=(Token)match(input,LIKE,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(kw);
              			newLeafNode(kw, grammarAccess.getLikeValueAccess().getLIKEKeyword_1());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleLikeValue"


    // $ANTLR start "entryRuleLikeOperand"
    // InternalSQLParser.g:5438:1: entryRuleLikeOperand returns [EObject current=null] : iv_ruleLikeOperand= ruleLikeOperand EOF ;
    public final EObject entryRuleLikeOperand() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleLikeOperand = null;


        try {
            // InternalSQLParser.g:5438:52: (iv_ruleLikeOperand= ruleLikeOperand EOF )
            // InternalSQLParser.g:5439:2: iv_ruleLikeOperand= ruleLikeOperand EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLikeOperandRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLikeOperand=ruleLikeOperand();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLikeOperand; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleLikeOperand"


    // $ANTLR start "ruleLikeOperand"
    // InternalSQLParser.g:5445:1: ruleLikeOperand returns [EObject current=null] : ( ( (lv_op2_0_0= ruleStringOperand ) ) | ( (lv_fop2_1_0= ruleOperandFunction ) ) | ( (lv_fcast_2_0= ruleOpFunctionCast ) ) | ( (lv_fparam_3_0= ruleParameterOperand ) ) ) ;
    public final EObject ruleLikeOperand() throws RecognitionException {
        EObject current = null;

        AntlrDatatypeRuleToken lv_op2_0_0 = null;

        EObject lv_fop2_1_0 = null;

        EObject lv_fcast_2_0 = null;

        EObject lv_fparam_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:5451:2: ( ( ( (lv_op2_0_0= ruleStringOperand ) ) | ( (lv_fop2_1_0= ruleOperandFunction ) ) | ( (lv_fcast_2_0= ruleOpFunctionCast ) ) | ( (lv_fparam_3_0= ruleParameterOperand ) ) ) )
            // InternalSQLParser.g:5452:2: ( ( (lv_op2_0_0= ruleStringOperand ) ) | ( (lv_fop2_1_0= ruleOperandFunction ) ) | ( (lv_fcast_2_0= ruleOpFunctionCast ) ) | ( (lv_fparam_3_0= ruleParameterOperand ) ) )
            {
            // InternalSQLParser.g:5452:2: ( ( (lv_op2_0_0= ruleStringOperand ) ) | ( (lv_fop2_1_0= ruleOperandFunction ) ) | ( (lv_fcast_2_0= ruleOpFunctionCast ) ) | ( (lv_fparam_3_0= ruleParameterOperand ) ) )
            int alt105=4;
            switch ( input.LA(1) ) {
            case RULE_STRING_:
                {
                alt105=1;
                }
                break;
            case RULE_ID:
                {
                alt105=2;
                }
                break;
            case CAST:
                {
                alt105=3;
                }
                break;
            case RULE_JRPARAM:
                {
                alt105=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 105, 0, input);

                throw nvae;
            }

            switch (alt105) {
                case 1 :
                    // InternalSQLParser.g:5453:3: ( (lv_op2_0_0= ruleStringOperand ) )
                    {
                    // InternalSQLParser.g:5453:3: ( (lv_op2_0_0= ruleStringOperand ) )
                    // InternalSQLParser.g:5454:4: (lv_op2_0_0= ruleStringOperand )
                    {
                    // InternalSQLParser.g:5454:4: (lv_op2_0_0= ruleStringOperand )
                    // InternalSQLParser.g:5455:5: lv_op2_0_0= ruleStringOperand
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getLikeOperandAccess().getOp2StringOperandParserRuleCall_0_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_op2_0_0=ruleStringOperand();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getLikeOperandRule());
                      					}
                      					set(
                      						current,
                      						"op2",
                      						lv_op2_0_0,
                      						"org.xtext.example.mydsl_sql.SQL.StringOperand");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:5473:3: ( (lv_fop2_1_0= ruleOperandFunction ) )
                    {
                    // InternalSQLParser.g:5473:3: ( (lv_fop2_1_0= ruleOperandFunction ) )
                    // InternalSQLParser.g:5474:4: (lv_fop2_1_0= ruleOperandFunction )
                    {
                    // InternalSQLParser.g:5474:4: (lv_fop2_1_0= ruleOperandFunction )
                    // InternalSQLParser.g:5475:5: lv_fop2_1_0= ruleOperandFunction
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getLikeOperandAccess().getFop2OperandFunctionParserRuleCall_1_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_fop2_1_0=ruleOperandFunction();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getLikeOperandRule());
                      					}
                      					set(
                      						current,
                      						"fop2",
                      						lv_fop2_1_0,
                      						"org.xtext.example.mydsl_sql.SQL.OperandFunction");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:5493:3: ( (lv_fcast_2_0= ruleOpFunctionCast ) )
                    {
                    // InternalSQLParser.g:5493:3: ( (lv_fcast_2_0= ruleOpFunctionCast ) )
                    // InternalSQLParser.g:5494:4: (lv_fcast_2_0= ruleOpFunctionCast )
                    {
                    // InternalSQLParser.g:5494:4: (lv_fcast_2_0= ruleOpFunctionCast )
                    // InternalSQLParser.g:5495:5: lv_fcast_2_0= ruleOpFunctionCast
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getLikeOperandAccess().getFcastOpFunctionCastParserRuleCall_2_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_fcast_2_0=ruleOpFunctionCast();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getLikeOperandRule());
                      					}
                      					set(
                      						current,
                      						"fcast",
                      						lv_fcast_2_0,
                      						"org.xtext.example.mydsl_sql.SQL.OpFunctionCast");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 4 :
                    // InternalSQLParser.g:5513:3: ( (lv_fparam_3_0= ruleParameterOperand ) )
                    {
                    // InternalSQLParser.g:5513:3: ( (lv_fparam_3_0= ruleParameterOperand ) )
                    // InternalSQLParser.g:5514:4: (lv_fparam_3_0= ruleParameterOperand )
                    {
                    // InternalSQLParser.g:5514:4: (lv_fparam_3_0= ruleParameterOperand )
                    // InternalSQLParser.g:5515:5: lv_fparam_3_0= ruleParameterOperand
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getLikeOperandAccess().getFparamParameterOperandParserRuleCall_3_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_fparam_3_0=ruleParameterOperand();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getLikeOperandRule());
                      					}
                      					set(
                      						current,
                      						"fparam",
                      						lv_fparam_3_0,
                      						"org.xtext.example.mydsl_sql.SQL.ParameterOperand");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleLikeOperand"


    // $ANTLR start "entryRuleBetween"
    // InternalSQLParser.g:5536:1: entryRuleBetween returns [EObject current=null] : iv_ruleBetween= ruleBetween EOF ;
    public final EObject entryRuleBetween() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleBetween = null;


        try {
            // InternalSQLParser.g:5536:48: (iv_ruleBetween= ruleBetween EOF )
            // InternalSQLParser.g:5537:2: iv_ruleBetween= ruleBetween EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBetweenRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBetween=ruleBetween();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBetween; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleBetween"


    // $ANTLR start "ruleBetween"
    // InternalSQLParser.g:5543:1: ruleBetween returns [EObject current=null] : ( ( (lv_opBetween_0_0= ruleBetweenValue ) ) ( (lv_op2_1_0= ruleOperandGroup ) ) otherlv_2= AND ( (lv_op3_3_0= ruleOperandGroup ) ) ) ;
    public final EObject ruleBetween() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        AntlrDatatypeRuleToken lv_opBetween_0_0 = null;

        EObject lv_op2_1_0 = null;

        EObject lv_op3_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:5549:2: ( ( ( (lv_opBetween_0_0= ruleBetweenValue ) ) ( (lv_op2_1_0= ruleOperandGroup ) ) otherlv_2= AND ( (lv_op3_3_0= ruleOperandGroup ) ) ) )
            // InternalSQLParser.g:5550:2: ( ( (lv_opBetween_0_0= ruleBetweenValue ) ) ( (lv_op2_1_0= ruleOperandGroup ) ) otherlv_2= AND ( (lv_op3_3_0= ruleOperandGroup ) ) )
            {
            // InternalSQLParser.g:5550:2: ( ( (lv_opBetween_0_0= ruleBetweenValue ) ) ( (lv_op2_1_0= ruleOperandGroup ) ) otherlv_2= AND ( (lv_op3_3_0= ruleOperandGroup ) ) )
            // InternalSQLParser.g:5551:3: ( (lv_opBetween_0_0= ruleBetweenValue ) ) ( (lv_op2_1_0= ruleOperandGroup ) ) otherlv_2= AND ( (lv_op3_3_0= ruleOperandGroup ) )
            {
            // InternalSQLParser.g:5551:3: ( (lv_opBetween_0_0= ruleBetweenValue ) )
            // InternalSQLParser.g:5552:4: (lv_opBetween_0_0= ruleBetweenValue )
            {
            // InternalSQLParser.g:5552:4: (lv_opBetween_0_0= ruleBetweenValue )
            // InternalSQLParser.g:5553:5: lv_opBetween_0_0= ruleBetweenValue
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getBetweenAccess().getOpBetweenBetweenValueParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_78);
            lv_opBetween_0_0=ruleBetweenValue();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getBetweenRule());
              					}
              					set(
              						current,
              						"opBetween",
              						lv_opBetween_0_0,
              						"org.xtext.example.mydsl_sql.SQL.BetweenValue");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:5570:3: ( (lv_op2_1_0= ruleOperandGroup ) )
            // InternalSQLParser.g:5571:4: (lv_op2_1_0= ruleOperandGroup )
            {
            // InternalSQLParser.g:5571:4: (lv_op2_1_0= ruleOperandGroup )
            // InternalSQLParser.g:5572:5: lv_op2_1_0= ruleOperandGroup
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getBetweenAccess().getOp2OperandGroupParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_89);
            lv_op2_1_0=ruleOperandGroup();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getBetweenRule());
              					}
              					set(
              						current,
              						"op2",
              						lv_op2_1_0,
              						"org.xtext.example.mydsl_sql.SQL.OperandGroup");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_2=(Token)match(input,AND,FOLLOW_78); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getBetweenAccess().getANDKeyword_2());
              		
            }
            // InternalSQLParser.g:5593:3: ( (lv_op3_3_0= ruleOperandGroup ) )
            // InternalSQLParser.g:5594:4: (lv_op3_3_0= ruleOperandGroup )
            {
            // InternalSQLParser.g:5594:4: (lv_op3_3_0= ruleOperandGroup )
            // InternalSQLParser.g:5595:5: lv_op3_3_0= ruleOperandGroup
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getBetweenAccess().getOp3OperandGroupParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_op3_3_0=ruleOperandGroup();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getBetweenRule());
              					}
              					set(
              						current,
              						"op3",
              						lv_op3_3_0,
              						"org.xtext.example.mydsl_sql.SQL.OperandGroup");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleBetween"


    // $ANTLR start "entryRuleBetweenValue"
    // InternalSQLParser.g:5616:1: entryRuleBetweenValue returns [String current=null] : iv_ruleBetweenValue= ruleBetweenValue EOF ;
    public final String entryRuleBetweenValue() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleBetweenValue = null;


        try {
            // InternalSQLParser.g:5616:52: (iv_ruleBetweenValue= ruleBetweenValue EOF )
            // InternalSQLParser.g:5617:2: iv_ruleBetweenValue= ruleBetweenValue EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBetweenValueRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBetweenValue=ruleBetweenValue();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBetweenValue.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleBetweenValue"


    // $ANTLR start "ruleBetweenValue"
    // InternalSQLParser.g:5623:1: ruleBetweenValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : ( (kw= NOT )? kw= BETWEEN ) ;
    public final AntlrDatatypeRuleToken ruleBetweenValue() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            // InternalSQLParser.g:5629:2: ( ( (kw= NOT )? kw= BETWEEN ) )
            // InternalSQLParser.g:5630:2: ( (kw= NOT )? kw= BETWEEN )
            {
            // InternalSQLParser.g:5630:2: ( (kw= NOT )? kw= BETWEEN )
            // InternalSQLParser.g:5631:3: (kw= NOT )? kw= BETWEEN
            {
            // InternalSQLParser.g:5631:3: (kw= NOT )?
            int alt106=2;
            int LA106_0 = input.LA(1);

            if ( (LA106_0==NOT) ) {
                alt106=1;
            }
            switch (alt106) {
                case 1 :
                    // InternalSQLParser.g:5632:4: kw= NOT
                    {
                    kw=(Token)match(input,NOT,FOLLOW_90); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getBetweenValueAccess().getNOTKeyword_0());
                      			
                    }

                    }
                    break;

            }

            kw=(Token)match(input,BETWEEN,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(kw);
              			newLeafNode(kw, grammarAccess.getBetweenValueAccess().getBETWEENKeyword_1());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleBetweenValue"


    // $ANTLR start "entryRuleInOperator"
    // InternalSQLParser.g:5647:1: entryRuleInOperator returns [EObject current=null] : iv_ruleInOperator= ruleInOperator EOF ;
    public final EObject entryRuleInOperator() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleInOperator = null;


        try {
            // InternalSQLParser.g:5647:51: (iv_ruleInOperator= ruleInOperator EOF )
            // InternalSQLParser.g:5648:2: iv_ruleInOperator= ruleInOperator EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getInOperatorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleInOperator=ruleInOperator();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleInOperator; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleInOperator"


    // $ANTLR start "ruleInOperator"
    // InternalSQLParser.g:5654:1: ruleInOperator returns [EObject current=null] : ( () ( (lv_op_1_0= ruleInValue ) ) ( ( (lv_subquery_2_0= ruleSubQueryOperand ) ) | ( (lv_opList_3_0= ruleOperandListGroup ) ) ) ) ;
    public final EObject ruleInOperator() throws RecognitionException {
        EObject current = null;

        AntlrDatatypeRuleToken lv_op_1_0 = null;

        EObject lv_subquery_2_0 = null;

        EObject lv_opList_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:5660:2: ( ( () ( (lv_op_1_0= ruleInValue ) ) ( ( (lv_subquery_2_0= ruleSubQueryOperand ) ) | ( (lv_opList_3_0= ruleOperandListGroup ) ) ) ) )
            // InternalSQLParser.g:5661:2: ( () ( (lv_op_1_0= ruleInValue ) ) ( ( (lv_subquery_2_0= ruleSubQueryOperand ) ) | ( (lv_opList_3_0= ruleOperandListGroup ) ) ) )
            {
            // InternalSQLParser.g:5661:2: ( () ( (lv_op_1_0= ruleInValue ) ) ( ( (lv_subquery_2_0= ruleSubQueryOperand ) ) | ( (lv_opList_3_0= ruleOperandListGroup ) ) ) )
            // InternalSQLParser.g:5662:3: () ( (lv_op_1_0= ruleInValue ) ) ( ( (lv_subquery_2_0= ruleSubQueryOperand ) ) | ( (lv_opList_3_0= ruleOperandListGroup ) ) )
            {
            // InternalSQLParser.g:5662:3: ()
            // InternalSQLParser.g:5663:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getInOperatorAccess().getInOperAction_0(),
              					current);
              			
            }

            }

            // InternalSQLParser.g:5672:3: ( (lv_op_1_0= ruleInValue ) )
            // InternalSQLParser.g:5673:4: (lv_op_1_0= ruleInValue )
            {
            // InternalSQLParser.g:5673:4: (lv_op_1_0= ruleInValue )
            // InternalSQLParser.g:5674:5: lv_op_1_0= ruleInValue
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getInOperatorAccess().getOpInValueParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_11);
            lv_op_1_0=ruleInValue();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getInOperatorRule());
              					}
              					set(
              						current,
              						"op",
              						lv_op_1_0,
              						"org.xtext.example.mydsl_sql.SQL.InValue");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:5691:3: ( ( (lv_subquery_2_0= ruleSubQueryOperand ) ) | ( (lv_opList_3_0= ruleOperandListGroup ) ) )
            int alt107=2;
            int LA107_0 = input.LA(1);

            if ( (LA107_0==LeftParenthesis) ) {
                int LA107_1 = input.LA(2);

                if ( (LA107_1==SELECT) ) {
                    alt107=1;
                }
                else if ( ((LA107_1>=RULE_SIGNED_DOUBLE && LA107_1<=RULE_TIMESTAMP)||LA107_1==RULE_STRING_) ) {
                    alt107=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 107, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 107, 0, input);

                throw nvae;
            }
            switch (alt107) {
                case 1 :
                    // InternalSQLParser.g:5692:4: ( (lv_subquery_2_0= ruleSubQueryOperand ) )
                    {
                    // InternalSQLParser.g:5692:4: ( (lv_subquery_2_0= ruleSubQueryOperand ) )
                    // InternalSQLParser.g:5693:5: (lv_subquery_2_0= ruleSubQueryOperand )
                    {
                    // InternalSQLParser.g:5693:5: (lv_subquery_2_0= ruleSubQueryOperand )
                    // InternalSQLParser.g:5694:6: lv_subquery_2_0= ruleSubQueryOperand
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getInOperatorAccess().getSubquerySubQueryOperandParserRuleCall_2_0_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_subquery_2_0=ruleSubQueryOperand();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getInOperatorRule());
                      						}
                      						set(
                      							current,
                      							"subquery",
                      							lv_subquery_2_0,
                      							"org.xtext.example.mydsl_sql.SQL.SubQueryOperand");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:5712:4: ( (lv_opList_3_0= ruleOperandListGroup ) )
                    {
                    // InternalSQLParser.g:5712:4: ( (lv_opList_3_0= ruleOperandListGroup ) )
                    // InternalSQLParser.g:5713:5: (lv_opList_3_0= ruleOperandListGroup )
                    {
                    // InternalSQLParser.g:5713:5: (lv_opList_3_0= ruleOperandListGroup )
                    // InternalSQLParser.g:5714:6: lv_opList_3_0= ruleOperandListGroup
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getInOperatorAccess().getOpListOperandListGroupParserRuleCall_2_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_opList_3_0=ruleOperandListGroup();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getInOperatorRule());
                      						}
                      						set(
                      							current,
                      							"opList",
                      							lv_opList_3_0,
                      							"org.xtext.example.mydsl_sql.SQL.OperandListGroup");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleInOperator"


    // $ANTLR start "entryRuleInValue"
    // InternalSQLParser.g:5736:1: entryRuleInValue returns [String current=null] : iv_ruleInValue= ruleInValue EOF ;
    public final String entryRuleInValue() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleInValue = null;


        try {
            // InternalSQLParser.g:5736:47: (iv_ruleInValue= ruleInValue EOF )
            // InternalSQLParser.g:5737:2: iv_ruleInValue= ruleInValue EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getInValueRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleInValue=ruleInValue();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleInValue.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleInValue"


    // $ANTLR start "ruleInValue"
    // InternalSQLParser.g:5743:1: ruleInValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : ( (kw= NOT )? kw= IN ) ;
    public final AntlrDatatypeRuleToken ruleInValue() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            // InternalSQLParser.g:5749:2: ( ( (kw= NOT )? kw= IN ) )
            // InternalSQLParser.g:5750:2: ( (kw= NOT )? kw= IN )
            {
            // InternalSQLParser.g:5750:2: ( (kw= NOT )? kw= IN )
            // InternalSQLParser.g:5751:3: (kw= NOT )? kw= IN
            {
            // InternalSQLParser.g:5751:3: (kw= NOT )?
            int alt108=2;
            int LA108_0 = input.LA(1);

            if ( (LA108_0==NOT) ) {
                alt108=1;
            }
            switch (alt108) {
                case 1 :
                    // InternalSQLParser.g:5752:4: kw= NOT
                    {
                    kw=(Token)match(input,NOT,FOLLOW_66); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getInValueAccess().getNOTKeyword_0());
                      			
                    }

                    }
                    break;

            }

            kw=(Token)match(input,IN,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(kw);
              			newLeafNode(kw, grammarAccess.getInValueAccess().getINKeyword_1());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleInValue"


    // $ANTLR start "entryRuleExistsOperator"
    // InternalSQLParser.g:5767:1: entryRuleExistsOperator returns [EObject current=null] : iv_ruleExistsOperator= ruleExistsOperator EOF ;
    public final EObject entryRuleExistsOperator() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExistsOperator = null;


        try {
            // InternalSQLParser.g:5767:55: (iv_ruleExistsOperator= ruleExistsOperator EOF )
            // InternalSQLParser.g:5768:2: iv_ruleExistsOperator= ruleExistsOperator EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExistsOperatorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExistsOperator=ruleExistsOperator();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExistsOperator; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleExistsOperator"


    // $ANTLR start "ruleExistsOperator"
    // InternalSQLParser.g:5774:1: ruleExistsOperator returns [EObject current=null] : ( () ( (lv_op_1_0= ruleExistsValue ) ) ( ( (lv_subquery_2_0= ruleSubQueryOperand ) ) | ( (lv_opList_3_0= ruleOperandListGroup ) ) ) ) ;
    public final EObject ruleExistsOperator() throws RecognitionException {
        EObject current = null;

        AntlrDatatypeRuleToken lv_op_1_0 = null;

        EObject lv_subquery_2_0 = null;

        EObject lv_opList_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:5780:2: ( ( () ( (lv_op_1_0= ruleExistsValue ) ) ( ( (lv_subquery_2_0= ruleSubQueryOperand ) ) | ( (lv_opList_3_0= ruleOperandListGroup ) ) ) ) )
            // InternalSQLParser.g:5781:2: ( () ( (lv_op_1_0= ruleExistsValue ) ) ( ( (lv_subquery_2_0= ruleSubQueryOperand ) ) | ( (lv_opList_3_0= ruleOperandListGroup ) ) ) )
            {
            // InternalSQLParser.g:5781:2: ( () ( (lv_op_1_0= ruleExistsValue ) ) ( ( (lv_subquery_2_0= ruleSubQueryOperand ) ) | ( (lv_opList_3_0= ruleOperandListGroup ) ) ) )
            // InternalSQLParser.g:5782:3: () ( (lv_op_1_0= ruleExistsValue ) ) ( ( (lv_subquery_2_0= ruleSubQueryOperand ) ) | ( (lv_opList_3_0= ruleOperandListGroup ) ) )
            {
            // InternalSQLParser.g:5782:3: ()
            // InternalSQLParser.g:5783:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getExistsOperatorAccess().getExistsOperAction_0(),
              					current);
              			
            }

            }

            // InternalSQLParser.g:5792:3: ( (lv_op_1_0= ruleExistsValue ) )
            // InternalSQLParser.g:5793:4: (lv_op_1_0= ruleExistsValue )
            {
            // InternalSQLParser.g:5793:4: (lv_op_1_0= ruleExistsValue )
            // InternalSQLParser.g:5794:5: lv_op_1_0= ruleExistsValue
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getExistsOperatorAccess().getOpExistsValueParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_11);
            lv_op_1_0=ruleExistsValue();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getExistsOperatorRule());
              					}
              					set(
              						current,
              						"op",
              						lv_op_1_0,
              						"org.xtext.example.mydsl_sql.SQL.ExistsValue");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:5811:3: ( ( (lv_subquery_2_0= ruleSubQueryOperand ) ) | ( (lv_opList_3_0= ruleOperandListGroup ) ) )
            int alt109=2;
            int LA109_0 = input.LA(1);

            if ( (LA109_0==LeftParenthesis) ) {
                int LA109_1 = input.LA(2);

                if ( (LA109_1==SELECT) ) {
                    alt109=1;
                }
                else if ( ((LA109_1>=RULE_SIGNED_DOUBLE && LA109_1<=RULE_TIMESTAMP)||LA109_1==RULE_STRING_) ) {
                    alt109=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 109, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 109, 0, input);

                throw nvae;
            }
            switch (alt109) {
                case 1 :
                    // InternalSQLParser.g:5812:4: ( (lv_subquery_2_0= ruleSubQueryOperand ) )
                    {
                    // InternalSQLParser.g:5812:4: ( (lv_subquery_2_0= ruleSubQueryOperand ) )
                    // InternalSQLParser.g:5813:5: (lv_subquery_2_0= ruleSubQueryOperand )
                    {
                    // InternalSQLParser.g:5813:5: (lv_subquery_2_0= ruleSubQueryOperand )
                    // InternalSQLParser.g:5814:6: lv_subquery_2_0= ruleSubQueryOperand
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getExistsOperatorAccess().getSubquerySubQueryOperandParserRuleCall_2_0_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_subquery_2_0=ruleSubQueryOperand();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExistsOperatorRule());
                      						}
                      						set(
                      							current,
                      							"subquery",
                      							lv_subquery_2_0,
                      							"org.xtext.example.mydsl_sql.SQL.SubQueryOperand");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:5832:4: ( (lv_opList_3_0= ruleOperandListGroup ) )
                    {
                    // InternalSQLParser.g:5832:4: ( (lv_opList_3_0= ruleOperandListGroup ) )
                    // InternalSQLParser.g:5833:5: (lv_opList_3_0= ruleOperandListGroup )
                    {
                    // InternalSQLParser.g:5833:5: (lv_opList_3_0= ruleOperandListGroup )
                    // InternalSQLParser.g:5834:6: lv_opList_3_0= ruleOperandListGroup
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getExistsOperatorAccess().getOpListOperandListGroupParserRuleCall_2_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_opList_3_0=ruleOperandListGroup();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExistsOperatorRule());
                      						}
                      						set(
                      							current,
                      							"opList",
                      							lv_opList_3_0,
                      							"org.xtext.example.mydsl_sql.SQL.OperandListGroup");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleExistsOperator"


    // $ANTLR start "entryRuleExistsValue"
    // InternalSQLParser.g:5856:1: entryRuleExistsValue returns [String current=null] : iv_ruleExistsValue= ruleExistsValue EOF ;
    public final String entryRuleExistsValue() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleExistsValue = null;


        try {
            // InternalSQLParser.g:5856:51: (iv_ruleExistsValue= ruleExistsValue EOF )
            // InternalSQLParser.g:5857:2: iv_ruleExistsValue= ruleExistsValue EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExistsValueRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExistsValue=ruleExistsValue();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExistsValue.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleExistsValue"


    // $ANTLR start "ruleExistsValue"
    // InternalSQLParser.g:5863:1: ruleExistsValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : ( (kw= NOT )? kw= EXISTS ) ;
    public final AntlrDatatypeRuleToken ruleExistsValue() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            // InternalSQLParser.g:5869:2: ( ( (kw= NOT )? kw= EXISTS ) )
            // InternalSQLParser.g:5870:2: ( (kw= NOT )? kw= EXISTS )
            {
            // InternalSQLParser.g:5870:2: ( (kw= NOT )? kw= EXISTS )
            // InternalSQLParser.g:5871:3: (kw= NOT )? kw= EXISTS
            {
            // InternalSQLParser.g:5871:3: (kw= NOT )?
            int alt110=2;
            int LA110_0 = input.LA(1);

            if ( (LA110_0==NOT) ) {
                alt110=1;
            }
            switch (alt110) {
                case 1 :
                    // InternalSQLParser.g:5872:4: kw= NOT
                    {
                    kw=(Token)match(input,NOT,FOLLOW_10); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getExistsValueAccess().getNOTKeyword_0());
                      			
                    }

                    }
                    break;

            }

            kw=(Token)match(input,EXISTS,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(kw);
              			newLeafNode(kw, grammarAccess.getExistsValueAccess().getEXISTSKeyword_1());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleExistsValue"


    // $ANTLR start "entryRuleOperandListGroup"
    // InternalSQLParser.g:5887:1: entryRuleOperandListGroup returns [EObject current=null] : iv_ruleOperandListGroup= ruleOperandListGroup EOF ;
    public final EObject entryRuleOperandListGroup() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOperandListGroup = null;


        try {
            // InternalSQLParser.g:5887:57: (iv_ruleOperandListGroup= ruleOperandListGroup EOF )
            // InternalSQLParser.g:5888:2: iv_ruleOperandListGroup= ruleOperandListGroup EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOperandListGroupRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOperandListGroup=ruleOperandListGroup();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOperandListGroup; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOperandListGroup"


    // $ANTLR start "ruleOperandListGroup"
    // InternalSQLParser.g:5894:1: ruleOperandListGroup returns [EObject current=null] : (otherlv_0= LeftParenthesis ( (lv_opGroup_1_0= ruleOperandList ) ) otherlv_2= RightParenthesis ) ;
    public final EObject ruleOperandListGroup() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_opGroup_1_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:5900:2: ( (otherlv_0= LeftParenthesis ( (lv_opGroup_1_0= ruleOperandList ) ) otherlv_2= RightParenthesis ) )
            // InternalSQLParser.g:5901:2: (otherlv_0= LeftParenthesis ( (lv_opGroup_1_0= ruleOperandList ) ) otherlv_2= RightParenthesis )
            {
            // InternalSQLParser.g:5901:2: (otherlv_0= LeftParenthesis ( (lv_opGroup_1_0= ruleOperandList ) ) otherlv_2= RightParenthesis )
            // InternalSQLParser.g:5902:3: otherlv_0= LeftParenthesis ( (lv_opGroup_1_0= ruleOperandList ) ) otherlv_2= RightParenthesis
            {
            otherlv_0=(Token)match(input,LeftParenthesis,FOLLOW_91); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getOperandListGroupAccess().getLeftParenthesisKeyword_0());
              		
            }
            // InternalSQLParser.g:5906:3: ( (lv_opGroup_1_0= ruleOperandList ) )
            // InternalSQLParser.g:5907:4: (lv_opGroup_1_0= ruleOperandList )
            {
            // InternalSQLParser.g:5907:4: (lv_opGroup_1_0= ruleOperandList )
            // InternalSQLParser.g:5908:5: lv_opGroup_1_0= ruleOperandList
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getOperandListGroupAccess().getOpGroupOperandListParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_13);
            lv_opGroup_1_0=ruleOperandList();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getOperandListGroupRule());
              					}
              					set(
              						current,
              						"opGroup",
              						lv_opGroup_1_0,
              						"org.xtext.example.mydsl_sql.SQL.OperandList");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getOperandListGroupAccess().getRightParenthesisKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOperandListGroup"


    // $ANTLR start "entryRuleOperandList"
    // InternalSQLParser.g:5933:1: entryRuleOperandList returns [EObject current=null] : iv_ruleOperandList= ruleOperandList EOF ;
    public final EObject entryRuleOperandList() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOperandList = null;


        try {
            // InternalSQLParser.g:5933:52: (iv_ruleOperandList= ruleOperandList EOF )
            // InternalSQLParser.g:5934:2: iv_ruleOperandList= ruleOperandList EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOperandListRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOperandList=ruleOperandList();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOperandList; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOperandList"


    // $ANTLR start "ruleOperandList"
    // InternalSQLParser.g:5940:1: ruleOperandList returns [EObject current=null] : (this_ScalarOperand_0= ruleScalarOperand ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleScalarOperand ) ) )+ )? ) ;
    public final EObject ruleOperandList() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_ScalarOperand_0 = null;

        EObject lv_entries_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:5946:2: ( (this_ScalarOperand_0= ruleScalarOperand ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleScalarOperand ) ) )+ )? ) )
            // InternalSQLParser.g:5947:2: (this_ScalarOperand_0= ruleScalarOperand ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleScalarOperand ) ) )+ )? )
            {
            // InternalSQLParser.g:5947:2: (this_ScalarOperand_0= ruleScalarOperand ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleScalarOperand ) ) )+ )? )
            // InternalSQLParser.g:5948:3: this_ScalarOperand_0= ruleScalarOperand ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleScalarOperand ) ) )+ )?
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getOperandListAccess().getScalarOperandParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_15);
            this_ScalarOperand_0=ruleScalarOperand();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ScalarOperand_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:5959:3: ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleScalarOperand ) ) )+ )?
            int alt112=2;
            int LA112_0 = input.LA(1);

            if ( (LA112_0==Comma) ) {
                alt112=1;
            }
            switch (alt112) {
                case 1 :
                    // InternalSQLParser.g:5960:4: () (otherlv_2= Comma ( (lv_entries_3_0= ruleScalarOperand ) ) )+
                    {
                    // InternalSQLParser.g:5960:4: ()
                    // InternalSQLParser.g:5961:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getOperandListAccess().getOpListEntriesAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalSQLParser.g:5970:4: (otherlv_2= Comma ( (lv_entries_3_0= ruleScalarOperand ) ) )+
                    int cnt111=0;
                    loop111:
                    do {
                        int alt111=2;
                        int LA111_0 = input.LA(1);

                        if ( (LA111_0==Comma) ) {
                            alt111=1;
                        }


                        switch (alt111) {
                    	case 1 :
                    	    // InternalSQLParser.g:5971:5: otherlv_2= Comma ( (lv_entries_3_0= ruleScalarOperand ) )
                    	    {
                    	    otherlv_2=(Token)match(input,Comma,FOLLOW_91); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_2, grammarAccess.getOperandListAccess().getCommaKeyword_1_1_0());
                    	      				
                    	    }
                    	    // InternalSQLParser.g:5975:5: ( (lv_entries_3_0= ruleScalarOperand ) )
                    	    // InternalSQLParser.g:5976:6: (lv_entries_3_0= ruleScalarOperand )
                    	    {
                    	    // InternalSQLParser.g:5976:6: (lv_entries_3_0= ruleScalarOperand )
                    	    // InternalSQLParser.g:5977:7: lv_entries_3_0= ruleScalarOperand
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getOperandListAccess().getEntriesScalarOperandParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_15);
                    	    lv_entries_3_0=ruleScalarOperand();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getOperandListRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"entries",
                    	      								lv_entries_3_0,
                    	      								"org.xtext.example.mydsl_sql.SQL.ScalarOperand");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt111 >= 1 ) break loop111;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(111, input);
                                throw eee;
                        }
                        cnt111++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOperandList"


    // $ANTLR start "entryRuleOperandGroup"
    // InternalSQLParser.g:6000:1: entryRuleOperandGroup returns [EObject current=null] : iv_ruleOperandGroup= ruleOperandGroup EOF ;
    public final EObject entryRuleOperandGroup() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOperandGroup = null;


        try {
            // InternalSQLParser.g:6000:53: (iv_ruleOperandGroup= ruleOperandGroup EOF )
            // InternalSQLParser.g:6001:2: iv_ruleOperandGroup= ruleOperandGroup EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOperandGroupRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOperandGroup=ruleOperandGroup();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOperandGroup; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOperandGroup"


    // $ANTLR start "ruleOperandGroup"
    // InternalSQLParser.g:6007:1: ruleOperandGroup returns [EObject current=null] : (this_Operand_0= ruleOperand | (otherlv_1= LeftParenthesis this_Operand_2= ruleOperand otherlv_3= RightParenthesis ) ) ;
    public final EObject ruleOperandGroup() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject this_Operand_0 = null;

        EObject this_Operand_2 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:6013:2: ( (this_Operand_0= ruleOperand | (otherlv_1= LeftParenthesis this_Operand_2= ruleOperand otherlv_3= RightParenthesis ) ) )
            // InternalSQLParser.g:6014:2: (this_Operand_0= ruleOperand | (otherlv_1= LeftParenthesis this_Operand_2= ruleOperand otherlv_3= RightParenthesis ) )
            {
            // InternalSQLParser.g:6014:2: (this_Operand_0= ruleOperand | (otherlv_1= LeftParenthesis this_Operand_2= ruleOperand otherlv_3= RightParenthesis ) )
            int alt113=2;
            int LA113_0 = input.LA(1);

            if ( (LA113_0==EXTRACT||LA113_0==CAST||LA113_0==CASE||(LA113_0>=RULE_JRPARAM && LA113_0<=RULE_JRNPARAM)||(LA113_0>=RULE_UNSIGNED && LA113_0<=RULE_SIGNED_DOUBLE)||(LA113_0>=RULE_STRING_ && LA113_0<=RULE_ID)) ) {
                alt113=1;
            }
            else if ( (LA113_0==LeftParenthesis) ) {
                int LA113_2 = input.LA(2);

                if ( (LA113_2==EXTRACT||LA113_2==CAST||LA113_2==CASE||LA113_2==LeftParenthesis||(LA113_2>=RULE_JRPARAM && LA113_2<=RULE_JRNPARAM)||(LA113_2>=RULE_UNSIGNED && LA113_2<=RULE_SIGNED_DOUBLE)||(LA113_2>=RULE_STRING_ && LA113_2<=RULE_ID)) ) {
                    alt113=2;
                }
                else if ( (LA113_2==SELECT) ) {
                    alt113=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 113, 2, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 113, 0, input);

                throw nvae;
            }
            switch (alt113) {
                case 1 :
                    // InternalSQLParser.g:6015:3: this_Operand_0= ruleOperand
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getOperandGroupAccess().getOperandParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Operand_0=ruleOperand();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Operand_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:6027:3: (otherlv_1= LeftParenthesis this_Operand_2= ruleOperand otherlv_3= RightParenthesis )
                    {
                    // InternalSQLParser.g:6027:3: (otherlv_1= LeftParenthesis this_Operand_2= ruleOperand otherlv_3= RightParenthesis )
                    // InternalSQLParser.g:6028:4: otherlv_1= LeftParenthesis this_Operand_2= ruleOperand otherlv_3= RightParenthesis
                    {
                    otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_78); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getOperandGroupAccess().getLeftParenthesisKeyword_1_0());
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				/* */
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getOperandGroupAccess().getOperandParserRuleCall_1_1());
                      			
                    }
                    pushFollow(FOLLOW_13);
                    this_Operand_2=ruleOperand();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_Operand_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }
                    otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_3, grammarAccess.getOperandGroupAccess().getRightParenthesisKeyword_1_2());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOperandGroup"


    // $ANTLR start "entryRuleOperand"
    // InternalSQLParser.g:6052:1: entryRuleOperand returns [EObject current=null] : iv_ruleOperand= ruleOperand EOF ;
    public final EObject entryRuleOperand() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOperand = null;


        try {
            // InternalSQLParser.g:6052:48: (iv_ruleOperand= ruleOperand EOF )
            // InternalSQLParser.g:6053:2: iv_ruleOperand= ruleOperand EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOperandRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOperand=ruleOperand();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOperand; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOperand"


    // $ANTLR start "ruleOperand"
    // InternalSQLParser.g:6059:1: ruleOperand returns [EObject current=null] : ( ( (lv_op1_0_0= ruleOperandFragment ) ) ( ( ( () otherlv_2= PlusSign ) | ( () otherlv_4= HyphenMinus ) | ( () otherlv_6= VerticalLineVerticalLine ) | ( () this_STAR_8= RULE_STAR ) | ( () otherlv_10= Solidus ) ) ( (lv_right_11_0= ruleOperandFragment ) ) )* ) ;
    public final EObject ruleOperand() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        Token this_STAR_8=null;
        Token otherlv_10=null;
        EObject lv_op1_0_0 = null;

        EObject lv_right_11_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:6065:2: ( ( ( (lv_op1_0_0= ruleOperandFragment ) ) ( ( ( () otherlv_2= PlusSign ) | ( () otherlv_4= HyphenMinus ) | ( () otherlv_6= VerticalLineVerticalLine ) | ( () this_STAR_8= RULE_STAR ) | ( () otherlv_10= Solidus ) ) ( (lv_right_11_0= ruleOperandFragment ) ) )* ) )
            // InternalSQLParser.g:6066:2: ( ( (lv_op1_0_0= ruleOperandFragment ) ) ( ( ( () otherlv_2= PlusSign ) | ( () otherlv_4= HyphenMinus ) | ( () otherlv_6= VerticalLineVerticalLine ) | ( () this_STAR_8= RULE_STAR ) | ( () otherlv_10= Solidus ) ) ( (lv_right_11_0= ruleOperandFragment ) ) )* )
            {
            // InternalSQLParser.g:6066:2: ( ( (lv_op1_0_0= ruleOperandFragment ) ) ( ( ( () otherlv_2= PlusSign ) | ( () otherlv_4= HyphenMinus ) | ( () otherlv_6= VerticalLineVerticalLine ) | ( () this_STAR_8= RULE_STAR ) | ( () otherlv_10= Solidus ) ) ( (lv_right_11_0= ruleOperandFragment ) ) )* )
            // InternalSQLParser.g:6067:3: ( (lv_op1_0_0= ruleOperandFragment ) ) ( ( ( () otherlv_2= PlusSign ) | ( () otherlv_4= HyphenMinus ) | ( () otherlv_6= VerticalLineVerticalLine ) | ( () this_STAR_8= RULE_STAR ) | ( () otherlv_10= Solidus ) ) ( (lv_right_11_0= ruleOperandFragment ) ) )*
            {
            // InternalSQLParser.g:6067:3: ( (lv_op1_0_0= ruleOperandFragment ) )
            // InternalSQLParser.g:6068:4: (lv_op1_0_0= ruleOperandFragment )
            {
            // InternalSQLParser.g:6068:4: (lv_op1_0_0= ruleOperandFragment )
            // InternalSQLParser.g:6069:5: lv_op1_0_0= ruleOperandFragment
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getOperandAccess().getOp1OperandFragmentParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_92);
            lv_op1_0_0=ruleOperandFragment();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getOperandRule());
              					}
              					set(
              						current,
              						"op1",
              						lv_op1_0_0,
              						"org.xtext.example.mydsl_sql.SQL.OperandFragment");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:6086:3: ( ( ( () otherlv_2= PlusSign ) | ( () otherlv_4= HyphenMinus ) | ( () otherlv_6= VerticalLineVerticalLine ) | ( () this_STAR_8= RULE_STAR ) | ( () otherlv_10= Solidus ) ) ( (lv_right_11_0= ruleOperandFragment ) ) )*
            loop115:
            do {
                int alt115=2;
                int LA115_0 = input.LA(1);

                if ( (LA115_0==RULE_STAR) ) {
                    int LA115_2 = input.LA(2);

                    if ( (LA115_2==LeftParenthesis) ) {
                        int LA115_4 = input.LA(3);

                        if ( (LA115_4==SELECT) ) {
                            alt115=1;
                        }


                    }
                    else if ( (LA115_2==EXTRACT||LA115_2==CAST||LA115_2==CASE||(LA115_2>=RULE_JRPARAM && LA115_2<=RULE_JRNPARAM)||(LA115_2>=RULE_UNSIGNED && LA115_2<=RULE_SIGNED_DOUBLE)||(LA115_2>=RULE_STRING_ && LA115_2<=RULE_ID)) ) {
                        alt115=1;
                    }


                }
                else if ( (LA115_0==VerticalLineVerticalLine||LA115_0==PlusSign||LA115_0==HyphenMinus||LA115_0==Solidus) ) {
                    alt115=1;
                }


                switch (alt115) {
            	case 1 :
            	    // InternalSQLParser.g:6087:4: ( ( () otherlv_2= PlusSign ) | ( () otherlv_4= HyphenMinus ) | ( () otherlv_6= VerticalLineVerticalLine ) | ( () this_STAR_8= RULE_STAR ) | ( () otherlv_10= Solidus ) ) ( (lv_right_11_0= ruleOperandFragment ) )
            	    {
            	    // InternalSQLParser.g:6087:4: ( ( () otherlv_2= PlusSign ) | ( () otherlv_4= HyphenMinus ) | ( () otherlv_6= VerticalLineVerticalLine ) | ( () this_STAR_8= RULE_STAR ) | ( () otherlv_10= Solidus ) )
            	    int alt114=5;
            	    switch ( input.LA(1) ) {
            	    case PlusSign:
            	        {
            	        alt114=1;
            	        }
            	        break;
            	    case HyphenMinus:
            	        {
            	        alt114=2;
            	        }
            	        break;
            	    case VerticalLineVerticalLine:
            	        {
            	        alt114=3;
            	        }
            	        break;
            	    case RULE_STAR:
            	        {
            	        alt114=4;
            	        }
            	        break;
            	    case Solidus:
            	        {
            	        alt114=5;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 114, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt114) {
            	        case 1 :
            	            // InternalSQLParser.g:6088:5: ( () otherlv_2= PlusSign )
            	            {
            	            // InternalSQLParser.g:6088:5: ( () otherlv_2= PlusSign )
            	            // InternalSQLParser.g:6089:6: () otherlv_2= PlusSign
            	            {
            	            // InternalSQLParser.g:6089:6: ()
            	            // InternalSQLParser.g:6090:7: 
            	            {
            	            if ( state.backtracking==0 ) {

            	              							/* */
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							current = forceCreateModelElementAndSet(
            	              								grammarAccess.getOperandAccess().getPlusLeftAction_1_0_0_0(),
            	              								current);
            	              						
            	            }

            	            }

            	            otherlv_2=(Token)match(input,PlusSign,FOLLOW_78); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              						newLeafNode(otherlv_2, grammarAccess.getOperandAccess().getPlusSignKeyword_1_0_0_1());
            	              					
            	            }

            	            }


            	            }
            	            break;
            	        case 2 :
            	            // InternalSQLParser.g:6105:5: ( () otherlv_4= HyphenMinus )
            	            {
            	            // InternalSQLParser.g:6105:5: ( () otherlv_4= HyphenMinus )
            	            // InternalSQLParser.g:6106:6: () otherlv_4= HyphenMinus
            	            {
            	            // InternalSQLParser.g:6106:6: ()
            	            // InternalSQLParser.g:6107:7: 
            	            {
            	            if ( state.backtracking==0 ) {

            	              							/* */
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							current = forceCreateModelElementAndSet(
            	              								grammarAccess.getOperandAccess().getMinusLeftAction_1_0_1_0(),
            	              								current);
            	              						
            	            }

            	            }

            	            otherlv_4=(Token)match(input,HyphenMinus,FOLLOW_78); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              						newLeafNode(otherlv_4, grammarAccess.getOperandAccess().getHyphenMinusKeyword_1_0_1_1());
            	              					
            	            }

            	            }


            	            }
            	            break;
            	        case 3 :
            	            // InternalSQLParser.g:6122:5: ( () otherlv_6= VerticalLineVerticalLine )
            	            {
            	            // InternalSQLParser.g:6122:5: ( () otherlv_6= VerticalLineVerticalLine )
            	            // InternalSQLParser.g:6123:6: () otherlv_6= VerticalLineVerticalLine
            	            {
            	            // InternalSQLParser.g:6123:6: ()
            	            // InternalSQLParser.g:6124:7: 
            	            {
            	            if ( state.backtracking==0 ) {

            	              							/* */
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							current = forceCreateModelElementAndSet(
            	              								grammarAccess.getOperandAccess().getConcatLeftAction_1_0_2_0(),
            	              								current);
            	              						
            	            }

            	            }

            	            otherlv_6=(Token)match(input,VerticalLineVerticalLine,FOLLOW_78); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              						newLeafNode(otherlv_6, grammarAccess.getOperandAccess().getVerticalLineVerticalLineKeyword_1_0_2_1());
            	              					
            	            }

            	            }


            	            }
            	            break;
            	        case 4 :
            	            // InternalSQLParser.g:6139:5: ( () this_STAR_8= RULE_STAR )
            	            {
            	            // InternalSQLParser.g:6139:5: ( () this_STAR_8= RULE_STAR )
            	            // InternalSQLParser.g:6140:6: () this_STAR_8= RULE_STAR
            	            {
            	            // InternalSQLParser.g:6140:6: ()
            	            // InternalSQLParser.g:6141:7: 
            	            {
            	            if ( state.backtracking==0 ) {

            	              							/* */
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							current = forceCreateModelElementAndSet(
            	              								grammarAccess.getOperandAccess().getMultiplyLeftAction_1_0_3_0(),
            	              								current);
            	              						
            	            }

            	            }

            	            this_STAR_8=(Token)match(input,RULE_STAR,FOLLOW_78); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              						newLeafNode(this_STAR_8, grammarAccess.getOperandAccess().getSTARTerminalRuleCall_1_0_3_1());
            	              					
            	            }

            	            }


            	            }
            	            break;
            	        case 5 :
            	            // InternalSQLParser.g:6156:5: ( () otherlv_10= Solidus )
            	            {
            	            // InternalSQLParser.g:6156:5: ( () otherlv_10= Solidus )
            	            // InternalSQLParser.g:6157:6: () otherlv_10= Solidus
            	            {
            	            // InternalSQLParser.g:6157:6: ()
            	            // InternalSQLParser.g:6158:7: 
            	            {
            	            if ( state.backtracking==0 ) {

            	              							/* */
            	              						
            	            }
            	            if ( state.backtracking==0 ) {

            	              							current = forceCreateModelElementAndSet(
            	              								grammarAccess.getOperandAccess().getDivisionLeftAction_1_0_4_0(),
            	              								current);
            	              						
            	            }

            	            }

            	            otherlv_10=(Token)match(input,Solidus,FOLLOW_78); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              						newLeafNode(otherlv_10, grammarAccess.getOperandAccess().getSolidusKeyword_1_0_4_1());
            	              					
            	            }

            	            }


            	            }
            	            break;

            	    }

            	    // InternalSQLParser.g:6173:4: ( (lv_right_11_0= ruleOperandFragment ) )
            	    // InternalSQLParser.g:6174:5: (lv_right_11_0= ruleOperandFragment )
            	    {
            	    // InternalSQLParser.g:6174:5: (lv_right_11_0= ruleOperandFragment )
            	    // InternalSQLParser.g:6175:6: lv_right_11_0= ruleOperandFragment
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getOperandAccess().getRightOperandFragmentParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_92);
            	    lv_right_11_0=ruleOperandFragment();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getOperandRule());
            	      						}
            	      						set(
            	      							current,
            	      							"right",
            	      							lv_right_11_0,
            	      							"org.xtext.example.mydsl_sql.SQL.OperandFragment");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop115;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOperand"


    // $ANTLR start "entryRuleOperandFragment"
    // InternalSQLParser.g:6197:1: entryRuleOperandFragment returns [EObject current=null] : iv_ruleOperandFragment= ruleOperandFragment EOF ;
    public final EObject entryRuleOperandFragment() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOperandFragment = null;


        try {
            // InternalSQLParser.g:6197:56: (iv_ruleOperandFragment= ruleOperandFragment EOF )
            // InternalSQLParser.g:6198:2: iv_ruleOperandFragment= ruleOperandFragment EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOperandFragmentRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOperandFragment=ruleOperandFragment();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOperandFragment; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOperandFragment"


    // $ANTLR start "ruleOperandFragment"
    // InternalSQLParser.g:6204:1: ruleOperandFragment returns [EObject current=null] : ( ( (lv_column_0_0= ruleColumnOperand ) ) | ( (lv_xop_1_0= ruleXOperandFragment ) ) | ( (lv_subq_2_0= ruleSubQueryOperand ) ) | ( (lv_fcast_3_0= ruleOpFunctionCast ) ) | ( (lv_fext_4_0= ruleFunctionExtract ) ) | ( (lv_func_5_0= ruleOperandFunction ) ) | ( (lv_sqlcase_6_0= ruleSQLCASE ) ) ) ;
    public final EObject ruleOperandFragment() throws RecognitionException {
        EObject current = null;

        EObject lv_column_0_0 = null;

        EObject lv_xop_1_0 = null;

        EObject lv_subq_2_0 = null;

        EObject lv_fcast_3_0 = null;

        EObject lv_fext_4_0 = null;

        EObject lv_func_5_0 = null;

        EObject lv_sqlcase_6_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:6210:2: ( ( ( (lv_column_0_0= ruleColumnOperand ) ) | ( (lv_xop_1_0= ruleXOperandFragment ) ) | ( (lv_subq_2_0= ruleSubQueryOperand ) ) | ( (lv_fcast_3_0= ruleOpFunctionCast ) ) | ( (lv_fext_4_0= ruleFunctionExtract ) ) | ( (lv_func_5_0= ruleOperandFunction ) ) | ( (lv_sqlcase_6_0= ruleSQLCASE ) ) ) )
            // InternalSQLParser.g:6211:2: ( ( (lv_column_0_0= ruleColumnOperand ) ) | ( (lv_xop_1_0= ruleXOperandFragment ) ) | ( (lv_subq_2_0= ruleSubQueryOperand ) ) | ( (lv_fcast_3_0= ruleOpFunctionCast ) ) | ( (lv_fext_4_0= ruleFunctionExtract ) ) | ( (lv_func_5_0= ruleOperandFunction ) ) | ( (lv_sqlcase_6_0= ruleSQLCASE ) ) )
            {
            // InternalSQLParser.g:6211:2: ( ( (lv_column_0_0= ruleColumnOperand ) ) | ( (lv_xop_1_0= ruleXOperandFragment ) ) | ( (lv_subq_2_0= ruleSubQueryOperand ) ) | ( (lv_fcast_3_0= ruleOpFunctionCast ) ) | ( (lv_fext_4_0= ruleFunctionExtract ) ) | ( (lv_func_5_0= ruleOperandFunction ) ) | ( (lv_sqlcase_6_0= ruleSQLCASE ) ) )
            int alt116=7;
            alt116 = dfa116.predict(input);
            switch (alt116) {
                case 1 :
                    // InternalSQLParser.g:6212:3: ( (lv_column_0_0= ruleColumnOperand ) )
                    {
                    // InternalSQLParser.g:6212:3: ( (lv_column_0_0= ruleColumnOperand ) )
                    // InternalSQLParser.g:6213:4: (lv_column_0_0= ruleColumnOperand )
                    {
                    // InternalSQLParser.g:6213:4: (lv_column_0_0= ruleColumnOperand )
                    // InternalSQLParser.g:6214:5: lv_column_0_0= ruleColumnOperand
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getOperandFragmentAccess().getColumnColumnOperandParserRuleCall_0_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_column_0_0=ruleColumnOperand();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getOperandFragmentRule());
                      					}
                      					set(
                      						current,
                      						"column",
                      						lv_column_0_0,
                      						"org.xtext.example.mydsl_sql.SQL.ColumnOperand");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:6232:3: ( (lv_xop_1_0= ruleXOperandFragment ) )
                    {
                    // InternalSQLParser.g:6232:3: ( (lv_xop_1_0= ruleXOperandFragment ) )
                    // InternalSQLParser.g:6233:4: (lv_xop_1_0= ruleXOperandFragment )
                    {
                    // InternalSQLParser.g:6233:4: (lv_xop_1_0= ruleXOperandFragment )
                    // InternalSQLParser.g:6234:5: lv_xop_1_0= ruleXOperandFragment
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getOperandFragmentAccess().getXopXOperandFragmentParserRuleCall_1_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_xop_1_0=ruleXOperandFragment();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getOperandFragmentRule());
                      					}
                      					set(
                      						current,
                      						"xop",
                      						lv_xop_1_0,
                      						"org.xtext.example.mydsl_sql.SQL.XOperandFragment");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:6252:3: ( (lv_subq_2_0= ruleSubQueryOperand ) )
                    {
                    // InternalSQLParser.g:6252:3: ( (lv_subq_2_0= ruleSubQueryOperand ) )
                    // InternalSQLParser.g:6253:4: (lv_subq_2_0= ruleSubQueryOperand )
                    {
                    // InternalSQLParser.g:6253:4: (lv_subq_2_0= ruleSubQueryOperand )
                    // InternalSQLParser.g:6254:5: lv_subq_2_0= ruleSubQueryOperand
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getOperandFragmentAccess().getSubqSubQueryOperandParserRuleCall_2_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_subq_2_0=ruleSubQueryOperand();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getOperandFragmentRule());
                      					}
                      					set(
                      						current,
                      						"subq",
                      						lv_subq_2_0,
                      						"org.xtext.example.mydsl_sql.SQL.SubQueryOperand");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 4 :
                    // InternalSQLParser.g:6272:3: ( (lv_fcast_3_0= ruleOpFunctionCast ) )
                    {
                    // InternalSQLParser.g:6272:3: ( (lv_fcast_3_0= ruleOpFunctionCast ) )
                    // InternalSQLParser.g:6273:4: (lv_fcast_3_0= ruleOpFunctionCast )
                    {
                    // InternalSQLParser.g:6273:4: (lv_fcast_3_0= ruleOpFunctionCast )
                    // InternalSQLParser.g:6274:5: lv_fcast_3_0= ruleOpFunctionCast
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getOperandFragmentAccess().getFcastOpFunctionCastParserRuleCall_3_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_fcast_3_0=ruleOpFunctionCast();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getOperandFragmentRule());
                      					}
                      					set(
                      						current,
                      						"fcast",
                      						lv_fcast_3_0,
                      						"org.xtext.example.mydsl_sql.SQL.OpFunctionCast");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 5 :
                    // InternalSQLParser.g:6292:3: ( (lv_fext_4_0= ruleFunctionExtract ) )
                    {
                    // InternalSQLParser.g:6292:3: ( (lv_fext_4_0= ruleFunctionExtract ) )
                    // InternalSQLParser.g:6293:4: (lv_fext_4_0= ruleFunctionExtract )
                    {
                    // InternalSQLParser.g:6293:4: (lv_fext_4_0= ruleFunctionExtract )
                    // InternalSQLParser.g:6294:5: lv_fext_4_0= ruleFunctionExtract
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getOperandFragmentAccess().getFextFunctionExtractParserRuleCall_4_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_fext_4_0=ruleFunctionExtract();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getOperandFragmentRule());
                      					}
                      					set(
                      						current,
                      						"fext",
                      						lv_fext_4_0,
                      						"org.xtext.example.mydsl_sql.SQL.FunctionExtract");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 6 :
                    // InternalSQLParser.g:6312:3: ( (lv_func_5_0= ruleOperandFunction ) )
                    {
                    // InternalSQLParser.g:6312:3: ( (lv_func_5_0= ruleOperandFunction ) )
                    // InternalSQLParser.g:6313:4: (lv_func_5_0= ruleOperandFunction )
                    {
                    // InternalSQLParser.g:6313:4: (lv_func_5_0= ruleOperandFunction )
                    // InternalSQLParser.g:6314:5: lv_func_5_0= ruleOperandFunction
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getOperandFragmentAccess().getFuncOperandFunctionParserRuleCall_5_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_func_5_0=ruleOperandFunction();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getOperandFragmentRule());
                      					}
                      					set(
                      						current,
                      						"func",
                      						lv_func_5_0,
                      						"org.xtext.example.mydsl_sql.SQL.OperandFunction");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 7 :
                    // InternalSQLParser.g:6332:3: ( (lv_sqlcase_6_0= ruleSQLCASE ) )
                    {
                    // InternalSQLParser.g:6332:3: ( (lv_sqlcase_6_0= ruleSQLCASE ) )
                    // InternalSQLParser.g:6333:4: (lv_sqlcase_6_0= ruleSQLCASE )
                    {
                    // InternalSQLParser.g:6333:4: (lv_sqlcase_6_0= ruleSQLCASE )
                    // InternalSQLParser.g:6334:5: lv_sqlcase_6_0= ruleSQLCASE
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getOperandFragmentAccess().getSqlcaseSQLCASEParserRuleCall_6_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_sqlcase_6_0=ruleSQLCASE();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getOperandFragmentRule());
                      					}
                      					set(
                      						current,
                      						"sqlcase",
                      						lv_sqlcase_6_0,
                      						"org.xtext.example.mydsl_sql.SQL.SQLCASE");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOperandFragment"


    // $ANTLR start "entryRuleOperandFunction"
    // InternalSQLParser.g:6355:1: entryRuleOperandFunction returns [EObject current=null] : iv_ruleOperandFunction= ruleOperandFunction EOF ;
    public final EObject entryRuleOperandFunction() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOperandFunction = null;


        try {
            // InternalSQLParser.g:6355:56: (iv_ruleOperandFunction= ruleOperandFunction EOF )
            // InternalSQLParser.g:6356:2: iv_ruleOperandFunction= ruleOperandFunction EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOperandFunctionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOperandFunction=ruleOperandFunction();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOperandFunction; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOperandFunction"


    // $ANTLR start "ruleOperandFunction"
    // InternalSQLParser.g:6362:1: ruleOperandFunction returns [EObject current=null] : ( () ( (lv_fname_1_0= ruleFNAME ) ) ( ( (lv_star_2_0= RULE_STAR ) ) | ( (lv_args_3_0= ruleOpFunctionArg ) ) )? otherlv_4= RightParenthesis ( (lv_fan_5_0= ruleFunctionAnalytical ) )? ) ;
    public final EObject ruleOperandFunction() throws RecognitionException {
        EObject current = null;

        Token lv_star_2_0=null;
        Token otherlv_4=null;
        AntlrDatatypeRuleToken lv_fname_1_0 = null;

        EObject lv_args_3_0 = null;

        EObject lv_fan_5_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:6368:2: ( ( () ( (lv_fname_1_0= ruleFNAME ) ) ( ( (lv_star_2_0= RULE_STAR ) ) | ( (lv_args_3_0= ruleOpFunctionArg ) ) )? otherlv_4= RightParenthesis ( (lv_fan_5_0= ruleFunctionAnalytical ) )? ) )
            // InternalSQLParser.g:6369:2: ( () ( (lv_fname_1_0= ruleFNAME ) ) ( ( (lv_star_2_0= RULE_STAR ) ) | ( (lv_args_3_0= ruleOpFunctionArg ) ) )? otherlv_4= RightParenthesis ( (lv_fan_5_0= ruleFunctionAnalytical ) )? )
            {
            // InternalSQLParser.g:6369:2: ( () ( (lv_fname_1_0= ruleFNAME ) ) ( ( (lv_star_2_0= RULE_STAR ) ) | ( (lv_args_3_0= ruleOpFunctionArg ) ) )? otherlv_4= RightParenthesis ( (lv_fan_5_0= ruleFunctionAnalytical ) )? )
            // InternalSQLParser.g:6370:3: () ( (lv_fname_1_0= ruleFNAME ) ) ( ( (lv_star_2_0= RULE_STAR ) ) | ( (lv_args_3_0= ruleOpFunctionArg ) ) )? otherlv_4= RightParenthesis ( (lv_fan_5_0= ruleFunctionAnalytical ) )?
            {
            // InternalSQLParser.g:6370:3: ()
            // InternalSQLParser.g:6371:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getOperandFunctionAccess().getOpFunctionAction_0(),
              					current);
              			
            }

            }

            // InternalSQLParser.g:6380:3: ( (lv_fname_1_0= ruleFNAME ) )
            // InternalSQLParser.g:6381:4: (lv_fname_1_0= ruleFNAME )
            {
            // InternalSQLParser.g:6381:4: (lv_fname_1_0= ruleFNAME )
            // InternalSQLParser.g:6382:5: lv_fname_1_0= ruleFNAME
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getOperandFunctionAccess().getFnameFNAMEParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_93);
            lv_fname_1_0=ruleFNAME();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getOperandFunctionRule());
              					}
              					set(
              						current,
              						"fname",
              						lv_fname_1_0,
              						"org.xtext.example.mydsl_sql.SQL.FNAME");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:6399:3: ( ( (lv_star_2_0= RULE_STAR ) ) | ( (lv_args_3_0= ruleOpFunctionArg ) ) )?
            int alt117=3;
            int LA117_0 = input.LA(1);

            if ( (LA117_0==RULE_STAR) ) {
                alt117=1;
            }
            else if ( (LA117_0==DISTINCT||LA117_0==EXTRACT||LA117_0==CAST||LA117_0==CASE||LA117_0==ALL||LA117_0==LeftParenthesis||(LA117_0>=RULE_JRPARAM && LA117_0<=RULE_JRNPARAM)||(LA117_0>=RULE_UNSIGNED && LA117_0<=RULE_SIGNED_DOUBLE)||(LA117_0>=RULE_STRING_ && LA117_0<=RULE_ID)) ) {
                alt117=2;
            }
            switch (alt117) {
                case 1 :
                    // InternalSQLParser.g:6400:4: ( (lv_star_2_0= RULE_STAR ) )
                    {
                    // InternalSQLParser.g:6400:4: ( (lv_star_2_0= RULE_STAR ) )
                    // InternalSQLParser.g:6401:5: (lv_star_2_0= RULE_STAR )
                    {
                    // InternalSQLParser.g:6401:5: (lv_star_2_0= RULE_STAR )
                    // InternalSQLParser.g:6402:6: lv_star_2_0= RULE_STAR
                    {
                    lv_star_2_0=(Token)match(input,RULE_STAR,FOLLOW_13); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_star_2_0, grammarAccess.getOperandFunctionAccess().getStarSTARTerminalRuleCall_2_0_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getOperandFunctionRule());
                      						}
                      						setWithLastConsumed(
                      							current,
                      							"star",
                      							lv_star_2_0,
                      							"org.xtext.example.mydsl_sql.SQL.STAR");
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:6419:4: ( (lv_args_3_0= ruleOpFunctionArg ) )
                    {
                    // InternalSQLParser.g:6419:4: ( (lv_args_3_0= ruleOpFunctionArg ) )
                    // InternalSQLParser.g:6420:5: (lv_args_3_0= ruleOpFunctionArg )
                    {
                    // InternalSQLParser.g:6420:5: (lv_args_3_0= ruleOpFunctionArg )
                    // InternalSQLParser.g:6421:6: lv_args_3_0= ruleOpFunctionArg
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getOperandFunctionAccess().getArgsOpFunctionArgParserRuleCall_2_1_0());
                      					
                    }
                    pushFollow(FOLLOW_13);
                    lv_args_3_0=ruleOpFunctionArg();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getOperandFunctionRule());
                      						}
                      						set(
                      							current,
                      							"args",
                      							lv_args_3_0,
                      							"org.xtext.example.mydsl_sql.SQL.OpFunctionArg");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            otherlv_4=(Token)match(input,RightParenthesis,FOLLOW_94); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getOperandFunctionAccess().getRightParenthesisKeyword_3());
              		
            }
            // InternalSQLParser.g:6443:3: ( (lv_fan_5_0= ruleFunctionAnalytical ) )?
            int alt118=2;
            int LA118_0 = input.LA(1);

            if ( (LA118_0==OVER) ) {
                alt118=1;
            }
            switch (alt118) {
                case 1 :
                    // InternalSQLParser.g:6444:4: (lv_fan_5_0= ruleFunctionAnalytical )
                    {
                    // InternalSQLParser.g:6444:4: (lv_fan_5_0= ruleFunctionAnalytical )
                    // InternalSQLParser.g:6445:5: lv_fan_5_0= ruleFunctionAnalytical
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getOperandFunctionAccess().getFanFunctionAnalyticalParserRuleCall_4_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_fan_5_0=ruleFunctionAnalytical();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getOperandFunctionRule());
                      					}
                      					set(
                      						current,
                      						"fan",
                      						lv_fan_5_0,
                      						"org.xtext.example.mydsl_sql.SQL.FunctionAnalytical");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOperandFunction"


    // $ANTLR start "entryRuleFunctionExtract"
    // InternalSQLParser.g:6466:1: entryRuleFunctionExtract returns [EObject current=null] : iv_ruleFunctionExtract= ruleFunctionExtract EOF ;
    public final EObject entryRuleFunctionExtract() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFunctionExtract = null;


        try {
            // InternalSQLParser.g:6466:56: (iv_ruleFunctionExtract= ruleFunctionExtract EOF )
            // InternalSQLParser.g:6467:2: iv_ruleFunctionExtract= ruleFunctionExtract EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFunctionExtractRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFunctionExtract=ruleFunctionExtract();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFunctionExtract; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFunctionExtract"


    // $ANTLR start "ruleFunctionExtract"
    // InternalSQLParser.g:6473:1: ruleFunctionExtract returns [EObject current=null] : (otherlv_0= EXTRACT otherlv_1= LeftParenthesis ( (lv_v_2_0= ruleEXTRACT_VALUES ) ) otherlv_3= FROM ( (lv_operand_4_0= ruleOperandGroup ) ) otherlv_5= RightParenthesis ) ;
    public final EObject ruleFunctionExtract() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Enumerator lv_v_2_0 = null;

        EObject lv_operand_4_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:6479:2: ( (otherlv_0= EXTRACT otherlv_1= LeftParenthesis ( (lv_v_2_0= ruleEXTRACT_VALUES ) ) otherlv_3= FROM ( (lv_operand_4_0= ruleOperandGroup ) ) otherlv_5= RightParenthesis ) )
            // InternalSQLParser.g:6480:2: (otherlv_0= EXTRACT otherlv_1= LeftParenthesis ( (lv_v_2_0= ruleEXTRACT_VALUES ) ) otherlv_3= FROM ( (lv_operand_4_0= ruleOperandGroup ) ) otherlv_5= RightParenthesis )
            {
            // InternalSQLParser.g:6480:2: (otherlv_0= EXTRACT otherlv_1= LeftParenthesis ( (lv_v_2_0= ruleEXTRACT_VALUES ) ) otherlv_3= FROM ( (lv_operand_4_0= ruleOperandGroup ) ) otherlv_5= RightParenthesis )
            // InternalSQLParser.g:6481:3: otherlv_0= EXTRACT otherlv_1= LeftParenthesis ( (lv_v_2_0= ruleEXTRACT_VALUES ) ) otherlv_3= FROM ( (lv_operand_4_0= ruleOperandGroup ) ) otherlv_5= RightParenthesis
            {
            otherlv_0=(Token)match(input,EXTRACT,FOLLOW_11); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getFunctionExtractAccess().getEXTRACTKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_95); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getFunctionExtractAccess().getLeftParenthesisKeyword_1());
              		
            }
            // InternalSQLParser.g:6489:3: ( (lv_v_2_0= ruleEXTRACT_VALUES ) )
            // InternalSQLParser.g:6490:4: (lv_v_2_0= ruleEXTRACT_VALUES )
            {
            // InternalSQLParser.g:6490:4: (lv_v_2_0= ruleEXTRACT_VALUES )
            // InternalSQLParser.g:6491:5: lv_v_2_0= ruleEXTRACT_VALUES
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getFunctionExtractAccess().getVEXTRACT_VALUESEnumRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_41);
            lv_v_2_0=ruleEXTRACT_VALUES();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getFunctionExtractRule());
              					}
              					set(
              						current,
              						"v",
              						lv_v_2_0,
              						"org.xtext.example.mydsl_sql.SQL.EXTRACT_VALUES");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,FROM,FOLLOW_78); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getFunctionExtractAccess().getFROMKeyword_3());
              		
            }
            // InternalSQLParser.g:6512:3: ( (lv_operand_4_0= ruleOperandGroup ) )
            // InternalSQLParser.g:6513:4: (lv_operand_4_0= ruleOperandGroup )
            {
            // InternalSQLParser.g:6513:4: (lv_operand_4_0= ruleOperandGroup )
            // InternalSQLParser.g:6514:5: lv_operand_4_0= ruleOperandGroup
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getFunctionExtractAccess().getOperandOperandGroupParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_13);
            lv_operand_4_0=ruleOperandGroup();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getFunctionExtractRule());
              					}
              					set(
              						current,
              						"operand",
              						lv_operand_4_0,
              						"org.xtext.example.mydsl_sql.SQL.OperandGroup");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getFunctionExtractAccess().getRightParenthesisKeyword_5());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFunctionExtract"


    // $ANTLR start "entryRuleFunctionAnalytical"
    // InternalSQLParser.g:6539:1: entryRuleFunctionAnalytical returns [EObject current=null] : iv_ruleFunctionAnalytical= ruleFunctionAnalytical EOF ;
    public final EObject entryRuleFunctionAnalytical() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFunctionAnalytical = null;


        try {
            // InternalSQLParser.g:6539:59: (iv_ruleFunctionAnalytical= ruleFunctionAnalytical EOF )
            // InternalSQLParser.g:6540:2: iv_ruleFunctionAnalytical= ruleFunctionAnalytical EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFunctionAnalyticalRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFunctionAnalytical=ruleFunctionAnalytical();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFunctionAnalytical; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFunctionAnalytical"


    // $ANTLR start "ruleFunctionAnalytical"
    // InternalSQLParser.g:6546:1: ruleFunctionAnalytical returns [EObject current=null] : (otherlv_0= OVER otherlv_1= LeftParenthesis ( (lv_anClause_2_0= ruleAnalyticClause ) ) otherlv_3= RightParenthesis ) ;
    public final EObject ruleFunctionAnalytical() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_anClause_2_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:6552:2: ( (otherlv_0= OVER otherlv_1= LeftParenthesis ( (lv_anClause_2_0= ruleAnalyticClause ) ) otherlv_3= RightParenthesis ) )
            // InternalSQLParser.g:6553:2: (otherlv_0= OVER otherlv_1= LeftParenthesis ( (lv_anClause_2_0= ruleAnalyticClause ) ) otherlv_3= RightParenthesis )
            {
            // InternalSQLParser.g:6553:2: (otherlv_0= OVER otherlv_1= LeftParenthesis ( (lv_anClause_2_0= ruleAnalyticClause ) ) otherlv_3= RightParenthesis )
            // InternalSQLParser.g:6554:3: otherlv_0= OVER otherlv_1= LeftParenthesis ( (lv_anClause_2_0= ruleAnalyticClause ) ) otherlv_3= RightParenthesis
            {
            otherlv_0=(Token)match(input,OVER,FOLLOW_11); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getFunctionAnalyticalAccess().getOVERKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_96); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getFunctionAnalyticalAccess().getLeftParenthesisKeyword_1());
              		
            }
            // InternalSQLParser.g:6562:3: ( (lv_anClause_2_0= ruleAnalyticClause ) )
            // InternalSQLParser.g:6563:4: (lv_anClause_2_0= ruleAnalyticClause )
            {
            // InternalSQLParser.g:6563:4: (lv_anClause_2_0= ruleAnalyticClause )
            // InternalSQLParser.g:6564:5: lv_anClause_2_0= ruleAnalyticClause
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getFunctionAnalyticalAccess().getAnClauseAnalyticClauseParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_13);
            lv_anClause_2_0=ruleAnalyticClause();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getFunctionAnalyticalRule());
              					}
              					set(
              						current,
              						"anClause",
              						lv_anClause_2_0,
              						"org.xtext.example.mydsl_sql.SQL.AnalyticClause");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getFunctionAnalyticalAccess().getRightParenthesisKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFunctionAnalytical"


    // $ANTLR start "entryRuleAnalyticClause"
    // InternalSQLParser.g:6589:1: entryRuleAnalyticClause returns [EObject current=null] : iv_ruleAnalyticClause= ruleAnalyticClause EOF ;
    public final EObject entryRuleAnalyticClause() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAnalyticClause = null;


        try {
            // InternalSQLParser.g:6589:55: (iv_ruleAnalyticClause= ruleAnalyticClause EOF )
            // InternalSQLParser.g:6590:2: iv_ruleAnalyticClause= ruleAnalyticClause EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnalyticClauseRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnalyticClause=ruleAnalyticClause();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnalyticClause; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleAnalyticClause"


    // $ANTLR start "ruleAnalyticClause"
    // InternalSQLParser.g:6596:1: ruleAnalyticClause returns [EObject current=null] : ( () ( (lv_abc_1_0= ruleQueryPartitionClause ) )? ( ( (lv_obc_2_0= ruleOrderByClause ) ) ( (lv_winc_3_0= ruleWindowingClause ) )? )? ) ;
    public final EObject ruleAnalyticClause() throws RecognitionException {
        EObject current = null;

        EObject lv_abc_1_0 = null;

        EObject lv_obc_2_0 = null;

        EObject lv_winc_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:6602:2: ( ( () ( (lv_abc_1_0= ruleQueryPartitionClause ) )? ( ( (lv_obc_2_0= ruleOrderByClause ) ) ( (lv_winc_3_0= ruleWindowingClause ) )? )? ) )
            // InternalSQLParser.g:6603:2: ( () ( (lv_abc_1_0= ruleQueryPartitionClause ) )? ( ( (lv_obc_2_0= ruleOrderByClause ) ) ( (lv_winc_3_0= ruleWindowingClause ) )? )? )
            {
            // InternalSQLParser.g:6603:2: ( () ( (lv_abc_1_0= ruleQueryPartitionClause ) )? ( ( (lv_obc_2_0= ruleOrderByClause ) ) ( (lv_winc_3_0= ruleWindowingClause ) )? )? )
            // InternalSQLParser.g:6604:3: () ( (lv_abc_1_0= ruleQueryPartitionClause ) )? ( ( (lv_obc_2_0= ruleOrderByClause ) ) ( (lv_winc_3_0= ruleWindowingClause ) )? )?
            {
            // InternalSQLParser.g:6604:3: ()
            // InternalSQLParser.g:6605:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getAnalyticClauseAccess().getAnalyticClauseAction_0(),
              					current);
              			
            }

            }

            // InternalSQLParser.g:6614:3: ( (lv_abc_1_0= ruleQueryPartitionClause ) )?
            int alt119=2;
            int LA119_0 = input.LA(1);

            if ( (LA119_0==PARTITION) ) {
                alt119=1;
            }
            switch (alt119) {
                case 1 :
                    // InternalSQLParser.g:6615:4: (lv_abc_1_0= ruleQueryPartitionClause )
                    {
                    // InternalSQLParser.g:6615:4: (lv_abc_1_0= ruleQueryPartitionClause )
                    // InternalSQLParser.g:6616:5: lv_abc_1_0= ruleQueryPartitionClause
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getAnalyticClauseAccess().getAbcQueryPartitionClauseParserRuleCall_1_0());
                      				
                    }
                    pushFollow(FOLLOW_97);
                    lv_abc_1_0=ruleQueryPartitionClause();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getAnalyticClauseRule());
                      					}
                      					set(
                      						current,
                      						"abc",
                      						lv_abc_1_0,
                      						"org.xtext.example.mydsl_sql.SQL.QueryPartitionClause");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalSQLParser.g:6633:3: ( ( (lv_obc_2_0= ruleOrderByClause ) ) ( (lv_winc_3_0= ruleWindowingClause ) )? )?
            int alt121=2;
            int LA121_0 = input.LA(1);

            if ( (LA121_0==ORDER) ) {
                alt121=1;
            }
            switch (alt121) {
                case 1 :
                    // InternalSQLParser.g:6634:4: ( (lv_obc_2_0= ruleOrderByClause ) ) ( (lv_winc_3_0= ruleWindowingClause ) )?
                    {
                    // InternalSQLParser.g:6634:4: ( (lv_obc_2_0= ruleOrderByClause ) )
                    // InternalSQLParser.g:6635:5: (lv_obc_2_0= ruleOrderByClause )
                    {
                    // InternalSQLParser.g:6635:5: (lv_obc_2_0= ruleOrderByClause )
                    // InternalSQLParser.g:6636:6: lv_obc_2_0= ruleOrderByClause
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getAnalyticClauseAccess().getObcOrderByClauseParserRuleCall_2_0_0());
                      					
                    }
                    pushFollow(FOLLOW_98);
                    lv_obc_2_0=ruleOrderByClause();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getAnalyticClauseRule());
                      						}
                      						set(
                      							current,
                      							"obc",
                      							lv_obc_2_0,
                      							"org.xtext.example.mydsl_sql.SQL.OrderByClause");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalSQLParser.g:6653:4: ( (lv_winc_3_0= ruleWindowingClause ) )?
                    int alt120=2;
                    int LA120_0 = input.LA(1);

                    if ( (LA120_0==RANGE||LA120_0==ROWS) ) {
                        alt120=1;
                    }
                    switch (alt120) {
                        case 1 :
                            // InternalSQLParser.g:6654:5: (lv_winc_3_0= ruleWindowingClause )
                            {
                            // InternalSQLParser.g:6654:5: (lv_winc_3_0= ruleWindowingClause )
                            // InternalSQLParser.g:6655:6: lv_winc_3_0= ruleWindowingClause
                            {
                            if ( state.backtracking==0 ) {

                              						newCompositeNode(grammarAccess.getAnalyticClauseAccess().getWincWindowingClauseParserRuleCall_2_1_0());
                              					
                            }
                            pushFollow(FOLLOW_2);
                            lv_winc_3_0=ruleWindowingClause();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElementForParent(grammarAccess.getAnalyticClauseRule());
                              						}
                              						set(
                              							current,
                              							"winc",
                              							lv_winc_3_0,
                              							"org.xtext.example.mydsl_sql.SQL.WindowingClause");
                              						afterParserOrEnumRuleCall();
                              					
                            }

                            }


                            }
                            break;

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleAnalyticClause"


    // $ANTLR start "entryRuleWindowingClause"
    // InternalSQLParser.g:6677:1: entryRuleWindowingClause returns [EObject current=null] : iv_ruleWindowingClause= ruleWindowingClause EOF ;
    public final EObject entryRuleWindowingClause() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleWindowingClause = null;


        try {
            // InternalSQLParser.g:6677:56: (iv_ruleWindowingClause= ruleWindowingClause EOF )
            // InternalSQLParser.g:6678:2: iv_ruleWindowingClause= ruleWindowingClause EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getWindowingClauseRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleWindowingClause=ruleWindowingClause();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleWindowingClause; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleWindowingClause"


    // $ANTLR start "ruleWindowingClause"
    // InternalSQLParser.g:6684:1: ruleWindowingClause returns [EObject current=null] : ( (otherlv_0= ROWS | otherlv_1= RANGE ) (this_WindowingClauseBetween_2= ruleWindowingClauseBetween | this_WindowingClauseOperandPreceding_3= ruleWindowingClauseOperandPreceding ) ) ;
    public final EObject ruleWindowingClause() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        EObject this_WindowingClauseBetween_2 = null;

        EObject this_WindowingClauseOperandPreceding_3 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:6690:2: ( ( (otherlv_0= ROWS | otherlv_1= RANGE ) (this_WindowingClauseBetween_2= ruleWindowingClauseBetween | this_WindowingClauseOperandPreceding_3= ruleWindowingClauseOperandPreceding ) ) )
            // InternalSQLParser.g:6691:2: ( (otherlv_0= ROWS | otherlv_1= RANGE ) (this_WindowingClauseBetween_2= ruleWindowingClauseBetween | this_WindowingClauseOperandPreceding_3= ruleWindowingClauseOperandPreceding ) )
            {
            // InternalSQLParser.g:6691:2: ( (otherlv_0= ROWS | otherlv_1= RANGE ) (this_WindowingClauseBetween_2= ruleWindowingClauseBetween | this_WindowingClauseOperandPreceding_3= ruleWindowingClauseOperandPreceding ) )
            // InternalSQLParser.g:6692:3: (otherlv_0= ROWS | otherlv_1= RANGE ) (this_WindowingClauseBetween_2= ruleWindowingClauseBetween | this_WindowingClauseOperandPreceding_3= ruleWindowingClauseOperandPreceding )
            {
            // InternalSQLParser.g:6692:3: (otherlv_0= ROWS | otherlv_1= RANGE )
            int alt122=2;
            int LA122_0 = input.LA(1);

            if ( (LA122_0==ROWS) ) {
                alt122=1;
            }
            else if ( (LA122_0==RANGE) ) {
                alt122=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 122, 0, input);

                throw nvae;
            }
            switch (alt122) {
                case 1 :
                    // InternalSQLParser.g:6693:4: otherlv_0= ROWS
                    {
                    otherlv_0=(Token)match(input,ROWS,FOLLOW_99); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_0, grammarAccess.getWindowingClauseAccess().getROWSKeyword_0_0());
                      			
                    }

                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:6698:4: otherlv_1= RANGE
                    {
                    otherlv_1=(Token)match(input,RANGE,FOLLOW_99); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getWindowingClauseAccess().getRANGEKeyword_0_1());
                      			
                    }

                    }
                    break;

            }

            // InternalSQLParser.g:6703:3: (this_WindowingClauseBetween_2= ruleWindowingClauseBetween | this_WindowingClauseOperandPreceding_3= ruleWindowingClauseOperandPreceding )
            int alt123=2;
            int LA123_0 = input.LA(1);

            if ( (LA123_0==BETWEEN) ) {
                alt123=1;
            }
            else if ( (LA123_0==UNBOUNDED||LA123_0==CURRENT||LA123_0==EXTRACT||LA123_0==CAST||LA123_0==CASE||LA123_0==LeftParenthesis||(LA123_0>=RULE_JRPARAM && LA123_0<=RULE_JRNPARAM)||(LA123_0>=RULE_UNSIGNED && LA123_0<=RULE_SIGNED_DOUBLE)||(LA123_0>=RULE_STRING_ && LA123_0<=RULE_ID)) ) {
                alt123=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 123, 0, input);

                throw nvae;
            }
            switch (alt123) {
                case 1 :
                    // InternalSQLParser.g:6704:4: this_WindowingClauseBetween_2= ruleWindowingClauseBetween
                    {
                    if ( state.backtracking==0 ) {

                      				/* */
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getWindowingClauseAccess().getWindowingClauseBetweenParserRuleCall_1_0());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_WindowingClauseBetween_2=ruleWindowingClauseBetween();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_WindowingClauseBetween_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:6716:4: this_WindowingClauseOperandPreceding_3= ruleWindowingClauseOperandPreceding
                    {
                    if ( state.backtracking==0 ) {

                      				/* */
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getWindowingClauseAccess().getWindowingClauseOperandPrecedingParserRuleCall_1_1());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_WindowingClauseOperandPreceding_3=ruleWindowingClauseOperandPreceding();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_WindowingClauseOperandPreceding_3;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleWindowingClause"


    // $ANTLR start "entryRuleWindowingClauseBetween"
    // InternalSQLParser.g:6732:1: entryRuleWindowingClauseBetween returns [EObject current=null] : iv_ruleWindowingClauseBetween= ruleWindowingClauseBetween EOF ;
    public final EObject entryRuleWindowingClauseBetween() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleWindowingClauseBetween = null;


        try {
            // InternalSQLParser.g:6732:63: (iv_ruleWindowingClauseBetween= ruleWindowingClauseBetween EOF )
            // InternalSQLParser.g:6733:2: iv_ruleWindowingClauseBetween= ruleWindowingClauseBetween EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getWindowingClauseBetweenRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleWindowingClauseBetween=ruleWindowingClauseBetween();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleWindowingClauseBetween; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleWindowingClauseBetween"


    // $ANTLR start "ruleWindowingClauseBetween"
    // InternalSQLParser.g:6739:1: ruleWindowingClauseBetween returns [EObject current=null] : (otherlv_0= BETWEEN ( (lv_wcoP_1_0= ruleWindowingClauseOperandPreceding ) ) otherlv_2= AND ( (lv_wcoF_3_0= ruleWindowingClauseOperandFollowing ) ) ) ;
    public final EObject ruleWindowingClauseBetween() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_wcoP_1_0 = null;

        EObject lv_wcoF_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:6745:2: ( (otherlv_0= BETWEEN ( (lv_wcoP_1_0= ruleWindowingClauseOperandPreceding ) ) otherlv_2= AND ( (lv_wcoF_3_0= ruleWindowingClauseOperandFollowing ) ) ) )
            // InternalSQLParser.g:6746:2: (otherlv_0= BETWEEN ( (lv_wcoP_1_0= ruleWindowingClauseOperandPreceding ) ) otherlv_2= AND ( (lv_wcoF_3_0= ruleWindowingClauseOperandFollowing ) ) )
            {
            // InternalSQLParser.g:6746:2: (otherlv_0= BETWEEN ( (lv_wcoP_1_0= ruleWindowingClauseOperandPreceding ) ) otherlv_2= AND ( (lv_wcoF_3_0= ruleWindowingClauseOperandFollowing ) ) )
            // InternalSQLParser.g:6747:3: otherlv_0= BETWEEN ( (lv_wcoP_1_0= ruleWindowingClauseOperandPreceding ) ) otherlv_2= AND ( (lv_wcoF_3_0= ruleWindowingClauseOperandFollowing ) )
            {
            otherlv_0=(Token)match(input,BETWEEN,FOLLOW_99); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getWindowingClauseBetweenAccess().getBETWEENKeyword_0());
              		
            }
            // InternalSQLParser.g:6751:3: ( (lv_wcoP_1_0= ruleWindowingClauseOperandPreceding ) )
            // InternalSQLParser.g:6752:4: (lv_wcoP_1_0= ruleWindowingClauseOperandPreceding )
            {
            // InternalSQLParser.g:6752:4: (lv_wcoP_1_0= ruleWindowingClauseOperandPreceding )
            // InternalSQLParser.g:6753:5: lv_wcoP_1_0= ruleWindowingClauseOperandPreceding
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getWindowingClauseBetweenAccess().getWcoPWindowingClauseOperandPrecedingParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_89);
            lv_wcoP_1_0=ruleWindowingClauseOperandPreceding();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getWindowingClauseBetweenRule());
              					}
              					set(
              						current,
              						"wcoP",
              						lv_wcoP_1_0,
              						"org.xtext.example.mydsl_sql.SQL.WindowingClauseOperandPreceding");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_2=(Token)match(input,AND,FOLLOW_99); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getWindowingClauseBetweenAccess().getANDKeyword_2());
              		
            }
            // InternalSQLParser.g:6774:3: ( (lv_wcoF_3_0= ruleWindowingClauseOperandFollowing ) )
            // InternalSQLParser.g:6775:4: (lv_wcoF_3_0= ruleWindowingClauseOperandFollowing )
            {
            // InternalSQLParser.g:6775:4: (lv_wcoF_3_0= ruleWindowingClauseOperandFollowing )
            // InternalSQLParser.g:6776:5: lv_wcoF_3_0= ruleWindowingClauseOperandFollowing
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getWindowingClauseBetweenAccess().getWcoFWindowingClauseOperandFollowingParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_wcoF_3_0=ruleWindowingClauseOperandFollowing();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getWindowingClauseBetweenRule());
              					}
              					set(
              						current,
              						"wcoF",
              						lv_wcoF_3_0,
              						"org.xtext.example.mydsl_sql.SQL.WindowingClauseOperandFollowing");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleWindowingClauseBetween"


    // $ANTLR start "entryRuleWindowingClauseOperandFollowing"
    // InternalSQLParser.g:6797:1: entryRuleWindowingClauseOperandFollowing returns [EObject current=null] : iv_ruleWindowingClauseOperandFollowing= ruleWindowingClauseOperandFollowing EOF ;
    public final EObject entryRuleWindowingClauseOperandFollowing() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleWindowingClauseOperandFollowing = null;


        try {
            // InternalSQLParser.g:6797:72: (iv_ruleWindowingClauseOperandFollowing= ruleWindowingClauseOperandFollowing EOF )
            // InternalSQLParser.g:6798:2: iv_ruleWindowingClauseOperandFollowing= ruleWindowingClauseOperandFollowing EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getWindowingClauseOperandFollowingRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleWindowingClauseOperandFollowing=ruleWindowingClauseOperandFollowing();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleWindowingClauseOperandFollowing; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleWindowingClauseOperandFollowing"


    // $ANTLR start "ruleWindowingClauseOperandFollowing"
    // InternalSQLParser.g:6804:1: ruleWindowingClauseOperandFollowing returns [EObject current=null] : ( () ( (otherlv_1= UNBOUNDED otherlv_2= KW_FOLLOWING ) | (otherlv_3= CURRENT otherlv_4= ROW ) | ( ( (lv_exp_5_0= ruleAnalyticExprArg ) ) (otherlv_6= PRECEDING | otherlv_7= KW_FOLLOWING ) ) ) ) ;
    public final EObject ruleWindowingClauseOperandFollowing() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        Token otherlv_7=null;
        EObject lv_exp_5_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:6810:2: ( ( () ( (otherlv_1= UNBOUNDED otherlv_2= KW_FOLLOWING ) | (otherlv_3= CURRENT otherlv_4= ROW ) | ( ( (lv_exp_5_0= ruleAnalyticExprArg ) ) (otherlv_6= PRECEDING | otherlv_7= KW_FOLLOWING ) ) ) ) )
            // InternalSQLParser.g:6811:2: ( () ( (otherlv_1= UNBOUNDED otherlv_2= KW_FOLLOWING ) | (otherlv_3= CURRENT otherlv_4= ROW ) | ( ( (lv_exp_5_0= ruleAnalyticExprArg ) ) (otherlv_6= PRECEDING | otherlv_7= KW_FOLLOWING ) ) ) )
            {
            // InternalSQLParser.g:6811:2: ( () ( (otherlv_1= UNBOUNDED otherlv_2= KW_FOLLOWING ) | (otherlv_3= CURRENT otherlv_4= ROW ) | ( ( (lv_exp_5_0= ruleAnalyticExprArg ) ) (otherlv_6= PRECEDING | otherlv_7= KW_FOLLOWING ) ) ) )
            // InternalSQLParser.g:6812:3: () ( (otherlv_1= UNBOUNDED otherlv_2= KW_FOLLOWING ) | (otherlv_3= CURRENT otherlv_4= ROW ) | ( ( (lv_exp_5_0= ruleAnalyticExprArg ) ) (otherlv_6= PRECEDING | otherlv_7= KW_FOLLOWING ) ) )
            {
            // InternalSQLParser.g:6812:3: ()
            // InternalSQLParser.g:6813:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getWindowingClauseOperandFollowingAccess().getWindowingClauseOperandFollowingAction_0(),
              					current);
              			
            }

            }

            // InternalSQLParser.g:6822:3: ( (otherlv_1= UNBOUNDED otherlv_2= KW_FOLLOWING ) | (otherlv_3= CURRENT otherlv_4= ROW ) | ( ( (lv_exp_5_0= ruleAnalyticExprArg ) ) (otherlv_6= PRECEDING | otherlv_7= KW_FOLLOWING ) ) )
            int alt125=3;
            switch ( input.LA(1) ) {
            case UNBOUNDED:
                {
                alt125=1;
                }
                break;
            case CURRENT:
                {
                alt125=2;
                }
                break;
            case EXTRACT:
            case CAST:
            case CASE:
            case LeftParenthesis:
            case RULE_JRPARAM:
            case RULE_JRNPARAM:
            case RULE_UNSIGNED:
            case RULE_INT:
            case RULE_SIGNED_DOUBLE:
            case RULE_STRING_:
            case RULE_STRING:
            case RULE_DBNAME:
            case RULE_ID:
                {
                alt125=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 125, 0, input);

                throw nvae;
            }

            switch (alt125) {
                case 1 :
                    // InternalSQLParser.g:6823:4: (otherlv_1= UNBOUNDED otherlv_2= KW_FOLLOWING )
                    {
                    // InternalSQLParser.g:6823:4: (otherlv_1= UNBOUNDED otherlv_2= KW_FOLLOWING )
                    // InternalSQLParser.g:6824:5: otherlv_1= UNBOUNDED otherlv_2= KW_FOLLOWING
                    {
                    otherlv_1=(Token)match(input,UNBOUNDED,FOLLOW_100); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_1, grammarAccess.getWindowingClauseOperandFollowingAccess().getUNBOUNDEDKeyword_1_0_0());
                      				
                    }
                    otherlv_2=(Token)match(input,KW_FOLLOWING,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_2, grammarAccess.getWindowingClauseOperandFollowingAccess().getFOLLOWINGKeyword_1_0_1());
                      				
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:6834:4: (otherlv_3= CURRENT otherlv_4= ROW )
                    {
                    // InternalSQLParser.g:6834:4: (otherlv_3= CURRENT otherlv_4= ROW )
                    // InternalSQLParser.g:6835:5: otherlv_3= CURRENT otherlv_4= ROW
                    {
                    otherlv_3=(Token)match(input,CURRENT,FOLLOW_101); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_3, grammarAccess.getWindowingClauseOperandFollowingAccess().getCURRENTKeyword_1_1_0());
                      				
                    }
                    otherlv_4=(Token)match(input,ROW,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_4, grammarAccess.getWindowingClauseOperandFollowingAccess().getROWKeyword_1_1_1());
                      				
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:6845:4: ( ( (lv_exp_5_0= ruleAnalyticExprArg ) ) (otherlv_6= PRECEDING | otherlv_7= KW_FOLLOWING ) )
                    {
                    // InternalSQLParser.g:6845:4: ( ( (lv_exp_5_0= ruleAnalyticExprArg ) ) (otherlv_6= PRECEDING | otherlv_7= KW_FOLLOWING ) )
                    // InternalSQLParser.g:6846:5: ( (lv_exp_5_0= ruleAnalyticExprArg ) ) (otherlv_6= PRECEDING | otherlv_7= KW_FOLLOWING )
                    {
                    // InternalSQLParser.g:6846:5: ( (lv_exp_5_0= ruleAnalyticExprArg ) )
                    // InternalSQLParser.g:6847:6: (lv_exp_5_0= ruleAnalyticExprArg )
                    {
                    // InternalSQLParser.g:6847:6: (lv_exp_5_0= ruleAnalyticExprArg )
                    // InternalSQLParser.g:6848:7: lv_exp_5_0= ruleAnalyticExprArg
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getWindowingClauseOperandFollowingAccess().getExpAnalyticExprArgParserRuleCall_1_2_0_0());
                      						
                    }
                    pushFollow(FOLLOW_102);
                    lv_exp_5_0=ruleAnalyticExprArg();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getWindowingClauseOperandFollowingRule());
                      							}
                      							set(
                      								current,
                      								"exp",
                      								lv_exp_5_0,
                      								"org.xtext.example.mydsl_sql.SQL.AnalyticExprArg");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }

                    // InternalSQLParser.g:6865:5: (otherlv_6= PRECEDING | otherlv_7= KW_FOLLOWING )
                    int alt124=2;
                    int LA124_0 = input.LA(1);

                    if ( (LA124_0==PRECEDING) ) {
                        alt124=1;
                    }
                    else if ( (LA124_0==KW_FOLLOWING) ) {
                        alt124=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 124, 0, input);

                        throw nvae;
                    }
                    switch (alt124) {
                        case 1 :
                            // InternalSQLParser.g:6866:6: otherlv_6= PRECEDING
                            {
                            otherlv_6=(Token)match(input,PRECEDING,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(otherlv_6, grammarAccess.getWindowingClauseOperandFollowingAccess().getPRECEDINGKeyword_1_2_1_0());
                              					
                            }

                            }
                            break;
                        case 2 :
                            // InternalSQLParser.g:6871:6: otherlv_7= KW_FOLLOWING
                            {
                            otherlv_7=(Token)match(input,KW_FOLLOWING,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(otherlv_7, grammarAccess.getWindowingClauseOperandFollowingAccess().getFOLLOWINGKeyword_1_2_1_1());
                              					
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleWindowingClauseOperandFollowing"


    // $ANTLR start "entryRuleWindowingClauseOperandPreceding"
    // InternalSQLParser.g:6882:1: entryRuleWindowingClauseOperandPreceding returns [EObject current=null] : iv_ruleWindowingClauseOperandPreceding= ruleWindowingClauseOperandPreceding EOF ;
    public final EObject entryRuleWindowingClauseOperandPreceding() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleWindowingClauseOperandPreceding = null;


        try {
            // InternalSQLParser.g:6882:72: (iv_ruleWindowingClauseOperandPreceding= ruleWindowingClauseOperandPreceding EOF )
            // InternalSQLParser.g:6883:2: iv_ruleWindowingClauseOperandPreceding= ruleWindowingClauseOperandPreceding EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getWindowingClauseOperandPrecedingRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleWindowingClauseOperandPreceding=ruleWindowingClauseOperandPreceding();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleWindowingClauseOperandPreceding; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleWindowingClauseOperandPreceding"


    // $ANTLR start "ruleWindowingClauseOperandPreceding"
    // InternalSQLParser.g:6889:1: ruleWindowingClauseOperandPreceding returns [EObject current=null] : ( () ( (otherlv_1= UNBOUNDED otherlv_2= PRECEDING ) | (otherlv_3= CURRENT otherlv_4= ROW ) | ( ( (lv_expr_5_0= ruleAnalyticExprArg ) ) (otherlv_6= PRECEDING | otherlv_7= KW_FOLLOWING ) ) ) ) ;
    public final EObject ruleWindowingClauseOperandPreceding() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        Token otherlv_7=null;
        EObject lv_expr_5_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:6895:2: ( ( () ( (otherlv_1= UNBOUNDED otherlv_2= PRECEDING ) | (otherlv_3= CURRENT otherlv_4= ROW ) | ( ( (lv_expr_5_0= ruleAnalyticExprArg ) ) (otherlv_6= PRECEDING | otherlv_7= KW_FOLLOWING ) ) ) ) )
            // InternalSQLParser.g:6896:2: ( () ( (otherlv_1= UNBOUNDED otherlv_2= PRECEDING ) | (otherlv_3= CURRENT otherlv_4= ROW ) | ( ( (lv_expr_5_0= ruleAnalyticExprArg ) ) (otherlv_6= PRECEDING | otherlv_7= KW_FOLLOWING ) ) ) )
            {
            // InternalSQLParser.g:6896:2: ( () ( (otherlv_1= UNBOUNDED otherlv_2= PRECEDING ) | (otherlv_3= CURRENT otherlv_4= ROW ) | ( ( (lv_expr_5_0= ruleAnalyticExprArg ) ) (otherlv_6= PRECEDING | otherlv_7= KW_FOLLOWING ) ) ) )
            // InternalSQLParser.g:6897:3: () ( (otherlv_1= UNBOUNDED otherlv_2= PRECEDING ) | (otherlv_3= CURRENT otherlv_4= ROW ) | ( ( (lv_expr_5_0= ruleAnalyticExprArg ) ) (otherlv_6= PRECEDING | otherlv_7= KW_FOLLOWING ) ) )
            {
            // InternalSQLParser.g:6897:3: ()
            // InternalSQLParser.g:6898:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getWindowingClauseOperandPrecedingAccess().getWindowingClauseOperandPrecedingAction_0(),
              					current);
              			
            }

            }

            // InternalSQLParser.g:6907:3: ( (otherlv_1= UNBOUNDED otherlv_2= PRECEDING ) | (otherlv_3= CURRENT otherlv_4= ROW ) | ( ( (lv_expr_5_0= ruleAnalyticExprArg ) ) (otherlv_6= PRECEDING | otherlv_7= KW_FOLLOWING ) ) )
            int alt127=3;
            switch ( input.LA(1) ) {
            case UNBOUNDED:
                {
                alt127=1;
                }
                break;
            case CURRENT:
                {
                alt127=2;
                }
                break;
            case EXTRACT:
            case CAST:
            case CASE:
            case LeftParenthesis:
            case RULE_JRPARAM:
            case RULE_JRNPARAM:
            case RULE_UNSIGNED:
            case RULE_INT:
            case RULE_SIGNED_DOUBLE:
            case RULE_STRING_:
            case RULE_STRING:
            case RULE_DBNAME:
            case RULE_ID:
                {
                alt127=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 127, 0, input);

                throw nvae;
            }

            switch (alt127) {
                case 1 :
                    // InternalSQLParser.g:6908:4: (otherlv_1= UNBOUNDED otherlv_2= PRECEDING )
                    {
                    // InternalSQLParser.g:6908:4: (otherlv_1= UNBOUNDED otherlv_2= PRECEDING )
                    // InternalSQLParser.g:6909:5: otherlv_1= UNBOUNDED otherlv_2= PRECEDING
                    {
                    otherlv_1=(Token)match(input,UNBOUNDED,FOLLOW_103); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_1, grammarAccess.getWindowingClauseOperandPrecedingAccess().getUNBOUNDEDKeyword_1_0_0());
                      				
                    }
                    otherlv_2=(Token)match(input,PRECEDING,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_2, grammarAccess.getWindowingClauseOperandPrecedingAccess().getPRECEDINGKeyword_1_0_1());
                      				
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:6919:4: (otherlv_3= CURRENT otherlv_4= ROW )
                    {
                    // InternalSQLParser.g:6919:4: (otherlv_3= CURRENT otherlv_4= ROW )
                    // InternalSQLParser.g:6920:5: otherlv_3= CURRENT otherlv_4= ROW
                    {
                    otherlv_3=(Token)match(input,CURRENT,FOLLOW_101); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_3, grammarAccess.getWindowingClauseOperandPrecedingAccess().getCURRENTKeyword_1_1_0());
                      				
                    }
                    otherlv_4=(Token)match(input,ROW,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_4, grammarAccess.getWindowingClauseOperandPrecedingAccess().getROWKeyword_1_1_1());
                      				
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:6930:4: ( ( (lv_expr_5_0= ruleAnalyticExprArg ) ) (otherlv_6= PRECEDING | otherlv_7= KW_FOLLOWING ) )
                    {
                    // InternalSQLParser.g:6930:4: ( ( (lv_expr_5_0= ruleAnalyticExprArg ) ) (otherlv_6= PRECEDING | otherlv_7= KW_FOLLOWING ) )
                    // InternalSQLParser.g:6931:5: ( (lv_expr_5_0= ruleAnalyticExprArg ) ) (otherlv_6= PRECEDING | otherlv_7= KW_FOLLOWING )
                    {
                    // InternalSQLParser.g:6931:5: ( (lv_expr_5_0= ruleAnalyticExprArg ) )
                    // InternalSQLParser.g:6932:6: (lv_expr_5_0= ruleAnalyticExprArg )
                    {
                    // InternalSQLParser.g:6932:6: (lv_expr_5_0= ruleAnalyticExprArg )
                    // InternalSQLParser.g:6933:7: lv_expr_5_0= ruleAnalyticExprArg
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getWindowingClauseOperandPrecedingAccess().getExprAnalyticExprArgParserRuleCall_1_2_0_0());
                      						
                    }
                    pushFollow(FOLLOW_102);
                    lv_expr_5_0=ruleAnalyticExprArg();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getWindowingClauseOperandPrecedingRule());
                      							}
                      							set(
                      								current,
                      								"expr",
                      								lv_expr_5_0,
                      								"org.xtext.example.mydsl_sql.SQL.AnalyticExprArg");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }

                    // InternalSQLParser.g:6950:5: (otherlv_6= PRECEDING | otherlv_7= KW_FOLLOWING )
                    int alt126=2;
                    int LA126_0 = input.LA(1);

                    if ( (LA126_0==PRECEDING) ) {
                        alt126=1;
                    }
                    else if ( (LA126_0==KW_FOLLOWING) ) {
                        alt126=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 126, 0, input);

                        throw nvae;
                    }
                    switch (alt126) {
                        case 1 :
                            // InternalSQLParser.g:6951:6: otherlv_6= PRECEDING
                            {
                            otherlv_6=(Token)match(input,PRECEDING,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(otherlv_6, grammarAccess.getWindowingClauseOperandPrecedingAccess().getPRECEDINGKeyword_1_2_1_0());
                              					
                            }

                            }
                            break;
                        case 2 :
                            // InternalSQLParser.g:6956:6: otherlv_7= KW_FOLLOWING
                            {
                            otherlv_7=(Token)match(input,KW_FOLLOWING,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(otherlv_7, grammarAccess.getWindowingClauseOperandPrecedingAccess().getFOLLOWINGKeyword_1_2_1_1());
                              					
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleWindowingClauseOperandPreceding"


    // $ANTLR start "entryRuleOrderByClause"
    // InternalSQLParser.g:6967:1: entryRuleOrderByClause returns [EObject current=null] : iv_ruleOrderByClause= ruleOrderByClause EOF ;
    public final EObject entryRuleOrderByClause() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOrderByClause = null;


        try {
            // InternalSQLParser.g:6967:54: (iv_ruleOrderByClause= ruleOrderByClause EOF )
            // InternalSQLParser.g:6968:2: iv_ruleOrderByClause= ruleOrderByClause EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOrderByClauseRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOrderByClause=ruleOrderByClause();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOrderByClause; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOrderByClause"


    // $ANTLR start "ruleOrderByClause"
    // InternalSQLParser.g:6974:1: ruleOrderByClause returns [EObject current=null] : ( ( (otherlv_0= ORDER otherlv_1= BY ) | (otherlv_2= ORDER otherlv_3= SIBLINGS otherlv_4= BY ) ) ( (lv_args_5_0= ruleOrderByClauseArgs ) ) ) ;
    public final EObject ruleOrderByClause() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        EObject lv_args_5_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:6980:2: ( ( ( (otherlv_0= ORDER otherlv_1= BY ) | (otherlv_2= ORDER otherlv_3= SIBLINGS otherlv_4= BY ) ) ( (lv_args_5_0= ruleOrderByClauseArgs ) ) ) )
            // InternalSQLParser.g:6981:2: ( ( (otherlv_0= ORDER otherlv_1= BY ) | (otherlv_2= ORDER otherlv_3= SIBLINGS otherlv_4= BY ) ) ( (lv_args_5_0= ruleOrderByClauseArgs ) ) )
            {
            // InternalSQLParser.g:6981:2: ( ( (otherlv_0= ORDER otherlv_1= BY ) | (otherlv_2= ORDER otherlv_3= SIBLINGS otherlv_4= BY ) ) ( (lv_args_5_0= ruleOrderByClauseArgs ) ) )
            // InternalSQLParser.g:6982:3: ( (otherlv_0= ORDER otherlv_1= BY ) | (otherlv_2= ORDER otherlv_3= SIBLINGS otherlv_4= BY ) ) ( (lv_args_5_0= ruleOrderByClauseArgs ) )
            {
            // InternalSQLParser.g:6982:3: ( (otherlv_0= ORDER otherlv_1= BY ) | (otherlv_2= ORDER otherlv_3= SIBLINGS otherlv_4= BY ) )
            int alt128=2;
            int LA128_0 = input.LA(1);

            if ( (LA128_0==ORDER) ) {
                int LA128_1 = input.LA(2);

                if ( (LA128_1==SIBLINGS) ) {
                    alt128=2;
                }
                else if ( (LA128_1==BY) ) {
                    alt128=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 128, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 128, 0, input);

                throw nvae;
            }
            switch (alt128) {
                case 1 :
                    // InternalSQLParser.g:6983:4: (otherlv_0= ORDER otherlv_1= BY )
                    {
                    // InternalSQLParser.g:6983:4: (otherlv_0= ORDER otherlv_1= BY )
                    // InternalSQLParser.g:6984:5: otherlv_0= ORDER otherlv_1= BY
                    {
                    otherlv_0=(Token)match(input,ORDER,FOLLOW_45); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_0, grammarAccess.getOrderByClauseAccess().getORDERKeyword_0_0_0());
                      				
                    }
                    otherlv_1=(Token)match(input,BY,FOLLOW_99); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_1, grammarAccess.getOrderByClauseAccess().getBYKeyword_0_0_1());
                      				
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:6994:4: (otherlv_2= ORDER otherlv_3= SIBLINGS otherlv_4= BY )
                    {
                    // InternalSQLParser.g:6994:4: (otherlv_2= ORDER otherlv_3= SIBLINGS otherlv_4= BY )
                    // InternalSQLParser.g:6995:5: otherlv_2= ORDER otherlv_3= SIBLINGS otherlv_4= BY
                    {
                    otherlv_2=(Token)match(input,ORDER,FOLLOW_104); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_2, grammarAccess.getOrderByClauseAccess().getORDERKeyword_0_1_0());
                      				
                    }
                    otherlv_3=(Token)match(input,SIBLINGS,FOLLOW_45); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_3, grammarAccess.getOrderByClauseAccess().getSIBLINGSKeyword_0_1_1());
                      				
                    }
                    otherlv_4=(Token)match(input,BY,FOLLOW_99); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_4, grammarAccess.getOrderByClauseAccess().getBYKeyword_0_1_2());
                      				
                    }

                    }


                    }
                    break;

            }

            // InternalSQLParser.g:7009:3: ( (lv_args_5_0= ruleOrderByClauseArgs ) )
            // InternalSQLParser.g:7010:4: (lv_args_5_0= ruleOrderByClauseArgs )
            {
            // InternalSQLParser.g:7010:4: (lv_args_5_0= ruleOrderByClauseArgs )
            // InternalSQLParser.g:7011:5: lv_args_5_0= ruleOrderByClauseArgs
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getOrderByClauseAccess().getArgsOrderByClauseArgsParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_args_5_0=ruleOrderByClauseArgs();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getOrderByClauseRule());
              					}
              					set(
              						current,
              						"args",
              						lv_args_5_0,
              						"org.xtext.example.mydsl_sql.SQL.OrderByClauseArgs");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOrderByClause"


    // $ANTLR start "entryRuleOrderByClauseArgs"
    // InternalSQLParser.g:7032:1: entryRuleOrderByClauseArgs returns [EObject current=null] : iv_ruleOrderByClauseArgs= ruleOrderByClauseArgs EOF ;
    public final EObject entryRuleOrderByClauseArgs() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOrderByClauseArgs = null;


        try {
            // InternalSQLParser.g:7032:58: (iv_ruleOrderByClauseArgs= ruleOrderByClauseArgs EOF )
            // InternalSQLParser.g:7033:2: iv_ruleOrderByClauseArgs= ruleOrderByClauseArgs EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOrderByClauseArgsRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOrderByClauseArgs=ruleOrderByClauseArgs();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOrderByClauseArgs; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOrderByClauseArgs"


    // $ANTLR start "ruleOrderByClauseArgs"
    // InternalSQLParser.g:7039:1: ruleOrderByClauseArgs returns [EObject current=null] : (this_OrderByClauseArg_0= ruleOrderByClauseArg ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleOrderByClauseArg ) ) )+ )? ) ;
    public final EObject ruleOrderByClauseArgs() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_OrderByClauseArg_0 = null;

        EObject lv_entries_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:7045:2: ( (this_OrderByClauseArg_0= ruleOrderByClauseArg ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleOrderByClauseArg ) ) )+ )? ) )
            // InternalSQLParser.g:7046:2: (this_OrderByClauseArg_0= ruleOrderByClauseArg ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleOrderByClauseArg ) ) )+ )? )
            {
            // InternalSQLParser.g:7046:2: (this_OrderByClauseArg_0= ruleOrderByClauseArg ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleOrderByClauseArg ) ) )+ )? )
            // InternalSQLParser.g:7047:3: this_OrderByClauseArg_0= ruleOrderByClauseArg ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleOrderByClauseArg ) ) )+ )?
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getOrderByClauseArgsAccess().getOrderByClauseArgParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_15);
            this_OrderByClauseArg_0=ruleOrderByClauseArg();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_OrderByClauseArg_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:7058:3: ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleOrderByClauseArg ) ) )+ )?
            int alt130=2;
            int LA130_0 = input.LA(1);

            if ( (LA130_0==Comma) ) {
                alt130=1;
            }
            switch (alt130) {
                case 1 :
                    // InternalSQLParser.g:7059:4: () (otherlv_2= Comma ( (lv_entries_3_0= ruleOrderByClauseArg ) ) )+
                    {
                    // InternalSQLParser.g:7059:4: ()
                    // InternalSQLParser.g:7060:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getOrderByClauseArgsAccess().getOBCArgsEntriesAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalSQLParser.g:7069:4: (otherlv_2= Comma ( (lv_entries_3_0= ruleOrderByClauseArg ) ) )+
                    int cnt129=0;
                    loop129:
                    do {
                        int alt129=2;
                        int LA129_0 = input.LA(1);

                        if ( (LA129_0==Comma) ) {
                            alt129=1;
                        }


                        switch (alt129) {
                    	case 1 :
                    	    // InternalSQLParser.g:7070:5: otherlv_2= Comma ( (lv_entries_3_0= ruleOrderByClauseArg ) )
                    	    {
                    	    otherlv_2=(Token)match(input,Comma,FOLLOW_99); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_2, grammarAccess.getOrderByClauseArgsAccess().getCommaKeyword_1_1_0());
                    	      				
                    	    }
                    	    // InternalSQLParser.g:7074:5: ( (lv_entries_3_0= ruleOrderByClauseArg ) )
                    	    // InternalSQLParser.g:7075:6: (lv_entries_3_0= ruleOrderByClauseArg )
                    	    {
                    	    // InternalSQLParser.g:7075:6: (lv_entries_3_0= ruleOrderByClauseArg )
                    	    // InternalSQLParser.g:7076:7: lv_entries_3_0= ruleOrderByClauseArg
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getOrderByClauseArgsAccess().getEntriesOrderByClauseArgParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_15);
                    	    lv_entries_3_0=ruleOrderByClauseArg();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getOrderByClauseArgsRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"entries",
                    	      								lv_entries_3_0,
                    	      								"org.xtext.example.mydsl_sql.SQL.OrderByClauseArg");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt129 >= 1 ) break loop129;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(129, input);
                                throw eee;
                        }
                        cnt129++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOrderByClauseArgs"


    // $ANTLR start "entryRuleOrderByClauseArg"
    // InternalSQLParser.g:7099:1: entryRuleOrderByClauseArg returns [EObject current=null] : iv_ruleOrderByClauseArg= ruleOrderByClauseArg EOF ;
    public final EObject entryRuleOrderByClauseArg() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOrderByClauseArg = null;


        try {
            // InternalSQLParser.g:7099:57: (iv_ruleOrderByClauseArg= ruleOrderByClauseArg EOF )
            // InternalSQLParser.g:7100:2: iv_ruleOrderByClauseArg= ruleOrderByClauseArg EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOrderByClauseArgRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOrderByClauseArg=ruleOrderByClauseArg();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOrderByClauseArg; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOrderByClauseArg"


    // $ANTLR start "ruleOrderByClauseArg"
    // InternalSQLParser.g:7106:1: ruleOrderByClauseArg returns [EObject current=null] : ( ( (lv_col_0_0= ruleAnalyticExprArg ) ) (otherlv_1= ASC | otherlv_2= DESC )? (otherlv_3= NULLS (otherlv_4= FIRST | otherlv_5= LAST ) )? ) ;
    public final EObject ruleOrderByClauseArg() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        Token otherlv_5=null;
        EObject lv_col_0_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:7112:2: ( ( ( (lv_col_0_0= ruleAnalyticExprArg ) ) (otherlv_1= ASC | otherlv_2= DESC )? (otherlv_3= NULLS (otherlv_4= FIRST | otherlv_5= LAST ) )? ) )
            // InternalSQLParser.g:7113:2: ( ( (lv_col_0_0= ruleAnalyticExprArg ) ) (otherlv_1= ASC | otherlv_2= DESC )? (otherlv_3= NULLS (otherlv_4= FIRST | otherlv_5= LAST ) )? )
            {
            // InternalSQLParser.g:7113:2: ( ( (lv_col_0_0= ruleAnalyticExprArg ) ) (otherlv_1= ASC | otherlv_2= DESC )? (otherlv_3= NULLS (otherlv_4= FIRST | otherlv_5= LAST ) )? )
            // InternalSQLParser.g:7114:3: ( (lv_col_0_0= ruleAnalyticExprArg ) ) (otherlv_1= ASC | otherlv_2= DESC )? (otherlv_3= NULLS (otherlv_4= FIRST | otherlv_5= LAST ) )?
            {
            // InternalSQLParser.g:7114:3: ( (lv_col_0_0= ruleAnalyticExprArg ) )
            // InternalSQLParser.g:7115:4: (lv_col_0_0= ruleAnalyticExprArg )
            {
            // InternalSQLParser.g:7115:4: (lv_col_0_0= ruleAnalyticExprArg )
            // InternalSQLParser.g:7116:5: lv_col_0_0= ruleAnalyticExprArg
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getOrderByClauseArgAccess().getColAnalyticExprArgParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_105);
            lv_col_0_0=ruleAnalyticExprArg();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getOrderByClauseArgRule());
              					}
              					set(
              						current,
              						"col",
              						lv_col_0_0,
              						"org.xtext.example.mydsl_sql.SQL.AnalyticExprArg");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:7133:3: (otherlv_1= ASC | otherlv_2= DESC )?
            int alt131=3;
            int LA131_0 = input.LA(1);

            if ( (LA131_0==ASC) ) {
                alt131=1;
            }
            else if ( (LA131_0==DESC) ) {
                alt131=2;
            }
            switch (alt131) {
                case 1 :
                    // InternalSQLParser.g:7134:4: otherlv_1= ASC
                    {
                    otherlv_1=(Token)match(input,ASC,FOLLOW_106); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getOrderByClauseArgAccess().getASCKeyword_1_0());
                      			
                    }

                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:7139:4: otherlv_2= DESC
                    {
                    otherlv_2=(Token)match(input,DESC,FOLLOW_106); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getOrderByClauseArgAccess().getDESCKeyword_1_1());
                      			
                    }

                    }
                    break;

            }

            // InternalSQLParser.g:7144:3: (otherlv_3= NULLS (otherlv_4= FIRST | otherlv_5= LAST ) )?
            int alt133=2;
            int LA133_0 = input.LA(1);

            if ( (LA133_0==NULLS) ) {
                alt133=1;
            }
            switch (alt133) {
                case 1 :
                    // InternalSQLParser.g:7145:4: otherlv_3= NULLS (otherlv_4= FIRST | otherlv_5= LAST )
                    {
                    otherlv_3=(Token)match(input,NULLS,FOLLOW_107); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_3, grammarAccess.getOrderByClauseArgAccess().getNULLSKeyword_2_0());
                      			
                    }
                    // InternalSQLParser.g:7149:4: (otherlv_4= FIRST | otherlv_5= LAST )
                    int alt132=2;
                    int LA132_0 = input.LA(1);

                    if ( (LA132_0==FIRST) ) {
                        alt132=1;
                    }
                    else if ( (LA132_0==LAST) ) {
                        alt132=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 132, 0, input);

                        throw nvae;
                    }
                    switch (alt132) {
                        case 1 :
                            // InternalSQLParser.g:7150:5: otherlv_4= FIRST
                            {
                            otherlv_4=(Token)match(input,FIRST,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(otherlv_4, grammarAccess.getOrderByClauseArgAccess().getFIRSTKeyword_2_1_0());
                              				
                            }

                            }
                            break;
                        case 2 :
                            // InternalSQLParser.g:7155:5: otherlv_5= LAST
                            {
                            otherlv_5=(Token)match(input,LAST,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(otherlv_5, grammarAccess.getOrderByClauseArgAccess().getLASTKeyword_2_1_1());
                              				
                            }

                            }
                            break;

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOrderByClauseArg"


    // $ANTLR start "entryRuleQueryPartitionClause"
    // InternalSQLParser.g:7165:1: entryRuleQueryPartitionClause returns [EObject current=null] : iv_ruleQueryPartitionClause= ruleQueryPartitionClause EOF ;
    public final EObject entryRuleQueryPartitionClause() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleQueryPartitionClause = null;


        try {
            // InternalSQLParser.g:7165:61: (iv_ruleQueryPartitionClause= ruleQueryPartitionClause EOF )
            // InternalSQLParser.g:7166:2: iv_ruleQueryPartitionClause= ruleQueryPartitionClause EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getQueryPartitionClauseRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleQueryPartitionClause=ruleQueryPartitionClause();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleQueryPartitionClause; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleQueryPartitionClause"


    // $ANTLR start "ruleQueryPartitionClause"
    // InternalSQLParser.g:7172:1: ruleQueryPartitionClause returns [EObject current=null] : (otherlv_0= PARTITION otherlv_1= BY ( ( (lv_args_2_0= ruleAnalyticExprArgs ) ) | (otherlv_3= LeftParenthesis this_AnalyticExprArgs_4= ruleAnalyticExprArgs otherlv_5= RightParenthesis ) ) ) ;
    public final EObject ruleQueryPartitionClause() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_args_2_0 = null;

        EObject this_AnalyticExprArgs_4 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:7178:2: ( (otherlv_0= PARTITION otherlv_1= BY ( ( (lv_args_2_0= ruleAnalyticExprArgs ) ) | (otherlv_3= LeftParenthesis this_AnalyticExprArgs_4= ruleAnalyticExprArgs otherlv_5= RightParenthesis ) ) ) )
            // InternalSQLParser.g:7179:2: (otherlv_0= PARTITION otherlv_1= BY ( ( (lv_args_2_0= ruleAnalyticExprArgs ) ) | (otherlv_3= LeftParenthesis this_AnalyticExprArgs_4= ruleAnalyticExprArgs otherlv_5= RightParenthesis ) ) )
            {
            // InternalSQLParser.g:7179:2: (otherlv_0= PARTITION otherlv_1= BY ( ( (lv_args_2_0= ruleAnalyticExprArgs ) ) | (otherlv_3= LeftParenthesis this_AnalyticExprArgs_4= ruleAnalyticExprArgs otherlv_5= RightParenthesis ) ) )
            // InternalSQLParser.g:7180:3: otherlv_0= PARTITION otherlv_1= BY ( ( (lv_args_2_0= ruleAnalyticExprArgs ) ) | (otherlv_3= LeftParenthesis this_AnalyticExprArgs_4= ruleAnalyticExprArgs otherlv_5= RightParenthesis ) )
            {
            otherlv_0=(Token)match(input,PARTITION,FOLLOW_45); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getQueryPartitionClauseAccess().getPARTITIONKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,BY,FOLLOW_99); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getQueryPartitionClauseAccess().getBYKeyword_1());
              		
            }
            // InternalSQLParser.g:7188:3: ( ( (lv_args_2_0= ruleAnalyticExprArgs ) ) | (otherlv_3= LeftParenthesis this_AnalyticExprArgs_4= ruleAnalyticExprArgs otherlv_5= RightParenthesis ) )
            int alt134=2;
            int LA134_0 = input.LA(1);

            if ( (LA134_0==EXTRACT||LA134_0==CAST||LA134_0==CASE||(LA134_0>=RULE_JRPARAM && LA134_0<=RULE_JRNPARAM)||(LA134_0>=RULE_UNSIGNED && LA134_0<=RULE_SIGNED_DOUBLE)||(LA134_0>=RULE_STRING_ && LA134_0<=RULE_ID)) ) {
                alt134=1;
            }
            else if ( (LA134_0==LeftParenthesis) ) {
                int LA134_2 = input.LA(2);

                if ( (LA134_2==EXTRACT||LA134_2==CAST||LA134_2==CASE||LA134_2==LeftParenthesis||(LA134_2>=RULE_JRPARAM && LA134_2<=RULE_JRNPARAM)||(LA134_2>=RULE_UNSIGNED && LA134_2<=RULE_SIGNED_DOUBLE)||(LA134_2>=RULE_STRING_ && LA134_2<=RULE_ID)) ) {
                    alt134=2;
                }
                else if ( (LA134_2==SELECT) ) {
                    alt134=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 134, 2, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 134, 0, input);

                throw nvae;
            }
            switch (alt134) {
                case 1 :
                    // InternalSQLParser.g:7189:4: ( (lv_args_2_0= ruleAnalyticExprArgs ) )
                    {
                    // InternalSQLParser.g:7189:4: ( (lv_args_2_0= ruleAnalyticExprArgs ) )
                    // InternalSQLParser.g:7190:5: (lv_args_2_0= ruleAnalyticExprArgs )
                    {
                    // InternalSQLParser.g:7190:5: (lv_args_2_0= ruleAnalyticExprArgs )
                    // InternalSQLParser.g:7191:6: lv_args_2_0= ruleAnalyticExprArgs
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getQueryPartitionClauseAccess().getArgsAnalyticExprArgsParserRuleCall_2_0_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_args_2_0=ruleAnalyticExprArgs();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getQueryPartitionClauseRule());
                      						}
                      						set(
                      							current,
                      							"args",
                      							lv_args_2_0,
                      							"org.xtext.example.mydsl_sql.SQL.AnalyticExprArgs");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:7209:4: (otherlv_3= LeftParenthesis this_AnalyticExprArgs_4= ruleAnalyticExprArgs otherlv_5= RightParenthesis )
                    {
                    // InternalSQLParser.g:7209:4: (otherlv_3= LeftParenthesis this_AnalyticExprArgs_4= ruleAnalyticExprArgs otherlv_5= RightParenthesis )
                    // InternalSQLParser.g:7210:5: otherlv_3= LeftParenthesis this_AnalyticExprArgs_4= ruleAnalyticExprArgs otherlv_5= RightParenthesis
                    {
                    otherlv_3=(Token)match(input,LeftParenthesis,FOLLOW_99); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_3, grammarAccess.getQueryPartitionClauseAccess().getLeftParenthesisKeyword_2_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getQueryPartitionClauseAccess().getAnalyticExprArgsParserRuleCall_2_1_1());
                      				
                    }
                    pushFollow(FOLLOW_13);
                    this_AnalyticExprArgs_4=ruleAnalyticExprArgs();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_AnalyticExprArgs_4;
                      					afterParserOrEnumRuleCall();
                      				
                    }
                    otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_5, grammarAccess.getQueryPartitionClauseAccess().getRightParenthesisKeyword_2_1_2());
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleQueryPartitionClause"


    // $ANTLR start "entryRuleAnalyticExprArgs"
    // InternalSQLParser.g:7235:1: entryRuleAnalyticExprArgs returns [EObject current=null] : iv_ruleAnalyticExprArgs= ruleAnalyticExprArgs EOF ;
    public final EObject entryRuleAnalyticExprArgs() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAnalyticExprArgs = null;


        try {
            // InternalSQLParser.g:7235:57: (iv_ruleAnalyticExprArgs= ruleAnalyticExprArgs EOF )
            // InternalSQLParser.g:7236:2: iv_ruleAnalyticExprArgs= ruleAnalyticExprArgs EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnalyticExprArgsRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnalyticExprArgs=ruleAnalyticExprArgs();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnalyticExprArgs; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleAnalyticExprArgs"


    // $ANTLR start "ruleAnalyticExprArgs"
    // InternalSQLParser.g:7242:1: ruleAnalyticExprArgs returns [EObject current=null] : (this_AnalyticExprArg_0= ruleAnalyticExprArg ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleAnalyticExprArg ) ) )+ )? ) ;
    public final EObject ruleAnalyticExprArgs() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_AnalyticExprArg_0 = null;

        EObject lv_entries_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:7248:2: ( (this_AnalyticExprArg_0= ruleAnalyticExprArg ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleAnalyticExprArg ) ) )+ )? ) )
            // InternalSQLParser.g:7249:2: (this_AnalyticExprArg_0= ruleAnalyticExprArg ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleAnalyticExprArg ) ) )+ )? )
            {
            // InternalSQLParser.g:7249:2: (this_AnalyticExprArg_0= ruleAnalyticExprArg ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleAnalyticExprArg ) ) )+ )? )
            // InternalSQLParser.g:7250:3: this_AnalyticExprArg_0= ruleAnalyticExprArg ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleAnalyticExprArg ) ) )+ )?
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getAnalyticExprArgsAccess().getAnalyticExprArgParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_15);
            this_AnalyticExprArg_0=ruleAnalyticExprArg();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_AnalyticExprArg_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:7261:3: ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleAnalyticExprArg ) ) )+ )?
            int alt136=2;
            int LA136_0 = input.LA(1);

            if ( (LA136_0==Comma) ) {
                alt136=1;
            }
            switch (alt136) {
                case 1 :
                    // InternalSQLParser.g:7262:4: () (otherlv_2= Comma ( (lv_entries_3_0= ruleAnalyticExprArg ) ) )+
                    {
                    // InternalSQLParser.g:7262:4: ()
                    // InternalSQLParser.g:7263:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getAnalyticExprArgsAccess().getAExpArgsEntriesAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalSQLParser.g:7272:4: (otherlv_2= Comma ( (lv_entries_3_0= ruleAnalyticExprArg ) ) )+
                    int cnt135=0;
                    loop135:
                    do {
                        int alt135=2;
                        int LA135_0 = input.LA(1);

                        if ( (LA135_0==Comma) ) {
                            alt135=1;
                        }


                        switch (alt135) {
                    	case 1 :
                    	    // InternalSQLParser.g:7273:5: otherlv_2= Comma ( (lv_entries_3_0= ruleAnalyticExprArg ) )
                    	    {
                    	    otherlv_2=(Token)match(input,Comma,FOLLOW_99); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_2, grammarAccess.getAnalyticExprArgsAccess().getCommaKeyword_1_1_0());
                    	      				
                    	    }
                    	    // InternalSQLParser.g:7277:5: ( (lv_entries_3_0= ruleAnalyticExprArg ) )
                    	    // InternalSQLParser.g:7278:6: (lv_entries_3_0= ruleAnalyticExprArg )
                    	    {
                    	    // InternalSQLParser.g:7278:6: (lv_entries_3_0= ruleAnalyticExprArg )
                    	    // InternalSQLParser.g:7279:7: lv_entries_3_0= ruleAnalyticExprArg
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getAnalyticExprArgsAccess().getEntriesAnalyticExprArgParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_15);
                    	    lv_entries_3_0=ruleAnalyticExprArg();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getAnalyticExprArgsRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"entries",
                    	      								lv_entries_3_0,
                    	      								"org.xtext.example.mydsl_sql.SQL.AnalyticExprArg");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt135 >= 1 ) break loop135;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(135, input);
                                throw eee;
                        }
                        cnt135++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleAnalyticExprArgs"


    // $ANTLR start "entryRuleAnalyticExprArg"
    // InternalSQLParser.g:7302:1: entryRuleAnalyticExprArg returns [EObject current=null] : iv_ruleAnalyticExprArg= ruleAnalyticExprArg EOF ;
    public final EObject entryRuleAnalyticExprArg() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAnalyticExprArg = null;


        try {
            // InternalSQLParser.g:7302:56: (iv_ruleAnalyticExprArg= ruleAnalyticExprArg EOF )
            // InternalSQLParser.g:7303:2: iv_ruleAnalyticExprArg= ruleAnalyticExprArg EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnalyticExprArgRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnalyticExprArg=ruleAnalyticExprArg();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnalyticExprArg; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleAnalyticExprArg"


    // $ANTLR start "ruleAnalyticExprArg"
    // InternalSQLParser.g:7309:1: ruleAnalyticExprArg returns [EObject current=null] : ( ( (lv_ce_0_0= ruleOperand ) ) ( (lv_colAlias_1_0= ruleDbObjectName ) )? ) ;
    public final EObject ruleAnalyticExprArg() throws RecognitionException {
        EObject current = null;

        EObject lv_ce_0_0 = null;

        EObject lv_colAlias_1_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:7315:2: ( ( ( (lv_ce_0_0= ruleOperand ) ) ( (lv_colAlias_1_0= ruleDbObjectName ) )? ) )
            // InternalSQLParser.g:7316:2: ( ( (lv_ce_0_0= ruleOperand ) ) ( (lv_colAlias_1_0= ruleDbObjectName ) )? )
            {
            // InternalSQLParser.g:7316:2: ( ( (lv_ce_0_0= ruleOperand ) ) ( (lv_colAlias_1_0= ruleDbObjectName ) )? )
            // InternalSQLParser.g:7317:3: ( (lv_ce_0_0= ruleOperand ) ) ( (lv_colAlias_1_0= ruleDbObjectName ) )?
            {
            // InternalSQLParser.g:7317:3: ( (lv_ce_0_0= ruleOperand ) )
            // InternalSQLParser.g:7318:4: (lv_ce_0_0= ruleOperand )
            {
            // InternalSQLParser.g:7318:4: (lv_ce_0_0= ruleOperand )
            // InternalSQLParser.g:7319:5: lv_ce_0_0= ruleOperand
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getAnalyticExprArgAccess().getCeOperandParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_55);
            lv_ce_0_0=ruleOperand();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getAnalyticExprArgRule());
              					}
              					set(
              						current,
              						"ce",
              						lv_ce_0_0,
              						"org.xtext.example.mydsl_sql.SQL.Operand");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:7336:3: ( (lv_colAlias_1_0= ruleDbObjectName ) )?
            int alt137=2;
            int LA137_0 = input.LA(1);

            if ( ((LA137_0>=RULE_STRING && LA137_0<=RULE_ID)) ) {
                alt137=1;
            }
            switch (alt137) {
                case 1 :
                    // InternalSQLParser.g:7337:4: (lv_colAlias_1_0= ruleDbObjectName )
                    {
                    // InternalSQLParser.g:7337:4: (lv_colAlias_1_0= ruleDbObjectName )
                    // InternalSQLParser.g:7338:5: lv_colAlias_1_0= ruleDbObjectName
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getAnalyticExprArgAccess().getColAliasDbObjectNameParserRuleCall_1_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_colAlias_1_0=ruleDbObjectName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getAnalyticExprArgRule());
                      					}
                      					set(
                      						current,
                      						"colAlias",
                      						lv_colAlias_1_0,
                      						"org.xtext.example.mydsl_sql.SQL.DbObjectName");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleAnalyticExprArg"


    // $ANTLR start "entryRuleOpFunctionArg"
    // InternalSQLParser.g:7359:1: entryRuleOpFunctionArg returns [EObject current=null] : iv_ruleOpFunctionArg= ruleOpFunctionArg EOF ;
    public final EObject entryRuleOpFunctionArg() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOpFunctionArg = null;


        try {
            // InternalSQLParser.g:7359:54: (iv_ruleOpFunctionArg= ruleOpFunctionArg EOF )
            // InternalSQLParser.g:7360:2: iv_ruleOpFunctionArg= ruleOpFunctionArg EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOpFunctionArgRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOpFunctionArg=ruleOpFunctionArg();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOpFunctionArg; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOpFunctionArg"


    // $ANTLR start "ruleOpFunctionArg"
    // InternalSQLParser.g:7366:1: ruleOpFunctionArg returns [EObject current=null] : (this_OpFunctionArgOperand_0= ruleOpFunctionArgOperand ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleOpFunctionArgOperand ) ) )+ )? ) ;
    public final EObject ruleOpFunctionArg() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_OpFunctionArgOperand_0 = null;

        EObject lv_entries_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:7372:2: ( (this_OpFunctionArgOperand_0= ruleOpFunctionArgOperand ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleOpFunctionArgOperand ) ) )+ )? ) )
            // InternalSQLParser.g:7373:2: (this_OpFunctionArgOperand_0= ruleOpFunctionArgOperand ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleOpFunctionArgOperand ) ) )+ )? )
            {
            // InternalSQLParser.g:7373:2: (this_OpFunctionArgOperand_0= ruleOpFunctionArgOperand ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleOpFunctionArgOperand ) ) )+ )? )
            // InternalSQLParser.g:7374:3: this_OpFunctionArgOperand_0= ruleOpFunctionArgOperand ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleOpFunctionArgOperand ) ) )+ )?
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getOpFunctionArgAccess().getOpFunctionArgOperandParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_15);
            this_OpFunctionArgOperand_0=ruleOpFunctionArgOperand();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_OpFunctionArgOperand_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:7385:3: ( () (otherlv_2= Comma ( (lv_entries_3_0= ruleOpFunctionArgOperand ) ) )+ )?
            int alt139=2;
            int LA139_0 = input.LA(1);

            if ( (LA139_0==Comma) ) {
                alt139=1;
            }
            switch (alt139) {
                case 1 :
                    // InternalSQLParser.g:7386:4: () (otherlv_2= Comma ( (lv_entries_3_0= ruleOpFunctionArgOperand ) ) )+
                    {
                    // InternalSQLParser.g:7386:4: ()
                    // InternalSQLParser.g:7387:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getOpFunctionArgAccess().getOpFListEntriesAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalSQLParser.g:7396:4: (otherlv_2= Comma ( (lv_entries_3_0= ruleOpFunctionArgOperand ) ) )+
                    int cnt138=0;
                    loop138:
                    do {
                        int alt138=2;
                        int LA138_0 = input.LA(1);

                        if ( (LA138_0==Comma) ) {
                            alt138=1;
                        }


                        switch (alt138) {
                    	case 1 :
                    	    // InternalSQLParser.g:7397:5: otherlv_2= Comma ( (lv_entries_3_0= ruleOpFunctionArgOperand ) )
                    	    {
                    	    otherlv_2=(Token)match(input,Comma,FOLLOW_108); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_2, grammarAccess.getOpFunctionArgAccess().getCommaKeyword_1_1_0());
                    	      				
                    	    }
                    	    // InternalSQLParser.g:7401:5: ( (lv_entries_3_0= ruleOpFunctionArgOperand ) )
                    	    // InternalSQLParser.g:7402:6: (lv_entries_3_0= ruleOpFunctionArgOperand )
                    	    {
                    	    // InternalSQLParser.g:7402:6: (lv_entries_3_0= ruleOpFunctionArgOperand )
                    	    // InternalSQLParser.g:7403:7: lv_entries_3_0= ruleOpFunctionArgOperand
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getOpFunctionArgAccess().getEntriesOpFunctionArgOperandParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_15);
                    	    lv_entries_3_0=ruleOpFunctionArgOperand();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getOpFunctionArgRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"entries",
                    	      								lv_entries_3_0,
                    	      								"org.xtext.example.mydsl_sql.SQL.OpFunctionArgOperand");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt138 >= 1 ) break loop138;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(138, input);
                                throw eee;
                        }
                        cnt138++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOpFunctionArg"


    // $ANTLR start "entryRuleOpFunctionArgOperand"
    // InternalSQLParser.g:7426:1: entryRuleOpFunctionArgOperand returns [EObject current=null] : iv_ruleOpFunctionArgOperand= ruleOpFunctionArgOperand EOF ;
    public final EObject entryRuleOpFunctionArgOperand() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOpFunctionArgOperand = null;


        try {
            // InternalSQLParser.g:7426:61: (iv_ruleOpFunctionArgOperand= ruleOpFunctionArgOperand EOF )
            // InternalSQLParser.g:7427:2: iv_ruleOpFunctionArgOperand= ruleOpFunctionArgOperand EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOpFunctionArgOperandRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOpFunctionArgOperand=ruleOpFunctionArgOperand();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOpFunctionArgOperand; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOpFunctionArgOperand"


    // $ANTLR start "ruleOpFunctionArgOperand"
    // InternalSQLParser.g:7433:1: ruleOpFunctionArgOperand returns [EObject current=null] : ( ( (lv_op_0_1= ruleOpFunctionArgAgregate | lv_op_0_2= ruleOperand ) ) ) ;
    public final EObject ruleOpFunctionArgOperand() throws RecognitionException {
        EObject current = null;

        EObject lv_op_0_1 = null;

        EObject lv_op_0_2 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:7439:2: ( ( ( (lv_op_0_1= ruleOpFunctionArgAgregate | lv_op_0_2= ruleOperand ) ) ) )
            // InternalSQLParser.g:7440:2: ( ( (lv_op_0_1= ruleOpFunctionArgAgregate | lv_op_0_2= ruleOperand ) ) )
            {
            // InternalSQLParser.g:7440:2: ( ( (lv_op_0_1= ruleOpFunctionArgAgregate | lv_op_0_2= ruleOperand ) ) )
            // InternalSQLParser.g:7441:3: ( (lv_op_0_1= ruleOpFunctionArgAgregate | lv_op_0_2= ruleOperand ) )
            {
            // InternalSQLParser.g:7441:3: ( (lv_op_0_1= ruleOpFunctionArgAgregate | lv_op_0_2= ruleOperand ) )
            // InternalSQLParser.g:7442:4: (lv_op_0_1= ruleOpFunctionArgAgregate | lv_op_0_2= ruleOperand )
            {
            // InternalSQLParser.g:7442:4: (lv_op_0_1= ruleOpFunctionArgAgregate | lv_op_0_2= ruleOperand )
            int alt140=2;
            int LA140_0 = input.LA(1);

            if ( (LA140_0==DISTINCT||LA140_0==ALL) ) {
                alt140=1;
            }
            else if ( (LA140_0==EXTRACT||LA140_0==CAST||LA140_0==CASE||LA140_0==LeftParenthesis||(LA140_0>=RULE_JRPARAM && LA140_0<=RULE_JRNPARAM)||(LA140_0>=RULE_UNSIGNED && LA140_0<=RULE_SIGNED_DOUBLE)||(LA140_0>=RULE_STRING_ && LA140_0<=RULE_ID)) ) {
                alt140=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 140, 0, input);

                throw nvae;
            }
            switch (alt140) {
                case 1 :
                    // InternalSQLParser.g:7443:5: lv_op_0_1= ruleOpFunctionArgAgregate
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getOpFunctionArgOperandAccess().getOpOpFunctionArgAgregateParserRuleCall_0_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_op_0_1=ruleOpFunctionArgAgregate();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getOpFunctionArgOperandRule());
                      					}
                      					set(
                      						current,
                      						"op",
                      						lv_op_0_1,
                      						"org.xtext.example.mydsl_sql.SQL.OpFunctionArgAgregate");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:7459:5: lv_op_0_2= ruleOperand
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getOpFunctionArgOperandAccess().getOpOperandParserRuleCall_0_1());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_op_0_2=ruleOperand();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getOpFunctionArgOperandRule());
                      					}
                      					set(
                      						current,
                      						"op",
                      						lv_op_0_2,
                      						"org.xtext.example.mydsl_sql.SQL.Operand");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }
                    break;

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOpFunctionArgOperand"


    // $ANTLR start "entryRuleOpFunctionCast"
    // InternalSQLParser.g:7480:1: entryRuleOpFunctionCast returns [EObject current=null] : iv_ruleOpFunctionCast= ruleOpFunctionCast EOF ;
    public final EObject entryRuleOpFunctionCast() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOpFunctionCast = null;


        try {
            // InternalSQLParser.g:7480:55: (iv_ruleOpFunctionCast= ruleOpFunctionCast EOF )
            // InternalSQLParser.g:7481:2: iv_ruleOpFunctionCast= ruleOpFunctionCast EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOpFunctionCastRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOpFunctionCast=ruleOpFunctionCast();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOpFunctionCast; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOpFunctionCast"


    // $ANTLR start "ruleOpFunctionCast"
    // InternalSQLParser.g:7487:1: ruleOpFunctionCast returns [EObject current=null] : (otherlv_0= CAST ( (lv_op_1_0= ruleOperandGroup ) ) otherlv_2= AS ( (lv_type_3_0= RULE_ID ) ) (otherlv_4= LeftParenthesis ( (lv_p_5_0= RULE_UNSIGNED ) ) (otherlv_6= Comma ( (lv_p2_7_0= RULE_UNSIGNED ) ) )? otherlv_8= RightParenthesis )? otherlv_9= RightParenthesis ) ;
    public final EObject ruleOpFunctionCast() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        Token lv_type_3_0=null;
        Token otherlv_4=null;
        Token lv_p_5_0=null;
        Token otherlv_6=null;
        Token lv_p2_7_0=null;
        Token otherlv_8=null;
        Token otherlv_9=null;
        EObject lv_op_1_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:7493:2: ( (otherlv_0= CAST ( (lv_op_1_0= ruleOperandGroup ) ) otherlv_2= AS ( (lv_type_3_0= RULE_ID ) ) (otherlv_4= LeftParenthesis ( (lv_p_5_0= RULE_UNSIGNED ) ) (otherlv_6= Comma ( (lv_p2_7_0= RULE_UNSIGNED ) ) )? otherlv_8= RightParenthesis )? otherlv_9= RightParenthesis ) )
            // InternalSQLParser.g:7494:2: (otherlv_0= CAST ( (lv_op_1_0= ruleOperandGroup ) ) otherlv_2= AS ( (lv_type_3_0= RULE_ID ) ) (otherlv_4= LeftParenthesis ( (lv_p_5_0= RULE_UNSIGNED ) ) (otherlv_6= Comma ( (lv_p2_7_0= RULE_UNSIGNED ) ) )? otherlv_8= RightParenthesis )? otherlv_9= RightParenthesis )
            {
            // InternalSQLParser.g:7494:2: (otherlv_0= CAST ( (lv_op_1_0= ruleOperandGroup ) ) otherlv_2= AS ( (lv_type_3_0= RULE_ID ) ) (otherlv_4= LeftParenthesis ( (lv_p_5_0= RULE_UNSIGNED ) ) (otherlv_6= Comma ( (lv_p2_7_0= RULE_UNSIGNED ) ) )? otherlv_8= RightParenthesis )? otherlv_9= RightParenthesis )
            // InternalSQLParser.g:7495:3: otherlv_0= CAST ( (lv_op_1_0= ruleOperandGroup ) ) otherlv_2= AS ( (lv_type_3_0= RULE_ID ) ) (otherlv_4= LeftParenthesis ( (lv_p_5_0= RULE_UNSIGNED ) ) (otherlv_6= Comma ( (lv_p2_7_0= RULE_UNSIGNED ) ) )? otherlv_8= RightParenthesis )? otherlv_9= RightParenthesis
            {
            otherlv_0=(Token)match(input,CAST,FOLLOW_78); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getOpFunctionCastAccess().getCASTKeyword_0());
              		
            }
            // InternalSQLParser.g:7499:3: ( (lv_op_1_0= ruleOperandGroup ) )
            // InternalSQLParser.g:7500:4: (lv_op_1_0= ruleOperandGroup )
            {
            // InternalSQLParser.g:7500:4: (lv_op_1_0= ruleOperandGroup )
            // InternalSQLParser.g:7501:5: lv_op_1_0= ruleOperandGroup
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getOpFunctionCastAccess().getOpOperandGroupParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_28);
            lv_op_1_0=ruleOperandGroup();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getOpFunctionCastRule());
              					}
              					set(
              						current,
              						"op",
              						lv_op_1_0,
              						"org.xtext.example.mydsl_sql.SQL.OperandGroup");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_2=(Token)match(input,AS,FOLLOW_21); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getOpFunctionCastAccess().getASKeyword_2());
              		
            }
            // InternalSQLParser.g:7522:3: ( (lv_type_3_0= RULE_ID ) )
            // InternalSQLParser.g:7523:4: (lv_type_3_0= RULE_ID )
            {
            // InternalSQLParser.g:7523:4: (lv_type_3_0= RULE_ID )
            // InternalSQLParser.g:7524:5: lv_type_3_0= RULE_ID
            {
            lv_type_3_0=(Token)match(input,RULE_ID,FOLLOW_109); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_type_3_0, grammarAccess.getOpFunctionCastAccess().getTypeIDTerminalRuleCall_3_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getOpFunctionCastRule());
              					}
              					setWithLastConsumed(
              						current,
              						"type",
              						lv_type_3_0,
              						"org.xtext.example.mydsl_sql.SQL.ID");
              				
            }

            }


            }

            // InternalSQLParser.g:7540:3: (otherlv_4= LeftParenthesis ( (lv_p_5_0= RULE_UNSIGNED ) ) (otherlv_6= Comma ( (lv_p2_7_0= RULE_UNSIGNED ) ) )? otherlv_8= RightParenthesis )?
            int alt142=2;
            int LA142_0 = input.LA(1);

            if ( (LA142_0==LeftParenthesis) ) {
                alt142=1;
            }
            switch (alt142) {
                case 1 :
                    // InternalSQLParser.g:7541:4: otherlv_4= LeftParenthesis ( (lv_p_5_0= RULE_UNSIGNED ) ) (otherlv_6= Comma ( (lv_p2_7_0= RULE_UNSIGNED ) ) )? otherlv_8= RightParenthesis
                    {
                    otherlv_4=(Token)match(input,LeftParenthesis,FOLLOW_32); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_4, grammarAccess.getOpFunctionCastAccess().getLeftParenthesisKeyword_4_0());
                      			
                    }
                    // InternalSQLParser.g:7545:4: ( (lv_p_5_0= RULE_UNSIGNED ) )
                    // InternalSQLParser.g:7546:5: (lv_p_5_0= RULE_UNSIGNED )
                    {
                    // InternalSQLParser.g:7546:5: (lv_p_5_0= RULE_UNSIGNED )
                    // InternalSQLParser.g:7547:6: lv_p_5_0= RULE_UNSIGNED
                    {
                    lv_p_5_0=(Token)match(input,RULE_UNSIGNED,FOLLOW_110); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_p_5_0, grammarAccess.getOpFunctionCastAccess().getPUNSIGNEDTerminalRuleCall_4_1_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getOpFunctionCastRule());
                      						}
                      						setWithLastConsumed(
                      							current,
                      							"p",
                      							lv_p_5_0,
                      							"org.xtext.example.mydsl_sql.SQL.UNSIGNED");
                      					
                    }

                    }


                    }

                    // InternalSQLParser.g:7563:4: (otherlv_6= Comma ( (lv_p2_7_0= RULE_UNSIGNED ) ) )?
                    int alt141=2;
                    int LA141_0 = input.LA(1);

                    if ( (LA141_0==Comma) ) {
                        alt141=1;
                    }
                    switch (alt141) {
                        case 1 :
                            // InternalSQLParser.g:7564:5: otherlv_6= Comma ( (lv_p2_7_0= RULE_UNSIGNED ) )
                            {
                            otherlv_6=(Token)match(input,Comma,FOLLOW_32); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(otherlv_6, grammarAccess.getOpFunctionCastAccess().getCommaKeyword_4_2_0());
                              				
                            }
                            // InternalSQLParser.g:7568:5: ( (lv_p2_7_0= RULE_UNSIGNED ) )
                            // InternalSQLParser.g:7569:6: (lv_p2_7_0= RULE_UNSIGNED )
                            {
                            // InternalSQLParser.g:7569:6: (lv_p2_7_0= RULE_UNSIGNED )
                            // InternalSQLParser.g:7570:7: lv_p2_7_0= RULE_UNSIGNED
                            {
                            lv_p2_7_0=(Token)match(input,RULE_UNSIGNED,FOLLOW_13); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(lv_p2_7_0, grammarAccess.getOpFunctionCastAccess().getP2UNSIGNEDTerminalRuleCall_4_2_1_0());
                              						
                            }
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getOpFunctionCastRule());
                              							}
                              							setWithLastConsumed(
                              								current,
                              								"p2",
                              								lv_p2_7_0,
                              								"org.xtext.example.mydsl_sql.SQL.UNSIGNED");
                              						
                            }

                            }


                            }


                            }
                            break;

                    }

                    otherlv_8=(Token)match(input,RightParenthesis,FOLLOW_13); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_8, grammarAccess.getOpFunctionCastAccess().getRightParenthesisKeyword_4_3());
                      			
                    }

                    }
                    break;

            }

            otherlv_9=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_9, grammarAccess.getOpFunctionCastAccess().getRightParenthesisKeyword_5());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOpFunctionCast"


    // $ANTLR start "entryRuleOpFunctionArgAgregate"
    // InternalSQLParser.g:7600:1: entryRuleOpFunctionArgAgregate returns [EObject current=null] : iv_ruleOpFunctionArgAgregate= ruleOpFunctionArgAgregate EOF ;
    public final EObject entryRuleOpFunctionArgAgregate() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOpFunctionArgAgregate = null;


        try {
            // InternalSQLParser.g:7600:62: (iv_ruleOpFunctionArgAgregate= ruleOpFunctionArgAgregate EOF )
            // InternalSQLParser.g:7601:2: iv_ruleOpFunctionArgAgregate= ruleOpFunctionArgAgregate EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOpFunctionArgAgregateRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOpFunctionArgAgregate=ruleOpFunctionArgAgregate();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOpFunctionArgAgregate; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOpFunctionArgAgregate"


    // $ANTLR start "ruleOpFunctionArgAgregate"
    // InternalSQLParser.g:7607:1: ruleOpFunctionArgAgregate returns [EObject current=null] : ( (otherlv_0= ALL | otherlv_1= DISTINCT ) this_Operand_2= ruleOperand ) ;
    public final EObject ruleOpFunctionArgAgregate() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        EObject this_Operand_2 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:7613:2: ( ( (otherlv_0= ALL | otherlv_1= DISTINCT ) this_Operand_2= ruleOperand ) )
            // InternalSQLParser.g:7614:2: ( (otherlv_0= ALL | otherlv_1= DISTINCT ) this_Operand_2= ruleOperand )
            {
            // InternalSQLParser.g:7614:2: ( (otherlv_0= ALL | otherlv_1= DISTINCT ) this_Operand_2= ruleOperand )
            // InternalSQLParser.g:7615:3: (otherlv_0= ALL | otherlv_1= DISTINCT ) this_Operand_2= ruleOperand
            {
            // InternalSQLParser.g:7615:3: (otherlv_0= ALL | otherlv_1= DISTINCT )
            int alt143=2;
            int LA143_0 = input.LA(1);

            if ( (LA143_0==ALL) ) {
                alt143=1;
            }
            else if ( (LA143_0==DISTINCT) ) {
                alt143=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 143, 0, input);

                throw nvae;
            }
            switch (alt143) {
                case 1 :
                    // InternalSQLParser.g:7616:4: otherlv_0= ALL
                    {
                    otherlv_0=(Token)match(input,ALL,FOLLOW_78); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_0, grammarAccess.getOpFunctionArgAgregateAccess().getALLKeyword_0_0());
                      			
                    }

                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:7621:4: otherlv_1= DISTINCT
                    {
                    otherlv_1=(Token)match(input,DISTINCT,FOLLOW_78); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getOpFunctionArgAgregateAccess().getDISTINCTKeyword_0_1());
                      			
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getOpFunctionArgAgregateAccess().getOperandParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_2);
            this_Operand_2=ruleOperand();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_Operand_2;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOpFunctionArgAgregate"


    // $ANTLR start "entryRuleXOperandFragment"
    // InternalSQLParser.g:7641:1: entryRuleXOperandFragment returns [EObject current=null] : iv_ruleXOperandFragment= ruleXOperandFragment EOF ;
    public final EObject entryRuleXOperandFragment() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleXOperandFragment = null;


        try {
            // InternalSQLParser.g:7641:57: (iv_ruleXOperandFragment= ruleXOperandFragment EOF )
            // InternalSQLParser.g:7642:2: iv_ruleXOperandFragment= ruleXOperandFragment EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getXOperandFragmentRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleXOperandFragment=ruleXOperandFragment();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleXOperandFragment; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleXOperandFragment"


    // $ANTLR start "ruleXOperandFragment"
    // InternalSQLParser.g:7648:1: ruleXOperandFragment returns [EObject current=null] : ( ( (lv_param_0_0= ruleParameterOperand ) ) | ( (lv_eparam_1_0= ruleExclamationParameterOperand ) ) | ( (lv_scalar_2_0= ruleScalarNumberOperand ) ) ) ;
    public final EObject ruleXOperandFragment() throws RecognitionException {
        EObject current = null;

        EObject lv_param_0_0 = null;

        EObject lv_eparam_1_0 = null;

        EObject lv_scalar_2_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:7654:2: ( ( ( (lv_param_0_0= ruleParameterOperand ) ) | ( (lv_eparam_1_0= ruleExclamationParameterOperand ) ) | ( (lv_scalar_2_0= ruleScalarNumberOperand ) ) ) )
            // InternalSQLParser.g:7655:2: ( ( (lv_param_0_0= ruleParameterOperand ) ) | ( (lv_eparam_1_0= ruleExclamationParameterOperand ) ) | ( (lv_scalar_2_0= ruleScalarNumberOperand ) ) )
            {
            // InternalSQLParser.g:7655:2: ( ( (lv_param_0_0= ruleParameterOperand ) ) | ( (lv_eparam_1_0= ruleExclamationParameterOperand ) ) | ( (lv_scalar_2_0= ruleScalarNumberOperand ) ) )
            int alt144=3;
            switch ( input.LA(1) ) {
            case RULE_JRPARAM:
                {
                alt144=1;
                }
                break;
            case RULE_JRNPARAM:
                {
                alt144=2;
                }
                break;
            case RULE_UNSIGNED:
            case RULE_INT:
            case RULE_SIGNED_DOUBLE:
            case RULE_STRING_:
                {
                alt144=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 144, 0, input);

                throw nvae;
            }

            switch (alt144) {
                case 1 :
                    // InternalSQLParser.g:7656:3: ( (lv_param_0_0= ruleParameterOperand ) )
                    {
                    // InternalSQLParser.g:7656:3: ( (lv_param_0_0= ruleParameterOperand ) )
                    // InternalSQLParser.g:7657:4: (lv_param_0_0= ruleParameterOperand )
                    {
                    // InternalSQLParser.g:7657:4: (lv_param_0_0= ruleParameterOperand )
                    // InternalSQLParser.g:7658:5: lv_param_0_0= ruleParameterOperand
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getXOperandFragmentAccess().getParamParameterOperandParserRuleCall_0_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_param_0_0=ruleParameterOperand();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getXOperandFragmentRule());
                      					}
                      					set(
                      						current,
                      						"param",
                      						lv_param_0_0,
                      						"org.xtext.example.mydsl_sql.SQL.ParameterOperand");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:7676:3: ( (lv_eparam_1_0= ruleExclamationParameterOperand ) )
                    {
                    // InternalSQLParser.g:7676:3: ( (lv_eparam_1_0= ruleExclamationParameterOperand ) )
                    // InternalSQLParser.g:7677:4: (lv_eparam_1_0= ruleExclamationParameterOperand )
                    {
                    // InternalSQLParser.g:7677:4: (lv_eparam_1_0= ruleExclamationParameterOperand )
                    // InternalSQLParser.g:7678:5: lv_eparam_1_0= ruleExclamationParameterOperand
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getXOperandFragmentAccess().getEparamExclamationParameterOperandParserRuleCall_1_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_eparam_1_0=ruleExclamationParameterOperand();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getXOperandFragmentRule());
                      					}
                      					set(
                      						current,
                      						"eparam",
                      						lv_eparam_1_0,
                      						"org.xtext.example.mydsl_sql.SQL.ExclamationParameterOperand");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:7696:3: ( (lv_scalar_2_0= ruleScalarNumberOperand ) )
                    {
                    // InternalSQLParser.g:7696:3: ( (lv_scalar_2_0= ruleScalarNumberOperand ) )
                    // InternalSQLParser.g:7697:4: (lv_scalar_2_0= ruleScalarNumberOperand )
                    {
                    // InternalSQLParser.g:7697:4: (lv_scalar_2_0= ruleScalarNumberOperand )
                    // InternalSQLParser.g:7698:5: lv_scalar_2_0= ruleScalarNumberOperand
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getXOperandFragmentAccess().getScalarScalarNumberOperandParserRuleCall_2_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_scalar_2_0=ruleScalarNumberOperand();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getXOperandFragmentRule());
                      					}
                      					set(
                      						current,
                      						"scalar",
                      						lv_scalar_2_0,
                      						"org.xtext.example.mydsl_sql.SQL.ScalarNumberOperand");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleXOperandFragment"


    // $ANTLR start "entryRuleParameterOperand"
    // InternalSQLParser.g:7719:1: entryRuleParameterOperand returns [EObject current=null] : iv_ruleParameterOperand= ruleParameterOperand EOF ;
    public final EObject entryRuleParameterOperand() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleParameterOperand = null;


        try {
            // InternalSQLParser.g:7719:57: (iv_ruleParameterOperand= ruleParameterOperand EOF )
            // InternalSQLParser.g:7720:2: iv_ruleParameterOperand= ruleParameterOperand EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getParameterOperandRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleParameterOperand=ruleParameterOperand();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleParameterOperand; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleParameterOperand"


    // $ANTLR start "ruleParameterOperand"
    // InternalSQLParser.g:7726:1: ruleParameterOperand returns [EObject current=null] : ( (lv_prm_0_0= RULE_JRPARAM ) ) ;
    public final EObject ruleParameterOperand() throws RecognitionException {
        EObject current = null;

        Token lv_prm_0_0=null;


        	enterRule();

        try {
            // InternalSQLParser.g:7732:2: ( ( (lv_prm_0_0= RULE_JRPARAM ) ) )
            // InternalSQLParser.g:7733:2: ( (lv_prm_0_0= RULE_JRPARAM ) )
            {
            // InternalSQLParser.g:7733:2: ( (lv_prm_0_0= RULE_JRPARAM ) )
            // InternalSQLParser.g:7734:3: (lv_prm_0_0= RULE_JRPARAM )
            {
            // InternalSQLParser.g:7734:3: (lv_prm_0_0= RULE_JRPARAM )
            // InternalSQLParser.g:7735:4: lv_prm_0_0= RULE_JRPARAM
            {
            lv_prm_0_0=(Token)match(input,RULE_JRPARAM,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(lv_prm_0_0, grammarAccess.getParameterOperandAccess().getPrmJRPARAMTerminalRuleCall_0());
              			
            }
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getParameterOperandRule());
              				}
              				setWithLastConsumed(
              					current,
              					"prm",
              					lv_prm_0_0,
              					"org.xtext.example.mydsl_sql.SQL.JRPARAM");
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleParameterOperand"


    // $ANTLR start "entryRuleExclamationParameterOperand"
    // InternalSQLParser.g:7754:1: entryRuleExclamationParameterOperand returns [EObject current=null] : iv_ruleExclamationParameterOperand= ruleExclamationParameterOperand EOF ;
    public final EObject entryRuleExclamationParameterOperand() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExclamationParameterOperand = null;


        try {
            // InternalSQLParser.g:7754:68: (iv_ruleExclamationParameterOperand= ruleExclamationParameterOperand EOF )
            // InternalSQLParser.g:7755:2: iv_ruleExclamationParameterOperand= ruleExclamationParameterOperand EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExclamationParameterOperandRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExclamationParameterOperand=ruleExclamationParameterOperand();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExclamationParameterOperand; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleExclamationParameterOperand"


    // $ANTLR start "ruleExclamationParameterOperand"
    // InternalSQLParser.g:7761:1: ruleExclamationParameterOperand returns [EObject current=null] : ( (lv_prm_0_0= RULE_JRNPARAM ) ) ;
    public final EObject ruleExclamationParameterOperand() throws RecognitionException {
        EObject current = null;

        Token lv_prm_0_0=null;


        	enterRule();

        try {
            // InternalSQLParser.g:7767:2: ( ( (lv_prm_0_0= RULE_JRNPARAM ) ) )
            // InternalSQLParser.g:7768:2: ( (lv_prm_0_0= RULE_JRNPARAM ) )
            {
            // InternalSQLParser.g:7768:2: ( (lv_prm_0_0= RULE_JRNPARAM ) )
            // InternalSQLParser.g:7769:3: (lv_prm_0_0= RULE_JRNPARAM )
            {
            // InternalSQLParser.g:7769:3: (lv_prm_0_0= RULE_JRNPARAM )
            // InternalSQLParser.g:7770:4: lv_prm_0_0= RULE_JRNPARAM
            {
            lv_prm_0_0=(Token)match(input,RULE_JRNPARAM,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(lv_prm_0_0, grammarAccess.getExclamationParameterOperandAccess().getPrmJRNPARAMTerminalRuleCall_0());
              			
            }
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getExclamationParameterOperandRule());
              				}
              				setWithLastConsumed(
              					current,
              					"prm",
              					lv_prm_0_0,
              					"org.xtext.example.mydsl_sql.SQL.JRNPARAM");
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleExclamationParameterOperand"


    // $ANTLR start "entryRuleColumnOperand"
    // InternalSQLParser.g:7789:1: entryRuleColumnOperand returns [EObject current=null] : iv_ruleColumnOperand= ruleColumnOperand EOF ;
    public final EObject entryRuleColumnOperand() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleColumnOperand = null;


        try {
            // InternalSQLParser.g:7789:54: (iv_ruleColumnOperand= ruleColumnOperand EOF )
            // InternalSQLParser.g:7790:2: iv_ruleColumnOperand= ruleColumnOperand EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getColumnOperandRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleColumnOperand=ruleColumnOperand();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleColumnOperand; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleColumnOperand"


    // $ANTLR start "ruleColumnOperand"
    // InternalSQLParser.g:7796:1: ruleColumnOperand returns [EObject current=null] : ( ( (lv_cfull_0_0= ruleColumnFull ) ) ( (lv_ora_1_0= LeftParenthesisPlusSignRightParenthesis ) )? ) ;
    public final EObject ruleColumnOperand() throws RecognitionException {
        EObject current = null;

        Token lv_ora_1_0=null;
        EObject lv_cfull_0_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:7802:2: ( ( ( (lv_cfull_0_0= ruleColumnFull ) ) ( (lv_ora_1_0= LeftParenthesisPlusSignRightParenthesis ) )? ) )
            // InternalSQLParser.g:7803:2: ( ( (lv_cfull_0_0= ruleColumnFull ) ) ( (lv_ora_1_0= LeftParenthesisPlusSignRightParenthesis ) )? )
            {
            // InternalSQLParser.g:7803:2: ( ( (lv_cfull_0_0= ruleColumnFull ) ) ( (lv_ora_1_0= LeftParenthesisPlusSignRightParenthesis ) )? )
            // InternalSQLParser.g:7804:3: ( (lv_cfull_0_0= ruleColumnFull ) ) ( (lv_ora_1_0= LeftParenthesisPlusSignRightParenthesis ) )?
            {
            // InternalSQLParser.g:7804:3: ( (lv_cfull_0_0= ruleColumnFull ) )
            // InternalSQLParser.g:7805:4: (lv_cfull_0_0= ruleColumnFull )
            {
            // InternalSQLParser.g:7805:4: (lv_cfull_0_0= ruleColumnFull )
            // InternalSQLParser.g:7806:5: lv_cfull_0_0= ruleColumnFull
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getColumnOperandAccess().getCfullColumnFullParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_111);
            lv_cfull_0_0=ruleColumnFull();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getColumnOperandRule());
              					}
              					set(
              						current,
              						"cfull",
              						lv_cfull_0_0,
              						"org.xtext.example.mydsl_sql.SQL.ColumnFull");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:7823:3: ( (lv_ora_1_0= LeftParenthesisPlusSignRightParenthesis ) )?
            int alt145=2;
            int LA145_0 = input.LA(1);

            if ( (LA145_0==LeftParenthesisPlusSignRightParenthesis) ) {
                alt145=1;
            }
            switch (alt145) {
                case 1 :
                    // InternalSQLParser.g:7824:4: (lv_ora_1_0= LeftParenthesisPlusSignRightParenthesis )
                    {
                    // InternalSQLParser.g:7824:4: (lv_ora_1_0= LeftParenthesisPlusSignRightParenthesis )
                    // InternalSQLParser.g:7825:5: lv_ora_1_0= LeftParenthesisPlusSignRightParenthesis
                    {
                    lv_ora_1_0=(Token)match(input,LeftParenthesisPlusSignRightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_ora_1_0, grammarAccess.getColumnOperandAccess().getOraLeftParenthesisPlusSignRightParenthesisKeyword_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getColumnOperandRule());
                      					}
                      					setWithLastConsumed(current, "ora", lv_ora_1_0, "(+)");
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleColumnOperand"


    // $ANTLR start "entryRuleSubQueryOperand"
    // InternalSQLParser.g:7841:1: entryRuleSubQueryOperand returns [EObject current=null] : iv_ruleSubQueryOperand= ruleSubQueryOperand EOF ;
    public final EObject entryRuleSubQueryOperand() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSubQueryOperand = null;


        try {
            // InternalSQLParser.g:7841:56: (iv_ruleSubQueryOperand= ruleSubQueryOperand EOF )
            // InternalSQLParser.g:7842:2: iv_ruleSubQueryOperand= ruleSubQueryOperand EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSubQueryOperandRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSubQueryOperand=ruleSubQueryOperand();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSubQueryOperand; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSubQueryOperand"


    // $ANTLR start "ruleSubQueryOperand"
    // InternalSQLParser.g:7848:1: ruleSubQueryOperand returns [EObject current=null] : ( () otherlv_1= LeftParenthesis ( (lv_sel_2_0= ruleSelectQuery ) ) otherlv_3= RightParenthesis ) ;
    public final EObject ruleSubQueryOperand() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_sel_2_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:7854:2: ( ( () otherlv_1= LeftParenthesis ( (lv_sel_2_0= ruleSelectQuery ) ) otherlv_3= RightParenthesis ) )
            // InternalSQLParser.g:7855:2: ( () otherlv_1= LeftParenthesis ( (lv_sel_2_0= ruleSelectQuery ) ) otherlv_3= RightParenthesis )
            {
            // InternalSQLParser.g:7855:2: ( () otherlv_1= LeftParenthesis ( (lv_sel_2_0= ruleSelectQuery ) ) otherlv_3= RightParenthesis )
            // InternalSQLParser.g:7856:3: () otherlv_1= LeftParenthesis ( (lv_sel_2_0= ruleSelectQuery ) ) otherlv_3= RightParenthesis
            {
            // InternalSQLParser.g:7856:3: ()
            // InternalSQLParser.g:7857:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getSubQueryOperandAccess().getSubQueryOperandAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_29); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getSubQueryOperandAccess().getLeftParenthesisKeyword_1());
              		
            }
            // InternalSQLParser.g:7870:3: ( (lv_sel_2_0= ruleSelectQuery ) )
            // InternalSQLParser.g:7871:4: (lv_sel_2_0= ruleSelectQuery )
            {
            // InternalSQLParser.g:7871:4: (lv_sel_2_0= ruleSelectQuery )
            // InternalSQLParser.g:7872:5: lv_sel_2_0= ruleSelectQuery
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getSubQueryOperandAccess().getSelSelectQueryParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_13);
            lv_sel_2_0=ruleSelectQuery();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getSubQueryOperandRule());
              					}
              					set(
              						current,
              						"sel",
              						lv_sel_2_0,
              						"org.xtext.example.mydsl_sql.SQL.SelectQuery");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getSubQueryOperandAccess().getRightParenthesisKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSubQueryOperand"


    // $ANTLR start "entryRuleScalarOperand"
    // InternalSQLParser.g:7897:1: entryRuleScalarOperand returns [EObject current=null] : iv_ruleScalarOperand= ruleScalarOperand EOF ;
    public final EObject entryRuleScalarOperand() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleScalarOperand = null;


        try {
            // InternalSQLParser.g:7897:54: (iv_ruleScalarOperand= ruleScalarOperand EOF )
            // InternalSQLParser.g:7898:2: iv_ruleScalarOperand= ruleScalarOperand EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getScalarOperandRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleScalarOperand=ruleScalarOperand();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleScalarOperand; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleScalarOperand"


    // $ANTLR start "ruleScalarOperand"
    // InternalSQLParser.g:7904:1: ruleScalarOperand returns [EObject current=null] : ( ( (lv_sostr_0_0= ruleStringOperand ) ) | ( (lv_sodbl_1_0= RULE_SIGNED_DOUBLE ) ) | ( (lv_sodate_2_0= RULE_DATE ) ) | ( (lv_sotime_3_0= RULE_TIME ) ) | ( (lv_sodt_4_0= RULE_TIMESTAMP ) ) ) ;
    public final EObject ruleScalarOperand() throws RecognitionException {
        EObject current = null;

        Token lv_sodbl_1_0=null;
        Token lv_sodate_2_0=null;
        Token lv_sotime_3_0=null;
        Token lv_sodt_4_0=null;
        AntlrDatatypeRuleToken lv_sostr_0_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:7910:2: ( ( ( (lv_sostr_0_0= ruleStringOperand ) ) | ( (lv_sodbl_1_0= RULE_SIGNED_DOUBLE ) ) | ( (lv_sodate_2_0= RULE_DATE ) ) | ( (lv_sotime_3_0= RULE_TIME ) ) | ( (lv_sodt_4_0= RULE_TIMESTAMP ) ) ) )
            // InternalSQLParser.g:7911:2: ( ( (lv_sostr_0_0= ruleStringOperand ) ) | ( (lv_sodbl_1_0= RULE_SIGNED_DOUBLE ) ) | ( (lv_sodate_2_0= RULE_DATE ) ) | ( (lv_sotime_3_0= RULE_TIME ) ) | ( (lv_sodt_4_0= RULE_TIMESTAMP ) ) )
            {
            // InternalSQLParser.g:7911:2: ( ( (lv_sostr_0_0= ruleStringOperand ) ) | ( (lv_sodbl_1_0= RULE_SIGNED_DOUBLE ) ) | ( (lv_sodate_2_0= RULE_DATE ) ) | ( (lv_sotime_3_0= RULE_TIME ) ) | ( (lv_sodt_4_0= RULE_TIMESTAMP ) ) )
            int alt146=5;
            switch ( input.LA(1) ) {
            case RULE_STRING_:
                {
                alt146=1;
                }
                break;
            case RULE_SIGNED_DOUBLE:
                {
                alt146=2;
                }
                break;
            case RULE_DATE:
                {
                alt146=3;
                }
                break;
            case RULE_TIME:
                {
                alt146=4;
                }
                break;
            case RULE_TIMESTAMP:
                {
                alt146=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 146, 0, input);

                throw nvae;
            }

            switch (alt146) {
                case 1 :
                    // InternalSQLParser.g:7912:3: ( (lv_sostr_0_0= ruleStringOperand ) )
                    {
                    // InternalSQLParser.g:7912:3: ( (lv_sostr_0_0= ruleStringOperand ) )
                    // InternalSQLParser.g:7913:4: (lv_sostr_0_0= ruleStringOperand )
                    {
                    // InternalSQLParser.g:7913:4: (lv_sostr_0_0= ruleStringOperand )
                    // InternalSQLParser.g:7914:5: lv_sostr_0_0= ruleStringOperand
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getScalarOperandAccess().getSostrStringOperandParserRuleCall_0_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_sostr_0_0=ruleStringOperand();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getScalarOperandRule());
                      					}
                      					set(
                      						current,
                      						"sostr",
                      						lv_sostr_0_0,
                      						"org.xtext.example.mydsl_sql.SQL.StringOperand");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:7932:3: ( (lv_sodbl_1_0= RULE_SIGNED_DOUBLE ) )
                    {
                    // InternalSQLParser.g:7932:3: ( (lv_sodbl_1_0= RULE_SIGNED_DOUBLE ) )
                    // InternalSQLParser.g:7933:4: (lv_sodbl_1_0= RULE_SIGNED_DOUBLE )
                    {
                    // InternalSQLParser.g:7933:4: (lv_sodbl_1_0= RULE_SIGNED_DOUBLE )
                    // InternalSQLParser.g:7934:5: lv_sodbl_1_0= RULE_SIGNED_DOUBLE
                    {
                    lv_sodbl_1_0=(Token)match(input,RULE_SIGNED_DOUBLE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_sodbl_1_0, grammarAccess.getScalarOperandAccess().getSodblSIGNED_DOUBLETerminalRuleCall_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getScalarOperandRule());
                      					}
                      					setWithLastConsumed(
                      						current,
                      						"sodbl",
                      						lv_sodbl_1_0,
                      						"org.xtext.example.mydsl_sql.SQL.SIGNED_DOUBLE");
                      				
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:7951:3: ( (lv_sodate_2_0= RULE_DATE ) )
                    {
                    // InternalSQLParser.g:7951:3: ( (lv_sodate_2_0= RULE_DATE ) )
                    // InternalSQLParser.g:7952:4: (lv_sodate_2_0= RULE_DATE )
                    {
                    // InternalSQLParser.g:7952:4: (lv_sodate_2_0= RULE_DATE )
                    // InternalSQLParser.g:7953:5: lv_sodate_2_0= RULE_DATE
                    {
                    lv_sodate_2_0=(Token)match(input,RULE_DATE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_sodate_2_0, grammarAccess.getScalarOperandAccess().getSodateDATETerminalRuleCall_2_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getScalarOperandRule());
                      					}
                      					setWithLastConsumed(
                      						current,
                      						"sodate",
                      						lv_sodate_2_0,
                      						"org.xtext.example.mydsl_sql.SQL.DATE");
                      				
                    }

                    }


                    }


                    }
                    break;
                case 4 :
                    // InternalSQLParser.g:7970:3: ( (lv_sotime_3_0= RULE_TIME ) )
                    {
                    // InternalSQLParser.g:7970:3: ( (lv_sotime_3_0= RULE_TIME ) )
                    // InternalSQLParser.g:7971:4: (lv_sotime_3_0= RULE_TIME )
                    {
                    // InternalSQLParser.g:7971:4: (lv_sotime_3_0= RULE_TIME )
                    // InternalSQLParser.g:7972:5: lv_sotime_3_0= RULE_TIME
                    {
                    lv_sotime_3_0=(Token)match(input,RULE_TIME,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_sotime_3_0, grammarAccess.getScalarOperandAccess().getSotimeTIMETerminalRuleCall_3_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getScalarOperandRule());
                      					}
                      					setWithLastConsumed(
                      						current,
                      						"sotime",
                      						lv_sotime_3_0,
                      						"org.xtext.example.mydsl_sql.SQL.TIME");
                      				
                    }

                    }


                    }


                    }
                    break;
                case 5 :
                    // InternalSQLParser.g:7989:3: ( (lv_sodt_4_0= RULE_TIMESTAMP ) )
                    {
                    // InternalSQLParser.g:7989:3: ( (lv_sodt_4_0= RULE_TIMESTAMP ) )
                    // InternalSQLParser.g:7990:4: (lv_sodt_4_0= RULE_TIMESTAMP )
                    {
                    // InternalSQLParser.g:7990:4: (lv_sodt_4_0= RULE_TIMESTAMP )
                    // InternalSQLParser.g:7991:5: lv_sodt_4_0= RULE_TIMESTAMP
                    {
                    lv_sodt_4_0=(Token)match(input,RULE_TIMESTAMP,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_sodt_4_0, grammarAccess.getScalarOperandAccess().getSodtTIMESTAMPTerminalRuleCall_4_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getScalarOperandRule());
                      					}
                      					setWithLastConsumed(
                      						current,
                      						"sodt",
                      						lv_sodt_4_0,
                      						"org.xtext.example.mydsl_sql.SQL.TIMESTAMP");
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleScalarOperand"


    // $ANTLR start "entryRuleScalarNumberOperand"
    // InternalSQLParser.g:8011:1: entryRuleScalarNumberOperand returns [EObject current=null] : iv_ruleScalarNumberOperand= ruleScalarNumberOperand EOF ;
    public final EObject entryRuleScalarNumberOperand() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleScalarNumberOperand = null;


        try {
            // InternalSQLParser.g:8011:60: (iv_ruleScalarNumberOperand= ruleScalarNumberOperand EOF )
            // InternalSQLParser.g:8012:2: iv_ruleScalarNumberOperand= ruleScalarNumberOperand EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getScalarNumberOperandRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleScalarNumberOperand=ruleScalarNumberOperand();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleScalarNumberOperand; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleScalarNumberOperand"


    // $ANTLR start "ruleScalarNumberOperand"
    // InternalSQLParser.g:8018:1: ruleScalarNumberOperand returns [EObject current=null] : ( ( (lv_soUInt_0_0= RULE_UNSIGNED ) ) | ( (lv_soint_1_0= RULE_INT ) ) | ( (lv_sodbl_2_0= RULE_SIGNED_DOUBLE ) ) | ( (lv_sostr_3_0= ruleStringOperand ) ) ) ;
    public final EObject ruleScalarNumberOperand() throws RecognitionException {
        EObject current = null;

        Token lv_soUInt_0_0=null;
        Token lv_soint_1_0=null;
        Token lv_sodbl_2_0=null;
        AntlrDatatypeRuleToken lv_sostr_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:8024:2: ( ( ( (lv_soUInt_0_0= RULE_UNSIGNED ) ) | ( (lv_soint_1_0= RULE_INT ) ) | ( (lv_sodbl_2_0= RULE_SIGNED_DOUBLE ) ) | ( (lv_sostr_3_0= ruleStringOperand ) ) ) )
            // InternalSQLParser.g:8025:2: ( ( (lv_soUInt_0_0= RULE_UNSIGNED ) ) | ( (lv_soint_1_0= RULE_INT ) ) | ( (lv_sodbl_2_0= RULE_SIGNED_DOUBLE ) ) | ( (lv_sostr_3_0= ruleStringOperand ) ) )
            {
            // InternalSQLParser.g:8025:2: ( ( (lv_soUInt_0_0= RULE_UNSIGNED ) ) | ( (lv_soint_1_0= RULE_INT ) ) | ( (lv_sodbl_2_0= RULE_SIGNED_DOUBLE ) ) | ( (lv_sostr_3_0= ruleStringOperand ) ) )
            int alt147=4;
            switch ( input.LA(1) ) {
            case RULE_UNSIGNED:
                {
                alt147=1;
                }
                break;
            case RULE_INT:
                {
                alt147=2;
                }
                break;
            case RULE_SIGNED_DOUBLE:
                {
                alt147=3;
                }
                break;
            case RULE_STRING_:
                {
                alt147=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 147, 0, input);

                throw nvae;
            }

            switch (alt147) {
                case 1 :
                    // InternalSQLParser.g:8026:3: ( (lv_soUInt_0_0= RULE_UNSIGNED ) )
                    {
                    // InternalSQLParser.g:8026:3: ( (lv_soUInt_0_0= RULE_UNSIGNED ) )
                    // InternalSQLParser.g:8027:4: (lv_soUInt_0_0= RULE_UNSIGNED )
                    {
                    // InternalSQLParser.g:8027:4: (lv_soUInt_0_0= RULE_UNSIGNED )
                    // InternalSQLParser.g:8028:5: lv_soUInt_0_0= RULE_UNSIGNED
                    {
                    lv_soUInt_0_0=(Token)match(input,RULE_UNSIGNED,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_soUInt_0_0, grammarAccess.getScalarNumberOperandAccess().getSoUIntUNSIGNEDTerminalRuleCall_0_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getScalarNumberOperandRule());
                      					}
                      					setWithLastConsumed(
                      						current,
                      						"soUInt",
                      						lv_soUInt_0_0,
                      						"org.xtext.example.mydsl_sql.SQL.UNSIGNED");
                      				
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:8045:3: ( (lv_soint_1_0= RULE_INT ) )
                    {
                    // InternalSQLParser.g:8045:3: ( (lv_soint_1_0= RULE_INT ) )
                    // InternalSQLParser.g:8046:4: (lv_soint_1_0= RULE_INT )
                    {
                    // InternalSQLParser.g:8046:4: (lv_soint_1_0= RULE_INT )
                    // InternalSQLParser.g:8047:5: lv_soint_1_0= RULE_INT
                    {
                    lv_soint_1_0=(Token)match(input,RULE_INT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_soint_1_0, grammarAccess.getScalarNumberOperandAccess().getSointINTTerminalRuleCall_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getScalarNumberOperandRule());
                      					}
                      					setWithLastConsumed(
                      						current,
                      						"soint",
                      						lv_soint_1_0,
                      						"org.xtext.example.mydsl_sql.SQL.INT");
                      				
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:8064:3: ( (lv_sodbl_2_0= RULE_SIGNED_DOUBLE ) )
                    {
                    // InternalSQLParser.g:8064:3: ( (lv_sodbl_2_0= RULE_SIGNED_DOUBLE ) )
                    // InternalSQLParser.g:8065:4: (lv_sodbl_2_0= RULE_SIGNED_DOUBLE )
                    {
                    // InternalSQLParser.g:8065:4: (lv_sodbl_2_0= RULE_SIGNED_DOUBLE )
                    // InternalSQLParser.g:8066:5: lv_sodbl_2_0= RULE_SIGNED_DOUBLE
                    {
                    lv_sodbl_2_0=(Token)match(input,RULE_SIGNED_DOUBLE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_sodbl_2_0, grammarAccess.getScalarNumberOperandAccess().getSodblSIGNED_DOUBLETerminalRuleCall_2_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getScalarNumberOperandRule());
                      					}
                      					setWithLastConsumed(
                      						current,
                      						"sodbl",
                      						lv_sodbl_2_0,
                      						"org.xtext.example.mydsl_sql.SQL.SIGNED_DOUBLE");
                      				
                    }

                    }


                    }


                    }
                    break;
                case 4 :
                    // InternalSQLParser.g:8083:3: ( (lv_sostr_3_0= ruleStringOperand ) )
                    {
                    // InternalSQLParser.g:8083:3: ( (lv_sostr_3_0= ruleStringOperand ) )
                    // InternalSQLParser.g:8084:4: (lv_sostr_3_0= ruleStringOperand )
                    {
                    // InternalSQLParser.g:8084:4: (lv_sostr_3_0= ruleStringOperand )
                    // InternalSQLParser.g:8085:5: lv_sostr_3_0= ruleStringOperand
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getScalarNumberOperandAccess().getSostrStringOperandParserRuleCall_3_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_sostr_3_0=ruleStringOperand();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getScalarNumberOperandRule());
                      					}
                      					set(
                      						current,
                      						"sostr",
                      						lv_sostr_3_0,
                      						"org.xtext.example.mydsl_sql.SQL.StringOperand");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleScalarNumberOperand"


    // $ANTLR start "entryRuleSQLCASE"
    // InternalSQLParser.g:8106:1: entryRuleSQLCASE returns [EObject current=null] : iv_ruleSQLCASE= ruleSQLCASE EOF ;
    public final EObject entryRuleSQLCASE() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSQLCASE = null;


        try {
            // InternalSQLParser.g:8106:48: (iv_ruleSQLCASE= ruleSQLCASE EOF )
            // InternalSQLParser.g:8107:2: iv_ruleSQLCASE= ruleSQLCASE EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSQLCASERule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSQLCASE=ruleSQLCASE();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSQLCASE; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSQLCASE"


    // $ANTLR start "ruleSQLCASE"
    // InternalSQLParser.g:8113:1: ruleSQLCASE returns [EObject current=null] : (otherlv_0= CASE ( ( (lv_wop_1_0= ruleOperandGroup ) ) | ( (lv_expr_2_0= ruleFullExpression ) ) )? ( (lv_when_3_0= ruleSQLCaseWhens ) ) otherlv_4= END ) ;
    public final EObject ruleSQLCASE() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_4=null;
        EObject lv_wop_1_0 = null;

        EObject lv_expr_2_0 = null;

        EObject lv_when_3_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:8119:2: ( (otherlv_0= CASE ( ( (lv_wop_1_0= ruleOperandGroup ) ) | ( (lv_expr_2_0= ruleFullExpression ) ) )? ( (lv_when_3_0= ruleSQLCaseWhens ) ) otherlv_4= END ) )
            // InternalSQLParser.g:8120:2: (otherlv_0= CASE ( ( (lv_wop_1_0= ruleOperandGroup ) ) | ( (lv_expr_2_0= ruleFullExpression ) ) )? ( (lv_when_3_0= ruleSQLCaseWhens ) ) otherlv_4= END )
            {
            // InternalSQLParser.g:8120:2: (otherlv_0= CASE ( ( (lv_wop_1_0= ruleOperandGroup ) ) | ( (lv_expr_2_0= ruleFullExpression ) ) )? ( (lv_when_3_0= ruleSQLCaseWhens ) ) otherlv_4= END )
            // InternalSQLParser.g:8121:3: otherlv_0= CASE ( ( (lv_wop_1_0= ruleOperandGroup ) ) | ( (lv_expr_2_0= ruleFullExpression ) ) )? ( (lv_when_3_0= ruleSQLCaseWhens ) ) otherlv_4= END
            {
            otherlv_0=(Token)match(input,CASE,FOLLOW_112); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getSQLCASEAccess().getCASEKeyword_0());
              		
            }
            // InternalSQLParser.g:8125:3: ( ( (lv_wop_1_0= ruleOperandGroup ) ) | ( (lv_expr_2_0= ruleFullExpression ) ) )?
            int alt148=3;
            alt148 = dfa148.predict(input);
            switch (alt148) {
                case 1 :
                    // InternalSQLParser.g:8126:4: ( (lv_wop_1_0= ruleOperandGroup ) )
                    {
                    // InternalSQLParser.g:8126:4: ( (lv_wop_1_0= ruleOperandGroup ) )
                    // InternalSQLParser.g:8127:5: (lv_wop_1_0= ruleOperandGroup )
                    {
                    // InternalSQLParser.g:8127:5: (lv_wop_1_0= ruleOperandGroup )
                    // InternalSQLParser.g:8128:6: lv_wop_1_0= ruleOperandGroup
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getSQLCASEAccess().getWopOperandGroupParserRuleCall_1_0_0());
                      					
                    }
                    pushFollow(FOLLOW_112);
                    lv_wop_1_0=ruleOperandGroup();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSQLCASERule());
                      						}
                      						set(
                      							current,
                      							"wop",
                      							lv_wop_1_0,
                      							"org.xtext.example.mydsl_sql.SQL.OperandGroup");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:8146:4: ( (lv_expr_2_0= ruleFullExpression ) )
                    {
                    // InternalSQLParser.g:8146:4: ( (lv_expr_2_0= ruleFullExpression ) )
                    // InternalSQLParser.g:8147:5: (lv_expr_2_0= ruleFullExpression )
                    {
                    // InternalSQLParser.g:8147:5: (lv_expr_2_0= ruleFullExpression )
                    // InternalSQLParser.g:8148:6: lv_expr_2_0= ruleFullExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getSQLCASEAccess().getExprFullExpressionParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_112);
                    lv_expr_2_0=ruleFullExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSQLCASERule());
                      						}
                      						set(
                      							current,
                      							"expr",
                      							lv_expr_2_0,
                      							"org.xtext.example.mydsl_sql.SQL.FullExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            // InternalSQLParser.g:8166:3: ( (lv_when_3_0= ruleSQLCaseWhens ) )
            // InternalSQLParser.g:8167:4: (lv_when_3_0= ruleSQLCaseWhens )
            {
            // InternalSQLParser.g:8167:4: (lv_when_3_0= ruleSQLCaseWhens )
            // InternalSQLParser.g:8168:5: lv_when_3_0= ruleSQLCaseWhens
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getSQLCASEAccess().getWhenSQLCaseWhensParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_113);
            lv_when_3_0=ruleSQLCaseWhens();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getSQLCASERule());
              					}
              					set(
              						current,
              						"when",
              						lv_when_3_0,
              						"org.xtext.example.mydsl_sql.SQL.SQLCaseWhens");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_4=(Token)match(input,END,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getSQLCASEAccess().getENDKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSQLCASE"


    // $ANTLR start "entryRuleSQLCaseWhens"
    // InternalSQLParser.g:8193:1: entryRuleSQLCaseWhens returns [EObject current=null] : iv_ruleSQLCaseWhens= ruleSQLCaseWhens EOF ;
    public final EObject entryRuleSQLCaseWhens() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSQLCaseWhens = null;


        try {
            // InternalSQLParser.g:8193:53: (iv_ruleSQLCaseWhens= ruleSQLCaseWhens EOF )
            // InternalSQLParser.g:8194:2: iv_ruleSQLCaseWhens= ruleSQLCaseWhens EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSQLCaseWhensRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSQLCaseWhens=ruleSQLCaseWhens();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSQLCaseWhens; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSQLCaseWhens"


    // $ANTLR start "ruleSQLCaseWhens"
    // InternalSQLParser.g:8200:1: ruleSQLCaseWhens returns [EObject current=null] : (this_SqlCaseWhen_0= ruleSqlCaseWhen ( () ( (lv_entries_2_0= ruleSqlCaseWhen ) )+ )? ) ;
    public final EObject ruleSQLCaseWhens() throws RecognitionException {
        EObject current = null;

        EObject this_SqlCaseWhen_0 = null;

        EObject lv_entries_2_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:8206:2: ( (this_SqlCaseWhen_0= ruleSqlCaseWhen ( () ( (lv_entries_2_0= ruleSqlCaseWhen ) )+ )? ) )
            // InternalSQLParser.g:8207:2: (this_SqlCaseWhen_0= ruleSqlCaseWhen ( () ( (lv_entries_2_0= ruleSqlCaseWhen ) )+ )? )
            {
            // InternalSQLParser.g:8207:2: (this_SqlCaseWhen_0= ruleSqlCaseWhen ( () ( (lv_entries_2_0= ruleSqlCaseWhen ) )+ )? )
            // InternalSQLParser.g:8208:3: this_SqlCaseWhen_0= ruleSqlCaseWhen ( () ( (lv_entries_2_0= ruleSqlCaseWhen ) )+ )?
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getSQLCaseWhensAccess().getSqlCaseWhenParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_114);
            this_SqlCaseWhen_0=ruleSqlCaseWhen();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_SqlCaseWhen_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalSQLParser.g:8219:3: ( () ( (lv_entries_2_0= ruleSqlCaseWhen ) )+ )?
            int alt150=2;
            int LA150_0 = input.LA(1);

            if ( (LA150_0==WHEN) ) {
                alt150=1;
            }
            switch (alt150) {
                case 1 :
                    // InternalSQLParser.g:8220:4: () ( (lv_entries_2_0= ruleSqlCaseWhen ) )+
                    {
                    // InternalSQLParser.g:8220:4: ()
                    // InternalSQLParser.g:8221:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getSQLCaseWhensAccess().getWhenListEntriesAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalSQLParser.g:8230:4: ( (lv_entries_2_0= ruleSqlCaseWhen ) )+
                    int cnt149=0;
                    loop149:
                    do {
                        int alt149=2;
                        int LA149_0 = input.LA(1);

                        if ( (LA149_0==WHEN) ) {
                            alt149=1;
                        }


                        switch (alt149) {
                    	case 1 :
                    	    // InternalSQLParser.g:8231:5: (lv_entries_2_0= ruleSqlCaseWhen )
                    	    {
                    	    // InternalSQLParser.g:8231:5: (lv_entries_2_0= ruleSqlCaseWhen )
                    	    // InternalSQLParser.g:8232:6: lv_entries_2_0= ruleSqlCaseWhen
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      						newCompositeNode(grammarAccess.getSQLCaseWhensAccess().getEntriesSqlCaseWhenParserRuleCall_1_1_0());
                    	      					
                    	    }
                    	    pushFollow(FOLLOW_114);
                    	    lv_entries_2_0=ruleSqlCaseWhen();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						if (current==null) {
                    	      							current = createModelElementForParent(grammarAccess.getSQLCaseWhensRule());
                    	      						}
                    	      						add(
                    	      							current,
                    	      							"entries",
                    	      							lv_entries_2_0,
                    	      							"org.xtext.example.mydsl_sql.SQL.SqlCaseWhen");
                    	      						afterParserOrEnumRuleCall();
                    	      					
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt149 >= 1 ) break loop149;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(149, input);
                                throw eee;
                        }
                        cnt149++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSQLCaseWhens"


    // $ANTLR start "entryRuleSqlCaseWhen"
    // InternalSQLParser.g:8254:1: entryRuleSqlCaseWhen returns [EObject current=null] : iv_ruleSqlCaseWhen= ruleSqlCaseWhen EOF ;
    public final EObject entryRuleSqlCaseWhen() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSqlCaseWhen = null;


        try {
            // InternalSQLParser.g:8254:52: (iv_ruleSqlCaseWhen= ruleSqlCaseWhen EOF )
            // InternalSQLParser.g:8255:2: iv_ruleSqlCaseWhen= ruleSqlCaseWhen EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSqlCaseWhenRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSqlCaseWhen=ruleSqlCaseWhen();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSqlCaseWhen; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSqlCaseWhen"


    // $ANTLR start "ruleSqlCaseWhen"
    // InternalSQLParser.g:8261:1: ruleSqlCaseWhen returns [EObject current=null] : (otherlv_0= WHEN ( ( (lv_wop_1_0= ruleOperandGroup ) ) | ( (lv_expr_2_0= ruleFullExpression ) ) ) otherlv_3= THEN ( (lv_texp_4_0= ruleOperandGroup ) ) (otherlv_5= ELSE ( (lv_eexp_6_0= ruleOperandGroup ) ) )? ) ;
    public final EObject ruleSqlCaseWhen() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_wop_1_0 = null;

        EObject lv_expr_2_0 = null;

        EObject lv_texp_4_0 = null;

        EObject lv_eexp_6_0 = null;



        	enterRule();

        try {
            // InternalSQLParser.g:8267:2: ( (otherlv_0= WHEN ( ( (lv_wop_1_0= ruleOperandGroup ) ) | ( (lv_expr_2_0= ruleFullExpression ) ) ) otherlv_3= THEN ( (lv_texp_4_0= ruleOperandGroup ) ) (otherlv_5= ELSE ( (lv_eexp_6_0= ruleOperandGroup ) ) )? ) )
            // InternalSQLParser.g:8268:2: (otherlv_0= WHEN ( ( (lv_wop_1_0= ruleOperandGroup ) ) | ( (lv_expr_2_0= ruleFullExpression ) ) ) otherlv_3= THEN ( (lv_texp_4_0= ruleOperandGroup ) ) (otherlv_5= ELSE ( (lv_eexp_6_0= ruleOperandGroup ) ) )? )
            {
            // InternalSQLParser.g:8268:2: (otherlv_0= WHEN ( ( (lv_wop_1_0= ruleOperandGroup ) ) | ( (lv_expr_2_0= ruleFullExpression ) ) ) otherlv_3= THEN ( (lv_texp_4_0= ruleOperandGroup ) ) (otherlv_5= ELSE ( (lv_eexp_6_0= ruleOperandGroup ) ) )? )
            // InternalSQLParser.g:8269:3: otherlv_0= WHEN ( ( (lv_wop_1_0= ruleOperandGroup ) ) | ( (lv_expr_2_0= ruleFullExpression ) ) ) otherlv_3= THEN ( (lv_texp_4_0= ruleOperandGroup ) ) (otherlv_5= ELSE ( (lv_eexp_6_0= ruleOperandGroup ) ) )?
            {
            otherlv_0=(Token)match(input,WHEN,FOLLOW_43); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getSqlCaseWhenAccess().getWHENKeyword_0());
              		
            }
            // InternalSQLParser.g:8273:3: ( ( (lv_wop_1_0= ruleOperandGroup ) ) | ( (lv_expr_2_0= ruleFullExpression ) ) )
            int alt151=2;
            alt151 = dfa151.predict(input);
            switch (alt151) {
                case 1 :
                    // InternalSQLParser.g:8274:4: ( (lv_wop_1_0= ruleOperandGroup ) )
                    {
                    // InternalSQLParser.g:8274:4: ( (lv_wop_1_0= ruleOperandGroup ) )
                    // InternalSQLParser.g:8275:5: (lv_wop_1_0= ruleOperandGroup )
                    {
                    // InternalSQLParser.g:8275:5: (lv_wop_1_0= ruleOperandGroup )
                    // InternalSQLParser.g:8276:6: lv_wop_1_0= ruleOperandGroup
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getSqlCaseWhenAccess().getWopOperandGroupParserRuleCall_1_0_0());
                      					
                    }
                    pushFollow(FOLLOW_115);
                    lv_wop_1_0=ruleOperandGroup();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSqlCaseWhenRule());
                      						}
                      						set(
                      							current,
                      							"wop",
                      							lv_wop_1_0,
                      							"org.xtext.example.mydsl_sql.SQL.OperandGroup");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:8294:4: ( (lv_expr_2_0= ruleFullExpression ) )
                    {
                    // InternalSQLParser.g:8294:4: ( (lv_expr_2_0= ruleFullExpression ) )
                    // InternalSQLParser.g:8295:5: (lv_expr_2_0= ruleFullExpression )
                    {
                    // InternalSQLParser.g:8295:5: (lv_expr_2_0= ruleFullExpression )
                    // InternalSQLParser.g:8296:6: lv_expr_2_0= ruleFullExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getSqlCaseWhenAccess().getExprFullExpressionParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_115);
                    lv_expr_2_0=ruleFullExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSqlCaseWhenRule());
                      						}
                      						set(
                      							current,
                      							"expr",
                      							lv_expr_2_0,
                      							"org.xtext.example.mydsl_sql.SQL.FullExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            otherlv_3=(Token)match(input,THEN,FOLLOW_78); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getSqlCaseWhenAccess().getTHENKeyword_2());
              		
            }
            // InternalSQLParser.g:8318:3: ( (lv_texp_4_0= ruleOperandGroup ) )
            // InternalSQLParser.g:8319:4: (lv_texp_4_0= ruleOperandGroup )
            {
            // InternalSQLParser.g:8319:4: (lv_texp_4_0= ruleOperandGroup )
            // InternalSQLParser.g:8320:5: lv_texp_4_0= ruleOperandGroup
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getSqlCaseWhenAccess().getTexpOperandGroupParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_116);
            lv_texp_4_0=ruleOperandGroup();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getSqlCaseWhenRule());
              					}
              					set(
              						current,
              						"texp",
              						lv_texp_4_0,
              						"org.xtext.example.mydsl_sql.SQL.OperandGroup");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalSQLParser.g:8337:3: (otherlv_5= ELSE ( (lv_eexp_6_0= ruleOperandGroup ) ) )?
            int alt152=2;
            int LA152_0 = input.LA(1);

            if ( (LA152_0==ELSE) ) {
                alt152=1;
            }
            switch (alt152) {
                case 1 :
                    // InternalSQLParser.g:8338:4: otherlv_5= ELSE ( (lv_eexp_6_0= ruleOperandGroup ) )
                    {
                    otherlv_5=(Token)match(input,ELSE,FOLLOW_78); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_5, grammarAccess.getSqlCaseWhenAccess().getELSEKeyword_4_0());
                      			
                    }
                    // InternalSQLParser.g:8342:4: ( (lv_eexp_6_0= ruleOperandGroup ) )
                    // InternalSQLParser.g:8343:5: (lv_eexp_6_0= ruleOperandGroup )
                    {
                    // InternalSQLParser.g:8343:5: (lv_eexp_6_0= ruleOperandGroup )
                    // InternalSQLParser.g:8344:6: lv_eexp_6_0= ruleOperandGroup
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getSqlCaseWhenAccess().getEexpOperandGroupParserRuleCall_4_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_eexp_6_0=ruleOperandGroup();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSqlCaseWhenRule());
                      						}
                      						set(
                      							current,
                      							"eexp",
                      							lv_eexp_6_0,
                      							"org.xtext.example.mydsl_sql.SQL.OperandGroup");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSqlCaseWhen"


    // $ANTLR start "entryRuleJoinType"
    // InternalSQLParser.g:8366:1: entryRuleJoinType returns [String current=null] : iv_ruleJoinType= ruleJoinType EOF ;
    public final String entryRuleJoinType() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleJoinType = null;


        try {
            // InternalSQLParser.g:8366:48: (iv_ruleJoinType= ruleJoinType EOF )
            // InternalSQLParser.g:8367:2: iv_ruleJoinType= ruleJoinType EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getJoinTypeRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleJoinType=ruleJoinType();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleJoinType.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleJoinType"


    // $ANTLR start "ruleJoinType"
    // InternalSQLParser.g:8373:1: ruleJoinType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : ( (kw= NATURAL )? (kw= INNER | ( (kw= LEFT | kw= RIGHT | kw= FULL ) (kw= OUTER )? ) | kw= CROSS | kw= STRAIGHT_JOIN )? kw= JOIN ) ;
    public final AntlrDatatypeRuleToken ruleJoinType() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            // InternalSQLParser.g:8379:2: ( ( (kw= NATURAL )? (kw= INNER | ( (kw= LEFT | kw= RIGHT | kw= FULL ) (kw= OUTER )? ) | kw= CROSS | kw= STRAIGHT_JOIN )? kw= JOIN ) )
            // InternalSQLParser.g:8380:2: ( (kw= NATURAL )? (kw= INNER | ( (kw= LEFT | kw= RIGHT | kw= FULL ) (kw= OUTER )? ) | kw= CROSS | kw= STRAIGHT_JOIN )? kw= JOIN )
            {
            // InternalSQLParser.g:8380:2: ( (kw= NATURAL )? (kw= INNER | ( (kw= LEFT | kw= RIGHT | kw= FULL ) (kw= OUTER )? ) | kw= CROSS | kw= STRAIGHT_JOIN )? kw= JOIN )
            // InternalSQLParser.g:8381:3: (kw= NATURAL )? (kw= INNER | ( (kw= LEFT | kw= RIGHT | kw= FULL ) (kw= OUTER )? ) | kw= CROSS | kw= STRAIGHT_JOIN )? kw= JOIN
            {
            // InternalSQLParser.g:8381:3: (kw= NATURAL )?
            int alt153=2;
            int LA153_0 = input.LA(1);

            if ( (LA153_0==NATURAL) ) {
                alt153=1;
            }
            switch (alt153) {
                case 1 :
                    // InternalSQLParser.g:8382:4: kw= NATURAL
                    {
                    kw=(Token)match(input,NATURAL,FOLLOW_117); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getJoinTypeAccess().getNATURALKeyword_0());
                      			
                    }

                    }
                    break;

            }

            // InternalSQLParser.g:8388:3: (kw= INNER | ( (kw= LEFT | kw= RIGHT | kw= FULL ) (kw= OUTER )? ) | kw= CROSS | kw= STRAIGHT_JOIN )?
            int alt156=5;
            switch ( input.LA(1) ) {
                case INNER:
                    {
                    alt156=1;
                    }
                    break;
                case RIGHT:
                case FULL:
                case LEFT:
                    {
                    alt156=2;
                    }
                    break;
                case CROSS:
                    {
                    alt156=3;
                    }
                    break;
                case STRAIGHT_JOIN:
                    {
                    alt156=4;
                    }
                    break;
            }

            switch (alt156) {
                case 1 :
                    // InternalSQLParser.g:8389:4: kw= INNER
                    {
                    kw=(Token)match(input,INNER,FOLLOW_118); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getJoinTypeAccess().getINNERKeyword_1_0());
                      			
                    }

                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:8395:4: ( (kw= LEFT | kw= RIGHT | kw= FULL ) (kw= OUTER )? )
                    {
                    // InternalSQLParser.g:8395:4: ( (kw= LEFT | kw= RIGHT | kw= FULL ) (kw= OUTER )? )
                    // InternalSQLParser.g:8396:5: (kw= LEFT | kw= RIGHT | kw= FULL ) (kw= OUTER )?
                    {
                    // InternalSQLParser.g:8396:5: (kw= LEFT | kw= RIGHT | kw= FULL )
                    int alt154=3;
                    switch ( input.LA(1) ) {
                    case LEFT:
                        {
                        alt154=1;
                        }
                        break;
                    case RIGHT:
                        {
                        alt154=2;
                        }
                        break;
                    case FULL:
                        {
                        alt154=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 154, 0, input);

                        throw nvae;
                    }

                    switch (alt154) {
                        case 1 :
                            // InternalSQLParser.g:8397:6: kw= LEFT
                            {
                            kw=(Token)match(input,LEFT,FOLLOW_119); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						current.merge(kw);
                              						newLeafNode(kw, grammarAccess.getJoinTypeAccess().getLEFTKeyword_1_1_0_0());
                              					
                            }

                            }
                            break;
                        case 2 :
                            // InternalSQLParser.g:8403:6: kw= RIGHT
                            {
                            kw=(Token)match(input,RIGHT,FOLLOW_119); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						current.merge(kw);
                              						newLeafNode(kw, grammarAccess.getJoinTypeAccess().getRIGHTKeyword_1_1_0_1());
                              					
                            }

                            }
                            break;
                        case 3 :
                            // InternalSQLParser.g:8409:6: kw= FULL
                            {
                            kw=(Token)match(input,FULL,FOLLOW_119); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						current.merge(kw);
                              						newLeafNode(kw, grammarAccess.getJoinTypeAccess().getFULLKeyword_1_1_0_2());
                              					
                            }

                            }
                            break;

                    }

                    // InternalSQLParser.g:8415:5: (kw= OUTER )?
                    int alt155=2;
                    int LA155_0 = input.LA(1);

                    if ( (LA155_0==OUTER) ) {
                        alt155=1;
                    }
                    switch (alt155) {
                        case 1 :
                            // InternalSQLParser.g:8416:6: kw= OUTER
                            {
                            kw=(Token)match(input,OUTER,FOLLOW_118); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						current.merge(kw);
                              						newLeafNode(kw, grammarAccess.getJoinTypeAccess().getOUTERKeyword_1_1_1());
                              					
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:8424:4: kw= CROSS
                    {
                    kw=(Token)match(input,CROSS,FOLLOW_118); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getJoinTypeAccess().getCROSSKeyword_1_2());
                      			
                    }

                    }
                    break;
                case 4 :
                    // InternalSQLParser.g:8430:4: kw= STRAIGHT_JOIN
                    {
                    kw=(Token)match(input,STRAIGHT_JOIN,FOLLOW_118); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getJoinTypeAccess().getSTRAIGHT_JOINKeyword_1_3());
                      			
                    }

                    }
                    break;

            }

            kw=(Token)match(input,JOIN,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(kw);
              			newLeafNode(kw, grammarAccess.getJoinTypeAccess().getJOINKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleJoinType"


    // $ANTLR start "entryRuleDBID"
    // InternalSQLParser.g:8445:1: entryRuleDBID returns [String current=null] : iv_ruleDBID= ruleDBID EOF ;
    public final String entryRuleDBID() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleDBID = null;


        try {
            // InternalSQLParser.g:8445:44: (iv_ruleDBID= ruleDBID EOF )
            // InternalSQLParser.g:8446:2: iv_ruleDBID= ruleDBID EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDBIDRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDBID=ruleDBID();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDBID.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleDBID"


    // $ANTLR start "ruleDBID"
    // InternalSQLParser.g:8452:1: ruleDBID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_ID_0= RULE_ID | this_DBNAME_1= RULE_DBNAME | this_STRING_2= RULE_STRING ) ;
    public final AntlrDatatypeRuleToken ruleDBID() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_ID_0=null;
        Token this_DBNAME_1=null;
        Token this_STRING_2=null;


        	enterRule();

        try {
            // InternalSQLParser.g:8458:2: ( (this_ID_0= RULE_ID | this_DBNAME_1= RULE_DBNAME | this_STRING_2= RULE_STRING ) )
            // InternalSQLParser.g:8459:2: (this_ID_0= RULE_ID | this_DBNAME_1= RULE_DBNAME | this_STRING_2= RULE_STRING )
            {
            // InternalSQLParser.g:8459:2: (this_ID_0= RULE_ID | this_DBNAME_1= RULE_DBNAME | this_STRING_2= RULE_STRING )
            int alt157=3;
            switch ( input.LA(1) ) {
            case RULE_ID:
                {
                alt157=1;
                }
                break;
            case RULE_DBNAME:
                {
                alt157=2;
                }
                break;
            case RULE_STRING:
                {
                alt157=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 157, 0, input);

                throw nvae;
            }

            switch (alt157) {
                case 1 :
                    // InternalSQLParser.g:8460:3: this_ID_0= RULE_ID
                    {
                    this_ID_0=(Token)match(input,RULE_ID,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_ID_0);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_ID_0, grammarAccess.getDBIDAccess().getIDTerminalRuleCall_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:8468:3: this_DBNAME_1= RULE_DBNAME
                    {
                    this_DBNAME_1=(Token)match(input,RULE_DBNAME,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_DBNAME_1);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_DBNAME_1, grammarAccess.getDBIDAccess().getDBNAMETerminalRuleCall_1());
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:8476:3: this_STRING_2= RULE_STRING
                    {
                    this_STRING_2=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_STRING_2);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_STRING_2, grammarAccess.getDBIDAccess().getSTRINGTerminalRuleCall_2());
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleDBID"


    // $ANTLR start "entryRuleStringOperand"
    // InternalSQLParser.g:8487:1: entryRuleStringOperand returns [String current=null] : iv_ruleStringOperand= ruleStringOperand EOF ;
    public final String entryRuleStringOperand() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleStringOperand = null;


        try {
            // InternalSQLParser.g:8487:53: (iv_ruleStringOperand= ruleStringOperand EOF )
            // InternalSQLParser.g:8488:2: iv_ruleStringOperand= ruleStringOperand EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getStringOperandRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleStringOperand=ruleStringOperand();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleStringOperand.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleStringOperand"


    // $ANTLR start "ruleStringOperand"
    // InternalSQLParser.g:8494:1: ruleStringOperand returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : this_STRING__0= RULE_STRING_ ;
    public final AntlrDatatypeRuleToken ruleStringOperand() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_STRING__0=null;


        	enterRule();

        try {
            // InternalSQLParser.g:8500:2: (this_STRING__0= RULE_STRING_ )
            // InternalSQLParser.g:8501:2: this_STRING__0= RULE_STRING_
            {
            this_STRING__0=(Token)match(input,RULE_STRING_,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current.merge(this_STRING__0);
              	
            }
            if ( state.backtracking==0 ) {

              		newLeafNode(this_STRING__0, grammarAccess.getStringOperandAccess().getSTRING_TerminalRuleCall());
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleStringOperand"


    // $ANTLR start "entryRuleFNAME"
    // InternalSQLParser.g:8511:1: entryRuleFNAME returns [String current=null] : iv_ruleFNAME= ruleFNAME EOF ;
    public final String entryRuleFNAME() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleFNAME = null;


        try {
            // InternalSQLParser.g:8511:45: (iv_ruleFNAME= ruleFNAME EOF )
            // InternalSQLParser.g:8512:2: iv_ruleFNAME= ruleFNAME EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFNAMERule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFNAME=ruleFNAME();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFNAME.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFNAME"


    // $ANTLR start "ruleFNAME"
    // InternalSQLParser.g:8518:1: ruleFNAME returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_ID_0= RULE_ID kw= LeftParenthesis ) ;
    public final AntlrDatatypeRuleToken ruleFNAME() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_ID_0=null;
        Token kw=null;


        	enterRule();

        try {
            // InternalSQLParser.g:8524:2: ( (this_ID_0= RULE_ID kw= LeftParenthesis ) )
            // InternalSQLParser.g:8525:2: (this_ID_0= RULE_ID kw= LeftParenthesis )
            {
            // InternalSQLParser.g:8525:2: (this_ID_0= RULE_ID kw= LeftParenthesis )
            // InternalSQLParser.g:8526:3: this_ID_0= RULE_ID kw= LeftParenthesis
            {
            this_ID_0=(Token)match(input,RULE_ID,FOLLOW_11); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(this_ID_0);
              		
            }
            if ( state.backtracking==0 ) {

              			newLeafNode(this_ID_0, grammarAccess.getFNAMEAccess().getIDTerminalRuleCall_0());
              		
            }
            kw=(Token)match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(kw);
              			newLeafNode(kw, grammarAccess.getFNAMEAccess().getLeftParenthesisKeyword_1());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFNAME"


    // $ANTLR start "entryRuleIntegerValue"
    // InternalSQLParser.g:8542:1: entryRuleIntegerValue returns [EObject current=null] : iv_ruleIntegerValue= ruleIntegerValue EOF ;
    public final EObject entryRuleIntegerValue() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleIntegerValue = null;


        try {
            // InternalSQLParser.g:8542:53: (iv_ruleIntegerValue= ruleIntegerValue EOF )
            // InternalSQLParser.g:8543:2: iv_ruleIntegerValue= ruleIntegerValue EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIntegerValueRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIntegerValue=ruleIntegerValue();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIntegerValue; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleIntegerValue"


    // $ANTLR start "ruleIntegerValue"
    // InternalSQLParser.g:8549:1: ruleIntegerValue returns [EObject current=null] : ( (lv_integer_0_0= RULE_INT ) ) ;
    public final EObject ruleIntegerValue() throws RecognitionException {
        EObject current = null;

        Token lv_integer_0_0=null;


        	enterRule();

        try {
            // InternalSQLParser.g:8555:2: ( ( (lv_integer_0_0= RULE_INT ) ) )
            // InternalSQLParser.g:8556:2: ( (lv_integer_0_0= RULE_INT ) )
            {
            // InternalSQLParser.g:8556:2: ( (lv_integer_0_0= RULE_INT ) )
            // InternalSQLParser.g:8557:3: (lv_integer_0_0= RULE_INT )
            {
            // InternalSQLParser.g:8557:3: (lv_integer_0_0= RULE_INT )
            // InternalSQLParser.g:8558:4: lv_integer_0_0= RULE_INT
            {
            lv_integer_0_0=(Token)match(input,RULE_INT,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(lv_integer_0_0, grammarAccess.getIntegerValueAccess().getIntegerINTTerminalRuleCall_0());
              			
            }
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getIntegerValueRule());
              				}
              				setWithLastConsumed(
              					current,
              					"integer",
              					lv_integer_0_0,
              					"org.xtext.example.mydsl_sql.SQL.INT");
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleIntegerValue"


    // $ANTLR start "entryRuleUnsignedValue"
    // InternalSQLParser.g:8577:1: entryRuleUnsignedValue returns [EObject current=null] : iv_ruleUnsignedValue= ruleUnsignedValue EOF ;
    public final EObject entryRuleUnsignedValue() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleUnsignedValue = null;


        try {
            // InternalSQLParser.g:8577:54: (iv_ruleUnsignedValue= ruleUnsignedValue EOF )
            // InternalSQLParser.g:8578:2: iv_ruleUnsignedValue= ruleUnsignedValue EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getUnsignedValueRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleUnsignedValue=ruleUnsignedValue();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleUnsignedValue; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleUnsignedValue"


    // $ANTLR start "ruleUnsignedValue"
    // InternalSQLParser.g:8584:1: ruleUnsignedValue returns [EObject current=null] : ( (lv_integer_0_0= RULE_UNSIGNED ) ) ;
    public final EObject ruleUnsignedValue() throws RecognitionException {
        EObject current = null;

        Token lv_integer_0_0=null;


        	enterRule();

        try {
            // InternalSQLParser.g:8590:2: ( ( (lv_integer_0_0= RULE_UNSIGNED ) ) )
            // InternalSQLParser.g:8591:2: ( (lv_integer_0_0= RULE_UNSIGNED ) )
            {
            // InternalSQLParser.g:8591:2: ( (lv_integer_0_0= RULE_UNSIGNED ) )
            // InternalSQLParser.g:8592:3: (lv_integer_0_0= RULE_UNSIGNED )
            {
            // InternalSQLParser.g:8592:3: (lv_integer_0_0= RULE_UNSIGNED )
            // InternalSQLParser.g:8593:4: lv_integer_0_0= RULE_UNSIGNED
            {
            lv_integer_0_0=(Token)match(input,RULE_UNSIGNED,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(lv_integer_0_0, grammarAccess.getUnsignedValueAccess().getIntegerUNSIGNEDTerminalRuleCall_0());
              			
            }
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getUnsignedValueRule());
              				}
              				setWithLastConsumed(
              					current,
              					"integer",
              					lv_integer_0_0,
              					"org.xtext.example.mydsl_sql.SQL.UNSIGNED");
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleUnsignedValue"


    // $ANTLR start "ruleXFunction"
    // InternalSQLParser.g:8612:1: ruleXFunction returns [Enumerator current=null] : ( (enumLiteral_0= IN_1 ) | (enumLiteral_1= NOTIN ) | (enumLiteral_2= EQUAL ) | (enumLiteral_3= NOTEQUAL ) | (enumLiteral_4= LESS ) | (enumLiteral_5= LESS_1 ) | (enumLiteral_6= GREATER_1 ) | (enumLiteral_7= GREATER ) | (enumLiteral_8= BETWEEN_1 ) | (enumLiteral_9= BETWEEN_4 ) | (enumLiteral_10= BETWEEN_3 ) | (enumLiteral_11= BETWEEN_2 ) ) ;
    public final Enumerator ruleXFunction() throws RecognitionException {
        Enumerator current = null;

        Token enumLiteral_0=null;
        Token enumLiteral_1=null;
        Token enumLiteral_2=null;
        Token enumLiteral_3=null;
        Token enumLiteral_4=null;
        Token enumLiteral_5=null;
        Token enumLiteral_6=null;
        Token enumLiteral_7=null;
        Token enumLiteral_8=null;
        Token enumLiteral_9=null;
        Token enumLiteral_10=null;
        Token enumLiteral_11=null;


        	enterRule();

        try {
            // InternalSQLParser.g:8618:2: ( ( (enumLiteral_0= IN_1 ) | (enumLiteral_1= NOTIN ) | (enumLiteral_2= EQUAL ) | (enumLiteral_3= NOTEQUAL ) | (enumLiteral_4= LESS ) | (enumLiteral_5= LESS_1 ) | (enumLiteral_6= GREATER_1 ) | (enumLiteral_7= GREATER ) | (enumLiteral_8= BETWEEN_1 ) | (enumLiteral_9= BETWEEN_4 ) | (enumLiteral_10= BETWEEN_3 ) | (enumLiteral_11= BETWEEN_2 ) ) )
            // InternalSQLParser.g:8619:2: ( (enumLiteral_0= IN_1 ) | (enumLiteral_1= NOTIN ) | (enumLiteral_2= EQUAL ) | (enumLiteral_3= NOTEQUAL ) | (enumLiteral_4= LESS ) | (enumLiteral_5= LESS_1 ) | (enumLiteral_6= GREATER_1 ) | (enumLiteral_7= GREATER ) | (enumLiteral_8= BETWEEN_1 ) | (enumLiteral_9= BETWEEN_4 ) | (enumLiteral_10= BETWEEN_3 ) | (enumLiteral_11= BETWEEN_2 ) )
            {
            // InternalSQLParser.g:8619:2: ( (enumLiteral_0= IN_1 ) | (enumLiteral_1= NOTIN ) | (enumLiteral_2= EQUAL ) | (enumLiteral_3= NOTEQUAL ) | (enumLiteral_4= LESS ) | (enumLiteral_5= LESS_1 ) | (enumLiteral_6= GREATER_1 ) | (enumLiteral_7= GREATER ) | (enumLiteral_8= BETWEEN_1 ) | (enumLiteral_9= BETWEEN_4 ) | (enumLiteral_10= BETWEEN_3 ) | (enumLiteral_11= BETWEEN_2 ) )
            int alt158=12;
            switch ( input.LA(1) ) {
            case IN_1:
                {
                alt158=1;
                }
                break;
            case NOTIN:
                {
                alt158=2;
                }
                break;
            case EQUAL:
                {
                alt158=3;
                }
                break;
            case NOTEQUAL:
                {
                alt158=4;
                }
                break;
            case LESS:
                {
                alt158=5;
                }
                break;
            case LESS_1:
                {
                alt158=6;
                }
                break;
            case GREATER_1:
                {
                alt158=7;
                }
                break;
            case GREATER:
                {
                alt158=8;
                }
                break;
            case BETWEEN_1:
                {
                alt158=9;
                }
                break;
            case BETWEEN_4:
                {
                alt158=10;
                }
                break;
            case BETWEEN_3:
                {
                alt158=11;
                }
                break;
            case BETWEEN_2:
                {
                alt158=12;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 158, 0, input);

                throw nvae;
            }

            switch (alt158) {
                case 1 :
                    // InternalSQLParser.g:8620:3: (enumLiteral_0= IN_1 )
                    {
                    // InternalSQLParser.g:8620:3: (enumLiteral_0= IN_1 )
                    // InternalSQLParser.g:8621:4: enumLiteral_0= IN_1
                    {
                    enumLiteral_0=(Token)match(input,IN_1,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getXFunctionAccess().getXinEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getXFunctionAccess().getXinEnumLiteralDeclaration_0());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:8628:3: (enumLiteral_1= NOTIN )
                    {
                    // InternalSQLParser.g:8628:3: (enumLiteral_1= NOTIN )
                    // InternalSQLParser.g:8629:4: enumLiteral_1= NOTIN
                    {
                    enumLiteral_1=(Token)match(input,NOTIN,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getXFunctionAccess().getXnotinEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getXFunctionAccess().getXnotinEnumLiteralDeclaration_1());
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:8636:3: (enumLiteral_2= EQUAL )
                    {
                    // InternalSQLParser.g:8636:3: (enumLiteral_2= EQUAL )
                    // InternalSQLParser.g:8637:4: enumLiteral_2= EQUAL
                    {
                    enumLiteral_2=(Token)match(input,EQUAL,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getXFunctionAccess().getXeqEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_2, grammarAccess.getXFunctionAccess().getXeqEnumLiteralDeclaration_2());
                      			
                    }

                    }


                    }
                    break;
                case 4 :
                    // InternalSQLParser.g:8644:3: (enumLiteral_3= NOTEQUAL )
                    {
                    // InternalSQLParser.g:8644:3: (enumLiteral_3= NOTEQUAL )
                    // InternalSQLParser.g:8645:4: enumLiteral_3= NOTEQUAL
                    {
                    enumLiteral_3=(Token)match(input,NOTEQUAL,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getXFunctionAccess().getXnoteqEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_3, grammarAccess.getXFunctionAccess().getXnoteqEnumLiteralDeclaration_3());
                      			
                    }

                    }


                    }
                    break;
                case 5 :
                    // InternalSQLParser.g:8652:3: (enumLiteral_4= LESS )
                    {
                    // InternalSQLParser.g:8652:3: (enumLiteral_4= LESS )
                    // InternalSQLParser.g:8653:4: enumLiteral_4= LESS
                    {
                    enumLiteral_4=(Token)match(input,LESS,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getXFunctionAccess().getXlsEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_4, grammarAccess.getXFunctionAccess().getXlsEnumLiteralDeclaration_4());
                      			
                    }

                    }


                    }
                    break;
                case 6 :
                    // InternalSQLParser.g:8660:3: (enumLiteral_5= LESS_1 )
                    {
                    // InternalSQLParser.g:8660:3: (enumLiteral_5= LESS_1 )
                    // InternalSQLParser.g:8661:4: enumLiteral_5= LESS_1
                    {
                    enumLiteral_5=(Token)match(input,LESS_1,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getXFunctionAccess().getXlsrEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_5, grammarAccess.getXFunctionAccess().getXlsrEnumLiteralDeclaration_5());
                      			
                    }

                    }


                    }
                    break;
                case 7 :
                    // InternalSQLParser.g:8668:3: (enumLiteral_6= GREATER_1 )
                    {
                    // InternalSQLParser.g:8668:3: (enumLiteral_6= GREATER_1 )
                    // InternalSQLParser.g:8669:4: enumLiteral_6= GREATER_1
                    {
                    enumLiteral_6=(Token)match(input,GREATER_1,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getXFunctionAccess().getXgtlEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_6, grammarAccess.getXFunctionAccess().getXgtlEnumLiteralDeclaration_6());
                      			
                    }

                    }


                    }
                    break;
                case 8 :
                    // InternalSQLParser.g:8676:3: (enumLiteral_7= GREATER )
                    {
                    // InternalSQLParser.g:8676:3: (enumLiteral_7= GREATER )
                    // InternalSQLParser.g:8677:4: enumLiteral_7= GREATER
                    {
                    enumLiteral_7=(Token)match(input,GREATER,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getXFunctionAccess().getXgtEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_7, grammarAccess.getXFunctionAccess().getXgtEnumLiteralDeclaration_7());
                      			
                    }

                    }


                    }
                    break;
                case 9 :
                    // InternalSQLParser.g:8684:3: (enumLiteral_8= BETWEEN_1 )
                    {
                    // InternalSQLParser.g:8684:3: (enumLiteral_8= BETWEEN_1 )
                    // InternalSQLParser.g:8685:4: enumLiteral_8= BETWEEN_1
                    {
                    enumLiteral_8=(Token)match(input,BETWEEN_1,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getXFunctionAccess().getXbwnEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_8, grammarAccess.getXFunctionAccess().getXbwnEnumLiteralDeclaration_8());
                      			
                    }

                    }


                    }
                    break;
                case 10 :
                    // InternalSQLParser.g:8692:3: (enumLiteral_9= BETWEEN_4 )
                    {
                    // InternalSQLParser.g:8692:3: (enumLiteral_9= BETWEEN_4 )
                    // InternalSQLParser.g:8693:4: enumLiteral_9= BETWEEN_4
                    {
                    enumLiteral_9=(Token)match(input,BETWEEN_4,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getXFunctionAccess().getXbwncEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_9, grammarAccess.getXFunctionAccess().getXbwncEnumLiteralDeclaration_9());
                      			
                    }

                    }


                    }
                    break;
                case 11 :
                    // InternalSQLParser.g:8700:3: (enumLiteral_10= BETWEEN_3 )
                    {
                    // InternalSQLParser.g:8700:3: (enumLiteral_10= BETWEEN_3 )
                    // InternalSQLParser.g:8701:4: enumLiteral_10= BETWEEN_3
                    {
                    enumLiteral_10=(Token)match(input,BETWEEN_3,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getXFunctionAccess().getXbwnlEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_10, grammarAccess.getXFunctionAccess().getXbwnlEnumLiteralDeclaration_10());
                      			
                    }

                    }


                    }
                    break;
                case 12 :
                    // InternalSQLParser.g:8708:3: (enumLiteral_11= BETWEEN_2 )
                    {
                    // InternalSQLParser.g:8708:3: (enumLiteral_11= BETWEEN_2 )
                    // InternalSQLParser.g:8709:4: enumLiteral_11= BETWEEN_2
                    {
                    enumLiteral_11=(Token)match(input,BETWEEN_2,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getXFunctionAccess().getXbwnrEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_11, grammarAccess.getXFunctionAccess().getXbwnrEnumLiteralDeclaration_11());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleXFunction"


    // $ANTLR start "ruleEXTRACT_VALUES"
    // InternalSQLParser.g:8719:1: ruleEXTRACT_VALUES returns [Enumerator current=null] : ( (enumLiteral_0= MICROSECOND ) | (enumLiteral_1= SECOND ) | (enumLiteral_2= MINUTE ) | (enumLiteral_3= HOUR ) | (enumLiteral_4= DAY ) | (enumLiteral_5= WEEK ) | (enumLiteral_6= MONTH ) | (enumLiteral_7= QUARTER ) | (enumLiteral_8= YEAR ) | (enumLiteral_9= SECOND_MICROSECOND ) | (enumLiteral_10= MINUTE_MICROSECOND ) | (enumLiteral_11= MINUTE_SECOND ) | (enumLiteral_12= HOUR_MICROSECOND ) | (enumLiteral_13= HOUR_SECOND ) | (enumLiteral_14= HOUR_MINUTE ) | (enumLiteral_15= DAY_MICROSECOND ) | (enumLiteral_16= DAY_SECOND ) | (enumLiteral_17= DAY_MINUTE ) | (enumLiteral_18= DAY_HOUR ) | (enumLiteral_19= YEAR_MONTH ) ) ;
    public final Enumerator ruleEXTRACT_VALUES() throws RecognitionException {
        Enumerator current = null;

        Token enumLiteral_0=null;
        Token enumLiteral_1=null;
        Token enumLiteral_2=null;
        Token enumLiteral_3=null;
        Token enumLiteral_4=null;
        Token enumLiteral_5=null;
        Token enumLiteral_6=null;
        Token enumLiteral_7=null;
        Token enumLiteral_8=null;
        Token enumLiteral_9=null;
        Token enumLiteral_10=null;
        Token enumLiteral_11=null;
        Token enumLiteral_12=null;
        Token enumLiteral_13=null;
        Token enumLiteral_14=null;
        Token enumLiteral_15=null;
        Token enumLiteral_16=null;
        Token enumLiteral_17=null;
        Token enumLiteral_18=null;
        Token enumLiteral_19=null;


        	enterRule();

        try {
            // InternalSQLParser.g:8725:2: ( ( (enumLiteral_0= MICROSECOND ) | (enumLiteral_1= SECOND ) | (enumLiteral_2= MINUTE ) | (enumLiteral_3= HOUR ) | (enumLiteral_4= DAY ) | (enumLiteral_5= WEEK ) | (enumLiteral_6= MONTH ) | (enumLiteral_7= QUARTER ) | (enumLiteral_8= YEAR ) | (enumLiteral_9= SECOND_MICROSECOND ) | (enumLiteral_10= MINUTE_MICROSECOND ) | (enumLiteral_11= MINUTE_SECOND ) | (enumLiteral_12= HOUR_MICROSECOND ) | (enumLiteral_13= HOUR_SECOND ) | (enumLiteral_14= HOUR_MINUTE ) | (enumLiteral_15= DAY_MICROSECOND ) | (enumLiteral_16= DAY_SECOND ) | (enumLiteral_17= DAY_MINUTE ) | (enumLiteral_18= DAY_HOUR ) | (enumLiteral_19= YEAR_MONTH ) ) )
            // InternalSQLParser.g:8726:2: ( (enumLiteral_0= MICROSECOND ) | (enumLiteral_1= SECOND ) | (enumLiteral_2= MINUTE ) | (enumLiteral_3= HOUR ) | (enumLiteral_4= DAY ) | (enumLiteral_5= WEEK ) | (enumLiteral_6= MONTH ) | (enumLiteral_7= QUARTER ) | (enumLiteral_8= YEAR ) | (enumLiteral_9= SECOND_MICROSECOND ) | (enumLiteral_10= MINUTE_MICROSECOND ) | (enumLiteral_11= MINUTE_SECOND ) | (enumLiteral_12= HOUR_MICROSECOND ) | (enumLiteral_13= HOUR_SECOND ) | (enumLiteral_14= HOUR_MINUTE ) | (enumLiteral_15= DAY_MICROSECOND ) | (enumLiteral_16= DAY_SECOND ) | (enumLiteral_17= DAY_MINUTE ) | (enumLiteral_18= DAY_HOUR ) | (enumLiteral_19= YEAR_MONTH ) )
            {
            // InternalSQLParser.g:8726:2: ( (enumLiteral_0= MICROSECOND ) | (enumLiteral_1= SECOND ) | (enumLiteral_2= MINUTE ) | (enumLiteral_3= HOUR ) | (enumLiteral_4= DAY ) | (enumLiteral_5= WEEK ) | (enumLiteral_6= MONTH ) | (enumLiteral_7= QUARTER ) | (enumLiteral_8= YEAR ) | (enumLiteral_9= SECOND_MICROSECOND ) | (enumLiteral_10= MINUTE_MICROSECOND ) | (enumLiteral_11= MINUTE_SECOND ) | (enumLiteral_12= HOUR_MICROSECOND ) | (enumLiteral_13= HOUR_SECOND ) | (enumLiteral_14= HOUR_MINUTE ) | (enumLiteral_15= DAY_MICROSECOND ) | (enumLiteral_16= DAY_SECOND ) | (enumLiteral_17= DAY_MINUTE ) | (enumLiteral_18= DAY_HOUR ) | (enumLiteral_19= YEAR_MONTH ) )
            int alt159=20;
            switch ( input.LA(1) ) {
            case MICROSECOND:
                {
                alt159=1;
                }
                break;
            case SECOND:
                {
                alt159=2;
                }
                break;
            case MINUTE:
                {
                alt159=3;
                }
                break;
            case HOUR:
                {
                alt159=4;
                }
                break;
            case DAY:
                {
                alt159=5;
                }
                break;
            case WEEK:
                {
                alt159=6;
                }
                break;
            case MONTH:
                {
                alt159=7;
                }
                break;
            case QUARTER:
                {
                alt159=8;
                }
                break;
            case YEAR:
                {
                alt159=9;
                }
                break;
            case SECOND_MICROSECOND:
                {
                alt159=10;
                }
                break;
            case MINUTE_MICROSECOND:
                {
                alt159=11;
                }
                break;
            case MINUTE_SECOND:
                {
                alt159=12;
                }
                break;
            case HOUR_MICROSECOND:
                {
                alt159=13;
                }
                break;
            case HOUR_SECOND:
                {
                alt159=14;
                }
                break;
            case HOUR_MINUTE:
                {
                alt159=15;
                }
                break;
            case DAY_MICROSECOND:
                {
                alt159=16;
                }
                break;
            case DAY_SECOND:
                {
                alt159=17;
                }
                break;
            case DAY_MINUTE:
                {
                alt159=18;
                }
                break;
            case DAY_HOUR:
                {
                alt159=19;
                }
                break;
            case YEAR_MONTH:
                {
                alt159=20;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 159, 0, input);

                throw nvae;
            }

            switch (alt159) {
                case 1 :
                    // InternalSQLParser.g:8727:3: (enumLiteral_0= MICROSECOND )
                    {
                    // InternalSQLParser.g:8727:3: (enumLiteral_0= MICROSECOND )
                    // InternalSQLParser.g:8728:4: enumLiteral_0= MICROSECOND
                    {
                    enumLiteral_0=(Token)match(input,MICROSECOND,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEXTRACT_VALUESAccess().getMsEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getEXTRACT_VALUESAccess().getMsEnumLiteralDeclaration_0());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalSQLParser.g:8735:3: (enumLiteral_1= SECOND )
                    {
                    // InternalSQLParser.g:8735:3: (enumLiteral_1= SECOND )
                    // InternalSQLParser.g:8736:4: enumLiteral_1= SECOND
                    {
                    enumLiteral_1=(Token)match(input,SECOND,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEXTRACT_VALUESAccess().getSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getEXTRACT_VALUESAccess().getSEnumLiteralDeclaration_1());
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalSQLParser.g:8743:3: (enumLiteral_2= MINUTE )
                    {
                    // InternalSQLParser.g:8743:3: (enumLiteral_2= MINUTE )
                    // InternalSQLParser.g:8744:4: enumLiteral_2= MINUTE
                    {
                    enumLiteral_2=(Token)match(input,MINUTE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEXTRACT_VALUESAccess().getMEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_2, grammarAccess.getEXTRACT_VALUESAccess().getMEnumLiteralDeclaration_2());
                      			
                    }

                    }


                    }
                    break;
                case 4 :
                    // InternalSQLParser.g:8751:3: (enumLiteral_3= HOUR )
                    {
                    // InternalSQLParser.g:8751:3: (enumLiteral_3= HOUR )
                    // InternalSQLParser.g:8752:4: enumLiteral_3= HOUR
                    {
                    enumLiteral_3=(Token)match(input,HOUR,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEXTRACT_VALUESAccess().getHEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_3, grammarAccess.getEXTRACT_VALUESAccess().getHEnumLiteralDeclaration_3());
                      			
                    }

                    }


                    }
                    break;
                case 5 :
                    // InternalSQLParser.g:8759:3: (enumLiteral_4= DAY )
                    {
                    // InternalSQLParser.g:8759:3: (enumLiteral_4= DAY )
                    // InternalSQLParser.g:8760:4: enumLiteral_4= DAY
                    {
                    enumLiteral_4=(Token)match(input,DAY,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEXTRACT_VALUESAccess().getDayEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_4, grammarAccess.getEXTRACT_VALUESAccess().getDayEnumLiteralDeclaration_4());
                      			
                    }

                    }


                    }
                    break;
                case 6 :
                    // InternalSQLParser.g:8767:3: (enumLiteral_5= WEEK )
                    {
                    // InternalSQLParser.g:8767:3: (enumLiteral_5= WEEK )
                    // InternalSQLParser.g:8768:4: enumLiteral_5= WEEK
                    {
                    enumLiteral_5=(Token)match(input,WEEK,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEXTRACT_VALUESAccess().getWeekEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_5, grammarAccess.getEXTRACT_VALUESAccess().getWeekEnumLiteralDeclaration_5());
                      			
                    }

                    }


                    }
                    break;
                case 7 :
                    // InternalSQLParser.g:8775:3: (enumLiteral_6= MONTH )
                    {
                    // InternalSQLParser.g:8775:3: (enumLiteral_6= MONTH )
                    // InternalSQLParser.g:8776:4: enumLiteral_6= MONTH
                    {
                    enumLiteral_6=(Token)match(input,MONTH,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEXTRACT_VALUESAccess().getMonthEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_6, grammarAccess.getEXTRACT_VALUESAccess().getMonthEnumLiteralDeclaration_6());
                      			
                    }

                    }


                    }
                    break;
                case 8 :
                    // InternalSQLParser.g:8783:3: (enumLiteral_7= QUARTER )
                    {
                    // InternalSQLParser.g:8783:3: (enumLiteral_7= QUARTER )
                    // InternalSQLParser.g:8784:4: enumLiteral_7= QUARTER
                    {
                    enumLiteral_7=(Token)match(input,QUARTER,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEXTRACT_VALUESAccess().getQuartEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_7, grammarAccess.getEXTRACT_VALUESAccess().getQuartEnumLiteralDeclaration_7());
                      			
                    }

                    }


                    }
                    break;
                case 9 :
                    // InternalSQLParser.g:8791:3: (enumLiteral_8= YEAR )
                    {
                    // InternalSQLParser.g:8791:3: (enumLiteral_8= YEAR )
                    // InternalSQLParser.g:8792:4: enumLiteral_8= YEAR
                    {
                    enumLiteral_8=(Token)match(input,YEAR,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEXTRACT_VALUESAccess().getYearEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_8, grammarAccess.getEXTRACT_VALUESAccess().getYearEnumLiteralDeclaration_8());
                      			
                    }

                    }


                    }
                    break;
                case 10 :
                    // InternalSQLParser.g:8799:3: (enumLiteral_9= SECOND_MICROSECOND )
                    {
                    // InternalSQLParser.g:8799:3: (enumLiteral_9= SECOND_MICROSECOND )
                    // InternalSQLParser.g:8800:4: enumLiteral_9= SECOND_MICROSECOND
                    {
                    enumLiteral_9=(Token)match(input,SECOND_MICROSECOND,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEXTRACT_VALUESAccess().getMicrosEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_9, grammarAccess.getEXTRACT_VALUESAccess().getMicrosEnumLiteralDeclaration_9());
                      			
                    }

                    }


                    }
                    break;
                case 11 :
                    // InternalSQLParser.g:8807:3: (enumLiteral_10= MINUTE_MICROSECOND )
                    {
                    // InternalSQLParser.g:8807:3: (enumLiteral_10= MINUTE_MICROSECOND )
                    // InternalSQLParser.g:8808:4: enumLiteral_10= MINUTE_MICROSECOND
                    {
                    enumLiteral_10=(Token)match(input,MINUTE_MICROSECOND,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEXTRACT_VALUESAccess().getMinMicroEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_10, grammarAccess.getEXTRACT_VALUESAccess().getMinMicroEnumLiteralDeclaration_10());
                      			
                    }

                    }


                    }
                    break;
                case 12 :
                    // InternalSQLParser.g:8815:3: (enumLiteral_11= MINUTE_SECOND )
                    {
                    // InternalSQLParser.g:8815:3: (enumLiteral_11= MINUTE_SECOND )
                    // InternalSQLParser.g:8816:4: enumLiteral_11= MINUTE_SECOND
                    {
                    enumLiteral_11=(Token)match(input,MINUTE_SECOND,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEXTRACT_VALUESAccess().getMinSecEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_11, grammarAccess.getEXTRACT_VALUESAccess().getMinSecEnumLiteralDeclaration_11());
                      			
                    }

                    }


                    }
                    break;
                case 13 :
                    // InternalSQLParser.g:8823:3: (enumLiteral_12= HOUR_MICROSECOND )
                    {
                    // InternalSQLParser.g:8823:3: (enumLiteral_12= HOUR_MICROSECOND )
                    // InternalSQLParser.g:8824:4: enumLiteral_12= HOUR_MICROSECOND
                    {
                    enumLiteral_12=(Token)match(input,HOUR_MICROSECOND,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEXTRACT_VALUESAccess().getHmsEnumLiteralDeclaration_12().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_12, grammarAccess.getEXTRACT_VALUESAccess().getHmsEnumLiteralDeclaration_12());
                      			
                    }

                    }


                    }
                    break;
                case 14 :
                    // InternalSQLParser.g:8831:3: (enumLiteral_13= HOUR_SECOND )
                    {
                    // InternalSQLParser.g:8831:3: (enumLiteral_13= HOUR_SECOND )
                    // InternalSQLParser.g:8832:4: enumLiteral_13= HOUR_SECOND
                    {
                    enumLiteral_13=(Token)match(input,HOUR_SECOND,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEXTRACT_VALUESAccess().getHsEnumLiteralDeclaration_13().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_13, grammarAccess.getEXTRACT_VALUESAccess().getHsEnumLiteralDeclaration_13());
                      			
                    }

                    }


                    }
                    break;
                case 15 :
                    // InternalSQLParser.g:8839:3: (enumLiteral_14= HOUR_MINUTE )
                    {
                    // InternalSQLParser.g:8839:3: (enumLiteral_14= HOUR_MINUTE )
                    // InternalSQLParser.g:8840:4: enumLiteral_14= HOUR_MINUTE
                    {
                    enumLiteral_14=(Token)match(input,HOUR_MINUTE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEXTRACT_VALUESAccess().getHminEnumLiteralDeclaration_14().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_14, grammarAccess.getEXTRACT_VALUESAccess().getHminEnumLiteralDeclaration_14());
                      			
                    }

                    }


                    }
                    break;
                case 16 :
                    // InternalSQLParser.g:8847:3: (enumLiteral_15= DAY_MICROSECOND )
                    {
                    // InternalSQLParser.g:8847:3: (enumLiteral_15= DAY_MICROSECOND )
                    // InternalSQLParser.g:8848:4: enumLiteral_15= DAY_MICROSECOND
                    {
                    enumLiteral_15=(Token)match(input,DAY_MICROSECOND,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEXTRACT_VALUESAccess().getDmsEnumLiteralDeclaration_15().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_15, grammarAccess.getEXTRACT_VALUESAccess().getDmsEnumLiteralDeclaration_15());
                      			
                    }

                    }


                    }
                    break;
                case 17 :
                    // InternalSQLParser.g:8855:3: (enumLiteral_16= DAY_SECOND )
                    {
                    // InternalSQLParser.g:8855:3: (enumLiteral_16= DAY_SECOND )
                    // InternalSQLParser.g:8856:4: enumLiteral_16= DAY_SECOND
                    {
                    enumLiteral_16=(Token)match(input,DAY_SECOND,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEXTRACT_VALUESAccess().getDsEnumLiteralDeclaration_16().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_16, grammarAccess.getEXTRACT_VALUESAccess().getDsEnumLiteralDeclaration_16());
                      			
                    }

                    }


                    }
                    break;
                case 18 :
                    // InternalSQLParser.g:8863:3: (enumLiteral_17= DAY_MINUTE )
                    {
                    // InternalSQLParser.g:8863:3: (enumLiteral_17= DAY_MINUTE )
                    // InternalSQLParser.g:8864:4: enumLiteral_17= DAY_MINUTE
                    {
                    enumLiteral_17=(Token)match(input,DAY_MINUTE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEXTRACT_VALUESAccess().getDayminEnumLiteralDeclaration_17().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_17, grammarAccess.getEXTRACT_VALUESAccess().getDayminEnumLiteralDeclaration_17());
                      			
                    }

                    }


                    }
                    break;
                case 19 :
                    // InternalSQLParser.g:8871:3: (enumLiteral_18= DAY_HOUR )
                    {
                    // InternalSQLParser.g:8871:3: (enumLiteral_18= DAY_HOUR )
                    // InternalSQLParser.g:8872:4: enumLiteral_18= DAY_HOUR
                    {
                    enumLiteral_18=(Token)match(input,DAY_HOUR,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEXTRACT_VALUESAccess().getDayhEnumLiteralDeclaration_18().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_18, grammarAccess.getEXTRACT_VALUESAccess().getDayhEnumLiteralDeclaration_18());
                      			
                    }

                    }


                    }
                    break;
                case 20 :
                    // InternalSQLParser.g:8879:3: (enumLiteral_19= YEAR_MONTH )
                    {
                    // InternalSQLParser.g:8879:3: (enumLiteral_19= YEAR_MONTH )
                    // InternalSQLParser.g:8880:4: enumLiteral_19= YEAR_MONTH
                    {
                    enumLiteral_19=(Token)match(input,YEAR_MONTH,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEXTRACT_VALUESAccess().getYearMonthEnumLiteralDeclaration_19().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_19, grammarAccess.getEXTRACT_VALUESAccess().getYearMonthEnumLiteralDeclaration_19());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleEXTRACT_VALUES"

    // $ANTLR start synpred67_InternalSQLParser
    public final void synpred67_InternalSQLParser_fragment() throws RecognitionException {   
        EObject lv_tblAlias_6_0 = null;


        // InternalSQLParser.g:2533:4: ( (lv_tblAlias_6_0= ruleDbObjectName ) )
        // InternalSQLParser.g:2533:4: (lv_tblAlias_6_0= ruleDbObjectName )
        {
        // InternalSQLParser.g:2533:4: (lv_tblAlias_6_0= ruleDbObjectName )
        // InternalSQLParser.g:2534:5: lv_tblAlias_6_0= ruleDbObjectName
        {
        if ( state.backtracking==0 ) {

          					newCompositeNode(grammarAccess.getTableOrAliasAccess().getTblAliasDbObjectNameParserRuleCall_3_0());
          				
        }
        pushFollow(FOLLOW_2);
        lv_tblAlias_6_0=ruleDbObjectName();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred67_InternalSQLParser

    // $ANTLR start synpred68_InternalSQLParser
    public final void synpred68_InternalSQLParser_fragment() throws RecognitionException {   
        EObject lv_c_1_0 = null;


        // InternalSQLParser.g:2590:4: ( (lv_c_1_0= ruleFromValuesColumns ) )
        // InternalSQLParser.g:2590:4: (lv_c_1_0= ruleFromValuesColumns )
        {
        // InternalSQLParser.g:2590:4: (lv_c_1_0= ruleFromValuesColumns )
        // InternalSQLParser.g:2591:5: lv_c_1_0= ruleFromValuesColumns
        {
        if ( state.backtracking==0 ) {

          					newCompositeNode(grammarAccess.getFromValuesAccess().getCFromValuesColumnsParserRuleCall_1_0());
          				
        }
        pushFollow(FOLLOW_2);
        lv_c_1_0=ruleFromValuesColumns();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred68_InternalSQLParser

    // $ANTLR start synpred102_InternalSQLParser
    public final void synpred102_InternalSQLParser_fragment() throws RecognitionException {   
        EObject lv_entries_2_0 = null;


        // InternalSQLParser.g:4329:5: ( (lv_entries_2_0= ruleExpressionFragmentSecond ) )
        // InternalSQLParser.g:4329:5: (lv_entries_2_0= ruleExpressionFragmentSecond )
        {
        // InternalSQLParser.g:4329:5: (lv_entries_2_0= ruleExpressionFragmentSecond )
        // InternalSQLParser.g:4330:6: lv_entries_2_0= ruleExpressionFragmentSecond
        {
        if ( state.backtracking==0 ) {

          						newCompositeNode(grammarAccess.getFullExpressionAccess().getEntriesExpressionFragmentSecondParserRuleCall_1_1_0());
          					
        }
        pushFollow(FOLLOW_2);
        lv_entries_2_0=ruleExpressionFragmentSecond();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred102_InternalSQLParser

    // $ANTLR start synpred103_InternalSQLParser
    public final void synpred103_InternalSQLParser_fragment() throws RecognitionException {   
        EObject lv_entries_2_0 = null;


        // InternalSQLParser.g:4318:4: ( () ( (lv_entries_2_0= ruleExpressionFragmentSecond ) )+ )
        // InternalSQLParser.g:4318:4: () ( (lv_entries_2_0= ruleExpressionFragmentSecond ) )+
        {
        // InternalSQLParser.g:4318:4: ()
        // InternalSQLParser.g:4319:5: 
        {
        if ( state.backtracking==0 ) {

          					/* */
          				
        }

        }

        // InternalSQLParser.g:4328:4: ( (lv_entries_2_0= ruleExpressionFragmentSecond ) )+
        int cnt183=0;
        loop183:
        do {
            int alt183=2;
            int LA183_0 = input.LA(1);

            if ( (LA183_0==AND||LA183_0==OR||LA183_0==RULE_JRNPARAM) ) {
                alt183=1;
            }


            switch (alt183) {
        	case 1 :
        	    // InternalSQLParser.g:4329:5: (lv_entries_2_0= ruleExpressionFragmentSecond )
        	    {
        	    // InternalSQLParser.g:4329:5: (lv_entries_2_0= ruleExpressionFragmentSecond )
        	    // InternalSQLParser.g:4330:6: lv_entries_2_0= ruleExpressionFragmentSecond
        	    {
        	    if ( state.backtracking==0 ) {

        	      						newCompositeNode(grammarAccess.getFullExpressionAccess().getEntriesExpressionFragmentSecondParserRuleCall_1_1_0());
        	      					
        	    }
        	    pushFollow(FOLLOW_75);
        	    lv_entries_2_0=ruleExpressionFragmentSecond();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt183 >= 1 ) break loop183;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(183, input);
                    throw eee;
            }
            cnt183++;
        } while (true);


        }
    }
    // $ANTLR end synpred103_InternalSQLParser

    // $ANTLR start synpred151_InternalSQLParser
    public final void synpred151_InternalSQLParser_fragment() throws RecognitionException {   
        EObject lv_column_0_0 = null;


        // InternalSQLParser.g:6212:3: ( ( (lv_column_0_0= ruleColumnOperand ) ) )
        // InternalSQLParser.g:6212:3: ( (lv_column_0_0= ruleColumnOperand ) )
        {
        // InternalSQLParser.g:6212:3: ( (lv_column_0_0= ruleColumnOperand ) )
        // InternalSQLParser.g:6213:4: (lv_column_0_0= ruleColumnOperand )
        {
        // InternalSQLParser.g:6213:4: (lv_column_0_0= ruleColumnOperand )
        // InternalSQLParser.g:6214:5: lv_column_0_0= ruleColumnOperand
        {
        if ( state.backtracking==0 ) {

          					newCompositeNode(grammarAccess.getOperandFragmentAccess().getColumnColumnOperandParserRuleCall_0_0());
          				
        }
        pushFollow(FOLLOW_2);
        lv_column_0_0=ruleColumnOperand();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    // $ANTLR end synpred151_InternalSQLParser

    // $ANTLR start synpred156_InternalSQLParser
    public final void synpred156_InternalSQLParser_fragment() throws RecognitionException {   
        EObject lv_func_5_0 = null;


        // InternalSQLParser.g:6312:3: ( ( (lv_func_5_0= ruleOperandFunction ) ) )
        // InternalSQLParser.g:6312:3: ( (lv_func_5_0= ruleOperandFunction ) )
        {
        // InternalSQLParser.g:6312:3: ( (lv_func_5_0= ruleOperandFunction ) )
        // InternalSQLParser.g:6313:4: (lv_func_5_0= ruleOperandFunction )
        {
        // InternalSQLParser.g:6313:4: (lv_func_5_0= ruleOperandFunction )
        // InternalSQLParser.g:6314:5: lv_func_5_0= ruleOperandFunction
        {
        if ( state.backtracking==0 ) {

          					newCompositeNode(grammarAccess.getOperandFragmentAccess().getFuncOperandFunctionParserRuleCall_5_0());
          				
        }
        pushFollow(FOLLOW_2);
        lv_func_5_0=ruleOperandFunction();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    // $ANTLR end synpred156_InternalSQLParser

    // $ANTLR start synpred198_InternalSQLParser
    public final void synpred198_InternalSQLParser_fragment() throws RecognitionException {   
        EObject lv_wop_1_0 = null;


        // InternalSQLParser.g:8126:4: ( ( (lv_wop_1_0= ruleOperandGroup ) ) )
        // InternalSQLParser.g:8126:4: ( (lv_wop_1_0= ruleOperandGroup ) )
        {
        // InternalSQLParser.g:8126:4: ( (lv_wop_1_0= ruleOperandGroup ) )
        // InternalSQLParser.g:8127:5: (lv_wop_1_0= ruleOperandGroup )
        {
        // InternalSQLParser.g:8127:5: (lv_wop_1_0= ruleOperandGroup )
        // InternalSQLParser.g:8128:6: lv_wop_1_0= ruleOperandGroup
        {
        if ( state.backtracking==0 ) {

          						newCompositeNode(grammarAccess.getSQLCASEAccess().getWopOperandGroupParserRuleCall_1_0_0());
          					
        }
        pushFollow(FOLLOW_2);
        lv_wop_1_0=ruleOperandGroup();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    // $ANTLR end synpred198_InternalSQLParser

    // $ANTLR start synpred199_InternalSQLParser
    public final void synpred199_InternalSQLParser_fragment() throws RecognitionException {   
        EObject lv_expr_2_0 = null;


        // InternalSQLParser.g:8146:4: ( ( (lv_expr_2_0= ruleFullExpression ) ) )
        // InternalSQLParser.g:8146:4: ( (lv_expr_2_0= ruleFullExpression ) )
        {
        // InternalSQLParser.g:8146:4: ( (lv_expr_2_0= ruleFullExpression ) )
        // InternalSQLParser.g:8147:5: (lv_expr_2_0= ruleFullExpression )
        {
        // InternalSQLParser.g:8147:5: (lv_expr_2_0= ruleFullExpression )
        // InternalSQLParser.g:8148:6: lv_expr_2_0= ruleFullExpression
        {
        if ( state.backtracking==0 ) {

          						newCompositeNode(grammarAccess.getSQLCASEAccess().getExprFullExpressionParserRuleCall_1_1_0());
          					
        }
        pushFollow(FOLLOW_2);
        lv_expr_2_0=ruleFullExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    // $ANTLR end synpred199_InternalSQLParser

    // $ANTLR start synpred202_InternalSQLParser
    public final void synpred202_InternalSQLParser_fragment() throws RecognitionException {   
        EObject lv_wop_1_0 = null;


        // InternalSQLParser.g:8274:4: ( ( (lv_wop_1_0= ruleOperandGroup ) ) )
        // InternalSQLParser.g:8274:4: ( (lv_wop_1_0= ruleOperandGroup ) )
        {
        // InternalSQLParser.g:8274:4: ( (lv_wop_1_0= ruleOperandGroup ) )
        // InternalSQLParser.g:8275:5: (lv_wop_1_0= ruleOperandGroup )
        {
        // InternalSQLParser.g:8275:5: (lv_wop_1_0= ruleOperandGroup )
        // InternalSQLParser.g:8276:6: lv_wop_1_0= ruleOperandGroup
        {
        if ( state.backtracking==0 ) {

          						newCompositeNode(grammarAccess.getSqlCaseWhenAccess().getWopOperandGroupParserRuleCall_1_0_0());
          					
        }
        pushFollow(FOLLOW_2);
        lv_wop_1_0=ruleOperandGroup();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    // $ANTLR end synpred202_InternalSQLParser

    // Delegated rules

    public final boolean synpred156_InternalSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred156_InternalSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred151_InternalSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred151_InternalSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred102_InternalSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred102_InternalSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred68_InternalSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred68_InternalSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred199_InternalSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred199_InternalSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred67_InternalSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred67_InternalSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred202_InternalSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred202_InternalSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred103_InternalSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred103_InternalSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred198_InternalSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred198_InternalSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA54 dfa54 = new DFA54(this);
    protected DFA55 dfa55 = new DFA55(this);
    protected DFA88 dfa88 = new DFA88(this);
    protected DFA87 dfa87 = new DFA87(this);
    protected DFA92 dfa92 = new DFA92(this);
    protected DFA91 dfa91 = new DFA91(this);
    protected DFA116 dfa116 = new DFA116(this);
    protected DFA148 dfa148 = new DFA148(this);
    protected DFA151 dfa151 = new DFA151(this);
    static final String dfa_1s = "\50\uffff";
    static final String dfa_2s = "\1\4\47\uffff";
    static final String dfa_3s = "\1\11\3\0\44\uffff";
    static final String dfa_4s = "\1\u00a3\3\0\44\uffff";
    static final String dfa_5s = "\4\uffff\1\2\42\uffff\1\1";
    static final String dfa_6s = "\1\uffff\1\0\1\1\1\2\44\uffff}>";
    static final String[] dfa_7s = {
            "\1\4\10\uffff\1\4\20\uffff\1\4\2\uffff\1\4\7\uffff\1\4\1\uffff\1\4\3\uffff\1\4\7\uffff\3\4\2\uffff\1\4\1\uffff\3\4\2\uffff\1\4\3\uffff\1\4\2\uffff\3\4\1\uffff\1\4\4\uffff\1\4\2\uffff\1\4\2\uffff\1\4\47\uffff\1\4\3\uffff\2\4\1\uffff\1\4\10\uffff\6\4\4\uffff\1\4\1\3\1\2\1\1",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_1 = DFA.unpackEncodedString(dfa_1s);
    static final short[] dfa_2 = DFA.unpackEncodedString(dfa_2s);
    static final char[] dfa_3 = DFA.unpackEncodedStringToUnsignedChars(dfa_3s);
    static final char[] dfa_4 = DFA.unpackEncodedStringToUnsignedChars(dfa_4s);
    static final short[] dfa_5 = DFA.unpackEncodedString(dfa_5s);
    static final short[] dfa_6 = DFA.unpackEncodedString(dfa_6s);
    static final short[][] dfa_7 = unpackEncodedStringArray(dfa_7s);

    class DFA54 extends DFA {

        public DFA54(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 54;
            this.eot = dfa_1;
            this.eof = dfa_2;
            this.min = dfa_3;
            this.max = dfa_4;
            this.accept = dfa_5;
            this.special = dfa_6;
            this.transition = dfa_7;
        }
        public String getDescription() {
            return "2532:3: ( (lv_tblAlias_6_0= ruleDbObjectName ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA54_1 = input.LA(1);

                         
                        int index54_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67_InternalSQLParser()) ) {s = 39;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index54_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA54_2 = input.LA(1);

                         
                        int index54_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67_InternalSQLParser()) ) {s = 39;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index54_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA54_3 = input.LA(1);

                         
                        int index54_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67_InternalSQLParser()) ) {s = 39;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index54_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 54, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_8s = "\53\uffff";
    static final String dfa_9s = "\1\2\52\uffff";
    static final String dfa_10s = "\1\11\1\0\51\uffff";
    static final String dfa_11s = "\1\u00a3\1\0\51\uffff";
    static final String dfa_12s = "\2\uffff\1\2\47\uffff\1\1";
    static final String dfa_13s = "\1\uffff\1\0\51\uffff}>";
    static final String[] dfa_14s = {
            "\1\2\10\uffff\1\2\20\uffff\1\2\2\uffff\1\2\4\uffff\1\2\2\uffff\1\2\1\uffff\1\2\3\uffff\1\2\7\uffff\3\2\2\uffff\1\2\1\uffff\3\2\2\uffff\1\2\1\uffff\1\2\1\uffff\1\2\2\uffff\3\2\1\uffff\1\2\4\uffff\1\2\2\uffff\1\2\2\uffff\1\2\42\uffff\1\2\4\uffff\1\2\3\uffff\2\2\1\uffff\1\2\10\uffff\6\2\4\uffff\3\2\1\1",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_8 = DFA.unpackEncodedString(dfa_8s);
    static final short[] dfa_9 = DFA.unpackEncodedString(dfa_9s);
    static final char[] dfa_10 = DFA.unpackEncodedStringToUnsignedChars(dfa_10s);
    static final char[] dfa_11 = DFA.unpackEncodedStringToUnsignedChars(dfa_11s);
    static final short[] dfa_12 = DFA.unpackEncodedString(dfa_12s);
    static final short[] dfa_13 = DFA.unpackEncodedString(dfa_13s);
    static final short[][] dfa_14 = unpackEncodedStringArray(dfa_14s);

    class DFA55 extends DFA {

        public DFA55(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 55;
            this.eot = dfa_8;
            this.eof = dfa_9;
            this.min = dfa_10;
            this.max = dfa_11;
            this.accept = dfa_12;
            this.special = dfa_13;
            this.transition = dfa_14;
        }
        public String getDescription() {
            return "2589:3: ( (lv_c_1_0= ruleFromValuesColumns ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA55_1 = input.LA(1);

                         
                        int index55_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_InternalSQLParser()) ) {s = 42;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index55_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 55, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_15s = "\51\uffff";
    static final String dfa_16s = "\1\4\50\uffff";
    static final String dfa_17s = "\1\11\2\uffff\1\0\45\uffff";
    static final String dfa_18s = "\1\u00a3\2\uffff\1\0\45\uffff";
    static final String dfa_19s = "\1\uffff\1\1\2\uffff\1\2\44\uffff";
    static final String dfa_20s = "\3\uffff\1\0\45\uffff}>";
    static final String[] dfa_21s = {
            "\1\4\10\uffff\1\4\20\uffff\1\4\2\uffff\1\4\7\uffff\1\4\1\uffff\1\4\3\uffff\1\4\7\uffff\3\4\2\uffff\1\4\1\uffff\3\4\2\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\1\uffff\1\4\4\uffff\1\4\2\uffff\1\4\2\uffff\1\4\10\uffff\1\4\2\uffff\1\4\4\uffff\1\1\27\uffff\1\1\2\uffff\2\4\1\uffff\1\4\10\uffff\1\4\1\3\4\4\4\uffff\4\4",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_15 = DFA.unpackEncodedString(dfa_15s);
    static final short[] dfa_16 = DFA.unpackEncodedString(dfa_16s);
    static final char[] dfa_17 = DFA.unpackEncodedStringToUnsignedChars(dfa_17s);
    static final char[] dfa_18 = DFA.unpackEncodedStringToUnsignedChars(dfa_18s);
    static final short[] dfa_19 = DFA.unpackEncodedString(dfa_19s);
    static final short[] dfa_20 = DFA.unpackEncodedString(dfa_20s);
    static final short[][] dfa_21 = unpackEncodedStringArray(dfa_21s);

    class DFA88 extends DFA {

        public DFA88(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 88;
            this.eot = dfa_15;
            this.eof = dfa_16;
            this.min = dfa_17;
            this.max = dfa_18;
            this.accept = dfa_19;
            this.special = dfa_20;
            this.transition = dfa_21;
        }
        public String getDescription() {
            return "4317:3: ( () ( (lv_entries_2_0= ruleExpressionFragmentSecond ) )+ )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA88_3 = input.LA(1);

                         
                        int index88_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred103_InternalSQLParser()) ) {s = 1;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index88_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 88, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_22s = "\1\1\50\uffff";
    static final String dfa_23s = "\1\11\21\uffff\1\0\26\uffff";
    static final String dfa_24s = "\1\u00a3\21\uffff\1\0\26\uffff";
    static final String dfa_25s = "\1\uffff\1\2\45\uffff\1\1\1\uffff";
    static final String dfa_26s = "\22\uffff\1\0\26\uffff}>";
    static final String[] dfa_27s = {
            "\1\1\10\uffff\1\1\20\uffff\1\1\2\uffff\1\1\7\uffff\1\1\1\uffff\1\1\3\uffff\1\1\7\uffff\3\1\2\uffff\1\1\1\uffff\3\1\2\uffff\1\1\3\uffff\1\1\2\uffff\1\1\1\uffff\1\1\1\uffff\1\1\4\uffff\1\1\2\uffff\1\1\2\uffff\1\1\10\uffff\1\1\2\uffff\1\1\4\uffff\1\47\27\uffff\1\47\2\uffff\2\1\1\uffff\1\1\10\uffff\1\1\1\22\4\1\4\uffff\4\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_22 = DFA.unpackEncodedString(dfa_22s);
    static final char[] dfa_23 = DFA.unpackEncodedStringToUnsignedChars(dfa_23s);
    static final char[] dfa_24 = DFA.unpackEncodedStringToUnsignedChars(dfa_24s);
    static final short[] dfa_25 = DFA.unpackEncodedString(dfa_25s);
    static final short[] dfa_26 = DFA.unpackEncodedString(dfa_26s);
    static final short[][] dfa_27 = unpackEncodedStringArray(dfa_27s);

    class DFA87 extends DFA {

        public DFA87(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 87;
            this.eot = dfa_15;
            this.eof = dfa_22;
            this.min = dfa_23;
            this.max = dfa_24;
            this.accept = dfa_25;
            this.special = dfa_26;
            this.transition = dfa_27;
        }
        public String getDescription() {
            return "()+ loopback of 4328:4: ( (lv_entries_2_0= ruleExpressionFragmentSecond ) )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA87_18 = input.LA(1);

                         
                        int index87_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_InternalSQLParser()) ) {s = 39;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index87_18);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 87, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_28s = "\14\uffff";
    static final String dfa_29s = "\5\uffff\1\11\6\uffff";
    static final String dfa_30s = "\1\43\1\57\1\uffff\1\43\1\uffff\1\11\4\uffff\1\43\1\66";
    static final String dfa_31s = "\1\u00a3\1\u008a\1\uffff\1\u00a3\1\uffff\1\u00a3\4\uffff\1\u00a3\1\70";
    static final String dfa_32s = "\2\uffff\1\1\1\uffff\1\2\1\uffff\1\3\1\5\1\6\1\4\2\uffff";
    static final String dfa_33s = "\14\uffff}>";
    static final String[] dfa_34s = {
            "\1\4\13\uffff\1\10\14\uffff\1\4\26\uffff\1\4\15\uffff\1\2\24\uffff\1\1\6\uffff\1\6\6\uffff\1\7\5\uffff\1\3\13\uffff\1\4\1\5\1\uffff\3\4\4\uffff\4\4",
            "\1\10\124\uffff\1\7\5\uffff\1\2",
            "",
            "\1\2\13\uffff\1\2\6\uffff\1\4\5\uffff\1\2\26\uffff\1\2\15\uffff\1\2\24\uffff\1\2\6\uffff\1\2\6\uffff\1\2\5\uffff\1\2\13\uffff\2\2\1\uffff\3\2\4\uffff\4\2",
            "",
            "\1\11\10\uffff\1\11\14\uffff\1\4\3\uffff\1\11\2\uffff\1\11\7\uffff\1\11\1\4\1\11\3\uffff\1\11\7\uffff\3\11\2\uffff\1\11\1\uffff\3\11\2\uffff\1\11\3\uffff\1\11\2\uffff\1\11\1\uffff\1\11\1\uffff\1\11\4\uffff\1\11\2\uffff\1\11\2\uffff\1\11\1\4\7\uffff\1\11\2\uffff\1\11\4\uffff\1\11\6\uffff\1\4\5\uffff\1\4\1\uffff\3\4\3\uffff\2\4\1\uffff\1\11\2\4\2\11\1\4\1\11\1\4\1\uffff\4\4\2\uffff\2\11\1\12\3\11\4\uffff\4\11",
            "",
            "",
            "",
            "",
            "\1\4\30\uffff\1\4\26\uffff\1\4\66\uffff\1\13\2\uffff\1\11\10\uffff\2\4\1\uffff\3\4\4\uffff\4\4",
            "\1\4\1\uffff\1\11"
    };

    static final short[] dfa_28 = DFA.unpackEncodedString(dfa_28s);
    static final short[] dfa_29 = DFA.unpackEncodedString(dfa_29s);
    static final char[] dfa_30 = DFA.unpackEncodedStringToUnsignedChars(dfa_30s);
    static final char[] dfa_31 = DFA.unpackEncodedStringToUnsignedChars(dfa_31s);
    static final short[] dfa_32 = DFA.unpackEncodedString(dfa_32s);
    static final short[] dfa_33 = DFA.unpackEncodedString(dfa_33s);
    static final short[][] dfa_34 = unpackEncodedStringArray(dfa_34s);

    class DFA92 extends DFA {

        public DFA92(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 92;
            this.eot = dfa_28;
            this.eof = dfa_29;
            this.min = dfa_30;
            this.max = dfa_31;
            this.accept = dfa_32;
            this.special = dfa_33;
            this.transition = dfa_34;
        }
        public String getDescription() {
            return "4452:2: ( ( (lv_expgroup_0_0= ruleExpressionGroup ) ) | ( (lv_exp_1_0= ruleExpression ) ) | ( ( (lv_xexp_2_1= ruleXExpression | lv_xexp_2_2= ruleXExpression_ ) ) ) | ( (lv_notPrm_3_0= RULE_JRNPARAM ) ) | ( (lv_in_4_0= ruleInOperator ) ) | ( (lv_exists_5_0= ruleExistsOperator ) ) )";
        }
    }
    static final String dfa_35s = "\20\uffff";
    static final String dfa_36s = "\1\175\1\20\14\u008d\2\uffff";
    static final String dfa_37s = "\1\175\1\173\14\u0094\2\uffff";
    static final String dfa_38s = "\16\uffff\1\2\1\1";
    static final String dfa_39s = "\20\uffff}>";
    static final String[] dfa_40s = {
            "\1\1",
            "\1\13\5\uffff\1\15\1\5\1\14\1\10\3\uffff\1\12\1\11\32\uffff\1\4\1\7\1\3\26\uffff\1\6\50\uffff\1\2",
            "\1\17\6\uffff\1\16",
            "\1\17\6\uffff\1\16",
            "\1\17\6\uffff\1\16",
            "\1\17\6\uffff\1\16",
            "\1\17\6\uffff\1\16",
            "\1\17\6\uffff\1\16",
            "\1\17\6\uffff\1\16",
            "\1\17\6\uffff\1\16",
            "\1\17\6\uffff\1\16",
            "\1\17\6\uffff\1\16",
            "\1\17\6\uffff\1\16",
            "\1\17\6\uffff\1\16",
            "",
            ""
    };

    static final short[] dfa_35 = DFA.unpackEncodedString(dfa_35s);
    static final char[] dfa_36 = DFA.unpackEncodedStringToUnsignedChars(dfa_36s);
    static final char[] dfa_37 = DFA.unpackEncodedStringToUnsignedChars(dfa_37s);
    static final short[] dfa_38 = DFA.unpackEncodedString(dfa_38s);
    static final short[] dfa_39 = DFA.unpackEncodedString(dfa_39s);
    static final short[][] dfa_40 = unpackEncodedStringArray(dfa_40s);

    class DFA91 extends DFA {

        public DFA91(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 91;
            this.eot = dfa_35;
            this.eof = dfa_35;
            this.min = dfa_36;
            this.max = dfa_37;
            this.accept = dfa_38;
            this.special = dfa_39;
            this.transition = dfa_40;
        }
        public String getDescription() {
            return "4495:5: (lv_xexp_2_1= ruleXExpression | lv_xexp_2_2= ruleXExpression_ )";
        }
    }
    static final String dfa_41s = "\17\uffff";
    static final String dfa_42s = "\1\43\1\0\15\uffff";
    static final String dfa_43s = "\1\u00a3\1\0\15\uffff";
    static final String dfa_44s = "\2\uffff\1\1\1\uffff\1\2\5\uffff\1\3\1\4\1\5\1\7\1\6";
    static final String dfa_45s = "\1\uffff\1\0\15\uffff}>";
    static final String[] dfa_46s = {
            "\1\14\30\uffff\1\13\26\uffff\1\15\66\uffff\1\12\13\uffff\2\4\1\uffff\3\4\4\uffff\1\4\2\2\1\1",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_41 = DFA.unpackEncodedString(dfa_41s);
    static final char[] dfa_42 = DFA.unpackEncodedStringToUnsignedChars(dfa_42s);
    static final char[] dfa_43 = DFA.unpackEncodedStringToUnsignedChars(dfa_43s);
    static final short[] dfa_44 = DFA.unpackEncodedString(dfa_44s);
    static final short[] dfa_45 = DFA.unpackEncodedString(dfa_45s);
    static final short[][] dfa_46 = unpackEncodedStringArray(dfa_46s);

    class DFA116 extends DFA {

        public DFA116(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 116;
            this.eot = dfa_41;
            this.eof = dfa_41;
            this.min = dfa_42;
            this.max = dfa_43;
            this.accept = dfa_44;
            this.special = dfa_45;
            this.transition = dfa_46;
        }
        public String getDescription() {
            return "6211:2: ( ( (lv_column_0_0= ruleColumnOperand ) ) | ( (lv_xop_1_0= ruleXOperandFragment ) ) | ( (lv_subq_2_0= ruleSubQueryOperand ) ) | ( (lv_fcast_3_0= ruleOpFunctionCast ) ) | ( (lv_fext_4_0= ruleFunctionExtract ) ) | ( (lv_func_5_0= ruleOperandFunction ) ) | ( (lv_sqlcase_6_0= ruleSQLCASE ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA116_1 = input.LA(1);

                         
                        int index116_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalSQLParser()) ) {s = 2;}

                        else if ( (synpred156_InternalSQLParser()) ) {s = 14;}

                         
                        input.seek(index116_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 116, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_47s = "\25\uffff";
    static final String dfa_48s = "\1\43\15\0\7\uffff";
    static final String dfa_49s = "\1\u00a3\15\0\7\uffff";
    static final String dfa_50s = "\16\uffff\1\2\4\uffff\1\3\1\1";
    static final String dfa_51s = "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\7\uffff}>";
    static final String[] dfa_52s = {
            "\1\14\13\uffff\1\16\14\uffff\1\13\26\uffff\1\15\15\uffff\1\16\10\uffff\1\23\13\uffff\1\16\6\uffff\1\16\6\uffff\1\16\5\uffff\1\12\13\uffff\1\4\1\5\1\uffff\1\6\1\7\1\10\4\uffff\1\11\1\3\1\2\1\1",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_47 = DFA.unpackEncodedString(dfa_47s);
    static final char[] dfa_48 = DFA.unpackEncodedStringToUnsignedChars(dfa_48s);
    static final char[] dfa_49 = DFA.unpackEncodedStringToUnsignedChars(dfa_49s);
    static final short[] dfa_50 = DFA.unpackEncodedString(dfa_50s);
    static final short[] dfa_51 = DFA.unpackEncodedString(dfa_51s);
    static final short[][] dfa_52 = unpackEncodedStringArray(dfa_52s);

    class DFA148 extends DFA {

        public DFA148(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 148;
            this.eot = dfa_47;
            this.eof = dfa_47;
            this.min = dfa_48;
            this.max = dfa_49;
            this.accept = dfa_50;
            this.special = dfa_51;
            this.transition = dfa_52;
        }
        public String getDescription() {
            return "8125:3: ( ( (lv_wop_1_0= ruleOperandGroup ) ) | ( (lv_expr_2_0= ruleFullExpression ) ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA148_1 = input.LA(1);

                         
                        int index148_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred198_InternalSQLParser()) ) {s = 20;}

                        else if ( (synpred199_InternalSQLParser()) ) {s = 14;}

                         
                        input.seek(index148_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA148_2 = input.LA(1);

                         
                        int index148_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred198_InternalSQLParser()) ) {s = 20;}

                        else if ( (synpred199_InternalSQLParser()) ) {s = 14;}

                         
                        input.seek(index148_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA148_3 = input.LA(1);

                         
                        int index148_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred198_InternalSQLParser()) ) {s = 20;}

                        else if ( (synpred199_InternalSQLParser()) ) {s = 14;}

                         
                        input.seek(index148_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA148_4 = input.LA(1);

                         
                        int index148_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred198_InternalSQLParser()) ) {s = 20;}

                        else if ( (synpred199_InternalSQLParser()) ) {s = 14;}

                         
                        input.seek(index148_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA148_5 = input.LA(1);

                         
                        int index148_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred198_InternalSQLParser()) ) {s = 20;}

                        else if ( (synpred199_InternalSQLParser()) ) {s = 14;}

                         
                        input.seek(index148_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA148_6 = input.LA(1);

                         
                        int index148_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred198_InternalSQLParser()) ) {s = 20;}

                        else if ( (synpred199_InternalSQLParser()) ) {s = 14;}

                         
                        input.seek(index148_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA148_7 = input.LA(1);

                         
                        int index148_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred198_InternalSQLParser()) ) {s = 20;}

                        else if ( (synpred199_InternalSQLParser()) ) {s = 14;}

                         
                        input.seek(index148_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA148_8 = input.LA(1);

                         
                        int index148_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred198_InternalSQLParser()) ) {s = 20;}

                        else if ( (synpred199_InternalSQLParser()) ) {s = 14;}

                         
                        input.seek(index148_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA148_9 = input.LA(1);

                         
                        int index148_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred198_InternalSQLParser()) ) {s = 20;}

                        else if ( (synpred199_InternalSQLParser()) ) {s = 14;}

                         
                        input.seek(index148_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA148_10 = input.LA(1);

                         
                        int index148_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred198_InternalSQLParser()) ) {s = 20;}

                        else if ( (synpred199_InternalSQLParser()) ) {s = 14;}

                         
                        input.seek(index148_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA148_11 = input.LA(1);

                         
                        int index148_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred198_InternalSQLParser()) ) {s = 20;}

                        else if ( (synpred199_InternalSQLParser()) ) {s = 14;}

                         
                        input.seek(index148_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA148_12 = input.LA(1);

                         
                        int index148_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred198_InternalSQLParser()) ) {s = 20;}

                        else if ( (synpred199_InternalSQLParser()) ) {s = 14;}

                         
                        input.seek(index148_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA148_13 = input.LA(1);

                         
                        int index148_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred198_InternalSQLParser()) ) {s = 20;}

                        else if ( (synpred199_InternalSQLParser()) ) {s = 14;}

                         
                        input.seek(index148_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 148, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_53s = "\24\uffff";
    static final String dfa_54s = "\1\43\15\0\6\uffff";
    static final String dfa_55s = "\1\u00a3\15\0\6\uffff";
    static final String dfa_56s = "\16\uffff\1\2\4\uffff\1\1";
    static final String dfa_57s = "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\6\uffff}>";
    static final String[] dfa_58s = {
            "\1\14\13\uffff\1\16\14\uffff\1\13\26\uffff\1\15\15\uffff\1\16\24\uffff\1\16\6\uffff\1\16\6\uffff\1\16\5\uffff\1\12\13\uffff\1\4\1\5\1\uffff\1\6\1\7\1\10\4\uffff\1\11\1\3\1\2\1\1",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_53 = DFA.unpackEncodedString(dfa_53s);
    static final char[] dfa_54 = DFA.unpackEncodedStringToUnsignedChars(dfa_54s);
    static final char[] dfa_55 = DFA.unpackEncodedStringToUnsignedChars(dfa_55s);
    static final short[] dfa_56 = DFA.unpackEncodedString(dfa_56s);
    static final short[] dfa_57 = DFA.unpackEncodedString(dfa_57s);
    static final short[][] dfa_58 = unpackEncodedStringArray(dfa_58s);

    class DFA151 extends DFA {

        public DFA151(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 151;
            this.eot = dfa_53;
            this.eof = dfa_53;
            this.min = dfa_54;
            this.max = dfa_55;
            this.accept = dfa_56;
            this.special = dfa_57;
            this.transition = dfa_58;
        }
        public String getDescription() {
            return "8273:3: ( ( (lv_wop_1_0= ruleOperandGroup ) ) | ( (lv_expr_2_0= ruleFullExpression ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA151_1 = input.LA(1);

                         
                        int index151_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred202_InternalSQLParser()) ) {s = 19;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index151_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA151_2 = input.LA(1);

                         
                        int index151_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred202_InternalSQLParser()) ) {s = 19;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index151_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA151_3 = input.LA(1);

                         
                        int index151_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred202_InternalSQLParser()) ) {s = 19;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index151_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA151_4 = input.LA(1);

                         
                        int index151_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred202_InternalSQLParser()) ) {s = 19;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index151_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA151_5 = input.LA(1);

                         
                        int index151_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred202_InternalSQLParser()) ) {s = 19;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index151_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA151_6 = input.LA(1);

                         
                        int index151_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred202_InternalSQLParser()) ) {s = 19;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index151_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA151_7 = input.LA(1);

                         
                        int index151_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred202_InternalSQLParser()) ) {s = 19;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index151_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA151_8 = input.LA(1);

                         
                        int index151_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred202_InternalSQLParser()) ) {s = 19;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index151_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA151_9 = input.LA(1);

                         
                        int index151_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred202_InternalSQLParser()) ) {s = 19;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index151_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA151_10 = input.LA(1);

                         
                        int index151_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred202_InternalSQLParser()) ) {s = 19;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index151_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA151_11 = input.LA(1);

                         
                        int index151_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred202_InternalSQLParser()) ) {s = 19;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index151_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA151_12 = input.LA(1);

                         
                        int index151_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred202_InternalSQLParser()) ) {s = 19;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index151_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA151_13 = input.LA(1);

                         
                        int index151_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred202_InternalSQLParser()) ) {s = 19;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index151_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 151, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_1 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_2 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_3 = new BitSet(new long[]{0x0042100000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_4 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_5 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000E00000400L});
    public static final BitSet FOLLOW_6 = new BitSet(new long[]{0x1000000800000000L,0x0000000000080000L,0x0000000F0FC00400L});
    public static final BitSet FOLLOW_7 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_8 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000E00000408L});
    public static final BitSet FOLLOW_9 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_10 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_11 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_12 = new BitSet(new long[]{0x0000010000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_13 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_14 = new BitSet(new long[]{0x0000000000000002L,0x0000000000010000L});
    public static final BitSet FOLLOW_15 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_16 = new BitSet(new long[]{0x0088202100000000L,0x0001000110000001L});
    public static final BitSet FOLLOW_17 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_18 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L,0x0000000800000800L});
    public static final BitSet FOLLOW_19 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800002800L});
    public static final BitSet FOLLOW_20 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000800L});
    public static final BitSet FOLLOW_21 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_22 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_23 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_24 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_25 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100004L});
    public static final BitSet FOLLOW_26 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000E00000000L});
    public static final BitSet FOLLOW_27 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000402L});
    public static final BitSet FOLLOW_28 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_29 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_30 = new BitSet(new long[]{0x0000000000000000L,0x0080002000000000L});
    public static final BitSet FOLLOW_31 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_32 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_33 = new BitSet(new long[]{0x0000400000040002L,0x0000000000008020L});
    public static final BitSet FOLLOW_34 = new BitSet(new long[]{0x0040000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_35 = new BitSet(new long[]{0x1000000808000000L,0x0100000000080000L,0x0000000F0FC00400L});
    public static final BitSet FOLLOW_36 = new BitSet(new long[]{0x1000000800000000L,0x0100000000080000L,0x0000000F0FC00400L});
    public static final BitSet FOLLOW_37 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000C000000L});
    public static final BitSet FOLLOW_38 = new BitSet(new long[]{0x1000008800000000L,0x0000080000080000L,0x0000000F0FC00400L});
    public static final BitSet FOLLOW_39 = new BitSet(new long[]{0x1000000800000000L,0x0000080000080000L,0x0000000F0FC00400L});
    public static final BitSet FOLLOW_40 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_41 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_42 = new BitSet(new long[]{0x4011000000000002L,0x0000000000020112L});
    public static final BitSet FOLLOW_43 = new BitSet(new long[]{0x1000800800000000L,0x2040000200080000L,0x0000000F0EC00410L});
    public static final BitSet FOLLOW_44 = new BitSet(new long[]{0x4011000000000002L,0x0000000000000112L});
    public static final BitSet FOLLOW_45 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_46 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000E02000000L});
    public static final BitSet FOLLOW_47 = new BitSet(new long[]{0x4011000000000002L,0x0000000000000110L});
    public static final BitSet FOLLOW_48 = new BitSet(new long[]{0x4010000000000002L,0x0000000000000110L});
    public static final BitSet FOLLOW_49 = new BitSet(new long[]{0x4010000000000002L,0x0000000000000010L});
    public static final BitSet FOLLOW_50 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_51 = new BitSet(new long[]{0x4010000000000002L});
    public static final BitSet FOLLOW_52 = new BitSet(new long[]{0x4000000000000002L});
    public static final BitSet FOLLOW_53 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_54 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000E00000002L});
    public static final BitSet FOLLOW_55 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000E00000000L});
    public static final BitSet FOLLOW_56 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_57 = new BitSet(new long[]{0x2000004000000202L,0x0000000049001008L});
    public static final BitSet FOLLOW_58 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L,0x0000000000000040L});
    public static final BitSet FOLLOW_59 = new BitSet(new long[]{0x0000080000000002L,0x0000000000000400L,0x0000000E00000002L});
    public static final BitSet FOLLOW_60 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_61 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_62 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_63 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L,0x000000010EC00000L});
    public static final BitSet FOLLOW_64 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_65 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_66 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_67 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L,0x0000000E00000400L});
    public static final BitSet FOLLOW_68 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_69 = new BitSet(new long[]{0x0000001400000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_70 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_72 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_73 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_74 = new BitSet(new long[]{0x0000000000000002L,0x0002000000200000L});
    public static final BitSet FOLLOW_75 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L,0x0000000000800080L});
    public static final BitSet FOLLOW_76 = new BitSet(new long[]{0x0E00000063C10000L,0x0800000000040000L});
    public static final BitSet FOLLOW_77 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_78 = new BitSet(new long[]{0x1000000800000000L,0x0000000000080000L,0x0000000F0EC00400L});
    public static final BitSet FOLLOW_79 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000202000L});
    public static final BitSet FOLLOW_80 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_81 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_82 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000300000L});
    public static final BitSet FOLLOW_83 = new BitSet(new long[]{0x1000800880000000L,0xF040000280080000L,0x0000000F0ECE0531L});
    public static final BitSet FOLLOW_84 = new BitSet(new long[]{0x0000000000000000L,0x0040000400000000L});
    public static final BitSet FOLLOW_85 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_86 = new BitSet(new long[]{0x1000000800000000L,0x0001404000080000L,0x0000000F0EC00400L});
    public static final BitSet FOLLOW_87 = new BitSet(new long[]{0x1000000000000000L,0x0000000000000000L,0x000000090EC00000L});
    public static final BitSet FOLLOW_88 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_89 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_90 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_91 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000017EC00000L});
    public static final BitSet FOLLOW_92 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001015200L});
    public static final BitSet FOLLOW_93 = new BitSet(new long[]{0x1000000808000000L,0x0000400000080000L,0x0000000F0FC00C00L});
    public static final BitSet FOLLOW_94 = new BitSet(new long[]{0x0000000000000002L,0x0000001000000000L});
    public static final BitSet FOLLOW_95 = new BitSet(new long[]{0x002402000400FDF0L,0x0004120002000040L});
    public static final BitSet FOLLOW_96 = new BitSet(new long[]{0x0000000000080000L,0x0000000000000100L,0x0000000000000800L});
    public static final BitSet FOLLOW_97 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000100L});
    public static final BitSet FOLLOW_98 = new BitSet(new long[]{0x0000000000000002L,0x0000002000000800L});
    public static final BitSet FOLLOW_99 = new BitSet(new long[]{0x1000000A80200000L,0x0000000000080000L,0x0000000F0EC00400L});
    public static final BitSet FOLLOW_100 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_101 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_102 = new BitSet(new long[]{0x0000000000120000L});
    public static final BitSet FOLLOW_103 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_104 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_105 = new BitSet(new long[]{0x0000000000000002L,0x0002000000200080L});
    public static final BitSet FOLLOW_106 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000080L});
    public static final BitSet FOLLOW_107 = new BitSet(new long[]{0x8000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_108 = new BitSet(new long[]{0x1000000808000000L,0x0000400000080000L,0x0000000F0EC00400L});
    public static final BitSet FOLLOW_109 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000C00L});
    public static final BitSet FOLLOW_110 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002800L});
    public static final BitSet FOLLOW_111 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_112 = new BitSet(new long[]{0x1000800800000000L,0x2040040200080000L,0x0000000F0EC00410L});
    public static final BitSet FOLLOW_113 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_114 = new BitSet(new long[]{0x1000800800000002L,0x2040040200080000L,0x0000000F0EC00410L});
    public static final BitSet FOLLOW_115 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_116 = new BitSet(new long[]{0x0000000000000002L,0x0000000000400000L});
    public static final BitSet FOLLOW_117 = new BitSet(new long[]{0x2000000000000200L,0x0000000049001008L});
    public static final BitSet FOLLOW_118 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_119 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000200L});

}